import { TLObject } from '../TL.js';
import { Raw } from '../../platform.node.js';
import { User } from '../Advanced/User.js';
import { Location } from './Medias/Venue.js';
import type { Snake } from '../../Client/index.js';
export interface TypeInlineQuery {
    id: string;
    query: string;
    offset: string;
    from?: User;
    chatType?: string;
    location?: Location;
}
export interface TypeChosenInlineResult {
    resultId: string;
    query: string;
    from?: User;
    location?: Location;
    inlineMessageId?: string;
}
export declare class InlineQuery extends TLObject {
    id: string;
    query: string;
    offset: string;
    from?: User;
    chatType?: string;
    location?: Location;
    constructor({ id, from, query, offset, chatType, location }: TypeInlineQuery, client: Snake);
    static parse(client: Snake, update: Raw.UpdateBotInlineQuery, users: Array<Raw.TypeUser>): InlineQuery;
}
export declare class ChosenInlineResult extends TLObject {
    resultId: string;
    query: string;
    from?: User;
    location?: Location;
    inlineMessageId?: string;
    constructor({ resultId, query, from, location, inlineMessageId }: TypeChosenInlineResult, client: Snake);
    static parse(client: Snake, update: Raw.UpdateBotInlineSend, users: Array<Raw.TypeUser>): ChosenInlineResult;
}
