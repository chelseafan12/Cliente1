/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
import { Raw, type Readable, type Files, Buffer, type Entities } from './platform.node.js';
import { Message } from './TL/Messages/Message.js';
import type { Snake } from './Client/Snake.js';
export type TypeChat = Raw.Chat | Raw.Channel;
export type TypeUser = Raw.User;
export declare function parseDialog(chats: Array<Raw.TypeChat>, users: Array<Raw.TypeUser>): [chats: Array<TypeChat>, users: Array<TypeUser>];
export declare function open(url: string): import("child_process").ChildProcess;
export declare function parseMessages(client: Snake, messages: Raw.messages.Messages, replies?: number): Promise<Array<Message>>;
export declare function getId(peer: Raw.TypePeer): bigint | undefined;
export declare function getPeerId(peer: Raw.TypePeer): bigint | undefined;
export declare function createInlineMsgId(msgId: Raw.InputBotInlineMessageID | Raw.InputBotInlineMessageID64): string;
export declare function findMimeType(file: string): any;
export declare function uploadThumbnail(client: Snake, thumb: string | Buffer | Readable | Files.File): Promise<Raw.InputFile | Raw.InputFileBig | undefined>;
export declare function parseArgObjAsStr(arg: {
    [key: string]: any;
}): string;
export interface ReplyParameters {
    messageId: number;
    chatId?: bigint | string;
    quote?: string;
    quoteParseMode?: 'markdown' | 'html';
    quoteEntities?: Array<Entities>;
    quotePosition?: number;
}
export declare function buildReply(client: Snake, replyParameters: ReplyParameters, messageThreadId?: number): Promise<Raw.InputReplyToMessage>;
export declare function getChannelId(update: Raw.TypeUpdate): bigint;
