"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AES = exports.xor = exports.ctr256Cipher = exports.ige256Decrypt = exports.ige256Encrypt = void 0;
const platform_node_js_1 = require("../platform.node.js");
const Logger_js_1 = require("../Logger.js");
const helpers_js_1 = require("../helpers.js");
function ige256Encrypt(data, key, iv) {
    Logger_js_1.Logger.debug(`[4] Encrypting ${data.length} bytes data with AES-256-IGE`);
    const pad = (0, helpers_js_1.mod)(data.length, 16);
    if (pad) {
        data = platform_node_js_1.Buffer.concat([data, platform_node_js_1.crypto.randomBytes(16 - pad)]);
    }
    return ige(data, key, iv, true);
}
exports.ige256Encrypt = ige256Encrypt;
function ige256Decrypt(data, key, iv) {
    Logger_js_1.Logger.debug(`[5] Decrypting ${data.length} bytes data with AES-256-IGE`);
    return ige(data, key, iv, false);
}
exports.ige256Decrypt = ige256Decrypt;
function ctr256Cipher(key, iv) {
    if (platform_node_js_1.where === 'Browser') {
        const cipher = new platform_node_js_1.aesjs.ModeOfOperation.ctr(key, new platform_node_js_1.aesjs.Counter(Uint8Array.from(iv)));
        return (data) => {
            Logger_js_1.Logger.debug(`[140] Cryptograph ${data.length} bytes data with AES-256-CTR`);
            return platform_node_js_1.Buffer.from(cipher.encrypt(data));
        };
    }
    try {
        const cipher = platform_node_js_1.crypto.createCipheriv('AES-256-CTR', key, iv);
        return (data) => {
            Logger_js_1.Logger.debug(`[140] Cryptograph ${data.length} bytes data with AES-256-CTR`);
            return platform_node_js_1.Buffer.from(cipher.update(data));
        };
    }
    catch (error) {
        const cipher = ctr(key, iv);
        return (data) => {
            Logger_js_1.Logger.debug(`[140] Cryptograph ${data.length} bytes data with AES-256-CTR`);
            return platform_node_js_1.Buffer.from(cipher.update(data));
        };
    }
}
exports.ctr256Cipher = ctr256Cipher;
function xor(a, b) {
    return (0, helpers_js_1.bigintToBuffer)(BigInt((0, helpers_js_1.bufferToBigint)(a, false) ^ (0, helpers_js_1.bufferToBigint)(b, false)), a.length, false);
}
exports.xor = xor;
function AES(key) {
    const iv = platform_node_js_1.Buffer.alloc(0);
    if (platform_node_js_1.where === 'Browser' || platform_node_js_1.where === 'Deno') {
        const cipher = new platform_node_js_1.aesjs.ModeOfOperation.ecb(key);
        return {
            encrypt(data) {
                return platform_node_js_1.Buffer.from(cipher.encrypt(data));
            },
            decrypt(data) {
                return platform_node_js_1.Buffer.from(cipher.decrypt(data));
            },
        };
    }
    else {
        const cipher = platform_node_js_1.crypto.createCipheriv('aes-256-ecb', key, iv);
        const decipher = platform_node_js_1.crypto.createDecipheriv('aes-256-ecb', key, iv);
        cipher.setAutoPadding(false);
        decipher.setAutoPadding(false);
        return {
            encrypt(data) {
                return platform_node_js_1.Buffer.from(cipher.update(data));
            },
            decrypt(data) {
                return platform_node_js_1.Buffer.from(decipher.update(data));
            },
        };
    }
}
exports.AES = AES;
function ige(data, key, iv, encrypt) {
    const cipher = AES(key);
    let iv1 = iv.slice(0, 16);
    let iv2 = iv.slice(16, 32);
    let temp = [];
    for (let i of (0, helpers_js_1.range)(0, data.length, 16)) {
        temp.push(data.slice(i, i + 16));
    }
    if (encrypt) {
        for (let i = 0; i < temp.length; i++) {
            const chunk = temp[i];
            iv1 = temp[i] = xor(cipher.encrypt(xor(chunk, iv1)), iv2);
            iv2 = chunk;
        }
    }
    else {
        for (let i = 0; i < temp.length; i++) {
            const chunk = temp[i];
            iv2 = temp[i] = xor(cipher.decrypt(xor(chunk, iv2)), iv1);
            iv1 = chunk;
        }
    }
    return platform_node_js_1.Buffer.concat(temp);
}
function ctr(key, iv, state = platform_node_js_1.Buffer.alloc(1)) {
    const cipher = AES(platform_node_js_1.Buffer.from(key));
    const _iv = platform_node_js_1.Buffer.from(iv);
    let chunk = platform_node_js_1.Buffer.from(cipher.encrypt(iv));
    return {
        update: (data) => {
            let out = platform_node_js_1.Buffer.from(data);
            for (let i of (0, helpers_js_1.range)(0, data.length, 16)) {
                for (let j of (0, helpers_js_1.range)(0, Math.min(data.length - i, 16))) {
                    out[i + j] ^= chunk[state[0]];
                    state[0] += 1;
                    if (state[0] >= 16) {
                        state[0] = 0;
                    }
                    if (state[0] === 0) {
                        for (let k of (0, helpers_js_1.range)(15, -1, -1)) {
                            if (_iv[k] === 255) {
                                _iv[k] = 0;
                            }
                            else {
                                _iv[k] += 1;
                                break;
                            }
                        }
                        chunk = cipher.encrypt(_iv);
                    }
                }
            }
            return out;
        },
    };
}
