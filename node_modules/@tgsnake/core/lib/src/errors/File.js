"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileUploadBigger = exports.FileUploadZero = exports.FileError = void 0;
const platform_node_js_1 = require("../platform.node.js");
class FileError extends Error {
    message;
    description;
    constructor(message, description) {
        super();
        this.message = message;
        this.description = description;
    }
    [Symbol.for('nodejs.util.inspect.custom')]() {
        const toPrint = {
            _: this.constructor.name,
        };
        for (const key in this) {
            if (this.hasOwnProperty(key)) {
                const value = this[key];
                if (!key.startsWith('_') && value !== undefined && value !== null) {
                    toPrint[key] = value;
                }
            }
        }
        Object.setPrototypeOf(toPrint, {
            stack: this.stack,
        });
        return toPrint;
    }
    [Symbol.for('Deno.customInspect')]() {
        return String((0, platform_node_js_1.inspect)(this[Symbol.for('nodejs.util.inspect.custom')](), { colors: true }));
    }
    toJSON() {
        const toPrint = {
            _: this.constructor.name,
            stack: this.stack,
        };
        for (const key in this) {
            if (this.hasOwnProperty(key)) {
                const value = this[key];
                if (!key.startsWith('_') && value !== undefined && value !== null) {
                    toPrint[key] = typeof value === 'bigint' ? String(value) : value;
                }
            }
        }
        return toPrint;
    }
    toString() {
        return `[constructor of ${this.constructor.name}] ${JSON.stringify(this, null, 2)}`;
    }
}
exports.FileError = FileError;
class FileUploadZero extends FileError {
    constructor() {
        super("Can't upload file when it zero bytes.", 'Provided file has zero bytes (0 B) file size.');
    }
}
exports.FileUploadZero = FileUploadZero;
class FileUploadBigger extends FileError {
    constructor(limit, size) {
        super(`File greater than ${limit} B.`, `The provided file has ${size} B file size, it greater than ${limit} B`);
    }
}
exports.FileUploadBigger = FileUploadBigger;
