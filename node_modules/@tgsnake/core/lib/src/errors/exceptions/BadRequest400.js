"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BroadcastIdInvalid = exports.BotWebviewDisabled = exports.BotScoreNotModified = exports.BotResponseTimeout = exports.BotPollsDisabled = exports.BotPaymentsDisabled = exports.BotOnesideNotAvail = exports.BotMissing = exports.BotMethodInvalid = exports.BotInvalid = exports.BotInlineDisabled = exports.BotGroupsBlocked = exports.BotGamesDisabled = exports.BotDomainInvalid = exports.BotCommandInvalid = exports.BotCommandDescriptionInvalid = exports.BotChannelsNa = exports.BotAppShortnameInvalid = exports.BotAppInvalid = exports.BotsTooMuch = exports.BoostPeerInvalid = exports.BoostNotModified = exports.BoostsRequired = exports.BoostsEmpty = exports.BasePortLocInvalid = exports.BannedRightsInvalid = exports.BankCardNumberInvalid = exports.AutoarchiveNotAvailable = exports.AuthTokenInvalidx = exports.AuthTokenInvalid = exports.AuthTokenExpired = exports.AuthTokenException = exports.AuthTokenAlreadyAccepted = exports.AuthBytesInvalid = exports.AudioTitleEmpty = exports.AudioContentUrlEmpty = exports.ArticleTitleEmpty = exports.ApiIdPublishedFlood = exports.ApiIdInvalid = exports.AlbumPhotosTooMany = exports.AdminRightsEmpty = exports.AdminRankInvalid = exports.AdminRankEmojiNotAllowed = exports.AdminIdInvalid = exports.AdminsTooMuch = exports.AddressInvalid = exports.AccessTokenInvalid = exports.AccessTokenExpired = exports.AboutTooLong = exports.BadRequest = void 0;
exports.ConnectionAppVersionEmpty = exports.ConnectionApiIdInvalid = exports.ColorInvalid = exports.CodeInvalid = exports.CodeHashInvalid = exports.CodeEmpty = exports.ChatTooBig = exports.ChatTitleEmpty = exports.ChatSendInlineForbidden = exports.ChatRevokeDateUnsupported = exports.ChatRestricted = exports.ChatPublicRequired = exports.ChatNotModified = exports.ChatLinkExists = exports.ChatInvitePermanent = exports.ChatInvalid = exports.ChatIdInvalid = exports.ChatIdEmpty = exports.ChatForwardsRestricted = exports.ChatDiscussionUnallowed = exports.ChatAdminRequired = exports.ChatAboutTooLong = exports.ChatAboutNotModified = exports.ChatlistExcludeInvalid = exports.ChannelTooLarge = exports.ChannelTooBig = exports.ChannelPrivate = exports.ChannelParicipantMissing = exports.ChannelInvalid = exports.ChannelIdInvalid = exports.ChannelForumMissing = exports.ChannelBanned = exports.ChannelAddInvalid = exports.ChannelsTooMuch = exports.ChannelsAdminPublicTooMuch = exports.ChannelsAdminLocatedTooMuch = exports.CdnMethodInvalid = exports.CallProtocolFlagsInvalid = exports.CallPeerInvalid = exports.CallOccupyFailed = exports.CallAlreadyDeclined = exports.CallAlreadyAccepted = exports.ButtonUserPrivacyRestricted = exports.ButtonUserInvalid = exports.ButtonUrlInvalid = exports.ButtonTypeInvalid = exports.ButtonTextInvalid = exports.ButtonDataInvalid = exports.BroadcastRequired = exports.BroadcastPublicVotersForbidden = void 0;
exports.FileIdInvalid = exports.FileEmtpy = exports.FileContentTypeInvalid = exports.FieldNameInvalid = exports.FieldNameEmpty = exports.ExternalUrlInvalid = exports.ExportCardInvalid = exports.ExpireDateInvalid = exports.ErrorTextEmpty = exports.EntityMentionUserInvalid = exports.EntityBoundsInvalid = exports.EntitiesTooLong = exports.EncryptionIdInvalid = exports.EncryptionDeclined = exports.EncryptionAlreadyDeclined = exports.EncryptionAlreadyAccepted = exports.EncryptedMessageInvalid = exports.EmoticonStickerpackMissing = exports.EmoticonInvalid = exports.EmoticonEmpty = exports.EmojiNotModified = exports.EmojiMarkupInvalid = exports.EmojiInvalid = exports.EmailVerifyExpired = exports.EmailUnconfirmedX = exports.EmailUnconfirmed = exports.EmailNotSetup = exports.EmailInvalid = exports.EmailHashExpired = exports.DocumentInvalid = exports.DhGAInvalid = exports.DcIdInvalid = exports.DateEmpty = exports.DataTooLong = exports.DataJsonInvalid = exports.DataInvalid = exports.CustomReactionsTooMany = exports.CurrencyTotalAmountInvalid = exports.CreateCallFailed = exports.ContactReqMissing = exports.ContactNameEmpty = exports.ContactMissing = exports.ContactIdInvalid = exports.ContactAddMissing = exports.ConnectionSystemLangCodeEmpty = exports.ConnectionSystemEmpty = exports.ConnectionNotInited = exports.ConnectionLayerInvalid = exports.ConnectionLangPackInvalid = exports.ConnectionDeviceModelEmpty = void 0;
exports.ImportIdInvalid = exports.ImportFormatUnrecognized = exports.ImportFileInvalid = exports.ImageProcessFailed = exports.HideRequesterMissing = exports.HashInvalid = exports.GroupCallInvalid = exports.GroupedMediaInvalid = exports.GroupcallSsrcDuplicateMuch = exports.GroupcallNotModified = exports.GroupcallJoinMissing = exports.GroupcallInvalid = exports.GroupcallForbidden = exports.GroupcallAlreadyDiscarded = exports.GraphOutdatedReload = exports.GraphInvalidReload = exports.GraphExpiredReload = exports.GifIdInvalid = exports.GifContentTypeInvalid = exports.GiftSlugInvalid = exports.GiftSlugExpired = exports.GeoPointInvalid = exports.GeneralModifyIconForbidden = exports.GameBotInvalid = exports.FromPeerInvalid = exports.FromMessageBotDisabled = exports.FreshChangeAdminsForbidden = exports.ForumEnabled = exports.FolderIdInvalid = exports.FolderIdEmpty = exports.FirstnameInvalid = exports.FilterTitleEmpty = exports.FilterNotSupported = exports.FilterIncludeEmpty = exports.FilterIdInvalid = exports.FileTokenInvalid = exports.FileTitleEmpty = exports.FileReferenceInvalid = exports.FileReferenceExpired = exports.FileReferenceEmpty = exports.FileReferenceAny = exports.FilePartMissing = exports.FilePartTooBig = exports.FilePartSizeInvalid = exports.FilePartSizeChanged = exports.FilePartLengthInvalid = exports.FilePartInvalid = exports.FilePartEmpty = exports.FilePartsInvalid = exports.FileMigrate = void 0;
exports.MessageEditTimeExpired = exports.MegagroupRequired = exports.MegagroupPrehistoryHidden = exports.MegagroupIdInvalid = exports.MegagroupGeoRequired = exports.MediaVideoStoryMissing = exports.MediaTypeInvalid = exports.MediaTtlInvalid = exports.MediaPrevInvalid = exports.MediaNewInvalid = exports.MediaInvalid = exports.MediaGroupedInvalid = exports.MediaFileInvalid = exports.MediaEmpty = exports.MediaCaptionTooLong = exports.Md5ChecksumInvalid = exports.MaxQtsInvalid = exports.MaxIdInvalid = exports.MaxDateInvalid = exports.LocationInvalid = exports.LinkNotModified = exports.LimitInvalid = exports.LastnameInvalid = exports.LangPackInvalid = exports.LangCodeNotSupported = exports.LangCodeInvalid = exports.JoinAsPeerInvalid = exports.InvoicePayloadInvalid = exports.InviteSlugExpired = exports.InviteSlugEmpty = exports.InviteRevokedMissing = exports.InviteRequestSent = exports.InviteHashInvalid = exports.InviteHashExpired = exports.InviteHashEmpty = exports.InviteForbiddenWithJoinas = exports.InvitesTooMuch = exports.InputUserDeactivated = exports.InputTextTooLong = exports.InputTextEmpty = exports.InputRequestTooLong = exports.InputMethodInvalid = exports.InputLayerInvalid = exports.InputFilterInvalid = exports.InputFetchFail = exports.InputFetchError = exports.InputConstructorInvalid = exports.InputChatlistInvalid = exports.InlineResultExpired = exports.ImportTokenInvalid = void 0;
exports.PhoneNumberAppSignupForbidden = exports.PhoneNotOccupied = exports.PhoneHashExpired = exports.PhoneCodeInvalid = exports.PhoneCodeHashEmpty = exports.PhoneCodeExpired = exports.PhoneCodeEmpty = exports.PersistentTimestampInvalid = exports.PersistentTimestampEmpty = exports.PeerIdNotSupported = exports.PeerIdInvalid = exports.PeerHistoryEmpty = exports.PeerFlood = exports.PeersListEmpty = exports.PaymentProviderInvalid = exports.PasswordTooFresh = exports.PasswordRequired = exports.PasswordRecoveryNa = exports.PasswordRecoveryExpired = exports.PasswordMissing = exports.PasswordHashInvalid = exports.PasswordEmpty = exports.ParticipantVersionOutdated = exports.ParticipantJoinMissing = exports.ParticipantIdInvalid = exports.ParticipantsTooFew = exports.PackTitleInvalid = exports.PackShortNameOccupied = exports.PackShortNameInvalid = exports.OrderInvalid = exports.OptionInvalid = exports.OptionsTooMuch = exports.OffsetPeerIdInvalid = exports.OffsetInvalid = exports.NextOffsetInvalid = exports.NewSettingsInvalid = exports.NewSettingsEmpty = exports.NewSaltInvalid = exports.MultiMediaTooLong = exports.MsgWaitFailed = exports.MsgTooOld = exports.MsgIdInvalid = exports.MinDateInvalid = exports.MethodInvalid = exports.MessageTooLong = exports.MessagePollClosed = exports.MessageNotModified = exports.MessageIdInvalid = exports.MessageIdsEmpty = exports.MessageEmpty = void 0;
exports.ReplyMarkupGameEmpty = exports.ReplyMarkupBuyEmpty = exports.ReflectorNotAvailable = exports.ReactionInvalid = exports.ReactionEmpty = exports.ReactionsTooMany = exports.RangesInvalid = exports.RandomLengthInvalid = exports.RandomIdInvalid = exports.RandomIdEmpty = exports.QuizMultipleInvalid = exports.QuizCorrectAnswerInvalid = exports.QuizCorrectAnswersTooMuch = exports.QuizCorrectAnswersEmpty = exports.QuizAnswerMissing = exports.QueryTooShort = exports.QueryIdInvalid = exports.QueryIdEmpty = exports.PublicKeyRequired = exports.PrivacyValueInvalid = exports.PrivacyTooLong = exports.PrivacyKeyInvalid = exports.PremiumAccountRequired = exports.PollVoteRequired = exports.PollUnsupported = exports.PollQuestionInvalid = exports.PollOptionInvalid = exports.PollOptionDuplicate = exports.PollAnswerInvalid = exports.PollAnswersInvalid = exports.PinRestricted = exports.PinnedDialogsTooMuch = exports.PhotoThumbUrlInvalid = exports.PhotoThumbUrlEmpty = exports.PhotoSaveFileInvalid = exports.PhotoInvalidDimensions = exports.PhotoInvalid = exports.PhotoIdInvalid = exports.PhotoFileMissing = exports.PhotoExtInvalid = exports.PhotoCropSizeSmall = exports.PhotoCropFileMissing = exports.PhotoContentUrlEmpty = exports.PhotoContentTypeInvalid = exports.PhonePasswordProtected = exports.PhoneNumberUnoccupied = exports.PhoneNumberOccupied = exports.PhoneNumberInvalid = exports.PhoneNumberFlood = exports.PhoneNumberBanned = void 0;
exports.StickerIdInvalid = exports.StickerGifDimensions = exports.StickerFileInvalid = exports.StickerEmojiInvalid = exports.StickerDocumentInvalid = exports.StickersTooMuch = exports.StickersEmpty = exports.StickersetInvalid = exports.StickerpackStickersTooMuch = exports.StartParamTooLong = exports.StartParamInvalid = exports.StartParamEmpty = exports.SrpPasswordChanged = exports.SrpIdInvalid = exports.SmsCodeCreateFailed = exports.SlugInvalid = exports.SlowmodeMultiMsgsDisabled = exports.SlotsEmpty = exports.ShortNameOccupied = exports.ShortNameInvalid = exports.ShortnameOccupyFailed = exports.Sha256HashInvalid = exports.SettingsInvalid = exports.SessionTooFresh = exports.SendMessageTypeInvalid = exports.SendMessageMediaInvalid = exports.SendAsPeerInvalid = exports.SecondsInvalid = exports.SearchWithLinkNotSupported = exports.SearchQueryEmpty = exports.ScoreInvalid = exports.ScheduleTooMuch = exports.ScheduleStatusPrivate = exports.ScheduleDateTooLate = exports.ScheduleDateInvalid = exports.ScheduleBotNotAllowed = exports.RsaDecryptFailed = exports.RightsNotModified = exports.RevoteNotAllowed = exports.ResultTypeInvalid = exports.ResultIdInvalid = exports.ResultIdEmpty = exports.ResultIdDuplicate = exports.ResultsTooMuch = exports.ResetRequestMissing = exports.ReplyToUserInvalid = exports.ReplyToInvalid = exports.ReplyMessageIdInvalid = exports.ReplyMarkupTooLong = exports.ReplyMarkupInvalid = void 0;
exports.TypesEmpty = exports.TtlPeriodInvalid = exports.TtlMediaInvalid = exports.TtlDaysInvalid = exports.TranscriptionFailed = exports.ToLangInvalid = exports.TopicTitleEmpty = exports.TopicNotModified = exports.TopicIdInvalid = exports.TopicHideSeparately = exports.TopicDeleted = exports.TopicCloseSeparately = exports.TopicClosed = exports.TopicsEmpty = exports.TokenTypeInvalid = exports.TokenInvalid = exports.TokenEmpty = exports.TmpPasswordInvalid = exports.TmpPasswordDisabled = exports.TitleInvalid = exports.ThemeTitleInvalid = exports.ThemeMimeInvalid = exports.ThemeInvalid = exports.ThemeFormatInvalid = exports.ThemeFileInvalid = exports.TempAuthKeyEmpty = exports.TempAuthKeyAlreadyBound = exports.TaskAlreadyExists = exports.TakeoutRequired = exports.TakeoutInvalid = exports.SwitchPmTextEmpty = exports.StorySendFloodWeekly = exports.StorySendFloodMonthly = exports.StoryPeriodInvalid = exports.StoryNotModified = exports.StoryIdInvalid = exports.StoryIdEmpty = exports.StoriesTooMuch = exports.StoriesNeverCreated = exports.StickerVideoNowebm = exports.StickerVideoNodoc = exports.StickerVideoBig = exports.StickerThumbTgsNotgs = exports.StickerThumbPngNopng = exports.StickerTgsNotgs = exports.StickerTgsNodoc = exports.StickerPngNopng = exports.StickerPngDimensions = exports.StickerMimeInvalid = exports.StickerInvalid = void 0;
exports.WebpageMediaEmpty = exports.WebpageCurlFailed = exports.WebdocumentUrlInvalid = exports.WebdocumentUrlEmpty = exports.WebdocumentSizeTooBig = exports.WebdocumentMimeInvalid = exports.WebdocumentInvalid = exports.WcConvertUrlInvalid = exports.WallpaperNotFound = exports.WallpaperMimeInvalid = exports.WallpaperInvalid = exports.WallpaperFileInvalid = exports.VolumeLocNotFound = exports.VoiceMessagesForbidden = exports.VideoTitleEmpty = exports.VideoFileInvalid = exports.VideoContentTypeInvalid = exports.VenueIdInvalid = exports.UserVolumeInvalid = exports.UserPublicMissing = exports.UserNotParticipant = exports.UserNotMutualContact = exports.UserKicked = exports.UserIsBot = exports.UserIsBlocked = exports.UserInvalid = exports.UserIdInvalid = exports.UserCreator = exports.UserChannelsTooMuch = exports.UserBotRequired = exports.UserBotInvalid = exports.UserBot = exports.UserBlocked = exports.UserBannedInChannel = exports.UserAlreadyParticipant = exports.UserAlreadyInvited = exports.UserAdminInvalid = exports.UsersTooMuch = exports.UsersTooFew = exports.UserpicUploadRequired = exports.UsernamePurchaseAvailable = exports.UsernameOccupied = exports.UsernameNotOccupied = exports.UsernameNotModified = exports.UsernameInvalid = exports.UsernamesActiveTooMuch = exports.UsageLimitInvalid = exports.UrlInvalid = exports.UntilDateInvalid = exports.TypeConstructorInvalid = void 0;
exports.YouBlockedUser = exports.WebpushTokenInvalid = exports.WebpushKeyInvalid = exports.WebpushAuthInvalid = exports.WebpageUrlInvalid = exports.WebpageNotFound = void 0;
const RpcError_js_1 = require("../RpcError.js");
class BadRequest extends RpcError_js_1.RPCError {
    code = 400;
    name = 'BAD_REQUEST';
}
exports.BadRequest = BadRequest;
class AboutTooLong extends BadRequest {
    id = 'ABOUT_TOO_LONG';
    message = 'About string too long.';
}
exports.AboutTooLong = AboutTooLong;
class AccessTokenExpired extends BadRequest {
    id = 'ACCESS_TOKEN_EXPIRED';
    message = 'Access token expired.';
}
exports.AccessTokenExpired = AccessTokenExpired;
class AccessTokenInvalid extends BadRequest {
    id = 'ACCESS_TOKEN_INVALID';
    message = 'Access token invalid.';
}
exports.AccessTokenInvalid = AccessTokenInvalid;
class AddressInvalid extends BadRequest {
    id = 'ADDRESS_INVALID';
    message = 'The specified geopoint address is invalid.';
}
exports.AddressInvalid = AddressInvalid;
class AdminsTooMuch extends BadRequest {
    id = 'ADMINS_TOO_MUCH';
    message = 'There are too many admins.';
}
exports.AdminsTooMuch = AdminsTooMuch;
class AdminIdInvalid extends BadRequest {
    id = 'ADMIN_ID_INVALID';
    message = 'The specified admin ID is invalid.';
}
exports.AdminIdInvalid = AdminIdInvalid;
class AdminRankEmojiNotAllowed extends BadRequest {
    id = 'ADMIN_RANK_EMOJI_NOT_ALLOWED';
    message = 'An admin rank cannot contain emojis.';
}
exports.AdminRankEmojiNotAllowed = AdminRankEmojiNotAllowed;
class AdminRankInvalid extends BadRequest {
    id = 'ADMIN_RANK_INVALID';
    message = 'The specified admin rank is invalid.';
}
exports.AdminRankInvalid = AdminRankInvalid;
class AdminRightsEmpty extends BadRequest {
    id = 'ADMIN_RIGHTS_EMPTY';
    message = 'The chatAdminRights constructor passed in keyboardButtonRequestPeer.peer_type.user_admin_rights has no rights set (i.e. flags is 0).';
}
exports.AdminRightsEmpty = AdminRightsEmpty;
class AlbumPhotosTooMany extends BadRequest {
    id = 'ALBUM_PHOTOS_TOO_MANY';
    message = 'You have uploaded too many profile photos, delete some before retrying.';
}
exports.AlbumPhotosTooMany = AlbumPhotosTooMany;
class ApiIdInvalid extends BadRequest {
    id = 'API_ID_INVALID';
    message = 'API ID invalid.';
}
exports.ApiIdInvalid = ApiIdInvalid;
class ApiIdPublishedFlood extends BadRequest {
    id = 'API_ID_PUBLISHED_FLOOD';
    message = "This API id was published somewhere, you can't use it now.";
}
exports.ApiIdPublishedFlood = ApiIdPublishedFlood;
class ArticleTitleEmpty extends BadRequest {
    id = 'ARTICLE_TITLE_EMPTY';
    message = 'The title of the article is empty.';
}
exports.ArticleTitleEmpty = ArticleTitleEmpty;
class AudioContentUrlEmpty extends BadRequest {
    id = 'AUDIO_CONTENT_URL_EMPTY';
    message = 'The remote URL specified in the content field is empty.';
}
exports.AudioContentUrlEmpty = AudioContentUrlEmpty;
class AudioTitleEmpty extends BadRequest {
    id = 'AUDIO_TITLE_EMPTY';
    message = 'An empty audio title was provided.';
}
exports.AudioTitleEmpty = AudioTitleEmpty;
class AuthBytesInvalid extends BadRequest {
    id = 'AUTH_BYTES_INVALID';
    message = 'The provided authorization is invalid.';
}
exports.AuthBytesInvalid = AuthBytesInvalid;
class AuthTokenAlreadyAccepted extends BadRequest {
    id = 'AUTH_TOKEN_ALREADY_ACCEPTED';
    message = 'The specified auth token was already accepted.';
}
exports.AuthTokenAlreadyAccepted = AuthTokenAlreadyAccepted;
class AuthTokenException extends BadRequest {
    id = 'AUTH_TOKEN_EXCEPTION';
    message = 'An error occurred while importing the auth token.';
}
exports.AuthTokenException = AuthTokenException;
class AuthTokenExpired extends BadRequest {
    id = 'AUTH_TOKEN_EXPIRED';
    message = 'The authorization token has expired.';
}
exports.AuthTokenExpired = AuthTokenExpired;
class AuthTokenInvalid extends BadRequest {
    id = 'AUTH_TOKEN_INVALID';
    message = 'The specified auth token is invalid.';
}
exports.AuthTokenInvalid = AuthTokenInvalid;
class AuthTokenInvalidx extends BadRequest {
    id = 'AUTH_TOKEN_INVALIDX';
    message = 'The specified auth token is invalid.';
}
exports.AuthTokenInvalidx = AuthTokenInvalidx;
class AutoarchiveNotAvailable extends BadRequest {
    id = 'AUTOARCHIVE_NOT_AVAILABLE';
    message = 'The autoarchive setting is not available at this time: please check the value of the [autoarchive_setting_available field in client config &raquo;](https://core.telegram.org/api/config#client-configuration) before calling this method.';
}
exports.AutoarchiveNotAvailable = AutoarchiveNotAvailable;
class BankCardNumberInvalid extends BadRequest {
    id = 'BANK_CARD_NUMBER_INVALID';
    message = 'The specified card number is invalid.';
}
exports.BankCardNumberInvalid = BankCardNumberInvalid;
class BannedRightsInvalid extends BadRequest {
    id = 'BANNED_RIGHTS_INVALID';
    message = 'You provided some invalid flags in the banned rights.';
}
exports.BannedRightsInvalid = BannedRightsInvalid;
class BasePortLocInvalid extends BadRequest {
    id = 'BASE_PORT_LOC_INVALID';
    message = 'The base port location is invalid';
}
exports.BasePortLocInvalid = BasePortLocInvalid;
class BoostsEmpty extends BadRequest {
    id = 'BOOSTS_EMPTY';
    message = 'No boost slots were specified.';
}
exports.BoostsEmpty = BoostsEmpty;
class BoostsRequired extends BadRequest {
    id = 'BOOSTS_REQUIRED';
    message = 'The specified channel must first be [boosted by its users](https://core.telegram.org/api/boost) in order to perform this action.';
}
exports.BoostsRequired = BoostsRequired;
class BoostNotModified extends BadRequest {
    id = 'BOOST_NOT_MODIFIED';
    message = "You're already [boosting](https://core.telegram.org/api/boost) the specified channel.";
}
exports.BoostNotModified = BoostNotModified;
class BoostPeerInvalid extends BadRequest {
    id = 'BOOST_PEER_INVALID';
    message = 'The specified `boost_peer` is invalid.';
}
exports.BoostPeerInvalid = BoostPeerInvalid;
class BotsTooMuch extends BadRequest {
    id = 'BOTS_TOO_MUCH';
    message = 'There are too many bots in this chat/channel.';
}
exports.BotsTooMuch = BotsTooMuch;
class BotAppInvalid extends BadRequest {
    id = 'BOT_APP_INVALID';
    message = 'The specified bot app is invalid.';
}
exports.BotAppInvalid = BotAppInvalid;
class BotAppShortnameInvalid extends BadRequest {
    id = 'BOT_APP_SHORTNAME_INVALID';
    message = 'The specified bot app short name is invalid.';
}
exports.BotAppShortnameInvalid = BotAppShortnameInvalid;
class BotChannelsNa extends BadRequest {
    id = 'BOT_CHANNELS_NA';
    message = "Bots can't edit admin privileges.";
}
exports.BotChannelsNa = BotChannelsNa;
class BotCommandDescriptionInvalid extends BadRequest {
    id = 'BOT_COMMAND_DESCRIPTION_INVALID';
    message = 'The specified command description is invalid.';
}
exports.BotCommandDescriptionInvalid = BotCommandDescriptionInvalid;
class BotCommandInvalid extends BadRequest {
    id = 'BOT_COMMAND_INVALID';
    message = 'The specified command is invalid.';
}
exports.BotCommandInvalid = BotCommandInvalid;
class BotDomainInvalid extends BadRequest {
    id = 'BOT_DOMAIN_INVALID';
    message = 'Bot domain invalid.';
}
exports.BotDomainInvalid = BotDomainInvalid;
class BotGamesDisabled extends BadRequest {
    id = 'BOT_GAMES_DISABLED';
    message = 'Bot games cannot be used in this type of chat';
}
exports.BotGamesDisabled = BotGamesDisabled;
class BotGroupsBlocked extends BadRequest {
    id = 'BOT_GROUPS_BLOCKED';
    message = "This bot can't be added to groups.";
}
exports.BotGroupsBlocked = BotGroupsBlocked;
class BotInlineDisabled extends BadRequest {
    id = 'BOT_INLINE_DISABLED';
    message = "This bot can't be used in inline mode.";
}
exports.BotInlineDisabled = BotInlineDisabled;
class BotInvalid extends BadRequest {
    id = 'BOT_INVALID';
    message = 'This is not a valid bot.';
}
exports.BotInvalid = BotInvalid;
class BotMethodInvalid extends BadRequest {
    id = 'BOT_METHOD_INVALID';
    message = "The method can't be used by bots";
}
exports.BotMethodInvalid = BotMethodInvalid;
class BotMissing extends BadRequest {
    id = 'BOT_MISSING';
    message = "Only bots can call this method, please use [@stickers](https://t.me/stickers) if you're a user.";
}
exports.BotMissing = BotMissing;
class BotOnesideNotAvail extends BadRequest {
    id = 'BOT_ONESIDE_NOT_AVAIL';
    message = "Bots can't pin messages in PM just for themselves.";
}
exports.BotOnesideNotAvail = BotOnesideNotAvail;
class BotPaymentsDisabled extends BadRequest {
    id = 'BOT_PAYMENTS_DISABLED';
    message = 'Please enable bot payments in botfather before calling this method.';
}
exports.BotPaymentsDisabled = BotPaymentsDisabled;
class BotPollsDisabled extends BadRequest {
    id = 'BOT_POLLS_DISABLED';
    message = 'Sending polls by bots has been disabled';
}
exports.BotPollsDisabled = BotPollsDisabled;
class BotResponseTimeout extends BadRequest {
    id = 'BOT_RESPONSE_TIMEOUT';
    message = 'A timeout occurred while fetching data from the bot.';
}
exports.BotResponseTimeout = BotResponseTimeout;
class BotScoreNotModified extends BadRequest {
    id = 'BOT_SCORE_NOT_MODIFIED';
    message = "The score wasn't modified.";
}
exports.BotScoreNotModified = BotScoreNotModified;
class BotWebviewDisabled extends BadRequest {
    id = 'BOT_WEBVIEW_DISABLED';
    message = 'A webview cannot be opened in the specified conditions: emitted for example if `from_bot_menu` or `url` are set and `peer` is not the chat with the bot.';
}
exports.BotWebviewDisabled = BotWebviewDisabled;
class BroadcastIdInvalid extends BadRequest {
    id = 'BROADCAST_ID_INVALID';
    message = 'Broadcast ID invalid.';
}
exports.BroadcastIdInvalid = BroadcastIdInvalid;
class BroadcastPublicVotersForbidden extends BadRequest {
    id = 'BROADCAST_PUBLIC_VOTERS_FORBIDDEN';
    message = "You can't forward polls with public voters.";
}
exports.BroadcastPublicVotersForbidden = BroadcastPublicVotersForbidden;
class BroadcastRequired extends BadRequest {
    id = 'BROADCAST_REQUIRED';
    message = 'This method can only be called on a channel, please use stats.getMegagroupStats for supergroups.';
}
exports.BroadcastRequired = BroadcastRequired;
class ButtonDataInvalid extends BadRequest {
    id = 'BUTTON_DATA_INVALID';
    message = 'The data of one or more of the buttons you provided is invalid.';
}
exports.ButtonDataInvalid = ButtonDataInvalid;
class ButtonTextInvalid extends BadRequest {
    id = 'BUTTON_TEXT_INVALID';
    message = 'The specified button text is invalid.';
}
exports.ButtonTextInvalid = ButtonTextInvalid;
class ButtonTypeInvalid extends BadRequest {
    id = 'BUTTON_TYPE_INVALID';
    message = 'The type of one or more of the buttons you provided is invalid.';
}
exports.ButtonTypeInvalid = ButtonTypeInvalid;
class ButtonUrlInvalid extends BadRequest {
    id = 'BUTTON_URL_INVALID';
    message = 'Button URL invalid.';
}
exports.ButtonUrlInvalid = ButtonUrlInvalid;
class ButtonUserInvalid extends BadRequest {
    id = 'BUTTON_USER_INVALID';
    message = 'The user_id passed to inputKeyboardButtonUserProfile is invalid!';
}
exports.ButtonUserInvalid = ButtonUserInvalid;
class ButtonUserPrivacyRestricted extends BadRequest {
    id = 'BUTTON_USER_PRIVACY_RESTRICTED';
    message = 'The privacy setting of the user specified in a [inputKeyboardButtonUserProfile](https://core.telegram.org/constructor/inputKeyboardButtonUserProfile) button do not allow creating such a button.';
}
exports.ButtonUserPrivacyRestricted = ButtonUserPrivacyRestricted;
class CallAlreadyAccepted extends BadRequest {
    id = 'CALL_ALREADY_ACCEPTED';
    message = 'The call was already accepted.';
}
exports.CallAlreadyAccepted = CallAlreadyAccepted;
class CallAlreadyDeclined extends BadRequest {
    id = 'CALL_ALREADY_DECLINED';
    message = 'The call was already declined.';
}
exports.CallAlreadyDeclined = CallAlreadyDeclined;
class CallOccupyFailed extends BadRequest {
    id = 'CALL_OCCUPY_FAILED';
    message = 'The call failed because the user is already making another call.';
}
exports.CallOccupyFailed = CallOccupyFailed;
class CallPeerInvalid extends BadRequest {
    id = 'CALL_PEER_INVALID';
    message = 'The provided call peer object is invalid.';
}
exports.CallPeerInvalid = CallPeerInvalid;
class CallProtocolFlagsInvalid extends BadRequest {
    id = 'CALL_PROTOCOL_FLAGS_INVALID';
    message = 'Call protocol flags invalid.';
}
exports.CallProtocolFlagsInvalid = CallProtocolFlagsInvalid;
class CdnMethodInvalid extends BadRequest {
    id = 'CDN_METHOD_INVALID';
    message = "You can't call this method in a CDN DC.";
}
exports.CdnMethodInvalid = CdnMethodInvalid;
class ChannelsAdminLocatedTooMuch extends BadRequest {
    id = 'CHANNELS_ADMIN_LOCATED_TOO_MUCH';
    message = 'The user has reached the limit of public geogroups.';
}
exports.ChannelsAdminLocatedTooMuch = ChannelsAdminLocatedTooMuch;
class ChannelsAdminPublicTooMuch extends BadRequest {
    id = 'CHANNELS_ADMIN_PUBLIC_TOO_MUCH';
    message = "You're admin of too many public channels, make some channels private to change the username of this channel.";
}
exports.ChannelsAdminPublicTooMuch = ChannelsAdminPublicTooMuch;
class ChannelsTooMuch extends BadRequest {
    id = 'CHANNELS_TOO_MUCH';
    message = 'You have joined too many channels/supergroups.';
}
exports.ChannelsTooMuch = ChannelsTooMuch;
class ChannelAddInvalid extends BadRequest {
    id = 'CHANNEL_ADD_INVALID';
    message = 'Internal error.';
}
exports.ChannelAddInvalid = ChannelAddInvalid;
class ChannelBanned extends BadRequest {
    id = 'CHANNEL_BANNED';
    message = 'The channel is banned';
}
exports.ChannelBanned = ChannelBanned;
class ChannelForumMissing extends BadRequest {
    id = 'CHANNEL_FORUM_MISSING';
    message = 'This supergroup is not a forum.';
}
exports.ChannelForumMissing = ChannelForumMissing;
class ChannelIdInvalid extends BadRequest {
    id = 'CHANNEL_ID_INVALID';
    message = 'The specified supergroup ID is invalid.';
}
exports.ChannelIdInvalid = ChannelIdInvalid;
class ChannelInvalid extends BadRequest {
    id = 'CHANNEL_INVALID';
    message = 'The provided channel is invalid.';
}
exports.ChannelInvalid = ChannelInvalid;
class ChannelParicipantMissing extends BadRequest {
    id = 'CHANNEL_PARICIPANT_MISSING';
    message = 'The current user is not in the channel.';
}
exports.ChannelParicipantMissing = ChannelParicipantMissing;
class ChannelPrivate extends BadRequest {
    id = 'CHANNEL_PRIVATE';
    message = "You haven't joined this channel/supergroup.";
}
exports.ChannelPrivate = ChannelPrivate;
class ChannelTooBig extends BadRequest {
    id = 'CHANNEL_TOO_BIG';
    message = 'This channel has too many participants (>1000) to be deleted.';
}
exports.ChannelTooBig = ChannelTooBig;
class ChannelTooLarge extends BadRequest {
    id = 'CHANNEL_TOO_LARGE';
    message = 'Channel is too large to be deleted; this error is issued when trying to delete channels with more than 1000 members (subject to change).';
}
exports.ChannelTooLarge = ChannelTooLarge;
class ChatlistExcludeInvalid extends BadRequest {
    id = 'CHATLIST_EXCLUDE_INVALID';
    message = 'The specified `exclude_peers` are invalid.';
}
exports.ChatlistExcludeInvalid = ChatlistExcludeInvalid;
class ChatAboutNotModified extends BadRequest {
    id = 'CHAT_ABOUT_NOT_MODIFIED';
    message = 'About text has not changed.';
}
exports.ChatAboutNotModified = ChatAboutNotModified;
class ChatAboutTooLong extends BadRequest {
    id = 'CHAT_ABOUT_TOO_LONG';
    message = 'Chat about too long.';
}
exports.ChatAboutTooLong = ChatAboutTooLong;
class ChatAdminRequired extends BadRequest {
    id = 'CHAT_ADMIN_REQUIRED';
    message = 'You must be an admin in this chat to do this.';
}
exports.ChatAdminRequired = ChatAdminRequired;
class ChatDiscussionUnallowed extends BadRequest {
    id = 'CHAT_DISCUSSION_UNALLOWED';
    message = "You can't enable forum topics in a discussion group linked to a channel.";
}
exports.ChatDiscussionUnallowed = ChatDiscussionUnallowed;
class ChatForwardsRestricted extends BadRequest {
    id = 'CHAT_FORWARDS_RESTRICTED';
    message = "You can't forward messages from a protected chat.";
}
exports.ChatForwardsRestricted = ChatForwardsRestricted;
class ChatIdEmpty extends BadRequest {
    id = 'CHAT_ID_EMPTY';
    message = 'The provided chat ID is empty.';
}
exports.ChatIdEmpty = ChatIdEmpty;
class ChatIdInvalid extends BadRequest {
    id = 'CHAT_ID_INVALID';
    message = 'The provided chat id is invalid.';
}
exports.ChatIdInvalid = ChatIdInvalid;
class ChatInvalid extends BadRequest {
    id = 'CHAT_INVALID';
    message = 'Invalid chat.';
}
exports.ChatInvalid = ChatInvalid;
class ChatInvitePermanent extends BadRequest {
    id = 'CHAT_INVITE_PERMANENT';
    message = "You can't set an expiration date on permanent invite links.";
}
exports.ChatInvitePermanent = ChatInvitePermanent;
class ChatLinkExists extends BadRequest {
    id = 'CHAT_LINK_EXISTS';
    message = "The chat is public, you can't hide the history to new users.";
}
exports.ChatLinkExists = ChatLinkExists;
class ChatNotModified extends BadRequest {
    id = 'CHAT_NOT_MODIFIED';
    message = 'No changes were made to chat information because the new information you passed is identical to the current information.';
}
exports.ChatNotModified = ChatNotModified;
class ChatPublicRequired extends BadRequest {
    id = 'CHAT_PUBLIC_REQUIRED';
    message = 'You can only enable join requests in public groups.';
}
exports.ChatPublicRequired = ChatPublicRequired;
class ChatRestricted extends BadRequest {
    id = 'CHAT_RESTRICTED';
    message = "You can't send messages in this chat, you were restricted.";
}
exports.ChatRestricted = ChatRestricted;
class ChatRevokeDateUnsupported extends BadRequest {
    id = 'CHAT_REVOKE_DATE_UNSUPPORTED';
    message = '`min_date` and `max_date` are not available for using with non-user peers.';
}
exports.ChatRevokeDateUnsupported = ChatRevokeDateUnsupported;
class ChatSendInlineForbidden extends BadRequest {
    id = 'CHAT_SEND_INLINE_FORBIDDEN';
    message = "You can't send inline messages in this group.";
}
exports.ChatSendInlineForbidden = ChatSendInlineForbidden;
class ChatTitleEmpty extends BadRequest {
    id = 'CHAT_TITLE_EMPTY';
    message = 'No chat title provided.';
}
exports.ChatTitleEmpty = ChatTitleEmpty;
class ChatTooBig extends BadRequest {
    id = 'CHAT_TOO_BIG';
    message = 'This method is not available for groups with more than `chat_read_mark_size_threshold` members, [see client configuration &raquo;](https://core.telegram.org/api/config#client-configuration).';
}
exports.ChatTooBig = ChatTooBig;
class CodeEmpty extends BadRequest {
    id = 'CODE_EMPTY';
    message = 'The provided code is empty.';
}
exports.CodeEmpty = CodeEmpty;
class CodeHashInvalid extends BadRequest {
    id = 'CODE_HASH_INVALID';
    message = 'Code hash invalid.';
}
exports.CodeHashInvalid = CodeHashInvalid;
class CodeInvalid extends BadRequest {
    id = 'CODE_INVALID';
    message = 'Code invalid.';
}
exports.CodeInvalid = CodeInvalid;
class ColorInvalid extends BadRequest {
    id = 'COLOR_INVALID';
    message = 'The specified color palette ID was invalid.';
}
exports.ColorInvalid = ColorInvalid;
class ConnectionApiIdInvalid extends BadRequest {
    id = 'CONNECTION_API_ID_INVALID';
    message = 'The provided API id is invalid.';
}
exports.ConnectionApiIdInvalid = ConnectionApiIdInvalid;
class ConnectionAppVersionEmpty extends BadRequest {
    id = 'CONNECTION_APP_VERSION_EMPTY';
    message = 'App version is empty.';
}
exports.ConnectionAppVersionEmpty = ConnectionAppVersionEmpty;
class ConnectionDeviceModelEmpty extends BadRequest {
    id = 'CONNECTION_DEVICE_MODEL_EMPTY';
    message = 'The device model is empty';
}
exports.ConnectionDeviceModelEmpty = ConnectionDeviceModelEmpty;
class ConnectionLangPackInvalid extends BadRequest {
    id = 'CONNECTION_LANG_PACK_INVALID';
    message = 'The specified language pack is not valid';
}
exports.ConnectionLangPackInvalid = ConnectionLangPackInvalid;
class ConnectionLayerInvalid extends BadRequest {
    id = 'CONNECTION_LAYER_INVALID';
    message = 'Layer invalid.';
}
exports.ConnectionLayerInvalid = ConnectionLayerInvalid;
class ConnectionNotInited extends BadRequest {
    id = 'CONNECTION_NOT_INITED';
    message = 'The connection was not initialized';
}
exports.ConnectionNotInited = ConnectionNotInited;
class ConnectionSystemEmpty extends BadRequest {
    id = 'CONNECTION_SYSTEM_EMPTY';
    message = 'The connection to the system is empty';
}
exports.ConnectionSystemEmpty = ConnectionSystemEmpty;
class ConnectionSystemLangCodeEmpty extends BadRequest {
    id = 'CONNECTION_SYSTEM_LANG_CODE_EMPTY';
    message = 'The system language code is empty';
}
exports.ConnectionSystemLangCodeEmpty = ConnectionSystemLangCodeEmpty;
class ContactAddMissing extends BadRequest {
    id = 'CONTACT_ADD_MISSING';
    message = 'Contact to add is missing.';
}
exports.ContactAddMissing = ContactAddMissing;
class ContactIdInvalid extends BadRequest {
    id = 'CONTACT_ID_INVALID';
    message = 'The provided contact ID is invalid.';
}
exports.ContactIdInvalid = ContactIdInvalid;
class ContactMissing extends BadRequest {
    id = 'CONTACT_MISSING';
    message = 'The specified user is not a contact.';
}
exports.ContactMissing = ContactMissing;
class ContactNameEmpty extends BadRequest {
    id = 'CONTACT_NAME_EMPTY';
    message = 'Contact name empty.';
}
exports.ContactNameEmpty = ContactNameEmpty;
class ContactReqMissing extends BadRequest {
    id = 'CONTACT_REQ_MISSING';
    message = 'Missing contact request.';
}
exports.ContactReqMissing = ContactReqMissing;
class CreateCallFailed extends BadRequest {
    id = 'CREATE_CALL_FAILED';
    message = 'An error occurred while creating the call.';
}
exports.CreateCallFailed = CreateCallFailed;
class CurrencyTotalAmountInvalid extends BadRequest {
    id = 'CURRENCY_TOTAL_AMOUNT_INVALID';
    message = 'The total amount of all prices is invalid.';
}
exports.CurrencyTotalAmountInvalid = CurrencyTotalAmountInvalid;
class CustomReactionsTooMany extends BadRequest {
    id = 'CUSTOM_REACTIONS_TOO_MANY';
    message = 'Too many custom reactions were specified.';
}
exports.CustomReactionsTooMany = CustomReactionsTooMany;
class DataInvalid extends BadRequest {
    id = 'DATA_INVALID';
    message = 'Encrypted data invalid.';
}
exports.DataInvalid = DataInvalid;
class DataJsonInvalid extends BadRequest {
    id = 'DATA_JSON_INVALID';
    message = 'The provided JSON data is invalid.';
}
exports.DataJsonInvalid = DataJsonInvalid;
class DataTooLong extends BadRequest {
    id = 'DATA_TOO_LONG';
    message = 'Data too long.';
}
exports.DataTooLong = DataTooLong;
class DateEmpty extends BadRequest {
    id = 'DATE_EMPTY';
    message = 'Date empty.';
}
exports.DateEmpty = DateEmpty;
class DcIdInvalid extends BadRequest {
    id = 'DC_ID_INVALID';
    message = 'The provided DC ID is invalid.';
}
exports.DcIdInvalid = DcIdInvalid;
class DhGAInvalid extends BadRequest {
    id = 'DH_G_A_INVALID';
    message = 'g_a invalid.';
}
exports.DhGAInvalid = DhGAInvalid;
class DocumentInvalid extends BadRequest {
    id = 'DOCUMENT_INVALID';
    message = 'The specified document is invalid.';
}
exports.DocumentInvalid = DocumentInvalid;
class EmailHashExpired extends BadRequest {
    id = 'EMAIL_HASH_EXPIRED';
    message = 'Email hash expired.';
}
exports.EmailHashExpired = EmailHashExpired;
class EmailInvalid extends BadRequest {
    id = 'EMAIL_INVALID';
    message = 'The specified email is invalid.';
}
exports.EmailInvalid = EmailInvalid;
class EmailNotSetup extends BadRequest {
    id = 'EMAIL_NOT_SETUP';
    message = 'In order to change the login email with emailVerifyPurposeLoginChange, an existing login email must already be set using emailVerifyPurposeLoginSetup.';
}
exports.EmailNotSetup = EmailNotSetup;
class EmailUnconfirmed extends BadRequest {
    id = 'EMAIL_UNCONFIRMED';
    message = 'Email unconfirmed.';
}
exports.EmailUnconfirmed = EmailUnconfirmed;
class EmailUnconfirmedX extends BadRequest {
    id = 'EMAIL_UNCONFIRMED_X';
    message = "The provided email isn't confirmed, {value} is the length of the verification code that was just sent to the email: use [account.verifyEmail](https://core.telegram.org/method/account.verifyEmail) to enter the received verification code and enable the recovery email.";
}
exports.EmailUnconfirmedX = EmailUnconfirmedX;
class EmailVerifyExpired extends BadRequest {
    id = 'EMAIL_VERIFY_EXPIRED';
    message = 'The verification email has expired.';
}
exports.EmailVerifyExpired = EmailVerifyExpired;
class EmojiInvalid extends BadRequest {
    id = 'EMOJI_INVALID';
    message = 'The specified theme emoji is valid.';
}
exports.EmojiInvalid = EmojiInvalid;
class EmojiMarkupInvalid extends BadRequest {
    id = 'EMOJI_MARKUP_INVALID';
    message = 'The specified `video_emoji_markup` was invalid.';
}
exports.EmojiMarkupInvalid = EmojiMarkupInvalid;
class EmojiNotModified extends BadRequest {
    id = 'EMOJI_NOT_MODIFIED';
    message = "The theme wasn't changed.";
}
exports.EmojiNotModified = EmojiNotModified;
class EmoticonEmpty extends BadRequest {
    id = 'EMOTICON_EMPTY';
    message = 'The emoji is empty.';
}
exports.EmoticonEmpty = EmoticonEmpty;
class EmoticonInvalid extends BadRequest {
    id = 'EMOTICON_INVALID';
    message = 'The specified emoji is invalid.';
}
exports.EmoticonInvalid = EmoticonInvalid;
class EmoticonStickerpackMissing extends BadRequest {
    id = 'EMOTICON_STICKERPACK_MISSING';
    message = 'inputStickerSetDice.emoji cannot be empty.';
}
exports.EmoticonStickerpackMissing = EmoticonStickerpackMissing;
class EncryptedMessageInvalid extends BadRequest {
    id = 'ENCRYPTED_MESSAGE_INVALID';
    message = 'Encrypted message invalid.';
}
exports.EncryptedMessageInvalid = EncryptedMessageInvalid;
class EncryptionAlreadyAccepted extends BadRequest {
    id = 'ENCRYPTION_ALREADY_ACCEPTED';
    message = 'Secret chat already accepted.';
}
exports.EncryptionAlreadyAccepted = EncryptionAlreadyAccepted;
class EncryptionAlreadyDeclined extends BadRequest {
    id = 'ENCRYPTION_ALREADY_DECLINED';
    message = 'The secret chat was already declined.';
}
exports.EncryptionAlreadyDeclined = EncryptionAlreadyDeclined;
class EncryptionDeclined extends BadRequest {
    id = 'ENCRYPTION_DECLINED';
    message = 'The secret chat was declined.';
}
exports.EncryptionDeclined = EncryptionDeclined;
class EncryptionIdInvalid extends BadRequest {
    id = 'ENCRYPTION_ID_INVALID';
    message = 'The provided secret chat ID is invalid.';
}
exports.EncryptionIdInvalid = EncryptionIdInvalid;
class EntitiesTooLong extends BadRequest {
    id = 'ENTITIES_TOO_LONG';
    message = 'You provided too many styled message entities.';
}
exports.EntitiesTooLong = EntitiesTooLong;
class EntityBoundsInvalid extends BadRequest {
    id = 'ENTITY_BOUNDS_INVALID';
    message = 'A specified [entity offset or length](https://core.telegram.org/api/entities#entity-length) is invalid, see [here &raquo;](https://core.telegram.org/api/entities#entity-length) for info on how to properly compute the entity offset/length.';
}
exports.EntityBoundsInvalid = EntityBoundsInvalid;
class EntityMentionUserInvalid extends BadRequest {
    id = 'ENTITY_MENTION_USER_INVALID';
    message = 'You mentioned an invalid user.';
}
exports.EntityMentionUserInvalid = EntityMentionUserInvalid;
class ErrorTextEmpty extends BadRequest {
    id = 'ERROR_TEXT_EMPTY';
    message = 'The provided error message is empty.';
}
exports.ErrorTextEmpty = ErrorTextEmpty;
class ExpireDateInvalid extends BadRequest {
    id = 'EXPIRE_DATE_INVALID';
    message = 'The specified expiration date is invalid.';
}
exports.ExpireDateInvalid = ExpireDateInvalid;
class ExportCardInvalid extends BadRequest {
    id = 'EXPORT_CARD_INVALID';
    message = 'Provided card is invalid.';
}
exports.ExportCardInvalid = ExportCardInvalid;
class ExternalUrlInvalid extends BadRequest {
    id = 'EXTERNAL_URL_INVALID';
    message = 'External URL invalid.';
}
exports.ExternalUrlInvalid = ExternalUrlInvalid;
class FieldNameEmpty extends BadRequest {
    id = 'FIELD_NAME_EMPTY';
    message = 'The field with the name FIELD_NAME is missing';
}
exports.FieldNameEmpty = FieldNameEmpty;
class FieldNameInvalid extends BadRequest {
    id = 'FIELD_NAME_INVALID';
    message = 'The field with the name FIELD_NAME is invalid';
}
exports.FieldNameInvalid = FieldNameInvalid;
class FileContentTypeInvalid extends BadRequest {
    id = 'FILE_CONTENT_TYPE_INVALID';
    message = 'File content-type is invalid.';
}
exports.FileContentTypeInvalid = FileContentTypeInvalid;
class FileEmtpy extends BadRequest {
    id = 'FILE_EMTPY';
    message = 'An empty file was provided.';
}
exports.FileEmtpy = FileEmtpy;
class FileIdInvalid extends BadRequest {
    id = 'FILE_ID_INVALID';
    message = 'The provided file id is invalid.';
}
exports.FileIdInvalid = FileIdInvalid;
class FileMigrate extends BadRequest {
    id = 'FILE_MIGRATE_X';
    message = 'The file is in Data Center No. {value}';
}
exports.FileMigrate = FileMigrate;
class FilePartsInvalid extends BadRequest {
    id = 'FILE_PARTS_INVALID';
    message = 'The number of file parts is invalid.';
}
exports.FilePartsInvalid = FilePartsInvalid;
class FilePartEmpty extends BadRequest {
    id = 'FILE_PART_EMPTY';
    message = 'The provided file part is empty.';
}
exports.FilePartEmpty = FilePartEmpty;
class FilePartInvalid extends BadRequest {
    id = 'FILE_PART_INVALID';
    message = 'The file part number is invalid.';
}
exports.FilePartInvalid = FilePartInvalid;
class FilePartLengthInvalid extends BadRequest {
    id = 'FILE_PART_LENGTH_INVALID';
    message = 'The length of a file part is invalid.';
}
exports.FilePartLengthInvalid = FilePartLengthInvalid;
class FilePartSizeChanged extends BadRequest {
    id = 'FILE_PART_SIZE_CHANGED';
    message = 'Provided file part size has changed.';
}
exports.FilePartSizeChanged = FilePartSizeChanged;
class FilePartSizeInvalid extends BadRequest {
    id = 'FILE_PART_SIZE_INVALID';
    message = 'The provided file part size is invalid.';
}
exports.FilePartSizeInvalid = FilePartSizeInvalid;
class FilePartTooBig extends BadRequest {
    id = 'FILE_PART_TOO_BIG';
    message = 'The uploaded file part is too big.';
}
exports.FilePartTooBig = FilePartTooBig;
class FilePartMissing extends BadRequest {
    id = 'FILE_PART_X_MISSING';
    message = 'Part {value} of the file is missing from storage';
}
exports.FilePartMissing = FilePartMissing;
class FileReferenceAny extends BadRequest {
    id = 'FILE_REFERENCE_*';
    message = 'The file reference expired, it [must be refreshed](https://core.telegram.org/api/file_reference).';
}
exports.FileReferenceAny = FileReferenceAny;
class FileReferenceEmpty extends BadRequest {
    id = 'FILE_REFERENCE_EMPTY';
    message = 'An empty [file reference](https://core.telegram.org/api/file_reference) was specified.';
}
exports.FileReferenceEmpty = FileReferenceEmpty;
class FileReferenceExpired extends BadRequest {
    id = 'FILE_REFERENCE_EXPIRED';
    message = 'File reference expired, it must be refetched as described in [the documentation](https://core.telegram.org/api/file_reference).';
}
exports.FileReferenceExpired = FileReferenceExpired;
class FileReferenceInvalid extends BadRequest {
    id = 'FILE_REFERENCE_INVALID';
    message = 'The specified [file reference](https://core.telegram.org/api/file_reference) is invalid.';
}
exports.FileReferenceInvalid = FileReferenceInvalid;
class FileTitleEmpty extends BadRequest {
    id = 'FILE_TITLE_EMPTY';
    message = 'An empty file title was specified.';
}
exports.FileTitleEmpty = FileTitleEmpty;
class FileTokenInvalid extends BadRequest {
    id = 'FILE_TOKEN_INVALID';
    message = 'The specified file token is invalid.';
}
exports.FileTokenInvalid = FileTokenInvalid;
class FilterIdInvalid extends BadRequest {
    id = 'FILTER_ID_INVALID';
    message = 'The specified filter ID is invalid.';
}
exports.FilterIdInvalid = FilterIdInvalid;
class FilterIncludeEmpty extends BadRequest {
    id = 'FILTER_INCLUDE_EMPTY';
    message = 'The include_peers vector of the filter is empty.';
}
exports.FilterIncludeEmpty = FilterIncludeEmpty;
class FilterNotSupported extends BadRequest {
    id = 'FILTER_NOT_SUPPORTED';
    message = 'The specified filter cannot be used in this context.';
}
exports.FilterNotSupported = FilterNotSupported;
class FilterTitleEmpty extends BadRequest {
    id = 'FILTER_TITLE_EMPTY';
    message = 'The title field of the filter is empty.';
}
exports.FilterTitleEmpty = FilterTitleEmpty;
class FirstnameInvalid extends BadRequest {
    id = 'FIRSTNAME_INVALID';
    message = 'The first name is invalid.';
}
exports.FirstnameInvalid = FirstnameInvalid;
class FolderIdEmpty extends BadRequest {
    id = 'FOLDER_ID_EMPTY';
    message = 'An empty folder ID was specified.';
}
exports.FolderIdEmpty = FolderIdEmpty;
class FolderIdInvalid extends BadRequest {
    id = 'FOLDER_ID_INVALID';
    message = 'Invalid folder ID.';
}
exports.FolderIdInvalid = FolderIdInvalid;
class ForumEnabled extends BadRequest {
    id = 'FORUM_ENABLED';
    message = "You can't execute the specified action because the group is a [forum](https://core.telegram.org/api/forum), disable forum functionality to continue.";
}
exports.ForumEnabled = ForumEnabled;
class FreshChangeAdminsForbidden extends BadRequest {
    id = 'FRESH_CHANGE_ADMINS_FORBIDDEN';
    message = "You were just elected admin, you can't add or modify other admins yet.";
}
exports.FreshChangeAdminsForbidden = FreshChangeAdminsForbidden;
class FromMessageBotDisabled extends BadRequest {
    id = 'FROM_MESSAGE_BOT_DISABLED';
    message = "Bots can't use fromMessage min constructors.";
}
exports.FromMessageBotDisabled = FromMessageBotDisabled;
class FromPeerInvalid extends BadRequest {
    id = 'FROM_PEER_INVALID';
    message = 'The specified from_id is invalid.';
}
exports.FromPeerInvalid = FromPeerInvalid;
class GameBotInvalid extends BadRequest {
    id = 'GAME_BOT_INVALID';
    message = "Bots can't send another bot's game.";
}
exports.GameBotInvalid = GameBotInvalid;
class GeneralModifyIconForbidden extends BadRequest {
    id = 'GENERAL_MODIFY_ICON_FORBIDDEN';
    message = 'You can\'t modify the icon of the "General" topic.';
}
exports.GeneralModifyIconForbidden = GeneralModifyIconForbidden;
class GeoPointInvalid extends BadRequest {
    id = 'GEO_POINT_INVALID';
    message = 'Invalid geoposition provided.';
}
exports.GeoPointInvalid = GeoPointInvalid;
class GiftSlugExpired extends BadRequest {
    id = 'GIFT_SLUG_EXPIRED';
    message = 'The specified gift slug has expired.';
}
exports.GiftSlugExpired = GiftSlugExpired;
class GiftSlugInvalid extends BadRequest {
    id = 'GIFT_SLUG_INVALID';
    message = 'The specified slug is invalid.';
}
exports.GiftSlugInvalid = GiftSlugInvalid;
class GifContentTypeInvalid extends BadRequest {
    id = 'GIF_CONTENT_TYPE_INVALID';
    message = 'GIF content-type invalid.';
}
exports.GifContentTypeInvalid = GifContentTypeInvalid;
class GifIdInvalid extends BadRequest {
    id = 'GIF_ID_INVALID';
    message = 'The provided GIF ID is invalid.';
}
exports.GifIdInvalid = GifIdInvalid;
class GraphExpiredReload extends BadRequest {
    id = 'GRAPH_EXPIRED_RELOAD';
    message = 'This graph has expired, please obtain a new graph token.';
}
exports.GraphExpiredReload = GraphExpiredReload;
class GraphInvalidReload extends BadRequest {
    id = 'GRAPH_INVALID_RELOAD';
    message = 'Invalid graph token provided, please reload the stats and provide the updated token.';
}
exports.GraphInvalidReload = GraphInvalidReload;
class GraphOutdatedReload extends BadRequest {
    id = 'GRAPH_OUTDATED_RELOAD';
    message = 'The graph is outdated, please get a new async token using stats.getBroadcastStats.';
}
exports.GraphOutdatedReload = GraphOutdatedReload;
class GroupcallAlreadyDiscarded extends BadRequest {
    id = 'GROUPCALL_ALREADY_DISCARDED';
    message = 'The group call was already discarded.';
}
exports.GroupcallAlreadyDiscarded = GroupcallAlreadyDiscarded;
class GroupcallForbidden extends BadRequest {
    id = 'GROUPCALL_FORBIDDEN';
    message = 'The group call has already ended.';
}
exports.GroupcallForbidden = GroupcallForbidden;
class GroupcallInvalid extends BadRequest {
    id = 'GROUPCALL_INVALID';
    message = 'The specified group call is invalid.';
}
exports.GroupcallInvalid = GroupcallInvalid;
class GroupcallJoinMissing extends BadRequest {
    id = 'GROUPCALL_JOIN_MISSING';
    message = "You haven't joined this group call.";
}
exports.GroupcallJoinMissing = GroupcallJoinMissing;
class GroupcallNotModified extends BadRequest {
    id = 'GROUPCALL_NOT_MODIFIED';
    message = "Group call settings weren't modified.";
}
exports.GroupcallNotModified = GroupcallNotModified;
class GroupcallSsrcDuplicateMuch extends BadRequest {
    id = 'GROUPCALL_SSRC_DUPLICATE_MUCH';
    message = 'The app needs to retry joining the group call with a new SSRC value.';
}
exports.GroupcallSsrcDuplicateMuch = GroupcallSsrcDuplicateMuch;
class GroupedMediaInvalid extends BadRequest {
    id = 'GROUPED_MEDIA_INVALID';
    message = 'Invalid grouped media.';
}
exports.GroupedMediaInvalid = GroupedMediaInvalid;
class GroupCallInvalid extends BadRequest {
    id = 'GROUP_CALL_INVALID';
    message = 'The group call is invalid';
}
exports.GroupCallInvalid = GroupCallInvalid;
class HashInvalid extends BadRequest {
    id = 'HASH_INVALID';
    message = 'The provided hash is invalid.';
}
exports.HashInvalid = HashInvalid;
class HideRequesterMissing extends BadRequest {
    id = 'HIDE_REQUESTER_MISSING';
    message = 'The join request was missing or was already handled.';
}
exports.HideRequesterMissing = HideRequesterMissing;
class ImageProcessFailed extends BadRequest {
    id = 'IMAGE_PROCESS_FAILED';
    message = 'Failure while processing image.';
}
exports.ImageProcessFailed = ImageProcessFailed;
class ImportFileInvalid extends BadRequest {
    id = 'IMPORT_FILE_INVALID';
    message = 'The specified chat export file is invalid.';
}
exports.ImportFileInvalid = ImportFileInvalid;
class ImportFormatUnrecognized extends BadRequest {
    id = 'IMPORT_FORMAT_UNRECOGNIZED';
    message = 'The specified chat export file was exported from an unsupported chat app.';
}
exports.ImportFormatUnrecognized = ImportFormatUnrecognized;
class ImportIdInvalid extends BadRequest {
    id = 'IMPORT_ID_INVALID';
    message = 'The specified import ID is invalid.';
}
exports.ImportIdInvalid = ImportIdInvalid;
class ImportTokenInvalid extends BadRequest {
    id = 'IMPORT_TOKEN_INVALID';
    message = 'The specified token is invalid.';
}
exports.ImportTokenInvalid = ImportTokenInvalid;
class InlineResultExpired extends BadRequest {
    id = 'INLINE_RESULT_EXPIRED';
    message = 'The inline query expired.';
}
exports.InlineResultExpired = InlineResultExpired;
class InputChatlistInvalid extends BadRequest {
    id = 'INPUT_CHATLIST_INVALID';
    message = 'The specified folder is invalid.';
}
exports.InputChatlistInvalid = InputChatlistInvalid;
class InputConstructorInvalid extends BadRequest {
    id = 'INPUT_CONSTRUCTOR_INVALID';
    message = 'The provided constructor is invalid';
}
exports.InputConstructorInvalid = InputConstructorInvalid;
class InputFetchError extends BadRequest {
    id = 'INPUT_FETCH_ERROR';
    message = 'An error occurred while deserializing TL parameters';
}
exports.InputFetchError = InputFetchError;
class InputFetchFail extends BadRequest {
    id = 'INPUT_FETCH_FAIL';
    message = 'Failed deserializing TL payload';
}
exports.InputFetchFail = InputFetchFail;
class InputFilterInvalid extends BadRequest {
    id = 'INPUT_FILTER_INVALID';
    message = 'The specified filter is invalid.';
}
exports.InputFilterInvalid = InputFilterInvalid;
class InputLayerInvalid extends BadRequest {
    id = 'INPUT_LAYER_INVALID';
    message = 'The provided layer is invalid';
}
exports.InputLayerInvalid = InputLayerInvalid;
class InputMethodInvalid extends BadRequest {
    id = 'INPUT_METHOD_INVALID';
    message = 'The method invoked is invalid in the current schema';
}
exports.InputMethodInvalid = InputMethodInvalid;
class InputRequestTooLong extends BadRequest {
    id = 'INPUT_REQUEST_TOO_LONG';
    message = 'The input request is too long';
}
exports.InputRequestTooLong = InputRequestTooLong;
class InputTextEmpty extends BadRequest {
    id = 'INPUT_TEXT_EMPTY';
    message = 'The specified text is empty.';
}
exports.InputTextEmpty = InputTextEmpty;
class InputTextTooLong extends BadRequest {
    id = 'INPUT_TEXT_TOO_LONG';
    message = 'The specified text is too long.';
}
exports.InputTextTooLong = InputTextTooLong;
class InputUserDeactivated extends BadRequest {
    id = 'INPUT_USER_DEACTIVATED';
    message = 'The specified user was deleted.';
}
exports.InputUserDeactivated = InputUserDeactivated;
class InvitesTooMuch extends BadRequest {
    id = 'INVITES_TOO_MUCH';
    message = 'The maximum number of per-folder invites specified by the `chatlist_invites_limit_default`/`chatlist_invites_limit_premium` [client configuration parameters &raquo;](https://core.telegram.org/api/config#chatlist-invites-limit-default) was reached.';
}
exports.InvitesTooMuch = InvitesTooMuch;
class InviteForbiddenWithJoinas extends BadRequest {
    id = 'INVITE_FORBIDDEN_WITH_JOINAS';
    message = "If the user has anonymously joined a group call as a channel, they can't invite other users to the group call because that would cause deanonymization, because the invite would be sent using the original user ID, not the anonymized channel ID.";
}
exports.InviteForbiddenWithJoinas = InviteForbiddenWithJoinas;
class InviteHashEmpty extends BadRequest {
    id = 'INVITE_HASH_EMPTY';
    message = 'The invite hash is empty.';
}
exports.InviteHashEmpty = InviteHashEmpty;
class InviteHashExpired extends BadRequest {
    id = 'INVITE_HASH_EXPIRED';
    message = 'The invite link has expired.';
}
exports.InviteHashExpired = InviteHashExpired;
class InviteHashInvalid extends BadRequest {
    id = 'INVITE_HASH_INVALID';
    message = 'The invite hash is invalid.';
}
exports.InviteHashInvalid = InviteHashInvalid;
class InviteRequestSent extends BadRequest {
    id = 'INVITE_REQUEST_SENT';
    message = 'You have successfully requested to join this chat or channel.';
}
exports.InviteRequestSent = InviteRequestSent;
class InviteRevokedMissing extends BadRequest {
    id = 'INVITE_REVOKED_MISSING';
    message = 'The specified invite link was already revoked or is invalid.';
}
exports.InviteRevokedMissing = InviteRevokedMissing;
class InviteSlugEmpty extends BadRequest {
    id = 'INVITE_SLUG_EMPTY';
    message = 'The specified invite slug is empty.';
}
exports.InviteSlugEmpty = InviteSlugEmpty;
class InviteSlugExpired extends BadRequest {
    id = 'INVITE_SLUG_EXPIRED';
    message = 'The specified chat folder link has expired.';
}
exports.InviteSlugExpired = InviteSlugExpired;
class InvoicePayloadInvalid extends BadRequest {
    id = 'INVOICE_PAYLOAD_INVALID';
    message = 'The specified invoice payload is invalid.';
}
exports.InvoicePayloadInvalid = InvoicePayloadInvalid;
class JoinAsPeerInvalid extends BadRequest {
    id = 'JOIN_AS_PEER_INVALID';
    message = 'The specified peer cannot be used to join a group call.';
}
exports.JoinAsPeerInvalid = JoinAsPeerInvalid;
class LangCodeInvalid extends BadRequest {
    id = 'LANG_CODE_INVALID';
    message = 'The specified language code is invalid.';
}
exports.LangCodeInvalid = LangCodeInvalid;
class LangCodeNotSupported extends BadRequest {
    id = 'LANG_CODE_NOT_SUPPORTED';
    message = 'The specified language code is not supported.';
}
exports.LangCodeNotSupported = LangCodeNotSupported;
class LangPackInvalid extends BadRequest {
    id = 'LANG_PACK_INVALID';
    message = 'The provided language pack is invalid.';
}
exports.LangPackInvalid = LangPackInvalid;
class LastnameInvalid extends BadRequest {
    id = 'LASTNAME_INVALID';
    message = 'The last name is invalid.';
}
exports.LastnameInvalid = LastnameInvalid;
class LimitInvalid extends BadRequest {
    id = 'LIMIT_INVALID';
    message = 'The provided limit is invalid.';
}
exports.LimitInvalid = LimitInvalid;
class LinkNotModified extends BadRequest {
    id = 'LINK_NOT_MODIFIED';
    message = 'Discussion link not modified.';
}
exports.LinkNotModified = LinkNotModified;
class LocationInvalid extends BadRequest {
    id = 'LOCATION_INVALID';
    message = 'The provided location is invalid.';
}
exports.LocationInvalid = LocationInvalid;
class MaxDateInvalid extends BadRequest {
    id = 'MAX_DATE_INVALID';
    message = 'The specified maximum date is invalid.';
}
exports.MaxDateInvalid = MaxDateInvalid;
class MaxIdInvalid extends BadRequest {
    id = 'MAX_ID_INVALID';
    message = 'The provided max ID is invalid.';
}
exports.MaxIdInvalid = MaxIdInvalid;
class MaxQtsInvalid extends BadRequest {
    id = 'MAX_QTS_INVALID';
    message = 'The specified max_qts is invalid.';
}
exports.MaxQtsInvalid = MaxQtsInvalid;
class Md5ChecksumInvalid extends BadRequest {
    id = 'MD5_CHECKSUM_INVALID';
    message = 'The MD5 checksums do not match.';
}
exports.Md5ChecksumInvalid = Md5ChecksumInvalid;
class MediaCaptionTooLong extends BadRequest {
    id = 'MEDIA_CAPTION_TOO_LONG';
    message = 'The caption is too long.';
}
exports.MediaCaptionTooLong = MediaCaptionTooLong;
class MediaEmpty extends BadRequest {
    id = 'MEDIA_EMPTY';
    message = 'The provided media object is invalid.';
}
exports.MediaEmpty = MediaEmpty;
class MediaFileInvalid extends BadRequest {
    id = 'MEDIA_FILE_INVALID';
    message = 'The specified media file is invalid.';
}
exports.MediaFileInvalid = MediaFileInvalid;
class MediaGroupedInvalid extends BadRequest {
    id = 'MEDIA_GROUPED_INVALID';
    message = 'You tried to send media of different types in an album.';
}
exports.MediaGroupedInvalid = MediaGroupedInvalid;
class MediaInvalid extends BadRequest {
    id = 'MEDIA_INVALID';
    message = 'Media invalid.';
}
exports.MediaInvalid = MediaInvalid;
class MediaNewInvalid extends BadRequest {
    id = 'MEDIA_NEW_INVALID';
    message = 'The new media is invalid.';
}
exports.MediaNewInvalid = MediaNewInvalid;
class MediaPrevInvalid extends BadRequest {
    id = 'MEDIA_PREV_INVALID';
    message = 'Previous media invalid.';
}
exports.MediaPrevInvalid = MediaPrevInvalid;
class MediaTtlInvalid extends BadRequest {
    id = 'MEDIA_TTL_INVALID';
    message = 'The specified media TTL is invalid.';
}
exports.MediaTtlInvalid = MediaTtlInvalid;
class MediaTypeInvalid extends BadRequest {
    id = 'MEDIA_TYPE_INVALID';
    message = 'The specified media type cannot be used in stories.';
}
exports.MediaTypeInvalid = MediaTypeInvalid;
class MediaVideoStoryMissing extends BadRequest {
    id = 'MEDIA_VIDEO_STORY_MISSING';
    message = '';
}
exports.MediaVideoStoryMissing = MediaVideoStoryMissing;
class MegagroupGeoRequired extends BadRequest {
    id = 'MEGAGROUP_GEO_REQUIRED';
    message = 'This method can only be invoked on a geogroup.';
}
exports.MegagroupGeoRequired = MegagroupGeoRequired;
class MegagroupIdInvalid extends BadRequest {
    id = 'MEGAGROUP_ID_INVALID';
    message = 'Invalid supergroup ID.';
}
exports.MegagroupIdInvalid = MegagroupIdInvalid;
class MegagroupPrehistoryHidden extends BadRequest {
    id = 'MEGAGROUP_PREHISTORY_HIDDEN';
    message = "Group with hidden history for new members can't be set as discussion groups.";
}
exports.MegagroupPrehistoryHidden = MegagroupPrehistoryHidden;
class MegagroupRequired extends BadRequest {
    id = 'MEGAGROUP_REQUIRED';
    message = 'You can only use this method on a supergroup.';
}
exports.MegagroupRequired = MegagroupRequired;
class MessageEditTimeExpired extends BadRequest {
    id = 'MESSAGE_EDIT_TIME_EXPIRED';
    message = "You can't edit this message anymore, too much time has passed since its creation.";
}
exports.MessageEditTimeExpired = MessageEditTimeExpired;
class MessageEmpty extends BadRequest {
    id = 'MESSAGE_EMPTY';
    message = 'The provided message is empty.';
}
exports.MessageEmpty = MessageEmpty;
class MessageIdsEmpty extends BadRequest {
    id = 'MESSAGE_IDS_EMPTY';
    message = 'No message ids were provided.';
}
exports.MessageIdsEmpty = MessageIdsEmpty;
class MessageIdInvalid extends BadRequest {
    id = 'MESSAGE_ID_INVALID';
    message = 'The provided message id is invalid.';
}
exports.MessageIdInvalid = MessageIdInvalid;
class MessageNotModified extends BadRequest {
    id = 'MESSAGE_NOT_MODIFIED';
    message = "The provided message data is identical to the previous message data, the message wasn't modified.";
}
exports.MessageNotModified = MessageNotModified;
class MessagePollClosed extends BadRequest {
    id = 'MESSAGE_POLL_CLOSED';
    message = 'Poll closed.';
}
exports.MessagePollClosed = MessagePollClosed;
class MessageTooLong extends BadRequest {
    id = 'MESSAGE_TOO_LONG';
    message = 'The provided message is too long.';
}
exports.MessageTooLong = MessageTooLong;
class MethodInvalid extends BadRequest {
    id = 'METHOD_INVALID';
    message = 'The specified method is invalid.';
}
exports.MethodInvalid = MethodInvalid;
class MinDateInvalid extends BadRequest {
    id = 'MIN_DATE_INVALID';
    message = 'The specified minimum date is invalid.';
}
exports.MinDateInvalid = MinDateInvalid;
class MsgIdInvalid extends BadRequest {
    id = 'MSG_ID_INVALID';
    message = 'Invalid message ID provided.';
}
exports.MsgIdInvalid = MsgIdInvalid;
class MsgTooOld extends BadRequest {
    id = 'MSG_TOO_OLD';
    message = '[`chat_read_mark_expire_period` seconds](https://core.telegram.org/api/config#chat-read-mark-expire-period) have passed since the message was sent, read receipts were deleted.';
}
exports.MsgTooOld = MsgTooOld;
class MsgWaitFailed extends BadRequest {
    id = 'MSG_WAIT_FAILED';
    message = 'A waiting call returned an error.';
}
exports.MsgWaitFailed = MsgWaitFailed;
class MultiMediaTooLong extends BadRequest {
    id = 'MULTI_MEDIA_TOO_LONG';
    message = 'Too many media files for album.';
}
exports.MultiMediaTooLong = MultiMediaTooLong;
class NewSaltInvalid extends BadRequest {
    id = 'NEW_SALT_INVALID';
    message = 'The new salt is invalid.';
}
exports.NewSaltInvalid = NewSaltInvalid;
class NewSettingsEmpty extends BadRequest {
    id = 'NEW_SETTINGS_EMPTY';
    message = 'No password is set on the current account, and no new password was specified in `new_settings`.';
}
exports.NewSettingsEmpty = NewSettingsEmpty;
class NewSettingsInvalid extends BadRequest {
    id = 'NEW_SETTINGS_INVALID';
    message = 'The new password settings are invalid.';
}
exports.NewSettingsInvalid = NewSettingsInvalid;
class NextOffsetInvalid extends BadRequest {
    id = 'NEXT_OFFSET_INVALID';
    message = 'The specified offset is longer than 64 bytes.';
}
exports.NextOffsetInvalid = NextOffsetInvalid;
class OffsetInvalid extends BadRequest {
    id = 'OFFSET_INVALID';
    message = 'The provided offset is invalid.';
}
exports.OffsetInvalid = OffsetInvalid;
class OffsetPeerIdInvalid extends BadRequest {
    id = 'OFFSET_PEER_ID_INVALID';
    message = 'The provided offset peer is invalid.';
}
exports.OffsetPeerIdInvalid = OffsetPeerIdInvalid;
class OptionsTooMuch extends BadRequest {
    id = 'OPTIONS_TOO_MUCH';
    message = 'Too many options provided.';
}
exports.OptionsTooMuch = OptionsTooMuch;
class OptionInvalid extends BadRequest {
    id = 'OPTION_INVALID';
    message = 'Invalid option selected.';
}
exports.OptionInvalid = OptionInvalid;
class OrderInvalid extends BadRequest {
    id = 'ORDER_INVALID';
    message = 'The specified username order is invalid.';
}
exports.OrderInvalid = OrderInvalid;
class PackShortNameInvalid extends BadRequest {
    id = 'PACK_SHORT_NAME_INVALID';
    message = 'Short pack name invalid.';
}
exports.PackShortNameInvalid = PackShortNameInvalid;
class PackShortNameOccupied extends BadRequest {
    id = 'PACK_SHORT_NAME_OCCUPIED';
    message = 'A stickerpack with this name already exists.';
}
exports.PackShortNameOccupied = PackShortNameOccupied;
class PackTitleInvalid extends BadRequest {
    id = 'PACK_TITLE_INVALID';
    message = 'The stickerpack title is invalid.';
}
exports.PackTitleInvalid = PackTitleInvalid;
class ParticipantsTooFew extends BadRequest {
    id = 'PARTICIPANTS_TOO_FEW';
    message = 'Not enough participants.';
}
exports.ParticipantsTooFew = ParticipantsTooFew;
class ParticipantIdInvalid extends BadRequest {
    id = 'PARTICIPANT_ID_INVALID';
    message = 'The specified participant ID is invalid.';
}
exports.ParticipantIdInvalid = ParticipantIdInvalid;
class ParticipantJoinMissing extends BadRequest {
    id = 'PARTICIPANT_JOIN_MISSING';
    message = "Trying to enable a presentation, when the user hasn't joined the Video Chat with [phone.joinGroupCall](https://core.telegram.org/method/phone.joinGroupCall).";
}
exports.ParticipantJoinMissing = ParticipantJoinMissing;
class ParticipantVersionOutdated extends BadRequest {
    id = 'PARTICIPANT_VERSION_OUTDATED';
    message = 'The other participant does not use an up to date telegram client with support for calls.';
}
exports.ParticipantVersionOutdated = ParticipantVersionOutdated;
class PasswordEmpty extends BadRequest {
    id = 'PASSWORD_EMPTY';
    message = 'The provided password is empty.';
}
exports.PasswordEmpty = PasswordEmpty;
class PasswordHashInvalid extends BadRequest {
    id = 'PASSWORD_HASH_INVALID';
    message = 'The provided password hash is invalid.';
}
exports.PasswordHashInvalid = PasswordHashInvalid;
class PasswordMissing extends BadRequest {
    id = 'PASSWORD_MISSING';
    message = 'You must enable 2FA in order to transfer ownership of a channel.';
}
exports.PasswordMissing = PasswordMissing;
class PasswordRecoveryExpired extends BadRequest {
    id = 'PASSWORD_RECOVERY_EXPIRED';
    message = 'The recovery code has expired.';
}
exports.PasswordRecoveryExpired = PasswordRecoveryExpired;
class PasswordRecoveryNa extends BadRequest {
    id = 'PASSWORD_RECOVERY_NA';
    message = "No email was set, can't recover password via email.";
}
exports.PasswordRecoveryNa = PasswordRecoveryNa;
class PasswordRequired extends BadRequest {
    id = 'PASSWORD_REQUIRED';
    message = 'A [2FA password](https://core.telegram.org/api/srp) must be configured to use Telegram Passport.';
}
exports.PasswordRequired = PasswordRequired;
class PasswordTooFresh extends BadRequest {
    id = 'PASSWORD_TOO_FRESH_X';
    message = 'The password was modified less than 24 hours ago, try again in {value} seconds.';
}
exports.PasswordTooFresh = PasswordTooFresh;
class PaymentProviderInvalid extends BadRequest {
    id = 'PAYMENT_PROVIDER_INVALID';
    message = 'The specified payment provider is invalid.';
}
exports.PaymentProviderInvalid = PaymentProviderInvalid;
class PeersListEmpty extends BadRequest {
    id = 'PEERS_LIST_EMPTY';
    message = 'The specified list of peers is empty.';
}
exports.PeersListEmpty = PeersListEmpty;
class PeerFlood extends BadRequest {
    id = 'PEER_FLOOD';
    message = "The method can't be used because your account is currently limited";
}
exports.PeerFlood = PeerFlood;
class PeerHistoryEmpty extends BadRequest {
    id = 'PEER_HISTORY_EMPTY';
    message = "You can't pin an empty chat with a user.";
}
exports.PeerHistoryEmpty = PeerHistoryEmpty;
class PeerIdInvalid extends BadRequest {
    id = 'PEER_ID_INVALID';
    message = 'The provided peer id is invalid.';
}
exports.PeerIdInvalid = PeerIdInvalid;
class PeerIdNotSupported extends BadRequest {
    id = 'PEER_ID_NOT_SUPPORTED';
    message = 'The provided peer ID is not supported.';
}
exports.PeerIdNotSupported = PeerIdNotSupported;
class PersistentTimestampEmpty extends BadRequest {
    id = 'PERSISTENT_TIMESTAMP_EMPTY';
    message = 'Persistent timestamp empty.';
}
exports.PersistentTimestampEmpty = PersistentTimestampEmpty;
class PersistentTimestampInvalid extends BadRequest {
    id = 'PERSISTENT_TIMESTAMP_INVALID';
    message = 'Persistent timestamp invalid.';
}
exports.PersistentTimestampInvalid = PersistentTimestampInvalid;
class PhoneCodeEmpty extends BadRequest {
    id = 'PHONE_CODE_EMPTY';
    message = 'phone_code is missing.';
}
exports.PhoneCodeEmpty = PhoneCodeEmpty;
class PhoneCodeExpired extends BadRequest {
    id = 'PHONE_CODE_EXPIRED';
    message = 'The phone code you provided has expired.';
}
exports.PhoneCodeExpired = PhoneCodeExpired;
class PhoneCodeHashEmpty extends BadRequest {
    id = 'PHONE_CODE_HASH_EMPTY';
    message = 'phone_code_hash is missing.';
}
exports.PhoneCodeHashEmpty = PhoneCodeHashEmpty;
class PhoneCodeInvalid extends BadRequest {
    id = 'PHONE_CODE_INVALID';
    message = 'The provided phone code is invalid.';
}
exports.PhoneCodeInvalid = PhoneCodeInvalid;
class PhoneHashExpired extends BadRequest {
    id = 'PHONE_HASH_EXPIRED';
    message = 'An invalid or expired `phone_code_hash` was provided.';
}
exports.PhoneHashExpired = PhoneHashExpired;
class PhoneNotOccupied extends BadRequest {
    id = 'PHONE_NOT_OCCUPIED';
    message = 'No user is associated to the specified phone number.';
}
exports.PhoneNotOccupied = PhoneNotOccupied;
class PhoneNumberAppSignupForbidden extends BadRequest {
    id = 'PHONE_NUMBER_APP_SIGNUP_FORBIDDEN';
    message = "You can't sign up using this app.";
}
exports.PhoneNumberAppSignupForbidden = PhoneNumberAppSignupForbidden;
class PhoneNumberBanned extends BadRequest {
    id = 'PHONE_NUMBER_BANNED';
    message = 'The provided phone number is banned from telegram.';
}
exports.PhoneNumberBanned = PhoneNumberBanned;
class PhoneNumberFlood extends BadRequest {
    id = 'PHONE_NUMBER_FLOOD';
    message = 'You asked for the code too many times.';
}
exports.PhoneNumberFlood = PhoneNumberFlood;
class PhoneNumberInvalid extends BadRequest {
    id = 'PHONE_NUMBER_INVALID';
    message = 'The phone number is invalid.';
}
exports.PhoneNumberInvalid = PhoneNumberInvalid;
class PhoneNumberOccupied extends BadRequest {
    id = 'PHONE_NUMBER_OCCUPIED';
    message = 'The phone number is already in use.';
}
exports.PhoneNumberOccupied = PhoneNumberOccupied;
class PhoneNumberUnoccupied extends BadRequest {
    id = 'PHONE_NUMBER_UNOCCUPIED';
    message = 'The phone number is not yet being used.';
}
exports.PhoneNumberUnoccupied = PhoneNumberUnoccupied;
class PhonePasswordProtected extends BadRequest {
    id = 'PHONE_PASSWORD_PROTECTED';
    message = 'This phone is password protected.';
}
exports.PhonePasswordProtected = PhonePasswordProtected;
class PhotoContentTypeInvalid extends BadRequest {
    id = 'PHOTO_CONTENT_TYPE_INVALID';
    message = 'Photo mime-type invalid.';
}
exports.PhotoContentTypeInvalid = PhotoContentTypeInvalid;
class PhotoContentUrlEmpty extends BadRequest {
    id = 'PHOTO_CONTENT_URL_EMPTY';
    message = 'Photo URL invalid.';
}
exports.PhotoContentUrlEmpty = PhotoContentUrlEmpty;
class PhotoCropFileMissing extends BadRequest {
    id = 'PHOTO_CROP_FILE_MISSING';
    message = 'Photo crop file missing.';
}
exports.PhotoCropFileMissing = PhotoCropFileMissing;
class PhotoCropSizeSmall extends BadRequest {
    id = 'PHOTO_CROP_SIZE_SMALL';
    message = 'Photo is too small.';
}
exports.PhotoCropSizeSmall = PhotoCropSizeSmall;
class PhotoExtInvalid extends BadRequest {
    id = 'PHOTO_EXT_INVALID';
    message = 'The extension of the photo is invalid.';
}
exports.PhotoExtInvalid = PhotoExtInvalid;
class PhotoFileMissing extends BadRequest {
    id = 'PHOTO_FILE_MISSING';
    message = 'Profile photo file missing.';
}
exports.PhotoFileMissing = PhotoFileMissing;
class PhotoIdInvalid extends BadRequest {
    id = 'PHOTO_ID_INVALID';
    message = 'Photo ID invalid.';
}
exports.PhotoIdInvalid = PhotoIdInvalid;
class PhotoInvalid extends BadRequest {
    id = 'PHOTO_INVALID';
    message = 'Photo invalid.';
}
exports.PhotoInvalid = PhotoInvalid;
class PhotoInvalidDimensions extends BadRequest {
    id = 'PHOTO_INVALID_DIMENSIONS';
    message = 'The photo dimensions are invalid.';
}
exports.PhotoInvalidDimensions = PhotoInvalidDimensions;
class PhotoSaveFileInvalid extends BadRequest {
    id = 'PHOTO_SAVE_FILE_INVALID';
    message = 'Internal issues, try again later.';
}
exports.PhotoSaveFileInvalid = PhotoSaveFileInvalid;
class PhotoThumbUrlEmpty extends BadRequest {
    id = 'PHOTO_THUMB_URL_EMPTY';
    message = 'Photo thumbnail URL is empty.';
}
exports.PhotoThumbUrlEmpty = PhotoThumbUrlEmpty;
class PhotoThumbUrlInvalid extends BadRequest {
    id = 'PHOTO_THUMB_URL_INVALID';
    message = 'The photo thumb URL is invalid';
}
exports.PhotoThumbUrlInvalid = PhotoThumbUrlInvalid;
class PinnedDialogsTooMuch extends BadRequest {
    id = 'PINNED_DIALOGS_TOO_MUCH';
    message = 'Too many pinned dialogs.';
}
exports.PinnedDialogsTooMuch = PinnedDialogsTooMuch;
class PinRestricted extends BadRequest {
    id = 'PIN_RESTRICTED';
    message = "You can't pin messages.";
}
exports.PinRestricted = PinRestricted;
class PollAnswersInvalid extends BadRequest {
    id = 'POLL_ANSWERS_INVALID';
    message = 'Invalid poll answers were provided.';
}
exports.PollAnswersInvalid = PollAnswersInvalid;
class PollAnswerInvalid extends BadRequest {
    id = 'POLL_ANSWER_INVALID';
    message = 'One of the poll answers is not acceptable.';
}
exports.PollAnswerInvalid = PollAnswerInvalid;
class PollOptionDuplicate extends BadRequest {
    id = 'POLL_OPTION_DUPLICATE';
    message = 'Duplicate poll options provided.';
}
exports.PollOptionDuplicate = PollOptionDuplicate;
class PollOptionInvalid extends BadRequest {
    id = 'POLL_OPTION_INVALID';
    message = 'Invalid poll option provided.';
}
exports.PollOptionInvalid = PollOptionInvalid;
class PollQuestionInvalid extends BadRequest {
    id = 'POLL_QUESTION_INVALID';
    message = 'One of the poll questions is not acceptable.';
}
exports.PollQuestionInvalid = PollQuestionInvalid;
class PollUnsupported extends BadRequest {
    id = 'POLL_UNSUPPORTED';
    message = 'This layer does not support polls in the invoked method';
}
exports.PollUnsupported = PollUnsupported;
class PollVoteRequired extends BadRequest {
    id = 'POLL_VOTE_REQUIRED';
    message = 'Cast a vote in the poll before calling this method';
}
exports.PollVoteRequired = PollVoteRequired;
class PremiumAccountRequired extends BadRequest {
    id = 'PREMIUM_ACCOUNT_REQUIRED';
    message = 'A premium account is required to execute this action.';
}
exports.PremiumAccountRequired = PremiumAccountRequired;
class PrivacyKeyInvalid extends BadRequest {
    id = 'PRIVACY_KEY_INVALID';
    message = 'The privacy key is invalid.';
}
exports.PrivacyKeyInvalid = PrivacyKeyInvalid;
class PrivacyTooLong extends BadRequest {
    id = 'PRIVACY_TOO_LONG';
    message = 'Too many privacy rules were specified, the current limit is 1000.';
}
exports.PrivacyTooLong = PrivacyTooLong;
class PrivacyValueInvalid extends BadRequest {
    id = 'PRIVACY_VALUE_INVALID';
    message = 'The specified privacy rule combination is invalid.';
}
exports.PrivacyValueInvalid = PrivacyValueInvalid;
class PublicKeyRequired extends BadRequest {
    id = 'PUBLIC_KEY_REQUIRED';
    message = 'A public key is required.';
}
exports.PublicKeyRequired = PublicKeyRequired;
class QueryIdEmpty extends BadRequest {
    id = 'QUERY_ID_EMPTY';
    message = 'The query ID is empty.';
}
exports.QueryIdEmpty = QueryIdEmpty;
class QueryIdInvalid extends BadRequest {
    id = 'QUERY_ID_INVALID';
    message = 'The query ID is invalid.';
}
exports.QueryIdInvalid = QueryIdInvalid;
class QueryTooShort extends BadRequest {
    id = 'QUERY_TOO_SHORT';
    message = 'The query string is too short.';
}
exports.QueryTooShort = QueryTooShort;
class QuizAnswerMissing extends BadRequest {
    id = 'QUIZ_ANSWER_MISSING';
    message = 'You can forward a quiz while hiding the original author only after choosing an option in the quiz.';
}
exports.QuizAnswerMissing = QuizAnswerMissing;
class QuizCorrectAnswersEmpty extends BadRequest {
    id = 'QUIZ_CORRECT_ANSWERS_EMPTY';
    message = 'No correct quiz answer was specified.';
}
exports.QuizCorrectAnswersEmpty = QuizCorrectAnswersEmpty;
class QuizCorrectAnswersTooMuch extends BadRequest {
    id = 'QUIZ_CORRECT_ANSWERS_TOO_MUCH';
    message = 'You specified too many correct answers in a quiz, quizzes can only have one right answer!';
}
exports.QuizCorrectAnswersTooMuch = QuizCorrectAnswersTooMuch;
class QuizCorrectAnswerInvalid extends BadRequest {
    id = 'QUIZ_CORRECT_ANSWER_INVALID';
    message = 'An invalid value was provided to the correct_answers field.';
}
exports.QuizCorrectAnswerInvalid = QuizCorrectAnswerInvalid;
class QuizMultipleInvalid extends BadRequest {
    id = 'QUIZ_MULTIPLE_INVALID';
    message = "Quizzes can't have the multiple_choice flag set!";
}
exports.QuizMultipleInvalid = QuizMultipleInvalid;
class RandomIdEmpty extends BadRequest {
    id = 'RANDOM_ID_EMPTY';
    message = 'Random ID empty.';
}
exports.RandomIdEmpty = RandomIdEmpty;
class RandomIdInvalid extends BadRequest {
    id = 'RANDOM_ID_INVALID';
    message = 'A provided random ID is invalid.';
}
exports.RandomIdInvalid = RandomIdInvalid;
class RandomLengthInvalid extends BadRequest {
    id = 'RANDOM_LENGTH_INVALID';
    message = 'Random length invalid.';
}
exports.RandomLengthInvalid = RandomLengthInvalid;
class RangesInvalid extends BadRequest {
    id = 'RANGES_INVALID';
    message = 'Invalid range provided.';
}
exports.RangesInvalid = RangesInvalid;
class ReactionsTooMany extends BadRequest {
    id = 'REACTIONS_TOO_MANY';
    message = "The message already has exactly `reactions_uniq_max` reaction emojis, you can't react with a new emoji, see [the docs for more info &raquo;](https://core.telegram.org/api/config#client-configuration).";
}
exports.ReactionsTooMany = ReactionsTooMany;
class ReactionEmpty extends BadRequest {
    id = 'REACTION_EMPTY';
    message = 'Empty reaction provided.';
}
exports.ReactionEmpty = ReactionEmpty;
class ReactionInvalid extends BadRequest {
    id = 'REACTION_INVALID';
    message = 'The specified reaction is invalid.';
}
exports.ReactionInvalid = ReactionInvalid;
class ReflectorNotAvailable extends BadRequest {
    id = 'REFLECTOR_NOT_AVAILABLE';
    message = 'The call reflector is not available';
}
exports.ReflectorNotAvailable = ReflectorNotAvailable;
class ReplyMarkupBuyEmpty extends BadRequest {
    id = 'REPLY_MARKUP_BUY_EMPTY';
    message = 'Reply markup for buy button empty.';
}
exports.ReplyMarkupBuyEmpty = ReplyMarkupBuyEmpty;
class ReplyMarkupGameEmpty extends BadRequest {
    id = 'REPLY_MARKUP_GAME_EMPTY';
    message = 'The provided reply markup for the game is empty';
}
exports.ReplyMarkupGameEmpty = ReplyMarkupGameEmpty;
class ReplyMarkupInvalid extends BadRequest {
    id = 'REPLY_MARKUP_INVALID';
    message = 'The provided reply markup is invalid.';
}
exports.ReplyMarkupInvalid = ReplyMarkupInvalid;
class ReplyMarkupTooLong extends BadRequest {
    id = 'REPLY_MARKUP_TOO_LONG';
    message = 'The specified reply_markup is too long.';
}
exports.ReplyMarkupTooLong = ReplyMarkupTooLong;
class ReplyMessageIdInvalid extends BadRequest {
    id = 'REPLY_MESSAGE_ID_INVALID';
    message = 'The specified reply-to message ID is invalid.';
}
exports.ReplyMessageIdInvalid = ReplyMessageIdInvalid;
class ReplyToInvalid extends BadRequest {
    id = 'REPLY_TO_INVALID';
    message = 'The specified `reply_to` field is invalid.';
}
exports.ReplyToInvalid = ReplyToInvalid;
class ReplyToUserInvalid extends BadRequest {
    id = 'REPLY_TO_USER_INVALID';
    message = 'The replied-to user is invalid.';
}
exports.ReplyToUserInvalid = ReplyToUserInvalid;
class ResetRequestMissing extends BadRequest {
    id = 'RESET_REQUEST_MISSING';
    message = 'No password reset is in progress.';
}
exports.ResetRequestMissing = ResetRequestMissing;
class ResultsTooMuch extends BadRequest {
    id = 'RESULTS_TOO_MUCH';
    message = 'Too many results were provided.';
}
exports.ResultsTooMuch = ResultsTooMuch;
class ResultIdDuplicate extends BadRequest {
    id = 'RESULT_ID_DUPLICATE';
    message = 'You provided a duplicate result ID.';
}
exports.ResultIdDuplicate = ResultIdDuplicate;
class ResultIdEmpty extends BadRequest {
    id = 'RESULT_ID_EMPTY';
    message = 'Result ID empty.';
}
exports.ResultIdEmpty = ResultIdEmpty;
class ResultIdInvalid extends BadRequest {
    id = 'RESULT_ID_INVALID';
    message = 'One of the specified result IDs is invalid.';
}
exports.ResultIdInvalid = ResultIdInvalid;
class ResultTypeInvalid extends BadRequest {
    id = 'RESULT_TYPE_INVALID';
    message = 'Result type invalid.';
}
exports.ResultTypeInvalid = ResultTypeInvalid;
class RevoteNotAllowed extends BadRequest {
    id = 'REVOTE_NOT_ALLOWED';
    message = 'You cannot change your vote.';
}
exports.RevoteNotAllowed = RevoteNotAllowed;
class RightsNotModified extends BadRequest {
    id = 'RIGHTS_NOT_MODIFIED';
    message = 'The new admin rights are equal to the old rights, no change was made.';
}
exports.RightsNotModified = RightsNotModified;
class RsaDecryptFailed extends BadRequest {
    id = 'RSA_DECRYPT_FAILED';
    message = 'Internal RSA decryption failed.';
}
exports.RsaDecryptFailed = RsaDecryptFailed;
class ScheduleBotNotAllowed extends BadRequest {
    id = 'SCHEDULE_BOT_NOT_ALLOWED';
    message = 'Bots cannot schedule messages.';
}
exports.ScheduleBotNotAllowed = ScheduleBotNotAllowed;
class ScheduleDateInvalid extends BadRequest {
    id = 'SCHEDULE_DATE_INVALID';
    message = 'Invalid schedule date provided.';
}
exports.ScheduleDateInvalid = ScheduleDateInvalid;
class ScheduleDateTooLate extends BadRequest {
    id = 'SCHEDULE_DATE_TOO_LATE';
    message = "You can't schedule a message this far in the future.";
}
exports.ScheduleDateTooLate = ScheduleDateTooLate;
class ScheduleStatusPrivate extends BadRequest {
    id = 'SCHEDULE_STATUS_PRIVATE';
    message = "Can't schedule until user is online, if the user's last seen timestamp is hidden by their privacy settings.";
}
exports.ScheduleStatusPrivate = ScheduleStatusPrivate;
class ScheduleTooMuch extends BadRequest {
    id = 'SCHEDULE_TOO_MUCH';
    message = 'There are too many scheduled messages.';
}
exports.ScheduleTooMuch = ScheduleTooMuch;
class ScoreInvalid extends BadRequest {
    id = 'SCORE_INVALID';
    message = 'The specified game score is invalid.';
}
exports.ScoreInvalid = ScoreInvalid;
class SearchQueryEmpty extends BadRequest {
    id = 'SEARCH_QUERY_EMPTY';
    message = 'The search query is empty.';
}
exports.SearchQueryEmpty = SearchQueryEmpty;
class SearchWithLinkNotSupported extends BadRequest {
    id = 'SEARCH_WITH_LINK_NOT_SUPPORTED';
    message = 'You cannot provide a search query and an invite link at the same time.';
}
exports.SearchWithLinkNotSupported = SearchWithLinkNotSupported;
class SecondsInvalid extends BadRequest {
    id = 'SECONDS_INVALID';
    message = 'Invalid duration provided.';
}
exports.SecondsInvalid = SecondsInvalid;
class SendAsPeerInvalid extends BadRequest {
    id = 'SEND_AS_PEER_INVALID';
    message = "You can't send messages as the specified peer.";
}
exports.SendAsPeerInvalid = SendAsPeerInvalid;
class SendMessageMediaInvalid extends BadRequest {
    id = 'SEND_MESSAGE_MEDIA_INVALID';
    message = 'Invalid media provided.';
}
exports.SendMessageMediaInvalid = SendMessageMediaInvalid;
class SendMessageTypeInvalid extends BadRequest {
    id = 'SEND_MESSAGE_TYPE_INVALID';
    message = 'The message type is invalid.';
}
exports.SendMessageTypeInvalid = SendMessageTypeInvalid;
class SessionTooFresh extends BadRequest {
    id = 'SESSION_TOO_FRESH_X';
    message = 'This session was created less than 24 hours ago, try again in {value} seconds.';
}
exports.SessionTooFresh = SessionTooFresh;
class SettingsInvalid extends BadRequest {
    id = 'SETTINGS_INVALID';
    message = 'Invalid settings were provided.';
}
exports.SettingsInvalid = SettingsInvalid;
class Sha256HashInvalid extends BadRequest {
    id = 'SHA256_HASH_INVALID';
    message = 'The provided SHA256 hash is invalid.';
}
exports.Sha256HashInvalid = Sha256HashInvalid;
class ShortnameOccupyFailed extends BadRequest {
    id = 'SHORTNAME_OCCUPY_FAILED';
    message = 'An error occurred when trying to register the short-name used for the sticker pack. Try a different name';
}
exports.ShortnameOccupyFailed = ShortnameOccupyFailed;
class ShortNameInvalid extends BadRequest {
    id = 'SHORT_NAME_INVALID';
    message = 'The specified short name is invalid.';
}
exports.ShortNameInvalid = ShortNameInvalid;
class ShortNameOccupied extends BadRequest {
    id = 'SHORT_NAME_OCCUPIED';
    message = 'The specified short name is already in use.';
}
exports.ShortNameOccupied = ShortNameOccupied;
class SlotsEmpty extends BadRequest {
    id = 'SLOTS_EMPTY';
    message = 'The specified slot list is empty.';
}
exports.SlotsEmpty = SlotsEmpty;
class SlowmodeMultiMsgsDisabled extends BadRequest {
    id = 'SLOWMODE_MULTI_MSGS_DISABLED';
    message = 'Slowmode is enabled, you cannot forward multiple messages to this group.';
}
exports.SlowmodeMultiMsgsDisabled = SlowmodeMultiMsgsDisabled;
class SlugInvalid extends BadRequest {
    id = 'SLUG_INVALID';
    message = 'The specified invoice slug is invalid.';
}
exports.SlugInvalid = SlugInvalid;
class SmsCodeCreateFailed extends BadRequest {
    id = 'SMS_CODE_CREATE_FAILED';
    message = 'An error occurred while creating the SMS code.';
}
exports.SmsCodeCreateFailed = SmsCodeCreateFailed;
class SrpIdInvalid extends BadRequest {
    id = 'SRP_ID_INVALID';
    message = 'Invalid SRP ID provided.';
}
exports.SrpIdInvalid = SrpIdInvalid;
class SrpPasswordChanged extends BadRequest {
    id = 'SRP_PASSWORD_CHANGED';
    message = 'Password has changed.';
}
exports.SrpPasswordChanged = SrpPasswordChanged;
class StartParamEmpty extends BadRequest {
    id = 'START_PARAM_EMPTY';
    message = 'The start parameter is empty.';
}
exports.StartParamEmpty = StartParamEmpty;
class StartParamInvalid extends BadRequest {
    id = 'START_PARAM_INVALID';
    message = 'Start parameter invalid.';
}
exports.StartParamInvalid = StartParamInvalid;
class StartParamTooLong extends BadRequest {
    id = 'START_PARAM_TOO_LONG';
    message = 'Start parameter is too long.';
}
exports.StartParamTooLong = StartParamTooLong;
class StickerpackStickersTooMuch extends BadRequest {
    id = 'STICKERPACK_STICKERS_TOO_MUCH';
    message = "There are too many stickers in this stickerpack, you can't add any more.";
}
exports.StickerpackStickersTooMuch = StickerpackStickersTooMuch;
class StickersetInvalid extends BadRequest {
    id = 'STICKERSET_INVALID';
    message = 'The provided sticker set is invalid.';
}
exports.StickersetInvalid = StickersetInvalid;
class StickersEmpty extends BadRequest {
    id = 'STICKERS_EMPTY';
    message = 'No sticker provided.';
}
exports.StickersEmpty = StickersEmpty;
class StickersTooMuch extends BadRequest {
    id = 'STICKERS_TOO_MUCH';
    message = "There are too many stickers in this stickerpack, you can't add any more.";
}
exports.StickersTooMuch = StickersTooMuch;
class StickerDocumentInvalid extends BadRequest {
    id = 'STICKER_DOCUMENT_INVALID';
    message = 'The specified sticker document is invalid.';
}
exports.StickerDocumentInvalid = StickerDocumentInvalid;
class StickerEmojiInvalid extends BadRequest {
    id = 'STICKER_EMOJI_INVALID';
    message = 'Sticker emoji invalid.';
}
exports.StickerEmojiInvalid = StickerEmojiInvalid;
class StickerFileInvalid extends BadRequest {
    id = 'STICKER_FILE_INVALID';
    message = 'Sticker file invalid.';
}
exports.StickerFileInvalid = StickerFileInvalid;
class StickerGifDimensions extends BadRequest {
    id = 'STICKER_GIF_DIMENSIONS';
    message = 'The specified video sticker has invalid dimensions.';
}
exports.StickerGifDimensions = StickerGifDimensions;
class StickerIdInvalid extends BadRequest {
    id = 'STICKER_ID_INVALID';
    message = 'The provided sticker ID is invalid.';
}
exports.StickerIdInvalid = StickerIdInvalid;
class StickerInvalid extends BadRequest {
    id = 'STICKER_INVALID';
    message = 'The provided sticker is invalid.';
}
exports.StickerInvalid = StickerInvalid;
class StickerMimeInvalid extends BadRequest {
    id = 'STICKER_MIME_INVALID';
    message = 'The specified sticker MIME type is invalid.';
}
exports.StickerMimeInvalid = StickerMimeInvalid;
class StickerPngDimensions extends BadRequest {
    id = 'STICKER_PNG_DIMENSIONS';
    message = 'Sticker png dimensions invalid.';
}
exports.StickerPngDimensions = StickerPngDimensions;
class StickerPngNopng extends BadRequest {
    id = 'STICKER_PNG_NOPNG';
    message = 'One of the specified stickers is not a valid PNG file.';
}
exports.StickerPngNopng = StickerPngNopng;
class StickerTgsNodoc extends BadRequest {
    id = 'STICKER_TGS_NODOC';
    message = 'You must send the animated sticker as a document.';
}
exports.StickerTgsNodoc = StickerTgsNodoc;
class StickerTgsNotgs extends BadRequest {
    id = 'STICKER_TGS_NOTGS';
    message = 'Invalid TGS sticker provided.';
}
exports.StickerTgsNotgs = StickerTgsNotgs;
class StickerThumbPngNopng extends BadRequest {
    id = 'STICKER_THUMB_PNG_NOPNG';
    message = 'Incorrect stickerset thumb file provided, PNG / WEBP expected.';
}
exports.StickerThumbPngNopng = StickerThumbPngNopng;
class StickerThumbTgsNotgs extends BadRequest {
    id = 'STICKER_THUMB_TGS_NOTGS';
    message = 'Incorrect stickerset TGS thumb file provided.';
}
exports.StickerThumbTgsNotgs = StickerThumbTgsNotgs;
class StickerVideoBig extends BadRequest {
    id = 'STICKER_VIDEO_BIG';
    message = 'The specified video sticker is too big.';
}
exports.StickerVideoBig = StickerVideoBig;
class StickerVideoNodoc extends BadRequest {
    id = 'STICKER_VIDEO_NODOC';
    message = 'You must send the video sticker as a document.';
}
exports.StickerVideoNodoc = StickerVideoNodoc;
class StickerVideoNowebm extends BadRequest {
    id = 'STICKER_VIDEO_NOWEBM';
    message = 'The specified video sticker is not in webm format.';
}
exports.StickerVideoNowebm = StickerVideoNowebm;
class StoriesNeverCreated extends BadRequest {
    id = 'STORIES_NEVER_CREATED';
    message = "This peer hasn't ever posted any stories.";
}
exports.StoriesNeverCreated = StoriesNeverCreated;
class StoriesTooMuch extends BadRequest {
    id = 'STORIES_TOO_MUCH';
    message = 'You have hit the maximum active stories limit as specified by the [`story_expiring_limit_*` client configuration parameters](https://core.telegram.org/api/config#story-expiring-limit-default): you should buy a [Premium](https://core.telegram.org/api/premium) subscription, delete an active story, or wait for the oldest story to expire.';
}
exports.StoriesTooMuch = StoriesTooMuch;
class StoryIdEmpty extends BadRequest {
    id = 'STORY_ID_EMPTY';
    message = 'You specified no story IDs.';
}
exports.StoryIdEmpty = StoryIdEmpty;
class StoryIdInvalid extends BadRequest {
    id = 'STORY_ID_INVALID';
    message = 'The specified story ID is invalid.';
}
exports.StoryIdInvalid = StoryIdInvalid;
class StoryNotModified extends BadRequest {
    id = 'STORY_NOT_MODIFIED';
    message = "The new story information you passed is equal to the previous story information, thus it wasn't modified.";
}
exports.StoryNotModified = StoryNotModified;
class StoryPeriodInvalid extends BadRequest {
    id = 'STORY_PERIOD_INVALID';
    message = 'The specified story period is invalid for this account.';
}
exports.StoryPeriodInvalid = StoryPeriodInvalid;
class StorySendFloodMonthly extends BadRequest {
    id = 'STORY_SEND_FLOOD_MONTHLY_X';
    message = "You've hit the monthly story limit as specified by the [`stories_sent_monthly_limit_*` client configuration parameters](https://core.telegram.org/api/config#stories-sent-monthly-limit-default): wait for the specified number of seconds before posting a new story.";
}
exports.StorySendFloodMonthly = StorySendFloodMonthly;
class StorySendFloodWeekly extends BadRequest {
    id = 'STORY_SEND_FLOOD_WEEKLY_X';
    message = "You've hit the weekly story limit as specified by the [`stories_sent_weekly_limit_*` client configuration parameters](https://core.telegram.org/api/config#stories-sent-weekly-limit-default): wait for the specified number of seconds before posting a new story.";
}
exports.StorySendFloodWeekly = StorySendFloodWeekly;
class SwitchPmTextEmpty extends BadRequest {
    id = 'SWITCH_PM_TEXT_EMPTY';
    message = 'The switch_pm.text field was empty.';
}
exports.SwitchPmTextEmpty = SwitchPmTextEmpty;
class TakeoutInvalid extends BadRequest {
    id = 'TAKEOUT_INVALID';
    message = 'The specified takeout ID is invalid.';
}
exports.TakeoutInvalid = TakeoutInvalid;
class TakeoutRequired extends BadRequest {
    id = 'TAKEOUT_REQUIRED';
    message = 'A [takeout](https://core.telegram.org/api/takeout) session needs to be initialized first, [see here &raquo; for more info](https://core.telegram.org/api/takeout).';
}
exports.TakeoutRequired = TakeoutRequired;
class TaskAlreadyExists extends BadRequest {
    id = 'TASK_ALREADY_EXISTS';
    message = 'An email reset was already requested.';
}
exports.TaskAlreadyExists = TaskAlreadyExists;
class TempAuthKeyAlreadyBound extends BadRequest {
    id = 'TEMP_AUTH_KEY_ALREADY_BOUND';
    message = 'The passed temporary key is already bound to another **perm_auth_key_id**.';
}
exports.TempAuthKeyAlreadyBound = TempAuthKeyAlreadyBound;
class TempAuthKeyEmpty extends BadRequest {
    id = 'TEMP_AUTH_KEY_EMPTY';
    message = 'No temporary auth key provided.';
}
exports.TempAuthKeyEmpty = TempAuthKeyEmpty;
class ThemeFileInvalid extends BadRequest {
    id = 'THEME_FILE_INVALID';
    message = 'Invalid theme file provided.';
}
exports.ThemeFileInvalid = ThemeFileInvalid;
class ThemeFormatInvalid extends BadRequest {
    id = 'THEME_FORMAT_INVALID';
    message = 'Invalid theme format provided.';
}
exports.ThemeFormatInvalid = ThemeFormatInvalid;
class ThemeInvalid extends BadRequest {
    id = 'THEME_INVALID';
    message = 'Invalid theme provided.';
}
exports.ThemeInvalid = ThemeInvalid;
class ThemeMimeInvalid extends BadRequest {
    id = 'THEME_MIME_INVALID';
    message = "The theme's MIME type is invalid.";
}
exports.ThemeMimeInvalid = ThemeMimeInvalid;
class ThemeTitleInvalid extends BadRequest {
    id = 'THEME_TITLE_INVALID';
    message = 'The specified theme title is invalid.';
}
exports.ThemeTitleInvalid = ThemeTitleInvalid;
class TitleInvalid extends BadRequest {
    id = 'TITLE_INVALID';
    message = 'The specified stickerpack title is invalid.';
}
exports.TitleInvalid = TitleInvalid;
class TmpPasswordDisabled extends BadRequest {
    id = 'TMP_PASSWORD_DISABLED';
    message = 'The temporary password is disabled.';
}
exports.TmpPasswordDisabled = TmpPasswordDisabled;
class TmpPasswordInvalid extends BadRequest {
    id = 'TMP_PASSWORD_INVALID';
    message = 'The temporary password is invalid';
}
exports.TmpPasswordInvalid = TmpPasswordInvalid;
class TokenEmpty extends BadRequest {
    id = 'TOKEN_EMPTY';
    message = 'The specified token is empty.';
}
exports.TokenEmpty = TokenEmpty;
class TokenInvalid extends BadRequest {
    id = 'TOKEN_INVALID';
    message = 'The provided token is invalid.';
}
exports.TokenInvalid = TokenInvalid;
class TokenTypeInvalid extends BadRequest {
    id = 'TOKEN_TYPE_INVALID';
    message = 'The specified token type is invalid.';
}
exports.TokenTypeInvalid = TokenTypeInvalid;
class TopicsEmpty extends BadRequest {
    id = 'TOPICS_EMPTY';
    message = 'You specified no topic IDs.';
}
exports.TopicsEmpty = TopicsEmpty;
class TopicClosed extends BadRequest {
    id = 'TOPIC_CLOSED';
    message = "This topic was closed, you can't send messages to it anymore.";
}
exports.TopicClosed = TopicClosed;
class TopicCloseSeparately extends BadRequest {
    id = 'TOPIC_CLOSE_SEPARATELY';
    message = 'The `close` flag cannot be provided together with any of the other flags.';
}
exports.TopicCloseSeparately = TopicCloseSeparately;
class TopicDeleted extends BadRequest {
    id = 'TOPIC_DELETED';
    message = 'The specified topic was deleted.';
}
exports.TopicDeleted = TopicDeleted;
class TopicHideSeparately extends BadRequest {
    id = 'TOPIC_HIDE_SEPARATELY';
    message = 'The `hide` flag cannot be provided together with any of the other flags.';
}
exports.TopicHideSeparately = TopicHideSeparately;
class TopicIdInvalid extends BadRequest {
    id = 'TOPIC_ID_INVALID';
    message = 'The specified topic ID is invalid.';
}
exports.TopicIdInvalid = TopicIdInvalid;
class TopicNotModified extends BadRequest {
    id = 'TOPIC_NOT_MODIFIED';
    message = 'The updated topic info is equal to the current topic info, nothing was changed.';
}
exports.TopicNotModified = TopicNotModified;
class TopicTitleEmpty extends BadRequest {
    id = 'TOPIC_TITLE_EMPTY';
    message = 'The specified topic title is empty.';
}
exports.TopicTitleEmpty = TopicTitleEmpty;
class ToLangInvalid extends BadRequest {
    id = 'TO_LANG_INVALID';
    message = 'The specified destination language is invalid.';
}
exports.ToLangInvalid = ToLangInvalid;
class TranscriptionFailed extends BadRequest {
    id = 'TRANSCRIPTION_FAILED';
    message = 'Audio transcription failed.';
}
exports.TranscriptionFailed = TranscriptionFailed;
class TtlDaysInvalid extends BadRequest {
    id = 'TTL_DAYS_INVALID';
    message = 'The provided TTL is invalid.';
}
exports.TtlDaysInvalid = TtlDaysInvalid;
class TtlMediaInvalid extends BadRequest {
    id = 'TTL_MEDIA_INVALID';
    message = 'Invalid media Time To Live was provided.';
}
exports.TtlMediaInvalid = TtlMediaInvalid;
class TtlPeriodInvalid extends BadRequest {
    id = 'TTL_PERIOD_INVALID';
    message = 'The specified TTL period is invalid.';
}
exports.TtlPeriodInvalid = TtlPeriodInvalid;
class TypesEmpty extends BadRequest {
    id = 'TYPES_EMPTY';
    message = 'No top peer type was provided.';
}
exports.TypesEmpty = TypesEmpty;
class TypeConstructorInvalid extends BadRequest {
    id = 'TYPE_CONSTRUCTOR_INVALID';
    message = 'The type constructor is invalid';
}
exports.TypeConstructorInvalid = TypeConstructorInvalid;
class UntilDateInvalid extends BadRequest {
    id = 'UNTIL_DATE_INVALID';
    message = 'Invalid until date provided.';
}
exports.UntilDateInvalid = UntilDateInvalid;
class UrlInvalid extends BadRequest {
    id = 'URL_INVALID';
    message = 'Invalid URL provided.';
}
exports.UrlInvalid = UrlInvalid;
class UsageLimitInvalid extends BadRequest {
    id = 'USAGE_LIMIT_INVALID';
    message = 'The specified usage limit is invalid.';
}
exports.UsageLimitInvalid = UsageLimitInvalid;
class UsernamesActiveTooMuch extends BadRequest {
    id = 'USERNAMES_ACTIVE_TOO_MUCH';
    message = 'The maximum number of active usernames was reached.';
}
exports.UsernamesActiveTooMuch = UsernamesActiveTooMuch;
class UsernameInvalid extends BadRequest {
    id = 'USERNAME_INVALID';
    message = 'The provided username is not valid.';
}
exports.UsernameInvalid = UsernameInvalid;
class UsernameNotModified extends BadRequest {
    id = 'USERNAME_NOT_MODIFIED';
    message = 'The username was not modified.';
}
exports.UsernameNotModified = UsernameNotModified;
class UsernameNotOccupied extends BadRequest {
    id = 'USERNAME_NOT_OCCUPIED';
    message = 'The provided username is not occupied.';
}
exports.UsernameNotOccupied = UsernameNotOccupied;
class UsernameOccupied extends BadRequest {
    id = 'USERNAME_OCCUPIED';
    message = 'The provided username is already occupied.';
}
exports.UsernameOccupied = UsernameOccupied;
class UsernamePurchaseAvailable extends BadRequest {
    id = 'USERNAME_PURCHASE_AVAILABLE';
    message = 'The specified username can be purchased on https://fragment.com.';
}
exports.UsernamePurchaseAvailable = UsernamePurchaseAvailable;
class UserpicUploadRequired extends BadRequest {
    id = 'USERPIC_UPLOAD_REQUIRED';
    message = 'You must have a profile picture to publish your geolocation.';
}
exports.UserpicUploadRequired = UserpicUploadRequired;
class UsersTooFew extends BadRequest {
    id = 'USERS_TOO_FEW';
    message = 'Not enough users (to create a chat, for example).';
}
exports.UsersTooFew = UsersTooFew;
class UsersTooMuch extends BadRequest {
    id = 'USERS_TOO_MUCH';
    message = 'The maximum number of users has been exceeded (to create a chat, for example).';
}
exports.UsersTooMuch = UsersTooMuch;
class UserAdminInvalid extends BadRequest {
    id = 'USER_ADMIN_INVALID';
    message = "You're not an admin.";
}
exports.UserAdminInvalid = UserAdminInvalid;
class UserAlreadyInvited extends BadRequest {
    id = 'USER_ALREADY_INVITED';
    message = 'You have already invited this user.';
}
exports.UserAlreadyInvited = UserAlreadyInvited;
class UserAlreadyParticipant extends BadRequest {
    id = 'USER_ALREADY_PARTICIPANT';
    message = 'The user is already in the group.';
}
exports.UserAlreadyParticipant = UserAlreadyParticipant;
class UserBannedInChannel extends BadRequest {
    id = 'USER_BANNED_IN_CHANNEL';
    message = "You're banned from sending messages in supergroups/channels.";
}
exports.UserBannedInChannel = UserBannedInChannel;
class UserBlocked extends BadRequest {
    id = 'USER_BLOCKED';
    message = 'User blocked.';
}
exports.UserBlocked = UserBlocked;
class UserBot extends BadRequest {
    id = 'USER_BOT';
    message = 'Bots can only be admins in channels.';
}
exports.UserBot = UserBot;
class UserBotInvalid extends BadRequest {
    id = 'USER_BOT_INVALID';
    message = 'User accounts must provide the `bot` method parameter when calling this method. If there is no such method parameter, this method can only be invoked by bot accounts.';
}
exports.UserBotInvalid = UserBotInvalid;
class UserBotRequired extends BadRequest {
    id = 'USER_BOT_REQUIRED';
    message = 'This method can only be called by a bot.';
}
exports.UserBotRequired = UserBotRequired;
class UserChannelsTooMuch extends BadRequest {
    id = 'USER_CHANNELS_TOO_MUCH';
    message = 'One of the users you tried to add is already in too many channels/supergroups.';
}
exports.UserChannelsTooMuch = UserChannelsTooMuch;
class UserCreator extends BadRequest {
    id = 'USER_CREATOR';
    message = "You can't leave this channel, because you're its creator.";
}
exports.UserCreator = UserCreator;
class UserIdInvalid extends BadRequest {
    id = 'USER_ID_INVALID';
    message = 'The provided user ID is invalid.';
}
exports.UserIdInvalid = UserIdInvalid;
class UserInvalid extends BadRequest {
    id = 'USER_INVALID';
    message = 'Invalid user provided.';
}
exports.UserInvalid = UserInvalid;
class UserIsBlocked extends BadRequest {
    id = 'USER_IS_BLOCKED';
    message = 'You were blocked by this user.';
}
exports.UserIsBlocked = UserIsBlocked;
class UserIsBot extends BadRequest {
    id = 'USER_IS_BOT';
    message = "Bots can't send messages to other bots.";
}
exports.UserIsBot = UserIsBot;
class UserKicked extends BadRequest {
    id = 'USER_KICKED';
    message = 'This user was kicked from this supergroup/channel.';
}
exports.UserKicked = UserKicked;
class UserNotMutualContact extends BadRequest {
    id = 'USER_NOT_MUTUAL_CONTACT';
    message = 'The provided user is not a mutual contact.';
}
exports.UserNotMutualContact = UserNotMutualContact;
class UserNotParticipant extends BadRequest {
    id = 'USER_NOT_PARTICIPANT';
    message = "You're not a member of this supergroup/channel.";
}
exports.UserNotParticipant = UserNotParticipant;
class UserPublicMissing extends BadRequest {
    id = 'USER_PUBLIC_MISSING';
    message = 'Cannot generate a link to stories posted by a peer without a username.';
}
exports.UserPublicMissing = UserPublicMissing;
class UserVolumeInvalid extends BadRequest {
    id = 'USER_VOLUME_INVALID';
    message = 'The specified user volume is invalid.';
}
exports.UserVolumeInvalid = UserVolumeInvalid;
class VenueIdInvalid extends BadRequest {
    id = 'VENUE_ID_INVALID';
    message = 'The specified venue ID is invalid.';
}
exports.VenueIdInvalid = VenueIdInvalid;
class VideoContentTypeInvalid extends BadRequest {
    id = 'VIDEO_CONTENT_TYPE_INVALID';
    message = "The video's content type is invalid.";
}
exports.VideoContentTypeInvalid = VideoContentTypeInvalid;
class VideoFileInvalid extends BadRequest {
    id = 'VIDEO_FILE_INVALID';
    message = 'The specified video file is invalid.';
}
exports.VideoFileInvalid = VideoFileInvalid;
class VideoTitleEmpty extends BadRequest {
    id = 'VIDEO_TITLE_EMPTY';
    message = 'The specified video title is empty.';
}
exports.VideoTitleEmpty = VideoTitleEmpty;
class VoiceMessagesForbidden extends BadRequest {
    id = 'VOICE_MESSAGES_FORBIDDEN';
    message = "This user's privacy settings forbid you from sending voice messages.";
}
exports.VoiceMessagesForbidden = VoiceMessagesForbidden;
class VolumeLocNotFound extends BadRequest {
    id = 'VOLUME_LOC_NOT_FOUND';
    message = "The volume location can't be found";
}
exports.VolumeLocNotFound = VolumeLocNotFound;
class WallpaperFileInvalid extends BadRequest {
    id = 'WALLPAPER_FILE_INVALID';
    message = 'The specified wallpaper file is invalid.';
}
exports.WallpaperFileInvalid = WallpaperFileInvalid;
class WallpaperInvalid extends BadRequest {
    id = 'WALLPAPER_INVALID';
    message = 'The specified wallpaper is invalid.';
}
exports.WallpaperInvalid = WallpaperInvalid;
class WallpaperMimeInvalid extends BadRequest {
    id = 'WALLPAPER_MIME_INVALID';
    message = 'The specified wallpaper MIME type is invalid.';
}
exports.WallpaperMimeInvalid = WallpaperMimeInvalid;
class WallpaperNotFound extends BadRequest {
    id = 'WALLPAPER_NOT_FOUND';
    message = 'The specified wallpaper could not be found.';
}
exports.WallpaperNotFound = WallpaperNotFound;
class WcConvertUrlInvalid extends BadRequest {
    id = 'WC_CONVERT_URL_INVALID';
    message = 'WC convert URL invalid.';
}
exports.WcConvertUrlInvalid = WcConvertUrlInvalid;
class WebdocumentInvalid extends BadRequest {
    id = 'WEBDOCUMENT_INVALID';
    message = 'Invalid webdocument URL provided.';
}
exports.WebdocumentInvalid = WebdocumentInvalid;
class WebdocumentMimeInvalid extends BadRequest {
    id = 'WEBDOCUMENT_MIME_INVALID';
    message = 'Invalid webdocument mime type provided.';
}
exports.WebdocumentMimeInvalid = WebdocumentMimeInvalid;
class WebdocumentSizeTooBig extends BadRequest {
    id = 'WEBDOCUMENT_SIZE_TOO_BIG';
    message = 'Webdocument is too big!';
}
exports.WebdocumentSizeTooBig = WebdocumentSizeTooBig;
class WebdocumentUrlEmpty extends BadRequest {
    id = 'WEBDOCUMENT_URL_EMPTY';
    message = 'The web document URL is empty';
}
exports.WebdocumentUrlEmpty = WebdocumentUrlEmpty;
class WebdocumentUrlInvalid extends BadRequest {
    id = 'WEBDOCUMENT_URL_INVALID';
    message = 'The specified webdocument URL is invalid.';
}
exports.WebdocumentUrlInvalid = WebdocumentUrlInvalid;
class WebpageCurlFailed extends BadRequest {
    id = 'WEBPAGE_CURL_FAILED';
    message = 'Failure while fetching the webpage with cURL.';
}
exports.WebpageCurlFailed = WebpageCurlFailed;
class WebpageMediaEmpty extends BadRequest {
    id = 'WEBPAGE_MEDIA_EMPTY';
    message = 'Webpage media empty.';
}
exports.WebpageMediaEmpty = WebpageMediaEmpty;
class WebpageNotFound extends BadRequest {
    id = 'WEBPAGE_NOT_FOUND';
    message = 'A preview for the specified webpage `url` could not be generated.';
}
exports.WebpageNotFound = WebpageNotFound;
class WebpageUrlInvalid extends BadRequest {
    id = 'WEBPAGE_URL_INVALID';
    message = 'The specified webpage `url` is invalid.';
}
exports.WebpageUrlInvalid = WebpageUrlInvalid;
class WebpushAuthInvalid extends BadRequest {
    id = 'WEBPUSH_AUTH_INVALID';
    message = 'The specified web push authentication secret is invalid.';
}
exports.WebpushAuthInvalid = WebpushAuthInvalid;
class WebpushKeyInvalid extends BadRequest {
    id = 'WEBPUSH_KEY_INVALID';
    message = 'The specified web push elliptic curve Diffie-Hellman public key is invalid.';
}
exports.WebpushKeyInvalid = WebpushKeyInvalid;
class WebpushTokenInvalid extends BadRequest {
    id = 'WEBPUSH_TOKEN_INVALID';
    message = 'The specified web push token is invalid.';
}
exports.WebpushTokenInvalid = WebpushTokenInvalid;
class YouBlockedUser extends BadRequest {
    id = 'YOU_BLOCKED_USER';
    message = 'You blocked this user.';
}
exports.YouBlockedUser = YouBlockedUser;
