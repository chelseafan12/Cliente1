"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CDNFileHashMismatch = exports.SecurityCheckMismatch = exports.SecurityError = exports.BadMsgNotification = exports.NotAFunctionClass = exports.TimeoutError = exports.UnknownError = exports.RPCError = exports.FileErrors = exports.SecretChatError = exports.WSError = exports.ClientError = exports.Exceptions = void 0;
exports.Exceptions = __importStar(require("./exceptions/index.js"));
exports.ClientError = __importStar(require("./Client.js"));
exports.WSError = __importStar(require("./WebSocket.js"));
exports.SecretChatError = __importStar(require("./SecretChat.js"));
exports.FileErrors = __importStar(require("./File.js"));
var RpcError_js_1 = require("./RpcError.js");
Object.defineProperty(exports, "RPCError", { enumerable: true, get: function () { return RpcError_js_1.RPCError; } });
Object.defineProperty(exports, "UnknownError", { enumerable: true, get: function () { return RpcError_js_1.UnknownError; } });
class TimeoutError extends Error {
    message;
    timeout;
    description;
    constructor(timeout) {
        super();
        this.message = `Running timeout after ${timeout} ms`;
        this.timeout = timeout;
        this.description = `The function is running too long, until it reaches the time limit that has been given.`;
    }
    [Symbol.for('nodejs.util.inspect.custom')]() {
        const toPrint = {
            _: this.constructor.name,
        };
        for (const key in this) {
            if (this.hasOwnProperty(key)) {
                const value = this[key];
                if (!key.startsWith('_')) {
                    toPrint[key] = value;
                }
            }
        }
        Object.setPrototypeOf(toPrint, {
            stack: this.stack,
        });
        return toPrint;
    }
    toJSON() {
        const toPrint = {
            _: this.constructor.name,
            stack: this.stack,
        };
        for (const key in this) {
            if (this.hasOwnProperty(key)) {
                const value = this[key];
                if (!key.startsWith('_')) {
                    toPrint[key] = typeof value === 'bigint' ? String(value) : value;
                }
            }
        }
        return toPrint;
    }
    toString() {
        return `[constructor of ${this.constructor.name}] ${JSON.stringify(this, null, 2)}`;
    }
}
exports.TimeoutError = TimeoutError;
class NotAFunctionClass extends Error {
    message = '{value} is not a function.';
    description = "The provided class {value} is not a function constructor, can't sending request with that class.";
    constructor(className) {
        super();
        this.message = this.message.replace('{value}', className);
        this.description = this.description.replace('{value}', className);
    }
    [Symbol.for('nodejs.util.inspect.custom')]() {
        const toPrint = {
            _: this.constructor.name,
        };
        for (const key in this) {
            if (this.hasOwnProperty(key)) {
                const value = this[key];
                if (!key.startsWith('_')) {
                    toPrint[key] = value;
                }
            }
        }
        Object.setPrototypeOf(toPrint, {
            stack: this.stack,
        });
        return toPrint;
    }
    toJSON() {
        const toPrint = {
            _: this.constructor.name,
            stack: this.stack,
        };
        for (const key in this) {
            if (this.hasOwnProperty(key)) {
                const value = this[key];
                if (!key.startsWith('_')) {
                    toPrint[key] = typeof value === 'bigint' ? String(value) : value;
                }
            }
        }
        return toPrint;
    }
    toString() {
        return `[constructor of ${this.constructor.name}] ${JSON.stringify(this, null, 2)}`;
    }
}
exports.NotAFunctionClass = NotAFunctionClass;
class BadMsgNotification extends Error {
    message;
    constructor(code) {
        const description = {
            16: 'The msg_id is too low, the client time has to be synchronized.',
            17: 'The msg_id is too high, the client time has to be synchronized.',
            18: 'Incorrect two lower order of the msg_id bits, the server expects the client message\nmsg_id to be divisible by 4.',
            19: 'The container msg_id is the same as the msg_id of a previously received message.',
            20: 'The message is too old, it cannot be verified by the server.',
            32: 'The msg_seqno is too low.',
            33: 'The msg_seqno is too high.',
            34: 'An even msg_seqno was expected, but an odd one was received.',
            35: 'An odd msg_seqno was expected, but an even one was received.',
            48: 'Incorrect server salt.',
            64: 'Invalid container.',
        };
        super(`[${code}] ${description[code] ?? 'Unknown Error'}`);
    }
    [Symbol.for('nodejs.util.inspect.custom')]() {
        const toPrint = {
            _: this.constructor.name,
        };
        for (const key in this) {
            if (this.hasOwnProperty(key)) {
                const value = this[key];
                if (!key.startsWith('_')) {
                    toPrint[key] = value;
                }
            }
        }
        Object.setPrototypeOf(toPrint, {
            stack: this.stack,
        });
        return toPrint;
    }
    toJSON() {
        const toPrint = {
            _: this.constructor.name,
            stack: this.stack,
        };
        for (const key in this) {
            if (this.hasOwnProperty(key)) {
                const value = this[key];
                if (!key.startsWith('_')) {
                    toPrint[key] = typeof value === 'bigint' ? String(value) : value;
                }
            }
        }
        return toPrint;
    }
    toString() {
        return `[constructor of ${this.constructor.name}] ${JSON.stringify(this, null, 2)}`;
    }
}
exports.BadMsgNotification = BadMsgNotification;
class SecurityError extends Error {
    message;
    description;
    constructor(description) {
        super();
        this.description = description;
    }
    static check(cond, description) {
        if (!cond)
            throw new SecurityError(description);
    }
    [Symbol.for('nodejs.util.inspect.custom')]() {
        const toPrint = {
            _: this.constructor.name,
        };
        for (const key in this) {
            if (this.hasOwnProperty(key)) {
                const value = this[key];
                if (!key.startsWith('_')) {
                    toPrint[key] = value;
                }
            }
        }
        Object.setPrototypeOf(toPrint, {
            stack: this.stack,
        });
        return toPrint;
    }
    toJSON() {
        const toPrint = {
            _: this.constructor.name,
            stack: this.stack,
        };
        for (const key in this) {
            if (this.hasOwnProperty(key)) {
                const value = this[key];
                if (!key.startsWith('_')) {
                    toPrint[key] = typeof value === 'bigint' ? String(value) : value;
                }
            }
        }
        return toPrint;
    }
    toString() {
        return `[constructor of ${this.constructor.name}] ${JSON.stringify(this, null, 2)}`;
    }
}
exports.SecurityError = SecurityError;
class SecurityCheckMismatch extends SecurityError {
    message = 'A security check mismatch has occurred.';
    static check(cond, description) {
        if (!cond)
            throw new SecurityCheckMismatch(description);
    }
}
exports.SecurityCheckMismatch = SecurityCheckMismatch;
class CDNFileHashMismatch extends SecurityError {
    message = 'A CDN file hash mismatch has occurred.';
    static check(cond, description) {
        if (!cond)
            throw new CDNFileHashMismatch(description);
    }
}
exports.CDNFileHashMismatch = CDNFileHashMismatch;
