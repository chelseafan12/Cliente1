"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Raw = void 0;
const index_js_1 = require("./core/index.js");
const platform_node_js_1 = require("../platform.node.js");
var Raw;
(function (Raw) {
    Raw.Layer = 181;
    Raw.HighestSCLayer = 144;
    class ResPQ extends index_js_1.TLObject {
        nonce;
        serverNonce;
        pq;
        serverPublicKeyFingerprints;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ResPQ';
            this.constructorId = 0x05162463;
            this.subclassOfId = 0x786986b8;
            this._slots = ['nonce', 'serverNonce', 'pq', 'serverPublicKeyFingerprints'];
            this.nonce = params.nonce;
            this.serverNonce = params.serverNonce;
            this.pq = params.pq;
            this.serverPublicKeyFingerprints = params.serverPublicKeyFingerprints;
        }
        static async read(_data, ..._args) {
            let nonce = await index_js_1.Primitive.Int128.read(_data);
            let serverNonce = await index_js_1.Primitive.Int128.read(_data);
            let pq = await index_js_1.Primitive.Bytes.read(_data);
            let serverPublicKeyFingerprints = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Long);
            return new Raw.ResPQ({
                nonce: nonce,
                serverNonce: serverNonce,
                pq: pq,
                serverPublicKeyFingerprints: serverPublicKeyFingerprints,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.nonce !== undefined) {
                b.write(index_js_1.Primitive.Int128.write(this.nonce));
            }
            if (this.serverNonce !== undefined) {
                b.write(index_js_1.Primitive.Int128.write(this.serverNonce));
            }
            if (this.pq !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.pq));
            }
            if (this.serverPublicKeyFingerprints) {
                b.write(index_js_1.Primitive.Vector.write(this.serverPublicKeyFingerprints, index_js_1.Primitive.Long));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ResPQ = ResPQ;
    class PQInnerData extends index_js_1.TLObject {
        pq;
        p;
        q;
        nonce;
        serverNonce;
        newNonce;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PQInnerData';
            this.constructorId = 0x83c95aec;
            this.subclassOfId = 0x41701377;
            this._slots = ['pq', 'p', 'q', 'nonce', 'serverNonce', 'newNonce'];
            this.pq = params.pq;
            this.p = params.p;
            this.q = params.q;
            this.nonce = params.nonce;
            this.serverNonce = params.serverNonce;
            this.newNonce = params.newNonce;
        }
        static async read(_data, ..._args) {
            let pq = await index_js_1.Primitive.Bytes.read(_data);
            let p = await index_js_1.Primitive.Bytes.read(_data);
            let q = await index_js_1.Primitive.Bytes.read(_data);
            let nonce = await index_js_1.Primitive.Int128.read(_data);
            let serverNonce = await index_js_1.Primitive.Int128.read(_data);
            let newNonce = await index_js_1.Primitive.Int256.read(_data);
            return new Raw.PQInnerData({
                pq: pq,
                p: p,
                q: q,
                nonce: nonce,
                serverNonce: serverNonce,
                newNonce: newNonce,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.pq !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.pq));
            }
            if (this.p !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.p));
            }
            if (this.q !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.q));
            }
            if (this.nonce !== undefined) {
                b.write(index_js_1.Primitive.Int128.write(this.nonce));
            }
            if (this.serverNonce !== undefined) {
                b.write(index_js_1.Primitive.Int128.write(this.serverNonce));
            }
            if (this.newNonce !== undefined) {
                b.write(index_js_1.Primitive.Int256.write(this.newNonce));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PQInnerData = PQInnerData;
    class PQInnerDataDc extends index_js_1.TLObject {
        pq;
        p;
        q;
        nonce;
        serverNonce;
        newNonce;
        dc;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PQInnerDataDc';
            this.constructorId = 0xa9f55f95;
            this.subclassOfId = 0x41701377;
            this._slots = ['pq', 'p', 'q', 'nonce', 'serverNonce', 'newNonce', 'dc'];
            this.pq = params.pq;
            this.p = params.p;
            this.q = params.q;
            this.nonce = params.nonce;
            this.serverNonce = params.serverNonce;
            this.newNonce = params.newNonce;
            this.dc = params.dc;
        }
        static async read(_data, ..._args) {
            let pq = await index_js_1.Primitive.Bytes.read(_data);
            let p = await index_js_1.Primitive.Bytes.read(_data);
            let q = await index_js_1.Primitive.Bytes.read(_data);
            let nonce = await index_js_1.Primitive.Int128.read(_data);
            let serverNonce = await index_js_1.Primitive.Int128.read(_data);
            let newNonce = await index_js_1.Primitive.Int256.read(_data);
            let dc = await index_js_1.Primitive.Int.read(_data);
            return new Raw.PQInnerDataDc({
                pq: pq,
                p: p,
                q: q,
                nonce: nonce,
                serverNonce: serverNonce,
                newNonce: newNonce,
                dc: dc,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.pq !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.pq));
            }
            if (this.p !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.p));
            }
            if (this.q !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.q));
            }
            if (this.nonce !== undefined) {
                b.write(index_js_1.Primitive.Int128.write(this.nonce));
            }
            if (this.serverNonce !== undefined) {
                b.write(index_js_1.Primitive.Int128.write(this.serverNonce));
            }
            if (this.newNonce !== undefined) {
                b.write(index_js_1.Primitive.Int256.write(this.newNonce));
            }
            if (this.dc !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.dc));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PQInnerDataDc = PQInnerDataDc;
    class PQInnerDataTemp extends index_js_1.TLObject {
        pq;
        p;
        q;
        nonce;
        serverNonce;
        newNonce;
        expiresIn;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PQInnerDataTemp';
            this.constructorId = 0x3c6a84d4;
            this.subclassOfId = 0x41701377;
            this._slots = ['pq', 'p', 'q', 'nonce', 'serverNonce', 'newNonce', 'expiresIn'];
            this.pq = params.pq;
            this.p = params.p;
            this.q = params.q;
            this.nonce = params.nonce;
            this.serverNonce = params.serverNonce;
            this.newNonce = params.newNonce;
            this.expiresIn = params.expiresIn;
        }
        static async read(_data, ..._args) {
            let pq = await index_js_1.Primitive.Bytes.read(_data);
            let p = await index_js_1.Primitive.Bytes.read(_data);
            let q = await index_js_1.Primitive.Bytes.read(_data);
            let nonce = await index_js_1.Primitive.Int128.read(_data);
            let serverNonce = await index_js_1.Primitive.Int128.read(_data);
            let newNonce = await index_js_1.Primitive.Int256.read(_data);
            let expiresIn = await index_js_1.Primitive.Int.read(_data);
            return new Raw.PQInnerDataTemp({
                pq: pq,
                p: p,
                q: q,
                nonce: nonce,
                serverNonce: serverNonce,
                newNonce: newNonce,
                expiresIn: expiresIn,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.pq !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.pq));
            }
            if (this.p !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.p));
            }
            if (this.q !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.q));
            }
            if (this.nonce !== undefined) {
                b.write(index_js_1.Primitive.Int128.write(this.nonce));
            }
            if (this.serverNonce !== undefined) {
                b.write(index_js_1.Primitive.Int128.write(this.serverNonce));
            }
            if (this.newNonce !== undefined) {
                b.write(index_js_1.Primitive.Int256.write(this.newNonce));
            }
            if (this.expiresIn !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.expiresIn));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PQInnerDataTemp = PQInnerDataTemp;
    class PQInnerDataTempDc extends index_js_1.TLObject {
        pq;
        p;
        q;
        nonce;
        serverNonce;
        newNonce;
        dc;
        expiresIn;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PQInnerDataTempDc';
            this.constructorId = 0x56fddf88;
            this.subclassOfId = 0x41701377;
            this._slots = ['pq', 'p', 'q', 'nonce', 'serverNonce', 'newNonce', 'dc', 'expiresIn'];
            this.pq = params.pq;
            this.p = params.p;
            this.q = params.q;
            this.nonce = params.nonce;
            this.serverNonce = params.serverNonce;
            this.newNonce = params.newNonce;
            this.dc = params.dc;
            this.expiresIn = params.expiresIn;
        }
        static async read(_data, ..._args) {
            let pq = await index_js_1.Primitive.Bytes.read(_data);
            let p = await index_js_1.Primitive.Bytes.read(_data);
            let q = await index_js_1.Primitive.Bytes.read(_data);
            let nonce = await index_js_1.Primitive.Int128.read(_data);
            let serverNonce = await index_js_1.Primitive.Int128.read(_data);
            let newNonce = await index_js_1.Primitive.Int256.read(_data);
            let dc = await index_js_1.Primitive.Int.read(_data);
            let expiresIn = await index_js_1.Primitive.Int.read(_data);
            return new Raw.PQInnerDataTempDc({
                pq: pq,
                p: p,
                q: q,
                nonce: nonce,
                serverNonce: serverNonce,
                newNonce: newNonce,
                dc: dc,
                expiresIn: expiresIn,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.pq !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.pq));
            }
            if (this.p !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.p));
            }
            if (this.q !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.q));
            }
            if (this.nonce !== undefined) {
                b.write(index_js_1.Primitive.Int128.write(this.nonce));
            }
            if (this.serverNonce !== undefined) {
                b.write(index_js_1.Primitive.Int128.write(this.serverNonce));
            }
            if (this.newNonce !== undefined) {
                b.write(index_js_1.Primitive.Int256.write(this.newNonce));
            }
            if (this.dc !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.dc));
            }
            if (this.expiresIn !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.expiresIn));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PQInnerDataTempDc = PQInnerDataTempDc;
    class BindAuthKeyInner extends index_js_1.TLObject {
        nonce;
        tempAuthKeyId;
        permAuthKeyId;
        tempSessionId;
        expiresAt;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'BindAuthKeyInner';
            this.constructorId = 0x75a3f765;
            this.subclassOfId = 0x2f099171;
            this._slots = ['nonce', 'tempAuthKeyId', 'permAuthKeyId', 'tempSessionId', 'expiresAt'];
            this.nonce = params.nonce;
            this.tempAuthKeyId = params.tempAuthKeyId;
            this.permAuthKeyId = params.permAuthKeyId;
            this.tempSessionId = params.tempSessionId;
            this.expiresAt = params.expiresAt;
        }
        static async read(_data, ..._args) {
            let nonce = await index_js_1.Primitive.Long.read(_data);
            let tempAuthKeyId = await index_js_1.Primitive.Long.read(_data);
            let permAuthKeyId = await index_js_1.Primitive.Long.read(_data);
            let tempSessionId = await index_js_1.Primitive.Long.read(_data);
            let expiresAt = await index_js_1.Primitive.Int.read(_data);
            return new Raw.BindAuthKeyInner({
                nonce: nonce,
                tempAuthKeyId: tempAuthKeyId,
                permAuthKeyId: permAuthKeyId,
                tempSessionId: tempSessionId,
                expiresAt: expiresAt,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.nonce !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.nonce));
            }
            if (this.tempAuthKeyId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.tempAuthKeyId));
            }
            if (this.permAuthKeyId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.permAuthKeyId));
            }
            if (this.tempSessionId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.tempSessionId));
            }
            if (this.expiresAt !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.expiresAt));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.BindAuthKeyInner = BindAuthKeyInner;
    class ServerDhParamsFail extends index_js_1.TLObject {
        nonce;
        serverNonce;
        newNonceHash;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ServerDhParamsFail';
            this.constructorId = 0x79cb045d;
            this.subclassOfId = 0xa6188d9e;
            this._slots = ['nonce', 'serverNonce', 'newNonceHash'];
            this.nonce = params.nonce;
            this.serverNonce = params.serverNonce;
            this.newNonceHash = params.newNonceHash;
        }
        static async read(_data, ..._args) {
            let nonce = await index_js_1.Primitive.Int128.read(_data);
            let serverNonce = await index_js_1.Primitive.Int128.read(_data);
            let newNonceHash = await index_js_1.Primitive.Int128.read(_data);
            return new Raw.ServerDhParamsFail({
                nonce: nonce,
                serverNonce: serverNonce,
                newNonceHash: newNonceHash,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.nonce !== undefined) {
                b.write(index_js_1.Primitive.Int128.write(this.nonce));
            }
            if (this.serverNonce !== undefined) {
                b.write(index_js_1.Primitive.Int128.write(this.serverNonce));
            }
            if (this.newNonceHash !== undefined) {
                b.write(index_js_1.Primitive.Int128.write(this.newNonceHash));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ServerDhParamsFail = ServerDhParamsFail;
    class ServerDhParamsOk extends index_js_1.TLObject {
        nonce;
        serverNonce;
        encryptedAnswer;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ServerDhParamsOk';
            this.constructorId = 0xd0e8075c;
            this.subclassOfId = 0xa6188d9e;
            this._slots = ['nonce', 'serverNonce', 'encryptedAnswer'];
            this.nonce = params.nonce;
            this.serverNonce = params.serverNonce;
            this.encryptedAnswer = params.encryptedAnswer;
        }
        static async read(_data, ..._args) {
            let nonce = await index_js_1.Primitive.Int128.read(_data);
            let serverNonce = await index_js_1.Primitive.Int128.read(_data);
            let encryptedAnswer = await index_js_1.Primitive.Bytes.read(_data);
            return new Raw.ServerDhParamsOk({
                nonce: nonce,
                serverNonce: serverNonce,
                encryptedAnswer: encryptedAnswer,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.nonce !== undefined) {
                b.write(index_js_1.Primitive.Int128.write(this.nonce));
            }
            if (this.serverNonce !== undefined) {
                b.write(index_js_1.Primitive.Int128.write(this.serverNonce));
            }
            if (this.encryptedAnswer !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.encryptedAnswer));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ServerDhParamsOk = ServerDhParamsOk;
    class ServerDhInnerData extends index_js_1.TLObject {
        nonce;
        serverNonce;
        g;
        dhPrime;
        gA;
        serverTime;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ServerDhInnerData';
            this.constructorId = 0xb5890dba;
            this.subclassOfId = 0xc69a67bc;
            this._slots = ['nonce', 'serverNonce', 'g', 'dhPrime', 'gA', 'serverTime'];
            this.nonce = params.nonce;
            this.serverNonce = params.serverNonce;
            this.g = params.g;
            this.dhPrime = params.dhPrime;
            this.gA = params.gA;
            this.serverTime = params.serverTime;
        }
        static async read(_data, ..._args) {
            let nonce = await index_js_1.Primitive.Int128.read(_data);
            let serverNonce = await index_js_1.Primitive.Int128.read(_data);
            let g = await index_js_1.Primitive.Int.read(_data);
            let dhPrime = await index_js_1.Primitive.Bytes.read(_data);
            let gA = await index_js_1.Primitive.Bytes.read(_data);
            let serverTime = await index_js_1.Primitive.Int.read(_data);
            return new Raw.ServerDhInnerData({
                nonce: nonce,
                serverNonce: serverNonce,
                g: g,
                dhPrime: dhPrime,
                gA: gA,
                serverTime: serverTime,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.nonce !== undefined) {
                b.write(index_js_1.Primitive.Int128.write(this.nonce));
            }
            if (this.serverNonce !== undefined) {
                b.write(index_js_1.Primitive.Int128.write(this.serverNonce));
            }
            if (this.g !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.g));
            }
            if (this.dhPrime !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.dhPrime));
            }
            if (this.gA !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.gA));
            }
            if (this.serverTime !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.serverTime));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ServerDhInnerData = ServerDhInnerData;
    class ClientDhInnerData extends index_js_1.TLObject {
        nonce;
        serverNonce;
        retryId;
        gB;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ClientDhInnerData';
            this.constructorId = 0x6643b654;
            this.subclassOfId = 0xf8eeef6a;
            this._slots = ['nonce', 'serverNonce', 'retryId', 'gB'];
            this.nonce = params.nonce;
            this.serverNonce = params.serverNonce;
            this.retryId = params.retryId;
            this.gB = params.gB;
        }
        static async read(_data, ..._args) {
            let nonce = await index_js_1.Primitive.Int128.read(_data);
            let serverNonce = await index_js_1.Primitive.Int128.read(_data);
            let retryId = await index_js_1.Primitive.Long.read(_data);
            let gB = await index_js_1.Primitive.Bytes.read(_data);
            return new Raw.ClientDhInnerData({
                nonce: nonce,
                serverNonce: serverNonce,
                retryId: retryId,
                gB: gB,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.nonce !== undefined) {
                b.write(index_js_1.Primitive.Int128.write(this.nonce));
            }
            if (this.serverNonce !== undefined) {
                b.write(index_js_1.Primitive.Int128.write(this.serverNonce));
            }
            if (this.retryId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.retryId));
            }
            if (this.gB !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.gB));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ClientDhInnerData = ClientDhInnerData;
    class DhGenOk extends index_js_1.TLObject {
        nonce;
        serverNonce;
        newNonceHash1;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DhGenOk';
            this.constructorId = 0x3bcbf734;
            this.subclassOfId = 0x55dd6cdb;
            this._slots = ['nonce', 'serverNonce', 'newNonceHash1'];
            this.nonce = params.nonce;
            this.serverNonce = params.serverNonce;
            this.newNonceHash1 = params.newNonceHash1;
        }
        static async read(_data, ..._args) {
            let nonce = await index_js_1.Primitive.Int128.read(_data);
            let serverNonce = await index_js_1.Primitive.Int128.read(_data);
            let newNonceHash1 = await index_js_1.Primitive.Int128.read(_data);
            return new Raw.DhGenOk({
                nonce: nonce,
                serverNonce: serverNonce,
                newNonceHash1: newNonceHash1,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.nonce !== undefined) {
                b.write(index_js_1.Primitive.Int128.write(this.nonce));
            }
            if (this.serverNonce !== undefined) {
                b.write(index_js_1.Primitive.Int128.write(this.serverNonce));
            }
            if (this.newNonceHash1 !== undefined) {
                b.write(index_js_1.Primitive.Int128.write(this.newNonceHash1));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DhGenOk = DhGenOk;
    class DhGenRetry extends index_js_1.TLObject {
        nonce;
        serverNonce;
        newNonceHash2;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DhGenRetry';
            this.constructorId = 0x46dc1fb9;
            this.subclassOfId = 0x55dd6cdb;
            this._slots = ['nonce', 'serverNonce', 'newNonceHash2'];
            this.nonce = params.nonce;
            this.serverNonce = params.serverNonce;
            this.newNonceHash2 = params.newNonceHash2;
        }
        static async read(_data, ..._args) {
            let nonce = await index_js_1.Primitive.Int128.read(_data);
            let serverNonce = await index_js_1.Primitive.Int128.read(_data);
            let newNonceHash2 = await index_js_1.Primitive.Int128.read(_data);
            return new Raw.DhGenRetry({
                nonce: nonce,
                serverNonce: serverNonce,
                newNonceHash2: newNonceHash2,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.nonce !== undefined) {
                b.write(index_js_1.Primitive.Int128.write(this.nonce));
            }
            if (this.serverNonce !== undefined) {
                b.write(index_js_1.Primitive.Int128.write(this.serverNonce));
            }
            if (this.newNonceHash2 !== undefined) {
                b.write(index_js_1.Primitive.Int128.write(this.newNonceHash2));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DhGenRetry = DhGenRetry;
    class DhGenFail extends index_js_1.TLObject {
        nonce;
        serverNonce;
        newNonceHash3;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DhGenFail';
            this.constructorId = 0xa69dae02;
            this.subclassOfId = 0x55dd6cdb;
            this._slots = ['nonce', 'serverNonce', 'newNonceHash3'];
            this.nonce = params.nonce;
            this.serverNonce = params.serverNonce;
            this.newNonceHash3 = params.newNonceHash3;
        }
        static async read(_data, ..._args) {
            let nonce = await index_js_1.Primitive.Int128.read(_data);
            let serverNonce = await index_js_1.Primitive.Int128.read(_data);
            let newNonceHash3 = await index_js_1.Primitive.Int128.read(_data);
            return new Raw.DhGenFail({
                nonce: nonce,
                serverNonce: serverNonce,
                newNonceHash3: newNonceHash3,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.nonce !== undefined) {
                b.write(index_js_1.Primitive.Int128.write(this.nonce));
            }
            if (this.serverNonce !== undefined) {
                b.write(index_js_1.Primitive.Int128.write(this.serverNonce));
            }
            if (this.newNonceHash3 !== undefined) {
                b.write(index_js_1.Primitive.Int128.write(this.newNonceHash3));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DhGenFail = DhGenFail;
    class DestroyAuthKeyOk extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'DestroyAuthKeyOk';
            this.constructorId = 0xf660e1d4;
            this.subclassOfId = 0x8291e68e;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.DestroyAuthKeyOk();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DestroyAuthKeyOk = DestroyAuthKeyOk;
    class DestroyAuthKeyNone extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'DestroyAuthKeyNone';
            this.constructorId = 0x0a9f2259;
            this.subclassOfId = 0x8291e68e;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.DestroyAuthKeyNone();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DestroyAuthKeyNone = DestroyAuthKeyNone;
    class DestroyAuthKeyFail extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'DestroyAuthKeyFail';
            this.constructorId = 0xea109b13;
            this.subclassOfId = 0x8291e68e;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.DestroyAuthKeyFail();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DestroyAuthKeyFail = DestroyAuthKeyFail;
    class ReqPq extends index_js_1.TLObject {
        __response__;
        nonce;
        constructor(params) {
            super();
            this.classType = 'functions';
            this.className = 'ReqPq';
            this.constructorId = 0x60469778;
            this.subclassOfId = 0x786986b8;
            this._slots = ['nonce'];
            this.nonce = params.nonce;
        }
        static async read(_data, ..._args) {
            let nonce = await index_js_1.Primitive.Int128.read(_data);
            return new Raw.ReqPq({ nonce: nonce });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.nonce !== undefined) {
                b.write(index_js_1.Primitive.Int128.write(this.nonce));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ReqPq = ReqPq;
    class ReqPqMulti extends index_js_1.TLObject {
        __response__;
        nonce;
        constructor(params) {
            super();
            this.classType = 'functions';
            this.className = 'ReqPqMulti';
            this.constructorId = 0xbe7e8ef1;
            this.subclassOfId = 0x786986b8;
            this._slots = ['nonce'];
            this.nonce = params.nonce;
        }
        static async read(_data, ..._args) {
            let nonce = await index_js_1.Primitive.Int128.read(_data);
            return new Raw.ReqPqMulti({ nonce: nonce });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.nonce !== undefined) {
                b.write(index_js_1.Primitive.Int128.write(this.nonce));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ReqPqMulti = ReqPqMulti;
    class ReqDhParams extends index_js_1.TLObject {
        __response__;
        nonce;
        serverNonce;
        p;
        q;
        publicKeyFingerprint;
        encryptedData;
        constructor(params) {
            super();
            this.classType = 'functions';
            this.className = 'ReqDhParams';
            this.constructorId = 0xd712e4be;
            this.subclassOfId = 0xa6188d9e;
            this._slots = ['nonce', 'serverNonce', 'p', 'q', 'publicKeyFingerprint', 'encryptedData'];
            this.nonce = params.nonce;
            this.serverNonce = params.serverNonce;
            this.p = params.p;
            this.q = params.q;
            this.publicKeyFingerprint = params.publicKeyFingerprint;
            this.encryptedData = params.encryptedData;
        }
        static async read(_data, ..._args) {
            let nonce = await index_js_1.Primitive.Int128.read(_data);
            let serverNonce = await index_js_1.Primitive.Int128.read(_data);
            let p = await index_js_1.Primitive.Bytes.read(_data);
            let q = await index_js_1.Primitive.Bytes.read(_data);
            let publicKeyFingerprint = await index_js_1.Primitive.Long.read(_data);
            let encryptedData = await index_js_1.Primitive.Bytes.read(_data);
            return new Raw.ReqDhParams({
                nonce: nonce,
                serverNonce: serverNonce,
                p: p,
                q: q,
                publicKeyFingerprint: publicKeyFingerprint,
                encryptedData: encryptedData,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.nonce !== undefined) {
                b.write(index_js_1.Primitive.Int128.write(this.nonce));
            }
            if (this.serverNonce !== undefined) {
                b.write(index_js_1.Primitive.Int128.write(this.serverNonce));
            }
            if (this.p !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.p));
            }
            if (this.q !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.q));
            }
            if (this.publicKeyFingerprint !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.publicKeyFingerprint));
            }
            if (this.encryptedData !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.encryptedData));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ReqDhParams = ReqDhParams;
    class SetClientDhParams extends index_js_1.TLObject {
        __response__;
        nonce;
        serverNonce;
        encryptedData;
        constructor(params) {
            super();
            this.classType = 'functions';
            this.className = 'SetClientDhParams';
            this.constructorId = 0xf5045f1f;
            this.subclassOfId = 0x55dd6cdb;
            this._slots = ['nonce', 'serverNonce', 'encryptedData'];
            this.nonce = params.nonce;
            this.serverNonce = params.serverNonce;
            this.encryptedData = params.encryptedData;
        }
        static async read(_data, ..._args) {
            let nonce = await index_js_1.Primitive.Int128.read(_data);
            let serverNonce = await index_js_1.Primitive.Int128.read(_data);
            let encryptedData = await index_js_1.Primitive.Bytes.read(_data);
            return new Raw.SetClientDhParams({
                nonce: nonce,
                serverNonce: serverNonce,
                encryptedData: encryptedData,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.nonce !== undefined) {
                b.write(index_js_1.Primitive.Int128.write(this.nonce));
            }
            if (this.serverNonce !== undefined) {
                b.write(index_js_1.Primitive.Int128.write(this.serverNonce));
            }
            if (this.encryptedData !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.encryptedData));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SetClientDhParams = SetClientDhParams;
    class DestroyAuthKey extends index_js_1.TLObject {
        __response__;
        constructor() {
            super();
            this.classType = 'functions';
            this.className = 'DestroyAuthKey';
            this.constructorId = 0xd1435160;
            this.subclassOfId = 0x8291e68e;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.DestroyAuthKey();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DestroyAuthKey = DestroyAuthKey;
    class MsgsAck extends index_js_1.TLObject {
        msgIds;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MsgsAck';
            this.constructorId = 0x62d6b459;
            this.subclassOfId = 0x827677c4;
            this._slots = ['msgIds'];
            this.msgIds = params.msgIds;
        }
        static async read(_data, ..._args) {
            let msgIds = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Long);
            return new Raw.MsgsAck({ msgIds: msgIds });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.msgIds) {
                b.write(index_js_1.Primitive.Vector.write(this.msgIds, index_js_1.Primitive.Long));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MsgsAck = MsgsAck;
    class BadMsgNotification extends index_js_1.TLObject {
        badMsgId;
        badMsgSeqno;
        errorCode;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'BadMsgNotification';
            this.constructorId = 0xa7eff811;
            this.subclassOfId = 0xcebaa157;
            this._slots = ['badMsgId', 'badMsgSeqno', 'errorCode'];
            this.badMsgId = params.badMsgId;
            this.badMsgSeqno = params.badMsgSeqno;
            this.errorCode = params.errorCode;
        }
        static async read(_data, ..._args) {
            let badMsgId = await index_js_1.Primitive.Long.read(_data);
            let badMsgSeqno = await index_js_1.Primitive.Int.read(_data);
            let errorCode = await index_js_1.Primitive.Int.read(_data);
            return new Raw.BadMsgNotification({
                badMsgId: badMsgId,
                badMsgSeqno: badMsgSeqno,
                errorCode: errorCode,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.badMsgId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.badMsgId));
            }
            if (this.badMsgSeqno !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.badMsgSeqno));
            }
            if (this.errorCode !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.errorCode));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.BadMsgNotification = BadMsgNotification;
    class BadServerSalt extends index_js_1.TLObject {
        badMsgId;
        badMsgSeqno;
        errorCode;
        newServerSalt;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'BadServerSalt';
            this.constructorId = 0xedab447b;
            this.subclassOfId = 0xcebaa157;
            this._slots = ['badMsgId', 'badMsgSeqno', 'errorCode', 'newServerSalt'];
            this.badMsgId = params.badMsgId;
            this.badMsgSeqno = params.badMsgSeqno;
            this.errorCode = params.errorCode;
            this.newServerSalt = params.newServerSalt;
        }
        static async read(_data, ..._args) {
            let badMsgId = await index_js_1.Primitive.Long.read(_data);
            let badMsgSeqno = await index_js_1.Primitive.Int.read(_data);
            let errorCode = await index_js_1.Primitive.Int.read(_data);
            let newServerSalt = await index_js_1.Primitive.Long.read(_data);
            return new Raw.BadServerSalt({
                badMsgId: badMsgId,
                badMsgSeqno: badMsgSeqno,
                errorCode: errorCode,
                newServerSalt: newServerSalt,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.badMsgId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.badMsgId));
            }
            if (this.badMsgSeqno !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.badMsgSeqno));
            }
            if (this.errorCode !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.errorCode));
            }
            if (this.newServerSalt !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.newServerSalt));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.BadServerSalt = BadServerSalt;
    class MsgsStateReq extends index_js_1.TLObject {
        msgIds;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MsgsStateReq';
            this.constructorId = 0xda69fb52;
            this.subclassOfId = 0x18f01dd0;
            this._slots = ['msgIds'];
            this.msgIds = params.msgIds;
        }
        static async read(_data, ..._args) {
            let msgIds = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Long);
            return new Raw.MsgsStateReq({ msgIds: msgIds });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.msgIds) {
                b.write(index_js_1.Primitive.Vector.write(this.msgIds, index_js_1.Primitive.Long));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MsgsStateReq = MsgsStateReq;
    class MsgsStateInfo extends index_js_1.TLObject {
        reqMsgId;
        info;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MsgsStateInfo';
            this.constructorId = 0x04deb57d;
            this.subclassOfId = 0x70a0a64;
            this._slots = ['reqMsgId', 'info'];
            this.reqMsgId = params.reqMsgId;
            this.info = params.info;
        }
        static async read(_data, ..._args) {
            let reqMsgId = await index_js_1.Primitive.Long.read(_data);
            let info = await index_js_1.Primitive.String.read(_data);
            return new Raw.MsgsStateInfo({ reqMsgId: reqMsgId, info: info });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.reqMsgId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.reqMsgId));
            }
            if (this.info !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.info));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MsgsStateInfo = MsgsStateInfo;
    class MsgsAllInfo extends index_js_1.TLObject {
        msgIds;
        info;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MsgsAllInfo';
            this.constructorId = 0x8cc0d131;
            this.subclassOfId = 0xfa8fcb54;
            this._slots = ['msgIds', 'info'];
            this.msgIds = params.msgIds;
            this.info = params.info;
        }
        static async read(_data, ..._args) {
            let msgIds = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Long);
            let info = await index_js_1.Primitive.String.read(_data);
            return new Raw.MsgsAllInfo({ msgIds: msgIds, info: info });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.msgIds) {
                b.write(index_js_1.Primitive.Vector.write(this.msgIds, index_js_1.Primitive.Long));
            }
            if (this.info !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.info));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MsgsAllInfo = MsgsAllInfo;
    class MsgDetailedInfo extends index_js_1.TLObject {
        msgId;
        answerMsgId;
        bytes;
        status;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MsgDetailedInfo';
            this.constructorId = 0x276d3ec6;
            this.subclassOfId = 0x5f32d5ee;
            this._slots = ['msgId', 'answerMsgId', 'bytes', 'status'];
            this.msgId = params.msgId;
            this.answerMsgId = params.answerMsgId;
            this.bytes = params.bytes;
            this.status = params.status;
        }
        static async read(_data, ..._args) {
            let msgId = await index_js_1.Primitive.Long.read(_data);
            let answerMsgId = await index_js_1.Primitive.Long.read(_data);
            let bytes = await index_js_1.Primitive.Int.read(_data);
            let status = await index_js_1.Primitive.Int.read(_data);
            return new Raw.MsgDetailedInfo({
                msgId: msgId,
                answerMsgId: answerMsgId,
                bytes: bytes,
                status: status,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.msgId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.msgId));
            }
            if (this.answerMsgId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.answerMsgId));
            }
            if (this.bytes !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.bytes));
            }
            if (this.status !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.status));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MsgDetailedInfo = MsgDetailedInfo;
    class MsgNewDetailedInfo extends index_js_1.TLObject {
        answerMsgId;
        bytes;
        status;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MsgNewDetailedInfo';
            this.constructorId = 0x809db6df;
            this.subclassOfId = 0x5f32d5ee;
            this._slots = ['answerMsgId', 'bytes', 'status'];
            this.answerMsgId = params.answerMsgId;
            this.bytes = params.bytes;
            this.status = params.status;
        }
        static async read(_data, ..._args) {
            let answerMsgId = await index_js_1.Primitive.Long.read(_data);
            let bytes = await index_js_1.Primitive.Int.read(_data);
            let status = await index_js_1.Primitive.Int.read(_data);
            return new Raw.MsgNewDetailedInfo({ answerMsgId: answerMsgId, bytes: bytes, status: status });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.answerMsgId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.answerMsgId));
            }
            if (this.bytes !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.bytes));
            }
            if (this.status !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.status));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MsgNewDetailedInfo = MsgNewDetailedInfo;
    class MsgResendReq extends index_js_1.TLObject {
        msgIds;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MsgResendReq';
            this.constructorId = 0x7d861a08;
            this.subclassOfId = 0x2024514;
            this._slots = ['msgIds'];
            this.msgIds = params.msgIds;
        }
        static async read(_data, ..._args) {
            let msgIds = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Long);
            return new Raw.MsgResendReq({ msgIds: msgIds });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.msgIds) {
                b.write(index_js_1.Primitive.Vector.write(this.msgIds, index_js_1.Primitive.Long));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MsgResendReq = MsgResendReq;
    class RpcResult extends index_js_1.TLObject {
        reqMsgId;
        result;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'RpcResult';
            this.constructorId = 0xf35c6d01;
            this.subclassOfId = 0x9a7df30;
            this._slots = ['reqMsgId', 'result'];
            this.reqMsgId = params.reqMsgId;
            this.result = params.result;
        }
        static async read(_data, ..._args) {
            let reqMsgId = await index_js_1.Primitive.Long.read(_data);
            let result = await index_js_1.TLObject.read(_data);
            return new Raw.RpcResult({ reqMsgId: reqMsgId, result: result });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.reqMsgId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.reqMsgId));
            }
            if (this.result !== undefined) {
                b.write(this.result.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.RpcResult = RpcResult;
    class RpcError extends index_js_1.TLObject {
        errorCode;
        errorMessage;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'RpcError';
            this.constructorId = 0x2144ca19;
            this.subclassOfId = 0x4a17e265;
            this._slots = ['errorCode', 'errorMessage'];
            this.errorCode = params.errorCode;
            this.errorMessage = params.errorMessage;
        }
        static async read(_data, ..._args) {
            let errorCode = await index_js_1.Primitive.Int.read(_data);
            let errorMessage = await index_js_1.Primitive.String.read(_data);
            return new Raw.RpcError({ errorCode: errorCode, errorMessage: errorMessage });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.errorCode !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.errorCode));
            }
            if (this.errorMessage !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.errorMessage));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.RpcError = RpcError;
    class RpcAnswerUnknown extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'RpcAnswerUnknown';
            this.constructorId = 0x5e2ad36e;
            this.subclassOfId = 0x4bca7570;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.RpcAnswerUnknown();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.RpcAnswerUnknown = RpcAnswerUnknown;
    class RpcAnswerDroppedRunning extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'RpcAnswerDroppedRunning';
            this.constructorId = 0xcd78e586;
            this.subclassOfId = 0x4bca7570;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.RpcAnswerDroppedRunning();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.RpcAnswerDroppedRunning = RpcAnswerDroppedRunning;
    class RpcAnswerDropped extends index_js_1.TLObject {
        msgId;
        seqNo;
        bytes;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'RpcAnswerDropped';
            this.constructorId = 0xa43ad8b7;
            this.subclassOfId = 0x4bca7570;
            this._slots = ['msgId', 'seqNo', 'bytes'];
            this.msgId = params.msgId;
            this.seqNo = params.seqNo;
            this.bytes = params.bytes;
        }
        static async read(_data, ..._args) {
            let msgId = await index_js_1.Primitive.Long.read(_data);
            let seqNo = await index_js_1.Primitive.Int.read(_data);
            let bytes = await index_js_1.Primitive.Int.read(_data);
            return new Raw.RpcAnswerDropped({ msgId: msgId, seqNo: seqNo, bytes: bytes });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.msgId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.msgId));
            }
            if (this.seqNo !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.seqNo));
            }
            if (this.bytes !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.bytes));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.RpcAnswerDropped = RpcAnswerDropped;
    class FutureSalt extends index_js_1.TLObject {
        validSince;
        validUntil;
        salt;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'FutureSalt';
            this.constructorId = 0x0949d9dc;
            this.subclassOfId = 0x45e53dcf;
            this._slots = ['validSince', 'validUntil', 'salt'];
            this.validSince = params.validSince;
            this.validUntil = params.validUntil;
            this.salt = params.salt;
        }
        static async read(_data, ..._args) {
            let validSince = await index_js_1.Primitive.Int.read(_data);
            let validUntil = await index_js_1.Primitive.Int.read(_data);
            let salt = await index_js_1.Primitive.Long.read(_data);
            return new Raw.FutureSalt({ validSince: validSince, validUntil: validUntil, salt: salt });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.validSince !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.validSince));
            }
            if (this.validUntil !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.validUntil));
            }
            if (this.salt !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.salt));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.FutureSalt = FutureSalt;
    class FutureSalts extends index_js_1.TLObject {
        reqMsgId;
        now;
        salts;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'FutureSalts';
            this.constructorId = 0xae500895;
            this.subclassOfId = 0x1090f517;
            this._slots = ['reqMsgId', 'now', 'salts'];
            this.reqMsgId = params.reqMsgId;
            this.now = params.now;
            this.salts = params.salts;
        }
        static async read(_data, ..._args) {
            let reqMsgId = await index_js_1.Primitive.Long.read(_data);
            let now = await index_js_1.Primitive.Int.read(_data);
            let salts = await index_js_1.TLObject.read(_data);
            return new Raw.FutureSalts({ reqMsgId: reqMsgId, now: now, salts: salts });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.reqMsgId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.reqMsgId));
            }
            if (this.now !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.now));
            }
            if (this.salts) {
                b.write(index_js_1.Primitive.Vector.write(this.salts));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.FutureSalts = FutureSalts;
    class Pong extends index_js_1.TLObject {
        msgId;
        pingId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'Pong';
            this.constructorId = 0x347773c5;
            this.subclassOfId = 0x816aee71;
            this._slots = ['msgId', 'pingId'];
            this.msgId = params.msgId;
            this.pingId = params.pingId;
        }
        static async read(_data, ..._args) {
            let msgId = await index_js_1.Primitive.Long.read(_data);
            let pingId = await index_js_1.Primitive.Long.read(_data);
            return new Raw.Pong({ msgId: msgId, pingId: pingId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.msgId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.msgId));
            }
            if (this.pingId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.pingId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.Pong = Pong;
    class DestroySessionOk extends index_js_1.TLObject {
        sessionId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DestroySessionOk';
            this.constructorId = 0xe22045fc;
            this.subclassOfId = 0xaf0ce7bd;
            this._slots = ['sessionId'];
            this.sessionId = params.sessionId;
        }
        static async read(_data, ..._args) {
            let sessionId = await index_js_1.Primitive.Long.read(_data);
            return new Raw.DestroySessionOk({ sessionId: sessionId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.sessionId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.sessionId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DestroySessionOk = DestroySessionOk;
    class DestroySessionNone extends index_js_1.TLObject {
        sessionId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DestroySessionNone';
            this.constructorId = 0x62d350c9;
            this.subclassOfId = 0xaf0ce7bd;
            this._slots = ['sessionId'];
            this.sessionId = params.sessionId;
        }
        static async read(_data, ..._args) {
            let sessionId = await index_js_1.Primitive.Long.read(_data);
            return new Raw.DestroySessionNone({ sessionId: sessionId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.sessionId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.sessionId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DestroySessionNone = DestroySessionNone;
    class NewSessionCreated extends index_js_1.TLObject {
        firstMsgId;
        uniqueId;
        serverSalt;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'NewSessionCreated';
            this.constructorId = 0x9ec20908;
            this.subclassOfId = 0x510d3031;
            this._slots = ['firstMsgId', 'uniqueId', 'serverSalt'];
            this.firstMsgId = params.firstMsgId;
            this.uniqueId = params.uniqueId;
            this.serverSalt = params.serverSalt;
        }
        static async read(_data, ..._args) {
            let firstMsgId = await index_js_1.Primitive.Long.read(_data);
            let uniqueId = await index_js_1.Primitive.Long.read(_data);
            let serverSalt = await index_js_1.Primitive.Long.read(_data);
            return new Raw.NewSessionCreated({
                firstMsgId: firstMsgId,
                uniqueId: uniqueId,
                serverSalt: serverSalt,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.firstMsgId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.firstMsgId));
            }
            if (this.uniqueId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.uniqueId));
            }
            if (this.serverSalt !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.serverSalt));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.NewSessionCreated = NewSessionCreated;
    class HttpWait extends index_js_1.TLObject {
        maxDelay;
        waitAfter;
        maxWait;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'HttpWait';
            this.constructorId = 0x9299359f;
            this.subclassOfId = 0x1284aed6;
            this._slots = ['maxDelay', 'waitAfter', 'maxWait'];
            this.maxDelay = params.maxDelay;
            this.waitAfter = params.waitAfter;
            this.maxWait = params.maxWait;
        }
        static async read(_data, ..._args) {
            let maxDelay = await index_js_1.Primitive.Int.read(_data);
            let waitAfter = await index_js_1.Primitive.Int.read(_data);
            let maxWait = await index_js_1.Primitive.Int.read(_data);
            return new Raw.HttpWait({ maxDelay: maxDelay, waitAfter: waitAfter, maxWait: maxWait });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.maxDelay !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.maxDelay));
            }
            if (this.waitAfter !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.waitAfter));
            }
            if (this.maxWait !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.maxWait));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.HttpWait = HttpWait;
    class IpPort extends index_js_1.TLObject {
        ipv4;
        port;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'IpPort';
            this.constructorId = 0xd433ad73;
            this.subclassOfId = 0xa2a03726;
            this._slots = ['ipv4', 'port'];
            this.ipv4 = params.ipv4;
            this.port = params.port;
        }
        static async read(_data, ..._args) {
            let ipv4 = await index_js_1.Primitive.Int.read(_data);
            let port = await index_js_1.Primitive.Int.read(_data);
            return new Raw.IpPort({ ipv4: ipv4, port: port });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.ipv4 !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.ipv4));
            }
            if (this.port !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.port));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.IpPort = IpPort;
    class IpPortSecret extends index_js_1.TLObject {
        ipv4;
        port;
        secret;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'IpPortSecret';
            this.constructorId = 0x37982646;
            this.subclassOfId = 0xa2a03726;
            this._slots = ['ipv4', 'port', 'secret'];
            this.ipv4 = params.ipv4;
            this.port = params.port;
            this.secret = params.secret;
        }
        static async read(_data, ..._args) {
            let ipv4 = await index_js_1.Primitive.Int.read(_data);
            let port = await index_js_1.Primitive.Int.read(_data);
            let secret = await index_js_1.Primitive.Bytes.read(_data);
            return new Raw.IpPortSecret({ ipv4: ipv4, port: port, secret: secret });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.ipv4 !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.ipv4));
            }
            if (this.port !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.port));
            }
            if (this.secret !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.secret));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.IpPortSecret = IpPortSecret;
    class AccessPointRule extends index_js_1.TLObject {
        phonePrefixRules;
        dcId;
        ips;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'AccessPointRule';
            this.constructorId = 0x4679b65f;
            this.subclassOfId = 0xb1aca0fd;
            this._slots = ['phonePrefixRules', 'dcId', 'ips'];
            this.phonePrefixRules = params.phonePrefixRules;
            this.dcId = params.dcId;
            this.ips = params.ips;
        }
        static async read(_data, ..._args) {
            let phonePrefixRules = await index_js_1.Primitive.String.read(_data);
            let dcId = await index_js_1.Primitive.Int.read(_data);
            let ips = await index_js_1.TLObject.read(_data);
            return new Raw.AccessPointRule({ phonePrefixRules: phonePrefixRules, dcId: dcId, ips: ips });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.phonePrefixRules !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.phonePrefixRules));
            }
            if (this.dcId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.dcId));
            }
            if (this.ips) {
                b.write(index_js_1.Primitive.Vector.write(this.ips));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.AccessPointRule = AccessPointRule;
    class RpcDropAnswer extends index_js_1.TLObject {
        __response__;
        reqMsgId;
        constructor(params) {
            super();
            this.classType = 'functions';
            this.className = 'RpcDropAnswer';
            this.constructorId = 0x58e4a740;
            this.subclassOfId = 0x4bca7570;
            this._slots = ['reqMsgId'];
            this.reqMsgId = params.reqMsgId;
        }
        static async read(_data, ..._args) {
            let reqMsgId = await index_js_1.Primitive.Long.read(_data);
            return new Raw.RpcDropAnswer({ reqMsgId: reqMsgId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.reqMsgId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.reqMsgId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.RpcDropAnswer = RpcDropAnswer;
    class GetFutureSalts extends index_js_1.TLObject {
        __response__;
        num;
        constructor(params) {
            super();
            this.classType = 'functions';
            this.className = 'GetFutureSalts';
            this.constructorId = 0xb921bd04;
            this.subclassOfId = 0x1090f517;
            this._slots = ['num'];
            this.num = params.num;
        }
        static async read(_data, ..._args) {
            let num = await index_js_1.Primitive.Int.read(_data);
            return new Raw.GetFutureSalts({ num: num });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.num !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.num));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.GetFutureSalts = GetFutureSalts;
    class Ping extends index_js_1.TLObject {
        __response__;
        pingId;
        constructor(params) {
            super();
            this.classType = 'functions';
            this.className = 'Ping';
            this.constructorId = 0x7abe77ec;
            this.subclassOfId = 0x816aee71;
            this._slots = ['pingId'];
            this.pingId = params.pingId;
        }
        static async read(_data, ..._args) {
            let pingId = await index_js_1.Primitive.Long.read(_data);
            return new Raw.Ping({ pingId: pingId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.pingId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.pingId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.Ping = Ping;
    class PingDelayDisconnect extends index_js_1.TLObject {
        __response__;
        pingId;
        disconnectDelay;
        constructor(params) {
            super();
            this.classType = 'functions';
            this.className = 'PingDelayDisconnect';
            this.constructorId = 0xf3427b8c;
            this.subclassOfId = 0x816aee71;
            this._slots = ['pingId', 'disconnectDelay'];
            this.pingId = params.pingId;
            this.disconnectDelay = params.disconnectDelay;
        }
        static async read(_data, ..._args) {
            let pingId = await index_js_1.Primitive.Long.read(_data);
            let disconnectDelay = await index_js_1.Primitive.Int.read(_data);
            return new Raw.PingDelayDisconnect({ pingId: pingId, disconnectDelay: disconnectDelay });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.pingId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.pingId));
            }
            if (this.disconnectDelay !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.disconnectDelay));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PingDelayDisconnect = PingDelayDisconnect;
    class DestroySession extends index_js_1.TLObject {
        __response__;
        sessionId;
        constructor(params) {
            super();
            this.classType = 'functions';
            this.className = 'DestroySession';
            this.constructorId = 0xe7512126;
            this.subclassOfId = 0xaf0ce7bd;
            this._slots = ['sessionId'];
            this.sessionId = params.sessionId;
        }
        static async read(_data, ..._args) {
            let sessionId = await index_js_1.Primitive.Long.read(_data);
            return new Raw.DestroySession({ sessionId: sessionId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.sessionId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.sessionId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DestroySession = DestroySession;
    class InputPeerEmpty extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputPeerEmpty';
            this.constructorId = 0x7f3b18ea;
            this.subclassOfId = 0xc91c90b6;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputPeerEmpty();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputPeerEmpty = InputPeerEmpty;
    class InputPeerSelf extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputPeerSelf';
            this.constructorId = 0x7da07ec9;
            this.subclassOfId = 0xc91c90b6;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputPeerSelf();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputPeerSelf = InputPeerSelf;
    class InputPeerChat extends index_js_1.TLObject {
        chatId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputPeerChat';
            this.constructorId = 0x35a95cb9;
            this.subclassOfId = 0xc91c90b6;
            this._slots = ['chatId'];
            this.chatId = params.chatId;
        }
        static async read(_data, ..._args) {
            let chatId = await index_js_1.Primitive.Long.read(_data);
            return new Raw.InputPeerChat({ chatId: chatId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.chatId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.chatId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputPeerChat = InputPeerChat;
    class InputPeerUser extends index_js_1.TLObject {
        userId;
        accessHash;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputPeerUser';
            this.constructorId = 0xdde8a54c;
            this.subclassOfId = 0xc91c90b6;
            this._slots = ['userId', 'accessHash'];
            this.userId = params.userId;
            this.accessHash = params.accessHash;
        }
        static async read(_data, ..._args) {
            let userId = await index_js_1.Primitive.Long.read(_data);
            let accessHash = await index_js_1.Primitive.Long.read(_data);
            return new Raw.InputPeerUser({ userId: userId, accessHash: accessHash });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            if (this.accessHash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.accessHash));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputPeerUser = InputPeerUser;
    class InputPeerChannel extends index_js_1.TLObject {
        channelId;
        accessHash;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputPeerChannel';
            this.constructorId = 0x27bcbbfc;
            this.subclassOfId = 0xc91c90b6;
            this._slots = ['channelId', 'accessHash'];
            this.channelId = params.channelId;
            this.accessHash = params.accessHash;
        }
        static async read(_data, ..._args) {
            let channelId = await index_js_1.Primitive.Long.read(_data);
            let accessHash = await index_js_1.Primitive.Long.read(_data);
            return new Raw.InputPeerChannel({ channelId: channelId, accessHash: accessHash });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.channelId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.channelId));
            }
            if (this.accessHash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.accessHash));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputPeerChannel = InputPeerChannel;
    class InputPeerUserFromMessage extends index_js_1.TLObject {
        peer;
        msgId;
        userId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputPeerUserFromMessage';
            this.constructorId = 0xa87b0a1c;
            this.subclassOfId = 0xc91c90b6;
            this._slots = ['peer', 'msgId', 'userId'];
            this.peer = params.peer;
            this.msgId = params.msgId;
            this.userId = params.userId;
        }
        static async read(_data, ..._args) {
            let peer = await index_js_1.TLObject.read(_data);
            let msgId = await index_js_1.Primitive.Int.read(_data);
            let userId = await index_js_1.Primitive.Long.read(_data);
            return new Raw.InputPeerUserFromMessage({ peer: peer, msgId: msgId, userId: userId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.msgId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.msgId));
            }
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputPeerUserFromMessage = InputPeerUserFromMessage;
    class InputPeerChannelFromMessage extends index_js_1.TLObject {
        peer;
        msgId;
        channelId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputPeerChannelFromMessage';
            this.constructorId = 0xbd2a0840;
            this.subclassOfId = 0xc91c90b6;
            this._slots = ['peer', 'msgId', 'channelId'];
            this.peer = params.peer;
            this.msgId = params.msgId;
            this.channelId = params.channelId;
        }
        static async read(_data, ..._args) {
            let peer = await index_js_1.TLObject.read(_data);
            let msgId = await index_js_1.Primitive.Int.read(_data);
            let channelId = await index_js_1.Primitive.Long.read(_data);
            return new Raw.InputPeerChannelFromMessage({
                peer: peer,
                msgId: msgId,
                channelId: channelId,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.msgId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.msgId));
            }
            if (this.channelId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.channelId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputPeerChannelFromMessage = InputPeerChannelFromMessage;
    class InputUserEmpty extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputUserEmpty';
            this.constructorId = 0xb98886cf;
            this.subclassOfId = 0xe669bf46;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputUserEmpty();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputUserEmpty = InputUserEmpty;
    class InputUserSelf extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputUserSelf';
            this.constructorId = 0xf7c1b13f;
            this.subclassOfId = 0xe669bf46;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputUserSelf();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputUserSelf = InputUserSelf;
    class InputUser extends index_js_1.TLObject {
        userId;
        accessHash;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputUser';
            this.constructorId = 0xf21158c6;
            this.subclassOfId = 0xe669bf46;
            this._slots = ['userId', 'accessHash'];
            this.userId = params.userId;
            this.accessHash = params.accessHash;
        }
        static async read(_data, ..._args) {
            let userId = await index_js_1.Primitive.Long.read(_data);
            let accessHash = await index_js_1.Primitive.Long.read(_data);
            return new Raw.InputUser({ userId: userId, accessHash: accessHash });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            if (this.accessHash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.accessHash));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputUser = InputUser;
    class InputUserFromMessage extends index_js_1.TLObject {
        peer;
        msgId;
        userId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputUserFromMessage';
            this.constructorId = 0x1da448e2;
            this.subclassOfId = 0xe669bf46;
            this._slots = ['peer', 'msgId', 'userId'];
            this.peer = params.peer;
            this.msgId = params.msgId;
            this.userId = params.userId;
        }
        static async read(_data, ..._args) {
            let peer = await index_js_1.TLObject.read(_data);
            let msgId = await index_js_1.Primitive.Int.read(_data);
            let userId = await index_js_1.Primitive.Long.read(_data);
            return new Raw.InputUserFromMessage({ peer: peer, msgId: msgId, userId: userId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.msgId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.msgId));
            }
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputUserFromMessage = InputUserFromMessage;
    class InputPhoneContact extends index_js_1.TLObject {
        clientId;
        phone;
        firstName;
        lastName;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputPhoneContact';
            this.constructorId = 0xf392b7f4;
            this.subclassOfId = 0xae696a82;
            this._slots = ['clientId', 'phone', 'firstName', 'lastName'];
            this.clientId = params.clientId;
            this.phone = params.phone;
            this.firstName = params.firstName;
            this.lastName = params.lastName;
        }
        static async read(_data, ..._args) {
            let clientId = await index_js_1.Primitive.Long.read(_data);
            let phone = await index_js_1.Primitive.String.read(_data);
            let firstName = await index_js_1.Primitive.String.read(_data);
            let lastName = await index_js_1.Primitive.String.read(_data);
            return new Raw.InputPhoneContact({
                clientId: clientId,
                phone: phone,
                firstName: firstName,
                lastName: lastName,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.clientId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.clientId));
            }
            if (this.phone !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.phone));
            }
            if (this.firstName !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.firstName));
            }
            if (this.lastName !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.lastName));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputPhoneContact = InputPhoneContact;
    class InputFile extends index_js_1.TLObject {
        id;
        parts;
        name;
        md5Checksum;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputFile';
            this.constructorId = 0xf52ff27f;
            this.subclassOfId = 0xe7655f1f;
            this._slots = ['id', 'parts', 'name', 'md5Checksum'];
            this.id = params.id;
            this.parts = params.parts;
            this.name = params.name;
            this.md5Checksum = params.md5Checksum;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.Long.read(_data);
            let parts = await index_js_1.Primitive.Int.read(_data);
            let name = await index_js_1.Primitive.String.read(_data);
            let md5Checksum = await index_js_1.Primitive.String.read(_data);
            return new Raw.InputFile({ id: id, parts: parts, name: name, md5Checksum: md5Checksum });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.parts !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.parts));
            }
            if (this.name !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.name));
            }
            if (this.md5Checksum !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.md5Checksum));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputFile = InputFile;
    class InputFileBig extends index_js_1.TLObject {
        id;
        parts;
        name;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputFileBig';
            this.constructorId = 0xfa4f0bb5;
            this.subclassOfId = 0xe7655f1f;
            this._slots = ['id', 'parts', 'name'];
            this.id = params.id;
            this.parts = params.parts;
            this.name = params.name;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.Long.read(_data);
            let parts = await index_js_1.Primitive.Int.read(_data);
            let name = await index_js_1.Primitive.String.read(_data);
            return new Raw.InputFileBig({ id: id, parts: parts, name: name });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.parts !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.parts));
            }
            if (this.name !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.name));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputFileBig = InputFileBig;
    class InputMediaEmpty extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputMediaEmpty';
            this.constructorId = 0x9664f57f;
            this.subclassOfId = 0xfaf846f4;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputMediaEmpty();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputMediaEmpty = InputMediaEmpty;
    class InputMediaUploadedPhoto extends index_js_1.TLObject {
        spoiler;
        file;
        stickers;
        ttlSeconds;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputMediaUploadedPhoto';
            this.constructorId = 0x1e287d04;
            this.subclassOfId = 0xfaf846f4;
            this._slots = ['spoiler', 'file', 'stickers', 'ttlSeconds'];
            this.spoiler = params.spoiler;
            this.file = params.file;
            this.stickers = params.stickers;
            this.ttlSeconds = params.ttlSeconds;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let spoiler = flags & (1 << 2) ? true : false;
            let file = await index_js_1.TLObject.read(_data);
            let stickers = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : [];
            let ttlSeconds = flags & (1 << 1) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            return new Raw.InputMediaUploadedPhoto({
                spoiler: spoiler,
                file: file,
                stickers: stickers,
                ttlSeconds: ttlSeconds,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.spoiler ? 1 << 2 : 0;
            flags |= this.stickers ? 1 << 0 : 0;
            flags |= this.ttlSeconds !== undefined ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.file !== undefined) {
                b.write(this.file.write());
            }
            if (this.stickers) {
                b.write(index_js_1.Primitive.Vector.write(this.stickers));
            }
            if (this.ttlSeconds !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.ttlSeconds));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputMediaUploadedPhoto = InputMediaUploadedPhoto;
    class InputMediaPhoto extends index_js_1.TLObject {
        spoiler;
        id;
        ttlSeconds;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputMediaPhoto';
            this.constructorId = 0xb3ba0635;
            this.subclassOfId = 0xfaf846f4;
            this._slots = ['spoiler', 'id', 'ttlSeconds'];
            this.spoiler = params.spoiler;
            this.id = params.id;
            this.ttlSeconds = params.ttlSeconds;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let spoiler = flags & (1 << 1) ? true : false;
            let id = await index_js_1.TLObject.read(_data);
            let ttlSeconds = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            return new Raw.InputMediaPhoto({ spoiler: spoiler, id: id, ttlSeconds: ttlSeconds });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.spoiler ? 1 << 1 : 0;
            flags |= this.ttlSeconds !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.id !== undefined) {
                b.write(this.id.write());
            }
            if (this.ttlSeconds !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.ttlSeconds));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputMediaPhoto = InputMediaPhoto;
    class InputMediaGeoPoint extends index_js_1.TLObject {
        geoPoint;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputMediaGeoPoint';
            this.constructorId = 0xf9c44144;
            this.subclassOfId = 0xfaf846f4;
            this._slots = ['geoPoint'];
            this.geoPoint = params.geoPoint;
        }
        static async read(_data, ..._args) {
            let geoPoint = await index_js_1.TLObject.read(_data);
            return new Raw.InputMediaGeoPoint({ geoPoint: geoPoint });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.geoPoint !== undefined) {
                b.write(this.geoPoint.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputMediaGeoPoint = InputMediaGeoPoint;
    class InputMediaContact extends index_js_1.TLObject {
        phoneNumber;
        firstName;
        lastName;
        vcard;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputMediaContact';
            this.constructorId = 0xf8ab7dfb;
            this.subclassOfId = 0xfaf846f4;
            this._slots = ['phoneNumber', 'firstName', 'lastName', 'vcard'];
            this.phoneNumber = params.phoneNumber;
            this.firstName = params.firstName;
            this.lastName = params.lastName;
            this.vcard = params.vcard;
        }
        static async read(_data, ..._args) {
            let phoneNumber = await index_js_1.Primitive.String.read(_data);
            let firstName = await index_js_1.Primitive.String.read(_data);
            let lastName = await index_js_1.Primitive.String.read(_data);
            let vcard = await index_js_1.Primitive.String.read(_data);
            return new Raw.InputMediaContact({
                phoneNumber: phoneNumber,
                firstName: firstName,
                lastName: lastName,
                vcard: vcard,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.phoneNumber !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.phoneNumber));
            }
            if (this.firstName !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.firstName));
            }
            if (this.lastName !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.lastName));
            }
            if (this.vcard !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.vcard));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputMediaContact = InputMediaContact;
    class InputMediaUploadedDocument extends index_js_1.TLObject {
        nosoundVideo;
        forceFile;
        spoiler;
        file;
        thumb;
        mimeType;
        attributes;
        stickers;
        ttlSeconds;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputMediaUploadedDocument';
            this.constructorId = 0x5b38c6c1;
            this.subclassOfId = 0xfaf846f4;
            this._slots = [
                'nosoundVideo',
                'forceFile',
                'spoiler',
                'file',
                'thumb',
                'mimeType',
                'attributes',
                'stickers',
                'ttlSeconds',
            ];
            this.nosoundVideo = params.nosoundVideo;
            this.forceFile = params.forceFile;
            this.spoiler = params.spoiler;
            this.file = params.file;
            this.thumb = params.thumb;
            this.mimeType = params.mimeType;
            this.attributes = params.attributes;
            this.stickers = params.stickers;
            this.ttlSeconds = params.ttlSeconds;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let nosoundVideo = flags & (1 << 3) ? true : false;
            let forceFile = flags & (1 << 4) ? true : false;
            let spoiler = flags & (1 << 5) ? true : false;
            let file = await index_js_1.TLObject.read(_data);
            let thumb = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
            let mimeType = await index_js_1.Primitive.String.read(_data);
            let attributes = await index_js_1.TLObject.read(_data);
            let stickers = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : [];
            let ttlSeconds = flags & (1 << 1) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            return new Raw.InputMediaUploadedDocument({
                nosoundVideo: nosoundVideo,
                forceFile: forceFile,
                spoiler: spoiler,
                file: file,
                thumb: thumb,
                mimeType: mimeType,
                attributes: attributes,
                stickers: stickers,
                ttlSeconds: ttlSeconds,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.nosoundVideo ? 1 << 3 : 0;
            flags |= this.forceFile ? 1 << 4 : 0;
            flags |= this.spoiler ? 1 << 5 : 0;
            flags |= this.thumb !== undefined ? 1 << 2 : 0;
            flags |= this.stickers ? 1 << 0 : 0;
            flags |= this.ttlSeconds !== undefined ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.file !== undefined) {
                b.write(this.file.write());
            }
            if (this.thumb !== undefined) {
                b.write(this.thumb.write());
            }
            if (this.mimeType !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.mimeType));
            }
            if (this.attributes) {
                b.write(index_js_1.Primitive.Vector.write(this.attributes));
            }
            if (this.stickers) {
                b.write(index_js_1.Primitive.Vector.write(this.stickers));
            }
            if (this.ttlSeconds !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.ttlSeconds));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputMediaUploadedDocument = InputMediaUploadedDocument;
    class InputMediaDocument extends index_js_1.TLObject {
        spoiler;
        id;
        ttlSeconds;
        query;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputMediaDocument';
            this.constructorId = 0x33473058;
            this.subclassOfId = 0xfaf846f4;
            this._slots = ['spoiler', 'id', 'ttlSeconds', 'query'];
            this.spoiler = params.spoiler;
            this.id = params.id;
            this.ttlSeconds = params.ttlSeconds;
            this.query = params.query;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let spoiler = flags & (1 << 2) ? true : false;
            let id = await index_js_1.TLObject.read(_data);
            let ttlSeconds = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let query = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
            return new Raw.InputMediaDocument({
                spoiler: spoiler,
                id: id,
                ttlSeconds: ttlSeconds,
                query: query,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.spoiler ? 1 << 2 : 0;
            flags |= this.ttlSeconds !== undefined ? 1 << 0 : 0;
            flags |= this.query !== undefined ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.id !== undefined) {
                b.write(this.id.write());
            }
            if (this.ttlSeconds !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.ttlSeconds));
            }
            if (this.query !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.query));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputMediaDocument = InputMediaDocument;
    class InputMediaVenue extends index_js_1.TLObject {
        geoPoint;
        title;
        address;
        provider;
        venueId;
        venueType;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputMediaVenue';
            this.constructorId = 0xc13d1c11;
            this.subclassOfId = 0xfaf846f4;
            this._slots = ['geoPoint', 'title', 'address', 'provider', 'venueId', 'venueType'];
            this.geoPoint = params.geoPoint;
            this.title = params.title;
            this.address = params.address;
            this.provider = params.provider;
            this.venueId = params.venueId;
            this.venueType = params.venueType;
        }
        static async read(_data, ..._args) {
            let geoPoint = await index_js_1.TLObject.read(_data);
            let title = await index_js_1.Primitive.String.read(_data);
            let address = await index_js_1.Primitive.String.read(_data);
            let provider = await index_js_1.Primitive.String.read(_data);
            let venueId = await index_js_1.Primitive.String.read(_data);
            let venueType = await index_js_1.Primitive.String.read(_data);
            return new Raw.InputMediaVenue({
                geoPoint: geoPoint,
                title: title,
                address: address,
                provider: provider,
                venueId: venueId,
                venueType: venueType,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.geoPoint !== undefined) {
                b.write(this.geoPoint.write());
            }
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            if (this.address !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.address));
            }
            if (this.provider !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.provider));
            }
            if (this.venueId !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.venueId));
            }
            if (this.venueType !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.venueType));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputMediaVenue = InputMediaVenue;
    class InputMediaPhotoExternal extends index_js_1.TLObject {
        spoiler;
        url;
        ttlSeconds;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputMediaPhotoExternal';
            this.constructorId = 0xe5bbfe1a;
            this.subclassOfId = 0xfaf846f4;
            this._slots = ['spoiler', 'url', 'ttlSeconds'];
            this.spoiler = params.spoiler;
            this.url = params.url;
            this.ttlSeconds = params.ttlSeconds;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let spoiler = flags & (1 << 1) ? true : false;
            let url = await index_js_1.Primitive.String.read(_data);
            let ttlSeconds = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            return new Raw.InputMediaPhotoExternal({
                spoiler: spoiler,
                url: url,
                ttlSeconds: ttlSeconds,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.spoiler ? 1 << 1 : 0;
            flags |= this.ttlSeconds !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.url !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.url));
            }
            if (this.ttlSeconds !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.ttlSeconds));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputMediaPhotoExternal = InputMediaPhotoExternal;
    class InputMediaDocumentExternal extends index_js_1.TLObject {
        spoiler;
        url;
        ttlSeconds;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputMediaDocumentExternal';
            this.constructorId = 0xfb52dc99;
            this.subclassOfId = 0xfaf846f4;
            this._slots = ['spoiler', 'url', 'ttlSeconds'];
            this.spoiler = params.spoiler;
            this.url = params.url;
            this.ttlSeconds = params.ttlSeconds;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let spoiler = flags & (1 << 1) ? true : false;
            let url = await index_js_1.Primitive.String.read(_data);
            let ttlSeconds = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            return new Raw.InputMediaDocumentExternal({
                spoiler: spoiler,
                url: url,
                ttlSeconds: ttlSeconds,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.spoiler ? 1 << 1 : 0;
            flags |= this.ttlSeconds !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.url !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.url));
            }
            if (this.ttlSeconds !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.ttlSeconds));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputMediaDocumentExternal = InputMediaDocumentExternal;
    class InputMediaGame extends index_js_1.TLObject {
        id;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputMediaGame';
            this.constructorId = 0xd33f43f3;
            this.subclassOfId = 0xfaf846f4;
            this._slots = ['id'];
            this.id = params.id;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.TLObject.read(_data);
            return new Raw.InputMediaGame({ id: id });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(this.id.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputMediaGame = InputMediaGame;
    class InputMediaInvoice extends index_js_1.TLObject {
        title;
        description;
        photo;
        invoice;
        payload;
        provider;
        providerData;
        startParam;
        extendedMedia;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputMediaInvoice';
            this.constructorId = 0x405fef0d;
            this.subclassOfId = 0xfaf846f4;
            this._slots = [
                'title',
                'description',
                'photo',
                'invoice',
                'payload',
                'provider',
                'providerData',
                'startParam',
                'extendedMedia',
            ];
            this.title = params.title;
            this.description = params.description;
            this.photo = params.photo;
            this.invoice = params.invoice;
            this.payload = params.payload;
            this.provider = params.provider;
            this.providerData = params.providerData;
            this.startParam = params.startParam;
            this.extendedMedia = params.extendedMedia;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let title = await index_js_1.Primitive.String.read(_data);
            let description = await index_js_1.Primitive.String.read(_data);
            let photo = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
            let invoice = await index_js_1.TLObject.read(_data);
            let payload = await index_js_1.Primitive.Bytes.read(_data);
            let provider = flags & (1 << 3) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let providerData = await index_js_1.TLObject.read(_data);
            let startParam = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let extendedMedia = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.InputMediaInvoice({
                title: title,
                description: description,
                photo: photo,
                invoice: invoice,
                payload: payload,
                provider: provider,
                providerData: providerData,
                startParam: startParam,
                extendedMedia: extendedMedia,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.photo !== undefined ? 1 << 0 : 0;
            flags |= this.provider !== undefined ? 1 << 3 : 0;
            flags |= this.startParam !== undefined ? 1 << 1 : 0;
            flags |= this.extendedMedia !== undefined ? 1 << 2 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            if (this.description !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.description));
            }
            if (this.photo !== undefined) {
                b.write(this.photo.write());
            }
            if (this.invoice !== undefined) {
                b.write(this.invoice.write());
            }
            if (this.payload !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.payload));
            }
            if (this.provider !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.provider));
            }
            if (this.providerData !== undefined) {
                b.write(this.providerData.write());
            }
            if (this.startParam !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.startParam));
            }
            if (this.extendedMedia !== undefined) {
                b.write(this.extendedMedia.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputMediaInvoice = InputMediaInvoice;
    class InputMediaGeoLive extends index_js_1.TLObject {
        stopped;
        geoPoint;
        heading;
        period;
        proximityNotificationRadius;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputMediaGeoLive';
            this.constructorId = 0x971fa843;
            this.subclassOfId = 0xfaf846f4;
            this._slots = ['stopped', 'geoPoint', 'heading', 'period', 'proximityNotificationRadius'];
            this.stopped = params.stopped;
            this.geoPoint = params.geoPoint;
            this.heading = params.heading;
            this.period = params.period;
            this.proximityNotificationRadius = params.proximityNotificationRadius;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let stopped = flags & (1 << 0) ? true : false;
            let geoPoint = await index_js_1.TLObject.read(_data);
            let heading = flags & (1 << 2) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let period = flags & (1 << 1) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let proximityNotificationRadius = flags & (1 << 3) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            return new Raw.InputMediaGeoLive({
                stopped: stopped,
                geoPoint: geoPoint,
                heading: heading,
                period: period,
                proximityNotificationRadius: proximityNotificationRadius,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.stopped ? 1 << 0 : 0;
            flags |= this.heading !== undefined ? 1 << 2 : 0;
            flags |= this.period !== undefined ? 1 << 1 : 0;
            flags |= this.proximityNotificationRadius !== undefined ? 1 << 3 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.geoPoint !== undefined) {
                b.write(this.geoPoint.write());
            }
            if (this.heading !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.heading));
            }
            if (this.period !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.period));
            }
            if (this.proximityNotificationRadius !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.proximityNotificationRadius));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputMediaGeoLive = InputMediaGeoLive;
    class InputMediaPoll extends index_js_1.TLObject {
        poll;
        correctAnswers;
        solution;
        solutionEntities;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputMediaPoll';
            this.constructorId = 0xf94e5f1;
            this.subclassOfId = 0xfaf846f4;
            this._slots = ['poll', 'correctAnswers', 'solution', 'solutionEntities'];
            this.poll = params.poll;
            this.correctAnswers = params.correctAnswers;
            this.solution = params.solution;
            this.solutionEntities = params.solutionEntities;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let poll = await index_js_1.TLObject.read(_data);
            let correctAnswers = flags & (1 << 0) ? await index_js_1.TLObject.read(_data, index_js_1.Primitive.Bytes) : [];
            let solution = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let solutionEntities = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : [];
            return new Raw.InputMediaPoll({
                poll: poll,
                correctAnswers: correctAnswers,
                solution: solution,
                solutionEntities: solutionEntities,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.correctAnswers ? 1 << 0 : 0;
            flags |= this.solution !== undefined ? 1 << 1 : 0;
            flags |= this.solutionEntities ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.poll !== undefined) {
                b.write(this.poll.write());
            }
            if (this.correctAnswers) {
                b.write(index_js_1.Primitive.Vector.write(this.correctAnswers, index_js_1.Primitive.Bytes));
            }
            if (this.solution !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.solution));
            }
            if (this.solutionEntities) {
                b.write(index_js_1.Primitive.Vector.write(this.solutionEntities));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputMediaPoll = InputMediaPoll;
    class InputMediaDice extends index_js_1.TLObject {
        emoticon;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputMediaDice';
            this.constructorId = 0xe66fbf7b;
            this.subclassOfId = 0xfaf846f4;
            this._slots = ['emoticon'];
            this.emoticon = params.emoticon;
        }
        static async read(_data, ..._args) {
            let emoticon = await index_js_1.Primitive.String.read(_data);
            return new Raw.InputMediaDice({ emoticon: emoticon });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.emoticon !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.emoticon));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputMediaDice = InputMediaDice;
    class InputMediaStory extends index_js_1.TLObject {
        peer;
        id;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputMediaStory';
            this.constructorId = 0x89fdd778;
            this.subclassOfId = 0xfaf846f4;
            this._slots = ['peer', 'id'];
            this.peer = params.peer;
            this.id = params.id;
        }
        static async read(_data, ..._args) {
            let peer = await index_js_1.TLObject.read(_data);
            let id = await index_js_1.Primitive.Int.read(_data);
            return new Raw.InputMediaStory({ peer: peer, id: id });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.id));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputMediaStory = InputMediaStory;
    class InputMediaWebPage extends index_js_1.TLObject {
        forceLargeMedia;
        forceSmallMedia;
        optional;
        url;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputMediaWebPage';
            this.constructorId = 0xc21b8849;
            this.subclassOfId = 0xfaf846f4;
            this._slots = ['forceLargeMedia', 'forceSmallMedia', 'optional', 'url'];
            this.forceLargeMedia = params.forceLargeMedia;
            this.forceSmallMedia = params.forceSmallMedia;
            this.optional = params.optional;
            this.url = params.url;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let forceLargeMedia = flags & (1 << 0) ? true : false;
            let forceSmallMedia = flags & (1 << 1) ? true : false;
            let optional = flags & (1 << 2) ? true : false;
            let url = await index_js_1.Primitive.String.read(_data);
            return new Raw.InputMediaWebPage({
                forceLargeMedia: forceLargeMedia,
                forceSmallMedia: forceSmallMedia,
                optional: optional,
                url: url,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.forceLargeMedia ? 1 << 0 : 0;
            flags |= this.forceSmallMedia ? 1 << 1 : 0;
            flags |= this.optional ? 1 << 2 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.url !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.url));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputMediaWebPage = InputMediaWebPage;
    class InputChatPhotoEmpty extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputChatPhotoEmpty';
            this.constructorId = 0x1ca48f57;
            this.subclassOfId = 0xd4eb2d74;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputChatPhotoEmpty();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputChatPhotoEmpty = InputChatPhotoEmpty;
    class InputChatUploadedPhoto extends index_js_1.TLObject {
        file;
        video;
        videoStartTs;
        videoEmojiMarkup;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputChatUploadedPhoto';
            this.constructorId = 0xbdcdaec0;
            this.subclassOfId = 0xd4eb2d74;
            this._slots = ['file', 'video', 'videoStartTs', 'videoEmojiMarkup'];
            this.file = params.file;
            this.video = params.video;
            this.videoStartTs = params.videoStartTs;
            this.videoEmojiMarkup = params.videoEmojiMarkup;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let file = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
            let video = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : undefined;
            let videoStartTs = flags & (1 << 2) ? await index_js_1.Primitive.Double.read(_data) : undefined;
            let videoEmojiMarkup = flags & (1 << 3) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.InputChatUploadedPhoto({
                file: file,
                video: video,
                videoStartTs: videoStartTs,
                videoEmojiMarkup: videoEmojiMarkup,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.file !== undefined ? 1 << 0 : 0;
            flags |= this.video !== undefined ? 1 << 1 : 0;
            flags |= this.videoStartTs !== undefined ? 1 << 2 : 0;
            flags |= this.videoEmojiMarkup !== undefined ? 1 << 3 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.file !== undefined) {
                b.write(this.file.write());
            }
            if (this.video !== undefined) {
                b.write(this.video.write());
            }
            if (this.videoStartTs !== undefined) {
                b.write(index_js_1.Primitive.Double.write(this.videoStartTs));
            }
            if (this.videoEmojiMarkup !== undefined) {
                b.write(this.videoEmojiMarkup.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputChatUploadedPhoto = InputChatUploadedPhoto;
    class InputChatPhoto extends index_js_1.TLObject {
        id;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputChatPhoto';
            this.constructorId = 0x8953ad37;
            this.subclassOfId = 0xd4eb2d74;
            this._slots = ['id'];
            this.id = params.id;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.TLObject.read(_data);
            return new Raw.InputChatPhoto({ id: id });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(this.id.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputChatPhoto = InputChatPhoto;
    class InputGeoPointEmpty extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputGeoPointEmpty';
            this.constructorId = 0xe4c123d6;
            this.subclassOfId = 0x430d225;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputGeoPointEmpty();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputGeoPointEmpty = InputGeoPointEmpty;
    class InputGeoPoint extends index_js_1.TLObject {
        lat;
        long;
        accuracyRadius;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputGeoPoint';
            this.constructorId = 0x48222faf;
            this.subclassOfId = 0x430d225;
            this._slots = ['lat', 'long', 'accuracyRadius'];
            this.lat = params.lat;
            this.long = params.long;
            this.accuracyRadius = params.accuracyRadius;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let lat = await index_js_1.Primitive.Double.read(_data);
            let long = await index_js_1.Primitive.Double.read(_data);
            let accuracyRadius = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            return new Raw.InputGeoPoint({ lat: lat, long: long, accuracyRadius: accuracyRadius });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.accuracyRadius !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.lat !== undefined) {
                b.write(index_js_1.Primitive.Double.write(this.lat));
            }
            if (this.long !== undefined) {
                b.write(index_js_1.Primitive.Double.write(this.long));
            }
            if (this.accuracyRadius !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.accuracyRadius));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputGeoPoint = InputGeoPoint;
    class InputPhotoEmpty extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputPhotoEmpty';
            this.constructorId = 0x1cd7bf0d;
            this.subclassOfId = 0x846363e0;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputPhotoEmpty();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputPhotoEmpty = InputPhotoEmpty;
    class InputPhoto extends index_js_1.TLObject {
        id;
        accessHash;
        fileReference;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputPhoto';
            this.constructorId = 0x3bb3b94a;
            this.subclassOfId = 0x846363e0;
            this._slots = ['id', 'accessHash', 'fileReference'];
            this.id = params.id;
            this.accessHash = params.accessHash;
            this.fileReference = params.fileReference;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.Long.read(_data);
            let accessHash = await index_js_1.Primitive.Long.read(_data);
            let fileReference = await index_js_1.Primitive.Bytes.read(_data);
            return new Raw.InputPhoto({ id: id, accessHash: accessHash, fileReference: fileReference });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.accessHash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.accessHash));
            }
            if (this.fileReference !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.fileReference));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputPhoto = InputPhoto;
    class InputFileLocation extends index_js_1.TLObject {
        volumeId;
        localId;
        secret;
        fileReference;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputFileLocation';
            this.constructorId = 0xdfdaabe1;
            this.subclassOfId = 0x1523d462;
            this._slots = ['volumeId', 'localId', 'secret', 'fileReference'];
            this.volumeId = params.volumeId;
            this.localId = params.localId;
            this.secret = params.secret;
            this.fileReference = params.fileReference;
        }
        static async read(_data, ..._args) {
            let volumeId = await index_js_1.Primitive.Long.read(_data);
            let localId = await index_js_1.Primitive.Int.read(_data);
            let secret = await index_js_1.Primitive.Long.read(_data);
            let fileReference = await index_js_1.Primitive.Bytes.read(_data);
            return new Raw.InputFileLocation({
                volumeId: volumeId,
                localId: localId,
                secret: secret,
                fileReference: fileReference,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.volumeId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.volumeId));
            }
            if (this.localId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.localId));
            }
            if (this.secret !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.secret));
            }
            if (this.fileReference !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.fileReference));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputFileLocation = InputFileLocation;
    class InputEncryptedFileLocation extends index_js_1.TLObject {
        id;
        accessHash;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputEncryptedFileLocation';
            this.constructorId = 0xf5235d55;
            this.subclassOfId = 0x1523d462;
            this._slots = ['id', 'accessHash'];
            this.id = params.id;
            this.accessHash = params.accessHash;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.Long.read(_data);
            let accessHash = await index_js_1.Primitive.Long.read(_data);
            return new Raw.InputEncryptedFileLocation({ id: id, accessHash: accessHash });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.accessHash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.accessHash));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputEncryptedFileLocation = InputEncryptedFileLocation;
    class InputDocumentFileLocation extends index_js_1.TLObject {
        id;
        accessHash;
        fileReference;
        thumbSize;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputDocumentFileLocation';
            this.constructorId = 0xbad07584;
            this.subclassOfId = 0x1523d462;
            this._slots = ['id', 'accessHash', 'fileReference', 'thumbSize'];
            this.id = params.id;
            this.accessHash = params.accessHash;
            this.fileReference = params.fileReference;
            this.thumbSize = params.thumbSize;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.Long.read(_data);
            let accessHash = await index_js_1.Primitive.Long.read(_data);
            let fileReference = await index_js_1.Primitive.Bytes.read(_data);
            let thumbSize = await index_js_1.Primitive.String.read(_data);
            return new Raw.InputDocumentFileLocation({
                id: id,
                accessHash: accessHash,
                fileReference: fileReference,
                thumbSize: thumbSize,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.accessHash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.accessHash));
            }
            if (this.fileReference !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.fileReference));
            }
            if (this.thumbSize !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.thumbSize));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputDocumentFileLocation = InputDocumentFileLocation;
    class InputSecureFileLocation extends index_js_1.TLObject {
        id;
        accessHash;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputSecureFileLocation';
            this.constructorId = 0xcbc7ee28;
            this.subclassOfId = 0x1523d462;
            this._slots = ['id', 'accessHash'];
            this.id = params.id;
            this.accessHash = params.accessHash;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.Long.read(_data);
            let accessHash = await index_js_1.Primitive.Long.read(_data);
            return new Raw.InputSecureFileLocation({ id: id, accessHash: accessHash });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.accessHash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.accessHash));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputSecureFileLocation = InputSecureFileLocation;
    class InputTakeoutFileLocation extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputTakeoutFileLocation';
            this.constructorId = 0x29be5899;
            this.subclassOfId = 0x1523d462;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputTakeoutFileLocation();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputTakeoutFileLocation = InputTakeoutFileLocation;
    class InputPhotoFileLocation extends index_js_1.TLObject {
        id;
        accessHash;
        fileReference;
        thumbSize;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputPhotoFileLocation';
            this.constructorId = 0x40181ffe;
            this.subclassOfId = 0x1523d462;
            this._slots = ['id', 'accessHash', 'fileReference', 'thumbSize'];
            this.id = params.id;
            this.accessHash = params.accessHash;
            this.fileReference = params.fileReference;
            this.thumbSize = params.thumbSize;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.Long.read(_data);
            let accessHash = await index_js_1.Primitive.Long.read(_data);
            let fileReference = await index_js_1.Primitive.Bytes.read(_data);
            let thumbSize = await index_js_1.Primitive.String.read(_data);
            return new Raw.InputPhotoFileLocation({
                id: id,
                accessHash: accessHash,
                fileReference: fileReference,
                thumbSize: thumbSize,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.accessHash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.accessHash));
            }
            if (this.fileReference !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.fileReference));
            }
            if (this.thumbSize !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.thumbSize));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputPhotoFileLocation = InputPhotoFileLocation;
    class InputPhotoLegacyFileLocation extends index_js_1.TLObject {
        id;
        accessHash;
        fileReference;
        volumeId;
        localId;
        secret;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputPhotoLegacyFileLocation';
            this.constructorId = 0xd83466f3;
            this.subclassOfId = 0x1523d462;
            this._slots = ['id', 'accessHash', 'fileReference', 'volumeId', 'localId', 'secret'];
            this.id = params.id;
            this.accessHash = params.accessHash;
            this.fileReference = params.fileReference;
            this.volumeId = params.volumeId;
            this.localId = params.localId;
            this.secret = params.secret;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.Long.read(_data);
            let accessHash = await index_js_1.Primitive.Long.read(_data);
            let fileReference = await index_js_1.Primitive.Bytes.read(_data);
            let volumeId = await index_js_1.Primitive.Long.read(_data);
            let localId = await index_js_1.Primitive.Int.read(_data);
            let secret = await index_js_1.Primitive.Long.read(_data);
            return new Raw.InputPhotoLegacyFileLocation({
                id: id,
                accessHash: accessHash,
                fileReference: fileReference,
                volumeId: volumeId,
                localId: localId,
                secret: secret,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.accessHash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.accessHash));
            }
            if (this.fileReference !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.fileReference));
            }
            if (this.volumeId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.volumeId));
            }
            if (this.localId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.localId));
            }
            if (this.secret !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.secret));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputPhotoLegacyFileLocation = InputPhotoLegacyFileLocation;
    class InputPeerPhotoFileLocation extends index_js_1.TLObject {
        big;
        peer;
        photoId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputPeerPhotoFileLocation';
            this.constructorId = 0x37257e99;
            this.subclassOfId = 0x1523d462;
            this._slots = ['big', 'peer', 'photoId'];
            this.big = params.big;
            this.peer = params.peer;
            this.photoId = params.photoId;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let big = flags & (1 << 0) ? true : false;
            let peer = await index_js_1.TLObject.read(_data);
            let photoId = await index_js_1.Primitive.Long.read(_data);
            return new Raw.InputPeerPhotoFileLocation({ big: big, peer: peer, photoId: photoId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.big ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.photoId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.photoId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputPeerPhotoFileLocation = InputPeerPhotoFileLocation;
    class InputStickerSetThumb extends index_js_1.TLObject {
        stickerset;
        thumbVersion;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputStickerSetThumb';
            this.constructorId = 0x9d84f3db;
            this.subclassOfId = 0x1523d462;
            this._slots = ['stickerset', 'thumbVersion'];
            this.stickerset = params.stickerset;
            this.thumbVersion = params.thumbVersion;
        }
        static async read(_data, ..._args) {
            let stickerset = await index_js_1.TLObject.read(_data);
            let thumbVersion = await index_js_1.Primitive.Int.read(_data);
            return new Raw.InputStickerSetThumb({ stickerset: stickerset, thumbVersion: thumbVersion });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.stickerset !== undefined) {
                b.write(this.stickerset.write());
            }
            if (this.thumbVersion !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.thumbVersion));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputStickerSetThumb = InputStickerSetThumb;
    class InputGroupCallStream extends index_js_1.TLObject {
        call;
        timeMs;
        scale;
        videoChannel;
        videoQuality;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputGroupCallStream';
            this.constructorId = 0x598a92a;
            this.subclassOfId = 0x1523d462;
            this._slots = ['call', 'timeMs', 'scale', 'videoChannel', 'videoQuality'];
            this.call = params.call;
            this.timeMs = params.timeMs;
            this.scale = params.scale;
            this.videoChannel = params.videoChannel;
            this.videoQuality = params.videoQuality;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let call = await index_js_1.TLObject.read(_data);
            let timeMs = await index_js_1.Primitive.Long.read(_data);
            let scale = await index_js_1.Primitive.Int.read(_data);
            let videoChannel = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let videoQuality = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            return new Raw.InputGroupCallStream({
                call: call,
                timeMs: timeMs,
                scale: scale,
                videoChannel: videoChannel,
                videoQuality: videoQuality,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.videoChannel !== undefined ? 1 << 0 : 0;
            flags |= this.videoQuality !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.call !== undefined) {
                b.write(this.call.write());
            }
            if (this.timeMs !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.timeMs));
            }
            if (this.scale !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.scale));
            }
            if (this.videoChannel !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.videoChannel));
            }
            if (this.videoQuality !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.videoQuality));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputGroupCallStream = InputGroupCallStream;
    class PeerUser extends index_js_1.TLObject {
        userId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PeerUser';
            this.constructorId = 0x59511722;
            this.subclassOfId = 0x2d45687;
            this._slots = ['userId'];
            this.userId = params.userId;
        }
        static async read(_data, ..._args) {
            let userId = await index_js_1.Primitive.Long.read(_data);
            return new Raw.PeerUser({ userId: userId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PeerUser = PeerUser;
    class PeerChat extends index_js_1.TLObject {
        chatId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PeerChat';
            this.constructorId = 0x36c6019a;
            this.subclassOfId = 0x2d45687;
            this._slots = ['chatId'];
            this.chatId = params.chatId;
        }
        static async read(_data, ..._args) {
            let chatId = await index_js_1.Primitive.Long.read(_data);
            return new Raw.PeerChat({ chatId: chatId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.chatId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.chatId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PeerChat = PeerChat;
    class PeerChannel extends index_js_1.TLObject {
        channelId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PeerChannel';
            this.constructorId = 0xa2a5371e;
            this.subclassOfId = 0x2d45687;
            this._slots = ['channelId'];
            this.channelId = params.channelId;
        }
        static async read(_data, ..._args) {
            let channelId = await index_js_1.Primitive.Long.read(_data);
            return new Raw.PeerChannel({ channelId: channelId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.channelId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.channelId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PeerChannel = PeerChannel;
    class UserEmpty extends index_js_1.TLObject {
        id;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UserEmpty';
            this.constructorId = 0xd3bc4b7a;
            this.subclassOfId = 0x2da17977;
            this._slots = ['id'];
            this.id = params.id;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.Long.read(_data);
            return new Raw.UserEmpty({ id: id });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UserEmpty = UserEmpty;
    class User extends index_js_1.TLObject {
        self;
        contact;
        mutualContact;
        deleted;
        bot;
        botChatHistory;
        botNochats;
        verified;
        restricted;
        min;
        botInlineGeo;
        support;
        scam;
        applyMinPhoto;
        fake;
        botAttachMenu;
        premium;
        attachMenuEnabled;
        botCanEdit;
        closeFriend;
        storiesHidden;
        storiesUnavailable;
        contactRequirePremium;
        botBusiness;
        id;
        accessHash;
        firstName;
        lastName;
        username;
        phone;
        photo;
        status;
        botInfoVersion;
        restrictionReason;
        botInlinePlaceholder;
        langCode;
        emojiStatus;
        usernames;
        storiesMaxId;
        color;
        profileColor;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'User';
            this.constructorId = 0x215c4438;
            this.subclassOfId = 0x2da17977;
            this._slots = [
                'self',
                'contact',
                'mutualContact',
                'deleted',
                'bot',
                'botChatHistory',
                'botNochats',
                'verified',
                'restricted',
                'min',
                'botInlineGeo',
                'support',
                'scam',
                'applyMinPhoto',
                'fake',
                'botAttachMenu',
                'premium',
                'attachMenuEnabled',
                'botCanEdit',
                'closeFriend',
                'storiesHidden',
                'storiesUnavailable',
                'contactRequirePremium',
                'botBusiness',
                'id',
                'accessHash',
                'firstName',
                'lastName',
                'username',
                'phone',
                'photo',
                'status',
                'botInfoVersion',
                'restrictionReason',
                'botInlinePlaceholder',
                'langCode',
                'emojiStatus',
                'usernames',
                'storiesMaxId',
                'color',
                'profileColor',
            ];
            this.self = params.self;
            this.contact = params.contact;
            this.mutualContact = params.mutualContact;
            this.deleted = params.deleted;
            this.bot = params.bot;
            this.botChatHistory = params.botChatHistory;
            this.botNochats = params.botNochats;
            this.verified = params.verified;
            this.restricted = params.restricted;
            this.min = params.min;
            this.botInlineGeo = params.botInlineGeo;
            this.support = params.support;
            this.scam = params.scam;
            this.applyMinPhoto = params.applyMinPhoto;
            this.fake = params.fake;
            this.botAttachMenu = params.botAttachMenu;
            this.premium = params.premium;
            this.attachMenuEnabled = params.attachMenuEnabled;
            this.botCanEdit = params.botCanEdit;
            this.closeFriend = params.closeFriend;
            this.storiesHidden = params.storiesHidden;
            this.storiesUnavailable = params.storiesUnavailable;
            this.contactRequirePremium = params.contactRequirePremium;
            this.botBusiness = params.botBusiness;
            this.id = params.id;
            this.accessHash = params.accessHash;
            this.firstName = params.firstName;
            this.lastName = params.lastName;
            this.username = params.username;
            this.phone = params.phone;
            this.photo = params.photo;
            this.status = params.status;
            this.botInfoVersion = params.botInfoVersion;
            this.restrictionReason = params.restrictionReason;
            this.botInlinePlaceholder = params.botInlinePlaceholder;
            this.langCode = params.langCode;
            this.emojiStatus = params.emojiStatus;
            this.usernames = params.usernames;
            this.storiesMaxId = params.storiesMaxId;
            this.color = params.color;
            this.profileColor = params.profileColor;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let self = flags & (1 << 10) ? true : false;
            let contact = flags & (1 << 11) ? true : false;
            let mutualContact = flags & (1 << 12) ? true : false;
            let deleted = flags & (1 << 13) ? true : false;
            let bot = flags & (1 << 14) ? true : false;
            let botChatHistory = flags & (1 << 15) ? true : false;
            let botNochats = flags & (1 << 16) ? true : false;
            let verified = flags & (1 << 17) ? true : false;
            let restricted = flags & (1 << 18) ? true : false;
            let min = flags & (1 << 20) ? true : false;
            let botInlineGeo = flags & (1 << 21) ? true : false;
            let support = flags & (1 << 23) ? true : false;
            let scam = flags & (1 << 24) ? true : false;
            let applyMinPhoto = flags & (1 << 25) ? true : false;
            let fake = flags & (1 << 26) ? true : false;
            let botAttachMenu = flags & (1 << 27) ? true : false;
            let premium = flags & (1 << 28) ? true : false;
            let attachMenuEnabled = flags & (1 << 29) ? true : false;
            let flags2 = await index_js_1.Primitive.Int.read(_data);
            let botCanEdit = flags2 & (1 << 1) ? true : false;
            let closeFriend = flags2 & (1 << 2) ? true : false;
            let storiesHidden = flags2 & (1 << 3) ? true : false;
            let storiesUnavailable = flags2 & (1 << 4) ? true : false;
            let contactRequirePremium = flags2 & (1 << 10) ? true : false;
            let botBusiness = flags2 & (1 << 11) ? true : false;
            let id = await index_js_1.Primitive.Long.read(_data);
            let accessHash = flags & (1 << 0) ? await index_js_1.Primitive.Long.read(_data) : undefined;
            let firstName = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let lastName = flags & (1 << 2) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let username = flags & (1 << 3) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let phone = flags & (1 << 4) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let photo = flags & (1 << 5) ? await index_js_1.TLObject.read(_data) : undefined;
            let status = flags & (1 << 6) ? await index_js_1.TLObject.read(_data) : undefined;
            let botInfoVersion = flags & (1 << 14) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let restrictionReason = flags & (1 << 18) ? await index_js_1.TLObject.read(_data) : [];
            let botInlinePlaceholder = flags & (1 << 19) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let langCode = flags & (1 << 22) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let emojiStatus = flags & (1 << 30) ? await index_js_1.TLObject.read(_data) : undefined;
            let usernames = flags2 & (1 << 0) ? await index_js_1.TLObject.read(_data) : [];
            let storiesMaxId = flags2 & (1 << 5) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let color = flags2 & (1 << 8) ? await index_js_1.TLObject.read(_data) : undefined;
            let profileColor = flags2 & (1 << 9) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.User({
                self: self,
                contact: contact,
                mutualContact: mutualContact,
                deleted: deleted,
                bot: bot,
                botChatHistory: botChatHistory,
                botNochats: botNochats,
                verified: verified,
                restricted: restricted,
                min: min,
                botInlineGeo: botInlineGeo,
                support: support,
                scam: scam,
                applyMinPhoto: applyMinPhoto,
                fake: fake,
                botAttachMenu: botAttachMenu,
                premium: premium,
                attachMenuEnabled: attachMenuEnabled,
                botCanEdit: botCanEdit,
                closeFriend: closeFriend,
                storiesHidden: storiesHidden,
                storiesUnavailable: storiesUnavailable,
                contactRequirePremium: contactRequirePremium,
                botBusiness: botBusiness,
                id: id,
                accessHash: accessHash,
                firstName: firstName,
                lastName: lastName,
                username: username,
                phone: phone,
                photo: photo,
                status: status,
                botInfoVersion: botInfoVersion,
                restrictionReason: restrictionReason,
                botInlinePlaceholder: botInlinePlaceholder,
                langCode: langCode,
                emojiStatus: emojiStatus,
                usernames: usernames,
                storiesMaxId: storiesMaxId,
                color: color,
                profileColor: profileColor,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.self ? 1 << 10 : 0;
            flags |= this.contact ? 1 << 11 : 0;
            flags |= this.mutualContact ? 1 << 12 : 0;
            flags |= this.deleted ? 1 << 13 : 0;
            flags |= this.bot ? 1 << 14 : 0;
            flags |= this.botChatHistory ? 1 << 15 : 0;
            flags |= this.botNochats ? 1 << 16 : 0;
            flags |= this.verified ? 1 << 17 : 0;
            flags |= this.restricted ? 1 << 18 : 0;
            flags |= this.min ? 1 << 20 : 0;
            flags |= this.botInlineGeo ? 1 << 21 : 0;
            flags |= this.support ? 1 << 23 : 0;
            flags |= this.scam ? 1 << 24 : 0;
            flags |= this.applyMinPhoto ? 1 << 25 : 0;
            flags |= this.fake ? 1 << 26 : 0;
            flags |= this.botAttachMenu ? 1 << 27 : 0;
            flags |= this.premium ? 1 << 28 : 0;
            flags |= this.attachMenuEnabled ? 1 << 29 : 0;
            flags |= this.accessHash !== undefined ? 1 << 0 : 0;
            flags |= this.firstName !== undefined ? 1 << 1 : 0;
            flags |= this.lastName !== undefined ? 1 << 2 : 0;
            flags |= this.username !== undefined ? 1 << 3 : 0;
            flags |= this.phone !== undefined ? 1 << 4 : 0;
            flags |= this.photo !== undefined ? 1 << 5 : 0;
            flags |= this.status !== undefined ? 1 << 6 : 0;
            flags |= this.botInfoVersion !== undefined ? 1 << 14 : 0;
            flags |= this.restrictionReason ? 1 << 18 : 0;
            flags |= this.botInlinePlaceholder !== undefined ? 1 << 19 : 0;
            flags |= this.langCode !== undefined ? 1 << 22 : 0;
            flags |= this.emojiStatus !== undefined ? 1 << 30 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            let flags2 = 0;
            flags2 |= this.botCanEdit ? 1 << 1 : 0;
            flags2 |= this.closeFriend ? 1 << 2 : 0;
            flags2 |= this.storiesHidden ? 1 << 3 : 0;
            flags2 |= this.storiesUnavailable ? 1 << 4 : 0;
            flags2 |= this.contactRequirePremium ? 1 << 10 : 0;
            flags2 |= this.botBusiness ? 1 << 11 : 0;
            flags2 |= this.usernames ? 1 << 0 : 0;
            flags2 |= this.storiesMaxId !== undefined ? 1 << 5 : 0;
            flags2 |= this.color !== undefined ? 1 << 8 : 0;
            flags2 |= this.profileColor !== undefined ? 1 << 9 : 0;
            b.write(index_js_1.Primitive.Int.write(flags2));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.accessHash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.accessHash));
            }
            if (this.firstName !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.firstName));
            }
            if (this.lastName !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.lastName));
            }
            if (this.username !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.username));
            }
            if (this.phone !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.phone));
            }
            if (this.photo !== undefined) {
                b.write(this.photo.write());
            }
            if (this.status !== undefined) {
                b.write(this.status.write());
            }
            if (this.botInfoVersion !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.botInfoVersion));
            }
            if (this.restrictionReason) {
                b.write(index_js_1.Primitive.Vector.write(this.restrictionReason));
            }
            if (this.botInlinePlaceholder !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.botInlinePlaceholder));
            }
            if (this.langCode !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.langCode));
            }
            if (this.emojiStatus !== undefined) {
                b.write(this.emojiStatus.write());
            }
            if (this.usernames) {
                b.write(index_js_1.Primitive.Vector.write(this.usernames));
            }
            if (this.storiesMaxId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.storiesMaxId));
            }
            if (this.color !== undefined) {
                b.write(this.color.write());
            }
            if (this.profileColor !== undefined) {
                b.write(this.profileColor.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.User = User;
    class UserProfilePhotoEmpty extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'UserProfilePhotoEmpty';
            this.constructorId = 0x4f11bae1;
            this.subclassOfId = 0xc6338f7d;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.UserProfilePhotoEmpty();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UserProfilePhotoEmpty = UserProfilePhotoEmpty;
    class UserProfilePhoto extends index_js_1.TLObject {
        hasVideo;
        personal;
        photoId;
        strippedThumb;
        dcId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UserProfilePhoto';
            this.constructorId = 0x82d1f706;
            this.subclassOfId = 0xc6338f7d;
            this._slots = ['hasVideo', 'personal', 'photoId', 'strippedThumb', 'dcId'];
            this.hasVideo = params.hasVideo;
            this.personal = params.personal;
            this.photoId = params.photoId;
            this.strippedThumb = params.strippedThumb;
            this.dcId = params.dcId;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let hasVideo = flags & (1 << 0) ? true : false;
            let personal = flags & (1 << 2) ? true : false;
            let photoId = await index_js_1.Primitive.Long.read(_data);
            let strippedThumb = flags & (1 << 1) ? await index_js_1.Primitive.Bytes.read(_data) : undefined;
            let dcId = await index_js_1.Primitive.Int.read(_data);
            return new Raw.UserProfilePhoto({
                hasVideo: hasVideo,
                personal: personal,
                photoId: photoId,
                strippedThumb: strippedThumb,
                dcId: dcId,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.hasVideo ? 1 << 0 : 0;
            flags |= this.personal ? 1 << 2 : 0;
            flags |= this.strippedThumb !== undefined ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.photoId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.photoId));
            }
            if (this.strippedThumb !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.strippedThumb));
            }
            if (this.dcId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.dcId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UserProfilePhoto = UserProfilePhoto;
    class UserStatusEmpty extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'UserStatusEmpty';
            this.constructorId = 0x9d05049;
            this.subclassOfId = 0x5b0b743e;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.UserStatusEmpty();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UserStatusEmpty = UserStatusEmpty;
    class UserStatusOnline extends index_js_1.TLObject {
        expires;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UserStatusOnline';
            this.constructorId = 0xedb93949;
            this.subclassOfId = 0x5b0b743e;
            this._slots = ['expires'];
            this.expires = params.expires;
        }
        static async read(_data, ..._args) {
            let expires = await index_js_1.Primitive.Int.read(_data);
            return new Raw.UserStatusOnline({ expires: expires });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.expires !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.expires));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UserStatusOnline = UserStatusOnline;
    class UserStatusOffline extends index_js_1.TLObject {
        wasOnline;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UserStatusOffline';
            this.constructorId = 0x8c703f;
            this.subclassOfId = 0x5b0b743e;
            this._slots = ['wasOnline'];
            this.wasOnline = params.wasOnline;
        }
        static async read(_data, ..._args) {
            let wasOnline = await index_js_1.Primitive.Int.read(_data);
            return new Raw.UserStatusOffline({ wasOnline: wasOnline });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.wasOnline !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.wasOnline));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UserStatusOffline = UserStatusOffline;
    class UserStatusRecently extends index_js_1.TLObject {
        byMe;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UserStatusRecently';
            this.constructorId = 0x7b197dc8;
            this.subclassOfId = 0x5b0b743e;
            this._slots = ['byMe'];
            this.byMe = params.byMe;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let byMe = flags & (1 << 0) ? true : false;
            return new Raw.UserStatusRecently({ byMe: byMe });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.byMe ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UserStatusRecently = UserStatusRecently;
    class UserStatusLastWeek extends index_js_1.TLObject {
        byMe;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UserStatusLastWeek';
            this.constructorId = 0x541a1d1a;
            this.subclassOfId = 0x5b0b743e;
            this._slots = ['byMe'];
            this.byMe = params.byMe;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let byMe = flags & (1 << 0) ? true : false;
            return new Raw.UserStatusLastWeek({ byMe: byMe });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.byMe ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UserStatusLastWeek = UserStatusLastWeek;
    class UserStatusLastMonth extends index_js_1.TLObject {
        byMe;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UserStatusLastMonth';
            this.constructorId = 0x65899777;
            this.subclassOfId = 0x5b0b743e;
            this._slots = ['byMe'];
            this.byMe = params.byMe;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let byMe = flags & (1 << 0) ? true : false;
            return new Raw.UserStatusLastMonth({ byMe: byMe });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.byMe ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UserStatusLastMonth = UserStatusLastMonth;
    class ChatEmpty extends index_js_1.TLObject {
        id;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChatEmpty';
            this.constructorId = 0x29562865;
            this.subclassOfId = 0xc5af5d94;
            this._slots = ['id'];
            this.id = params.id;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.Long.read(_data);
            return new Raw.ChatEmpty({ id: id });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChatEmpty = ChatEmpty;
    class Chat extends index_js_1.TLObject {
        creator;
        left;
        deactivated;
        callActive;
        callNotEmpty;
        noforwards;
        id;
        title;
        photo;
        participantsCount;
        date;
        version;
        migratedTo;
        adminRights;
        defaultBannedRights;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'Chat';
            this.constructorId = 0x41cbf256;
            this.subclassOfId = 0xc5af5d94;
            this._slots = [
                'creator',
                'left',
                'deactivated',
                'callActive',
                'callNotEmpty',
                'noforwards',
                'id',
                'title',
                'photo',
                'participantsCount',
                'date',
                'version',
                'migratedTo',
                'adminRights',
                'defaultBannedRights',
            ];
            this.creator = params.creator;
            this.left = params.left;
            this.deactivated = params.deactivated;
            this.callActive = params.callActive;
            this.callNotEmpty = params.callNotEmpty;
            this.noforwards = params.noforwards;
            this.id = params.id;
            this.title = params.title;
            this.photo = params.photo;
            this.participantsCount = params.participantsCount;
            this.date = params.date;
            this.version = params.version;
            this.migratedTo = params.migratedTo;
            this.adminRights = params.adminRights;
            this.defaultBannedRights = params.defaultBannedRights;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let creator = flags & (1 << 0) ? true : false;
            let left = flags & (1 << 2) ? true : false;
            let deactivated = flags & (1 << 5) ? true : false;
            let callActive = flags & (1 << 23) ? true : false;
            let callNotEmpty = flags & (1 << 24) ? true : false;
            let noforwards = flags & (1 << 25) ? true : false;
            let id = await index_js_1.Primitive.Long.read(_data);
            let title = await index_js_1.Primitive.String.read(_data);
            let photo = await index_js_1.TLObject.read(_data);
            let participantsCount = await index_js_1.Primitive.Int.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            let version = await index_js_1.Primitive.Int.read(_data);
            let migratedTo = flags & (1 << 6) ? await index_js_1.TLObject.read(_data) : undefined;
            let adminRights = flags & (1 << 14) ? await index_js_1.TLObject.read(_data) : undefined;
            let defaultBannedRights = flags & (1 << 18) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.Chat({
                creator: creator,
                left: left,
                deactivated: deactivated,
                callActive: callActive,
                callNotEmpty: callNotEmpty,
                noforwards: noforwards,
                id: id,
                title: title,
                photo: photo,
                participantsCount: participantsCount,
                date: date,
                version: version,
                migratedTo: migratedTo,
                adminRights: adminRights,
                defaultBannedRights: defaultBannedRights,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.creator ? 1 << 0 : 0;
            flags |= this.left ? 1 << 2 : 0;
            flags |= this.deactivated ? 1 << 5 : 0;
            flags |= this.callActive ? 1 << 23 : 0;
            flags |= this.callNotEmpty ? 1 << 24 : 0;
            flags |= this.noforwards ? 1 << 25 : 0;
            flags |= this.migratedTo !== undefined ? 1 << 6 : 0;
            flags |= this.adminRights !== undefined ? 1 << 14 : 0;
            flags |= this.defaultBannedRights !== undefined ? 1 << 18 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            if (this.photo !== undefined) {
                b.write(this.photo.write());
            }
            if (this.participantsCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.participantsCount));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.version !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.version));
            }
            if (this.migratedTo !== undefined) {
                b.write(this.migratedTo.write());
            }
            if (this.adminRights !== undefined) {
                b.write(this.adminRights.write());
            }
            if (this.defaultBannedRights !== undefined) {
                b.write(this.defaultBannedRights.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.Chat = Chat;
    class ChatForbidden extends index_js_1.TLObject {
        id;
        title;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChatForbidden';
            this.constructorId = 0x6592a1a7;
            this.subclassOfId = 0xc5af5d94;
            this._slots = ['id', 'title'];
            this.id = params.id;
            this.title = params.title;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.Long.read(_data);
            let title = await index_js_1.Primitive.String.read(_data);
            return new Raw.ChatForbidden({ id: id, title: title });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChatForbidden = ChatForbidden;
    class Channel extends index_js_1.TLObject {
        creator;
        left;
        broadcast;
        verified;
        megagroup;
        restricted;
        signatures;
        min;
        scam;
        hasLink;
        hasGeo;
        slowmodeEnabled;
        callActive;
        callNotEmpty;
        fake;
        gigagroup;
        noforwards;
        joinToSend;
        joinRequest;
        forum;
        storiesHidden;
        storiesHiddenMin;
        storiesUnavailable;
        id;
        accessHash;
        title;
        username;
        photo;
        date;
        restrictionReason;
        adminRights;
        bannedRights;
        defaultBannedRights;
        participantsCount;
        usernames;
        storiesMaxId;
        color;
        profileColor;
        emojiStatus;
        level;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'Channel';
            this.constructorId = 0xaadfc8f;
            this.subclassOfId = 0xc5af5d94;
            this._slots = [
                'creator',
                'left',
                'broadcast',
                'verified',
                'megagroup',
                'restricted',
                'signatures',
                'min',
                'scam',
                'hasLink',
                'hasGeo',
                'slowmodeEnabled',
                'callActive',
                'callNotEmpty',
                'fake',
                'gigagroup',
                'noforwards',
                'joinToSend',
                'joinRequest',
                'forum',
                'storiesHidden',
                'storiesHiddenMin',
                'storiesUnavailable',
                'id',
                'accessHash',
                'title',
                'username',
                'photo',
                'date',
                'restrictionReason',
                'adminRights',
                'bannedRights',
                'defaultBannedRights',
                'participantsCount',
                'usernames',
                'storiesMaxId',
                'color',
                'profileColor',
                'emojiStatus',
                'level',
            ];
            this.creator = params.creator;
            this.left = params.left;
            this.broadcast = params.broadcast;
            this.verified = params.verified;
            this.megagroup = params.megagroup;
            this.restricted = params.restricted;
            this.signatures = params.signatures;
            this.min = params.min;
            this.scam = params.scam;
            this.hasLink = params.hasLink;
            this.hasGeo = params.hasGeo;
            this.slowmodeEnabled = params.slowmodeEnabled;
            this.callActive = params.callActive;
            this.callNotEmpty = params.callNotEmpty;
            this.fake = params.fake;
            this.gigagroup = params.gigagroup;
            this.noforwards = params.noforwards;
            this.joinToSend = params.joinToSend;
            this.joinRequest = params.joinRequest;
            this.forum = params.forum;
            this.storiesHidden = params.storiesHidden;
            this.storiesHiddenMin = params.storiesHiddenMin;
            this.storiesUnavailable = params.storiesUnavailable;
            this.id = params.id;
            this.accessHash = params.accessHash;
            this.title = params.title;
            this.username = params.username;
            this.photo = params.photo;
            this.date = params.date;
            this.restrictionReason = params.restrictionReason;
            this.adminRights = params.adminRights;
            this.bannedRights = params.bannedRights;
            this.defaultBannedRights = params.defaultBannedRights;
            this.participantsCount = params.participantsCount;
            this.usernames = params.usernames;
            this.storiesMaxId = params.storiesMaxId;
            this.color = params.color;
            this.profileColor = params.profileColor;
            this.emojiStatus = params.emojiStatus;
            this.level = params.level;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let creator = flags & (1 << 0) ? true : false;
            let left = flags & (1 << 2) ? true : false;
            let broadcast = flags & (1 << 5) ? true : false;
            let verified = flags & (1 << 7) ? true : false;
            let megagroup = flags & (1 << 8) ? true : false;
            let restricted = flags & (1 << 9) ? true : false;
            let signatures = flags & (1 << 11) ? true : false;
            let min = flags & (1 << 12) ? true : false;
            let scam = flags & (1 << 19) ? true : false;
            let hasLink = flags & (1 << 20) ? true : false;
            let hasGeo = flags & (1 << 21) ? true : false;
            let slowmodeEnabled = flags & (1 << 22) ? true : false;
            let callActive = flags & (1 << 23) ? true : false;
            let callNotEmpty = flags & (1 << 24) ? true : false;
            let fake = flags & (1 << 25) ? true : false;
            let gigagroup = flags & (1 << 26) ? true : false;
            let noforwards = flags & (1 << 27) ? true : false;
            let joinToSend = flags & (1 << 28) ? true : false;
            let joinRequest = flags & (1 << 29) ? true : false;
            let forum = flags & (1 << 30) ? true : false;
            let flags2 = await index_js_1.Primitive.Int.read(_data);
            let storiesHidden = flags2 & (1 << 1) ? true : false;
            let storiesHiddenMin = flags2 & (1 << 2) ? true : false;
            let storiesUnavailable = flags2 & (1 << 3) ? true : false;
            let id = await index_js_1.Primitive.Long.read(_data);
            let accessHash = flags & (1 << 13) ? await index_js_1.Primitive.Long.read(_data) : undefined;
            let title = await index_js_1.Primitive.String.read(_data);
            let username = flags & (1 << 6) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let photo = await index_js_1.TLObject.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            let restrictionReason = flags & (1 << 9) ? await index_js_1.TLObject.read(_data) : [];
            let adminRights = flags & (1 << 14) ? await index_js_1.TLObject.read(_data) : undefined;
            let bannedRights = flags & (1 << 15) ? await index_js_1.TLObject.read(_data) : undefined;
            let defaultBannedRights = flags & (1 << 18) ? await index_js_1.TLObject.read(_data) : undefined;
            let participantsCount = flags & (1 << 17) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let usernames = flags2 & (1 << 0) ? await index_js_1.TLObject.read(_data) : [];
            let storiesMaxId = flags2 & (1 << 4) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let color = flags2 & (1 << 7) ? await index_js_1.TLObject.read(_data) : undefined;
            let profileColor = flags2 & (1 << 8) ? await index_js_1.TLObject.read(_data) : undefined;
            let emojiStatus = flags2 & (1 << 9) ? await index_js_1.TLObject.read(_data) : undefined;
            let level = flags2 & (1 << 10) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            return new Raw.Channel({
                creator: creator,
                left: left,
                broadcast: broadcast,
                verified: verified,
                megagroup: megagroup,
                restricted: restricted,
                signatures: signatures,
                min: min,
                scam: scam,
                hasLink: hasLink,
                hasGeo: hasGeo,
                slowmodeEnabled: slowmodeEnabled,
                callActive: callActive,
                callNotEmpty: callNotEmpty,
                fake: fake,
                gigagroup: gigagroup,
                noforwards: noforwards,
                joinToSend: joinToSend,
                joinRequest: joinRequest,
                forum: forum,
                storiesHidden: storiesHidden,
                storiesHiddenMin: storiesHiddenMin,
                storiesUnavailable: storiesUnavailable,
                id: id,
                accessHash: accessHash,
                title: title,
                username: username,
                photo: photo,
                date: date,
                restrictionReason: restrictionReason,
                adminRights: adminRights,
                bannedRights: bannedRights,
                defaultBannedRights: defaultBannedRights,
                participantsCount: participantsCount,
                usernames: usernames,
                storiesMaxId: storiesMaxId,
                color: color,
                profileColor: profileColor,
                emojiStatus: emojiStatus,
                level: level,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.creator ? 1 << 0 : 0;
            flags |= this.left ? 1 << 2 : 0;
            flags |= this.broadcast ? 1 << 5 : 0;
            flags |= this.verified ? 1 << 7 : 0;
            flags |= this.megagroup ? 1 << 8 : 0;
            flags |= this.restricted ? 1 << 9 : 0;
            flags |= this.signatures ? 1 << 11 : 0;
            flags |= this.min ? 1 << 12 : 0;
            flags |= this.scam ? 1 << 19 : 0;
            flags |= this.hasLink ? 1 << 20 : 0;
            flags |= this.hasGeo ? 1 << 21 : 0;
            flags |= this.slowmodeEnabled ? 1 << 22 : 0;
            flags |= this.callActive ? 1 << 23 : 0;
            flags |= this.callNotEmpty ? 1 << 24 : 0;
            flags |= this.fake ? 1 << 25 : 0;
            flags |= this.gigagroup ? 1 << 26 : 0;
            flags |= this.noforwards ? 1 << 27 : 0;
            flags |= this.joinToSend ? 1 << 28 : 0;
            flags |= this.joinRequest ? 1 << 29 : 0;
            flags |= this.forum ? 1 << 30 : 0;
            flags |= this.accessHash !== undefined ? 1 << 13 : 0;
            flags |= this.username !== undefined ? 1 << 6 : 0;
            flags |= this.restrictionReason ? 1 << 9 : 0;
            flags |= this.adminRights !== undefined ? 1 << 14 : 0;
            flags |= this.bannedRights !== undefined ? 1 << 15 : 0;
            flags |= this.defaultBannedRights !== undefined ? 1 << 18 : 0;
            flags |= this.participantsCount !== undefined ? 1 << 17 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            let flags2 = 0;
            flags2 |= this.storiesHidden ? 1 << 1 : 0;
            flags2 |= this.storiesHiddenMin ? 1 << 2 : 0;
            flags2 |= this.storiesUnavailable ? 1 << 3 : 0;
            flags2 |= this.usernames ? 1 << 0 : 0;
            flags2 |= this.storiesMaxId !== undefined ? 1 << 4 : 0;
            flags2 |= this.color !== undefined ? 1 << 7 : 0;
            flags2 |= this.profileColor !== undefined ? 1 << 8 : 0;
            flags2 |= this.emojiStatus !== undefined ? 1 << 9 : 0;
            flags2 |= this.level !== undefined ? 1 << 10 : 0;
            b.write(index_js_1.Primitive.Int.write(flags2));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.accessHash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.accessHash));
            }
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            if (this.username !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.username));
            }
            if (this.photo !== undefined) {
                b.write(this.photo.write());
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.restrictionReason) {
                b.write(index_js_1.Primitive.Vector.write(this.restrictionReason));
            }
            if (this.adminRights !== undefined) {
                b.write(this.adminRights.write());
            }
            if (this.bannedRights !== undefined) {
                b.write(this.bannedRights.write());
            }
            if (this.defaultBannedRights !== undefined) {
                b.write(this.defaultBannedRights.write());
            }
            if (this.participantsCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.participantsCount));
            }
            if (this.usernames) {
                b.write(index_js_1.Primitive.Vector.write(this.usernames));
            }
            if (this.storiesMaxId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.storiesMaxId));
            }
            if (this.color !== undefined) {
                b.write(this.color.write());
            }
            if (this.profileColor !== undefined) {
                b.write(this.profileColor.write());
            }
            if (this.emojiStatus !== undefined) {
                b.write(this.emojiStatus.write());
            }
            if (this.level !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.level));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.Channel = Channel;
    class ChannelForbidden extends index_js_1.TLObject {
        broadcast;
        megagroup;
        id;
        accessHash;
        title;
        untilDate;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelForbidden';
            this.constructorId = 0x17d493d5;
            this.subclassOfId = 0xc5af5d94;
            this._slots = ['broadcast', 'megagroup', 'id', 'accessHash', 'title', 'untilDate'];
            this.broadcast = params.broadcast;
            this.megagroup = params.megagroup;
            this.id = params.id;
            this.accessHash = params.accessHash;
            this.title = params.title;
            this.untilDate = params.untilDate;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let broadcast = flags & (1 << 5) ? true : false;
            let megagroup = flags & (1 << 8) ? true : false;
            let id = await index_js_1.Primitive.Long.read(_data);
            let accessHash = await index_js_1.Primitive.Long.read(_data);
            let title = await index_js_1.Primitive.String.read(_data);
            let untilDate = flags & (1 << 16) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            return new Raw.ChannelForbidden({
                broadcast: broadcast,
                megagroup: megagroup,
                id: id,
                accessHash: accessHash,
                title: title,
                untilDate: untilDate,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.broadcast ? 1 << 5 : 0;
            flags |= this.megagroup ? 1 << 8 : 0;
            flags |= this.untilDate !== undefined ? 1 << 16 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.accessHash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.accessHash));
            }
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            if (this.untilDate !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.untilDate));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelForbidden = ChannelForbidden;
    class ChatFull extends index_js_1.TLObject {
        canSetUsername;
        hasScheduled;
        translationsDisabled;
        id;
        about;
        participants;
        chatPhoto;
        notifySettings;
        exportedInvite;
        botInfo;
        pinnedMsgId;
        folderId;
        call;
        ttlPeriod;
        groupcallDefaultJoinAs;
        themeEmoticon;
        requestsPending;
        recentRequesters;
        availableReactions;
        reactionsLimit;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChatFull';
            this.constructorId = 0x2633421b;
            this.subclassOfId = 0xd49a2697;
            this._slots = [
                'canSetUsername',
                'hasScheduled',
                'translationsDisabled',
                'id',
                'about',
                'participants',
                'chatPhoto',
                'notifySettings',
                'exportedInvite',
                'botInfo',
                'pinnedMsgId',
                'folderId',
                'call',
                'ttlPeriod',
                'groupcallDefaultJoinAs',
                'themeEmoticon',
                'requestsPending',
                'recentRequesters',
                'availableReactions',
                'reactionsLimit',
            ];
            this.canSetUsername = params.canSetUsername;
            this.hasScheduled = params.hasScheduled;
            this.translationsDisabled = params.translationsDisabled;
            this.id = params.id;
            this.about = params.about;
            this.participants = params.participants;
            this.chatPhoto = params.chatPhoto;
            this.notifySettings = params.notifySettings;
            this.exportedInvite = params.exportedInvite;
            this.botInfo = params.botInfo;
            this.pinnedMsgId = params.pinnedMsgId;
            this.folderId = params.folderId;
            this.call = params.call;
            this.ttlPeriod = params.ttlPeriod;
            this.groupcallDefaultJoinAs = params.groupcallDefaultJoinAs;
            this.themeEmoticon = params.themeEmoticon;
            this.requestsPending = params.requestsPending;
            this.recentRequesters = params.recentRequesters;
            this.availableReactions = params.availableReactions;
            this.reactionsLimit = params.reactionsLimit;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let canSetUsername = flags & (1 << 7) ? true : false;
            let hasScheduled = flags & (1 << 8) ? true : false;
            let translationsDisabled = flags & (1 << 19) ? true : false;
            let id = await index_js_1.Primitive.Long.read(_data);
            let about = await index_js_1.Primitive.String.read(_data);
            let participants = await index_js_1.TLObject.read(_data);
            let chatPhoto = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
            let notifySettings = await index_js_1.TLObject.read(_data);
            let exportedInvite = flags & (1 << 13) ? await index_js_1.TLObject.read(_data) : undefined;
            let botInfo = flags & (1 << 3) ? await index_js_1.TLObject.read(_data) : [];
            let pinnedMsgId = flags & (1 << 6) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let folderId = flags & (1 << 11) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let call = flags & (1 << 12) ? await index_js_1.TLObject.read(_data) : undefined;
            let ttlPeriod = flags & (1 << 14) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let groupcallDefaultJoinAs = flags & (1 << 15) ? await index_js_1.TLObject.read(_data) : undefined;
            let themeEmoticon = flags & (1 << 16) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let requestsPending = flags & (1 << 17) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let recentRequesters = flags & (1 << 17) ? await index_js_1.TLObject.read(_data, index_js_1.Primitive.Long) : [];
            let availableReactions = flags & (1 << 18) ? await index_js_1.TLObject.read(_data) : undefined;
            let reactionsLimit = flags & (1 << 20) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            return new Raw.ChatFull({
                canSetUsername: canSetUsername,
                hasScheduled: hasScheduled,
                translationsDisabled: translationsDisabled,
                id: id,
                about: about,
                participants: participants,
                chatPhoto: chatPhoto,
                notifySettings: notifySettings,
                exportedInvite: exportedInvite,
                botInfo: botInfo,
                pinnedMsgId: pinnedMsgId,
                folderId: folderId,
                call: call,
                ttlPeriod: ttlPeriod,
                groupcallDefaultJoinAs: groupcallDefaultJoinAs,
                themeEmoticon: themeEmoticon,
                requestsPending: requestsPending,
                recentRequesters: recentRequesters,
                availableReactions: availableReactions,
                reactionsLimit: reactionsLimit,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.canSetUsername ? 1 << 7 : 0;
            flags |= this.hasScheduled ? 1 << 8 : 0;
            flags |= this.translationsDisabled ? 1 << 19 : 0;
            flags |= this.chatPhoto !== undefined ? 1 << 2 : 0;
            flags |= this.exportedInvite !== undefined ? 1 << 13 : 0;
            flags |= this.botInfo ? 1 << 3 : 0;
            flags |= this.pinnedMsgId !== undefined ? 1 << 6 : 0;
            flags |= this.folderId !== undefined ? 1 << 11 : 0;
            flags |= this.call !== undefined ? 1 << 12 : 0;
            flags |= this.ttlPeriod !== undefined ? 1 << 14 : 0;
            flags |= this.groupcallDefaultJoinAs !== undefined ? 1 << 15 : 0;
            flags |= this.themeEmoticon !== undefined ? 1 << 16 : 0;
            flags |= this.requestsPending !== undefined ? 1 << 17 : 0;
            flags |= this.recentRequesters ? 1 << 17 : 0;
            flags |= this.availableReactions !== undefined ? 1 << 18 : 0;
            flags |= this.reactionsLimit !== undefined ? 1 << 20 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.about !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.about));
            }
            if (this.participants !== undefined) {
                b.write(this.participants.write());
            }
            if (this.chatPhoto !== undefined) {
                b.write(this.chatPhoto.write());
            }
            if (this.notifySettings !== undefined) {
                b.write(this.notifySettings.write());
            }
            if (this.exportedInvite !== undefined) {
                b.write(this.exportedInvite.write());
            }
            if (this.botInfo) {
                b.write(index_js_1.Primitive.Vector.write(this.botInfo));
            }
            if (this.pinnedMsgId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.pinnedMsgId));
            }
            if (this.folderId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.folderId));
            }
            if (this.call !== undefined) {
                b.write(this.call.write());
            }
            if (this.ttlPeriod !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.ttlPeriod));
            }
            if (this.groupcallDefaultJoinAs !== undefined) {
                b.write(this.groupcallDefaultJoinAs.write());
            }
            if (this.themeEmoticon !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.themeEmoticon));
            }
            if (this.requestsPending !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.requestsPending));
            }
            if (this.recentRequesters) {
                b.write(index_js_1.Primitive.Vector.write(this.recentRequesters, index_js_1.Primitive.Long));
            }
            if (this.availableReactions !== undefined) {
                b.write(this.availableReactions.write());
            }
            if (this.reactionsLimit !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.reactionsLimit));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChatFull = ChatFull;
    class ChannelFull extends index_js_1.TLObject {
        canViewParticipants;
        canSetUsername;
        canSetStickers;
        hiddenPrehistory;
        canSetLocation;
        hasScheduled;
        canViewStats;
        blocked;
        canDeleteChannel;
        antispam;
        participantsHidden;
        translationsDisabled;
        storiesPinnedAvailable;
        viewForumAsMessages;
        restrictedSponsored;
        canViewRevenue;
        id;
        about;
        participantsCount;
        adminsCount;
        kickedCount;
        bannedCount;
        onlineCount;
        readInboxMaxId;
        readOutboxMaxId;
        unreadCount;
        chatPhoto;
        notifySettings;
        exportedInvite;
        botInfo;
        migratedFromChatId;
        migratedFromMaxId;
        pinnedMsgId;
        stickerset;
        availableMinId;
        folderId;
        linkedChatId;
        location;
        slowmodeSeconds;
        slowmodeNextSendDate;
        statsDc;
        pts;
        call;
        ttlPeriod;
        pendingSuggestions;
        groupcallDefaultJoinAs;
        themeEmoticon;
        requestsPending;
        recentRequesters;
        defaultSendAs;
        availableReactions;
        reactionsLimit;
        stories;
        wallpaper;
        boostsApplied;
        boostsUnrestrict;
        emojiset;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelFull';
            this.constructorId = 0xbbab348d;
            this.subclassOfId = 0xd49a2697;
            this._slots = [
                'canViewParticipants',
                'canSetUsername',
                'canSetStickers',
                'hiddenPrehistory',
                'canSetLocation',
                'hasScheduled',
                'canViewStats',
                'blocked',
                'canDeleteChannel',
                'antispam',
                'participantsHidden',
                'translationsDisabled',
                'storiesPinnedAvailable',
                'viewForumAsMessages',
                'restrictedSponsored',
                'canViewRevenue',
                'id',
                'about',
                'participantsCount',
                'adminsCount',
                'kickedCount',
                'bannedCount',
                'onlineCount',
                'readInboxMaxId',
                'readOutboxMaxId',
                'unreadCount',
                'chatPhoto',
                'notifySettings',
                'exportedInvite',
                'botInfo',
                'migratedFromChatId',
                'migratedFromMaxId',
                'pinnedMsgId',
                'stickerset',
                'availableMinId',
                'folderId',
                'linkedChatId',
                'location',
                'slowmodeSeconds',
                'slowmodeNextSendDate',
                'statsDc',
                'pts',
                'call',
                'ttlPeriod',
                'pendingSuggestions',
                'groupcallDefaultJoinAs',
                'themeEmoticon',
                'requestsPending',
                'recentRequesters',
                'defaultSendAs',
                'availableReactions',
                'reactionsLimit',
                'stories',
                'wallpaper',
                'boostsApplied',
                'boostsUnrestrict',
                'emojiset',
            ];
            this.canViewParticipants = params.canViewParticipants;
            this.canSetUsername = params.canSetUsername;
            this.canSetStickers = params.canSetStickers;
            this.hiddenPrehistory = params.hiddenPrehistory;
            this.canSetLocation = params.canSetLocation;
            this.hasScheduled = params.hasScheduled;
            this.canViewStats = params.canViewStats;
            this.blocked = params.blocked;
            this.canDeleteChannel = params.canDeleteChannel;
            this.antispam = params.antispam;
            this.participantsHidden = params.participantsHidden;
            this.translationsDisabled = params.translationsDisabled;
            this.storiesPinnedAvailable = params.storiesPinnedAvailable;
            this.viewForumAsMessages = params.viewForumAsMessages;
            this.restrictedSponsored = params.restrictedSponsored;
            this.canViewRevenue = params.canViewRevenue;
            this.id = params.id;
            this.about = params.about;
            this.participantsCount = params.participantsCount;
            this.adminsCount = params.adminsCount;
            this.kickedCount = params.kickedCount;
            this.bannedCount = params.bannedCount;
            this.onlineCount = params.onlineCount;
            this.readInboxMaxId = params.readInboxMaxId;
            this.readOutboxMaxId = params.readOutboxMaxId;
            this.unreadCount = params.unreadCount;
            this.chatPhoto = params.chatPhoto;
            this.notifySettings = params.notifySettings;
            this.exportedInvite = params.exportedInvite;
            this.botInfo = params.botInfo;
            this.migratedFromChatId = params.migratedFromChatId;
            this.migratedFromMaxId = params.migratedFromMaxId;
            this.pinnedMsgId = params.pinnedMsgId;
            this.stickerset = params.stickerset;
            this.availableMinId = params.availableMinId;
            this.folderId = params.folderId;
            this.linkedChatId = params.linkedChatId;
            this.location = params.location;
            this.slowmodeSeconds = params.slowmodeSeconds;
            this.slowmodeNextSendDate = params.slowmodeNextSendDate;
            this.statsDc = params.statsDc;
            this.pts = params.pts;
            this.call = params.call;
            this.ttlPeriod = params.ttlPeriod;
            this.pendingSuggestions = params.pendingSuggestions;
            this.groupcallDefaultJoinAs = params.groupcallDefaultJoinAs;
            this.themeEmoticon = params.themeEmoticon;
            this.requestsPending = params.requestsPending;
            this.recentRequesters = params.recentRequesters;
            this.defaultSendAs = params.defaultSendAs;
            this.availableReactions = params.availableReactions;
            this.reactionsLimit = params.reactionsLimit;
            this.stories = params.stories;
            this.wallpaper = params.wallpaper;
            this.boostsApplied = params.boostsApplied;
            this.boostsUnrestrict = params.boostsUnrestrict;
            this.emojiset = params.emojiset;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let canViewParticipants = flags & (1 << 3) ? true : false;
            let canSetUsername = flags & (1 << 6) ? true : false;
            let canSetStickers = flags & (1 << 7) ? true : false;
            let hiddenPrehistory = flags & (1 << 10) ? true : false;
            let canSetLocation = flags & (1 << 16) ? true : false;
            let hasScheduled = flags & (1 << 19) ? true : false;
            let canViewStats = flags & (1 << 20) ? true : false;
            let blocked = flags & (1 << 22) ? true : false;
            let flags2 = await index_js_1.Primitive.Int.read(_data);
            let canDeleteChannel = flags2 & (1 << 0) ? true : false;
            let antispam = flags2 & (1 << 1) ? true : false;
            let participantsHidden = flags2 & (1 << 2) ? true : false;
            let translationsDisabled = flags2 & (1 << 3) ? true : false;
            let storiesPinnedAvailable = flags2 & (1 << 5) ? true : false;
            let viewForumAsMessages = flags2 & (1 << 6) ? true : false;
            let restrictedSponsored = flags2 & (1 << 11) ? true : false;
            let canViewRevenue = flags2 & (1 << 12) ? true : false;
            let id = await index_js_1.Primitive.Long.read(_data);
            let about = await index_js_1.Primitive.String.read(_data);
            let participantsCount = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let adminsCount = flags & (1 << 1) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let kickedCount = flags & (1 << 2) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let bannedCount = flags & (1 << 2) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let onlineCount = flags & (1 << 13) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let readInboxMaxId = await index_js_1.Primitive.Int.read(_data);
            let readOutboxMaxId = await index_js_1.Primitive.Int.read(_data);
            let unreadCount = await index_js_1.Primitive.Int.read(_data);
            let chatPhoto = await index_js_1.TLObject.read(_data);
            let notifySettings = await index_js_1.TLObject.read(_data);
            let exportedInvite = flags & (1 << 23) ? await index_js_1.TLObject.read(_data) : undefined;
            let botInfo = await index_js_1.TLObject.read(_data);
            let migratedFromChatId = flags & (1 << 4) ? await index_js_1.Primitive.Long.read(_data) : undefined;
            let migratedFromMaxId = flags & (1 << 4) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let pinnedMsgId = flags & (1 << 5) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let stickerset = flags & (1 << 8) ? await index_js_1.TLObject.read(_data) : undefined;
            let availableMinId = flags & (1 << 9) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let folderId = flags & (1 << 11) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let linkedChatId = flags & (1 << 14) ? await index_js_1.Primitive.Long.read(_data) : undefined;
            let location = flags & (1 << 15) ? await index_js_1.TLObject.read(_data) : undefined;
            let slowmodeSeconds = flags & (1 << 17) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let slowmodeNextSendDate = flags & (1 << 18) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let statsDc = flags & (1 << 12) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let pts = await index_js_1.Primitive.Int.read(_data);
            let call = flags & (1 << 21) ? await index_js_1.TLObject.read(_data) : undefined;
            let ttlPeriod = flags & (1 << 24) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let pendingSuggestions = flags & (1 << 25) ? await index_js_1.TLObject.read(_data, index_js_1.Primitive.String) : [];
            let groupcallDefaultJoinAs = flags & (1 << 26) ? await index_js_1.TLObject.read(_data) : undefined;
            let themeEmoticon = flags & (1 << 27) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let requestsPending = flags & (1 << 28) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let recentRequesters = flags & (1 << 28) ? await index_js_1.TLObject.read(_data, index_js_1.Primitive.Long) : [];
            let defaultSendAs = flags & (1 << 29) ? await index_js_1.TLObject.read(_data) : undefined;
            let availableReactions = flags & (1 << 30) ? await index_js_1.TLObject.read(_data) : undefined;
            let reactionsLimit = flags2 & (1 << 13) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let stories = flags2 & (1 << 4) ? await index_js_1.TLObject.read(_data) : undefined;
            let wallpaper = flags2 & (1 << 7) ? await index_js_1.TLObject.read(_data) : undefined;
            let boostsApplied = flags2 & (1 << 8) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let boostsUnrestrict = flags2 & (1 << 9) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let emojiset = flags2 & (1 << 10) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.ChannelFull({
                canViewParticipants: canViewParticipants,
                canSetUsername: canSetUsername,
                canSetStickers: canSetStickers,
                hiddenPrehistory: hiddenPrehistory,
                canSetLocation: canSetLocation,
                hasScheduled: hasScheduled,
                canViewStats: canViewStats,
                blocked: blocked,
                canDeleteChannel: canDeleteChannel,
                antispam: antispam,
                participantsHidden: participantsHidden,
                translationsDisabled: translationsDisabled,
                storiesPinnedAvailable: storiesPinnedAvailable,
                viewForumAsMessages: viewForumAsMessages,
                restrictedSponsored: restrictedSponsored,
                canViewRevenue: canViewRevenue,
                id: id,
                about: about,
                participantsCount: participantsCount,
                adminsCount: adminsCount,
                kickedCount: kickedCount,
                bannedCount: bannedCount,
                onlineCount: onlineCount,
                readInboxMaxId: readInboxMaxId,
                readOutboxMaxId: readOutboxMaxId,
                unreadCount: unreadCount,
                chatPhoto: chatPhoto,
                notifySettings: notifySettings,
                exportedInvite: exportedInvite,
                botInfo: botInfo,
                migratedFromChatId: migratedFromChatId,
                migratedFromMaxId: migratedFromMaxId,
                pinnedMsgId: pinnedMsgId,
                stickerset: stickerset,
                availableMinId: availableMinId,
                folderId: folderId,
                linkedChatId: linkedChatId,
                location: location,
                slowmodeSeconds: slowmodeSeconds,
                slowmodeNextSendDate: slowmodeNextSendDate,
                statsDc: statsDc,
                pts: pts,
                call: call,
                ttlPeriod: ttlPeriod,
                pendingSuggestions: pendingSuggestions,
                groupcallDefaultJoinAs: groupcallDefaultJoinAs,
                themeEmoticon: themeEmoticon,
                requestsPending: requestsPending,
                recentRequesters: recentRequesters,
                defaultSendAs: defaultSendAs,
                availableReactions: availableReactions,
                reactionsLimit: reactionsLimit,
                stories: stories,
                wallpaper: wallpaper,
                boostsApplied: boostsApplied,
                boostsUnrestrict: boostsUnrestrict,
                emojiset: emojiset,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.canViewParticipants ? 1 << 3 : 0;
            flags |= this.canSetUsername ? 1 << 6 : 0;
            flags |= this.canSetStickers ? 1 << 7 : 0;
            flags |= this.hiddenPrehistory ? 1 << 10 : 0;
            flags |= this.canSetLocation ? 1 << 16 : 0;
            flags |= this.hasScheduled ? 1 << 19 : 0;
            flags |= this.canViewStats ? 1 << 20 : 0;
            flags |= this.blocked ? 1 << 22 : 0;
            flags |= this.participantsCount !== undefined ? 1 << 0 : 0;
            flags |= this.adminsCount !== undefined ? 1 << 1 : 0;
            flags |= this.kickedCount !== undefined ? 1 << 2 : 0;
            flags |= this.bannedCount !== undefined ? 1 << 2 : 0;
            flags |= this.onlineCount !== undefined ? 1 << 13 : 0;
            flags |= this.exportedInvite !== undefined ? 1 << 23 : 0;
            flags |= this.migratedFromChatId !== undefined ? 1 << 4 : 0;
            flags |= this.migratedFromMaxId !== undefined ? 1 << 4 : 0;
            flags |= this.pinnedMsgId !== undefined ? 1 << 5 : 0;
            flags |= this.stickerset !== undefined ? 1 << 8 : 0;
            flags |= this.availableMinId !== undefined ? 1 << 9 : 0;
            flags |= this.folderId !== undefined ? 1 << 11 : 0;
            flags |= this.linkedChatId !== undefined ? 1 << 14 : 0;
            flags |= this.location !== undefined ? 1 << 15 : 0;
            flags |= this.slowmodeSeconds !== undefined ? 1 << 17 : 0;
            flags |= this.slowmodeNextSendDate !== undefined ? 1 << 18 : 0;
            flags |= this.statsDc !== undefined ? 1 << 12 : 0;
            flags |= this.call !== undefined ? 1 << 21 : 0;
            flags |= this.ttlPeriod !== undefined ? 1 << 24 : 0;
            flags |= this.pendingSuggestions ? 1 << 25 : 0;
            flags |= this.groupcallDefaultJoinAs !== undefined ? 1 << 26 : 0;
            flags |= this.themeEmoticon !== undefined ? 1 << 27 : 0;
            flags |= this.requestsPending !== undefined ? 1 << 28 : 0;
            flags |= this.recentRequesters ? 1 << 28 : 0;
            flags |= this.defaultSendAs !== undefined ? 1 << 29 : 0;
            flags |= this.availableReactions !== undefined ? 1 << 30 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            let flags2 = 0;
            flags2 |= this.canDeleteChannel ? 1 << 0 : 0;
            flags2 |= this.antispam ? 1 << 1 : 0;
            flags2 |= this.participantsHidden ? 1 << 2 : 0;
            flags2 |= this.translationsDisabled ? 1 << 3 : 0;
            flags2 |= this.storiesPinnedAvailable ? 1 << 5 : 0;
            flags2 |= this.viewForumAsMessages ? 1 << 6 : 0;
            flags2 |= this.restrictedSponsored ? 1 << 11 : 0;
            flags2 |= this.canViewRevenue ? 1 << 12 : 0;
            flags2 |= this.reactionsLimit !== undefined ? 1 << 13 : 0;
            flags2 |= this.stories !== undefined ? 1 << 4 : 0;
            flags2 |= this.wallpaper !== undefined ? 1 << 7 : 0;
            flags2 |= this.boostsApplied !== undefined ? 1 << 8 : 0;
            flags2 |= this.boostsUnrestrict !== undefined ? 1 << 9 : 0;
            flags2 |= this.emojiset !== undefined ? 1 << 10 : 0;
            b.write(index_js_1.Primitive.Int.write(flags2));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.about !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.about));
            }
            if (this.participantsCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.participantsCount));
            }
            if (this.adminsCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.adminsCount));
            }
            if (this.kickedCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.kickedCount));
            }
            if (this.bannedCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.bannedCount));
            }
            if (this.onlineCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.onlineCount));
            }
            if (this.readInboxMaxId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.readInboxMaxId));
            }
            if (this.readOutboxMaxId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.readOutboxMaxId));
            }
            if (this.unreadCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.unreadCount));
            }
            if (this.chatPhoto !== undefined) {
                b.write(this.chatPhoto.write());
            }
            if (this.notifySettings !== undefined) {
                b.write(this.notifySettings.write());
            }
            if (this.exportedInvite !== undefined) {
                b.write(this.exportedInvite.write());
            }
            if (this.botInfo) {
                b.write(index_js_1.Primitive.Vector.write(this.botInfo));
            }
            if (this.migratedFromChatId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.migratedFromChatId));
            }
            if (this.migratedFromMaxId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.migratedFromMaxId));
            }
            if (this.pinnedMsgId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.pinnedMsgId));
            }
            if (this.stickerset !== undefined) {
                b.write(this.stickerset.write());
            }
            if (this.availableMinId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.availableMinId));
            }
            if (this.folderId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.folderId));
            }
            if (this.linkedChatId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.linkedChatId));
            }
            if (this.location !== undefined) {
                b.write(this.location.write());
            }
            if (this.slowmodeSeconds !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.slowmodeSeconds));
            }
            if (this.slowmodeNextSendDate !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.slowmodeNextSendDate));
            }
            if (this.statsDc !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.statsDc));
            }
            if (this.pts !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.pts));
            }
            if (this.call !== undefined) {
                b.write(this.call.write());
            }
            if (this.ttlPeriod !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.ttlPeriod));
            }
            if (this.pendingSuggestions) {
                b.write(index_js_1.Primitive.Vector.write(this.pendingSuggestions, index_js_1.Primitive.String));
            }
            if (this.groupcallDefaultJoinAs !== undefined) {
                b.write(this.groupcallDefaultJoinAs.write());
            }
            if (this.themeEmoticon !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.themeEmoticon));
            }
            if (this.requestsPending !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.requestsPending));
            }
            if (this.recentRequesters) {
                b.write(index_js_1.Primitive.Vector.write(this.recentRequesters, index_js_1.Primitive.Long));
            }
            if (this.defaultSendAs !== undefined) {
                b.write(this.defaultSendAs.write());
            }
            if (this.availableReactions !== undefined) {
                b.write(this.availableReactions.write());
            }
            if (this.reactionsLimit !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.reactionsLimit));
            }
            if (this.stories !== undefined) {
                b.write(this.stories.write());
            }
            if (this.wallpaper !== undefined) {
                b.write(this.wallpaper.write());
            }
            if (this.boostsApplied !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.boostsApplied));
            }
            if (this.boostsUnrestrict !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.boostsUnrestrict));
            }
            if (this.emojiset !== undefined) {
                b.write(this.emojiset.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelFull = ChannelFull;
    class ChatParticipant extends index_js_1.TLObject {
        userId;
        inviterId;
        date;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChatParticipant';
            this.constructorId = 0xc02d4007;
            this.subclassOfId = 0x7d7c6f86;
            this._slots = ['userId', 'inviterId', 'date'];
            this.userId = params.userId;
            this.inviterId = params.inviterId;
            this.date = params.date;
        }
        static async read(_data, ..._args) {
            let userId = await index_js_1.Primitive.Long.read(_data);
            let inviterId = await index_js_1.Primitive.Long.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            return new Raw.ChatParticipant({ userId: userId, inviterId: inviterId, date: date });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            if (this.inviterId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.inviterId));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChatParticipant = ChatParticipant;
    class ChatParticipantCreator extends index_js_1.TLObject {
        userId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChatParticipantCreator';
            this.constructorId = 0xe46bcee4;
            this.subclassOfId = 0x7d7c6f86;
            this._slots = ['userId'];
            this.userId = params.userId;
        }
        static async read(_data, ..._args) {
            let userId = await index_js_1.Primitive.Long.read(_data);
            return new Raw.ChatParticipantCreator({ userId: userId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChatParticipantCreator = ChatParticipantCreator;
    class ChatParticipantAdmin extends index_js_1.TLObject {
        userId;
        inviterId;
        date;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChatParticipantAdmin';
            this.constructorId = 0xa0933f5b;
            this.subclassOfId = 0x7d7c6f86;
            this._slots = ['userId', 'inviterId', 'date'];
            this.userId = params.userId;
            this.inviterId = params.inviterId;
            this.date = params.date;
        }
        static async read(_data, ..._args) {
            let userId = await index_js_1.Primitive.Long.read(_data);
            let inviterId = await index_js_1.Primitive.Long.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            return new Raw.ChatParticipantAdmin({ userId: userId, inviterId: inviterId, date: date });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            if (this.inviterId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.inviterId));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChatParticipantAdmin = ChatParticipantAdmin;
    class ChatParticipantsForbidden extends index_js_1.TLObject {
        chatId;
        selfParticipant;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChatParticipantsForbidden';
            this.constructorId = 0x8763d3e1;
            this.subclassOfId = 0x1fa89571;
            this._slots = ['chatId', 'selfParticipant'];
            this.chatId = params.chatId;
            this.selfParticipant = params.selfParticipant;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let chatId = await index_js_1.Primitive.Long.read(_data);
            let selfParticipant = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.ChatParticipantsForbidden({
                chatId: chatId,
                selfParticipant: selfParticipant,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.selfParticipant !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.chatId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.chatId));
            }
            if (this.selfParticipant !== undefined) {
                b.write(this.selfParticipant.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChatParticipantsForbidden = ChatParticipantsForbidden;
    class ChatParticipants extends index_js_1.TLObject {
        chatId;
        participants;
        version;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChatParticipants';
            this.constructorId = 0x3cbc93f8;
            this.subclassOfId = 0x1fa89571;
            this._slots = ['chatId', 'participants', 'version'];
            this.chatId = params.chatId;
            this.participants = params.participants;
            this.version = params.version;
        }
        static async read(_data, ..._args) {
            let chatId = await index_js_1.Primitive.Long.read(_data);
            let participants = await index_js_1.TLObject.read(_data);
            let version = await index_js_1.Primitive.Int.read(_data);
            return new Raw.ChatParticipants({
                chatId: chatId,
                participants: participants,
                version: version,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.chatId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.chatId));
            }
            if (this.participants) {
                b.write(index_js_1.Primitive.Vector.write(this.participants));
            }
            if (this.version !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.version));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChatParticipants = ChatParticipants;
    class ChatPhotoEmpty extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'ChatPhotoEmpty';
            this.constructorId = 0x37c1011c;
            this.subclassOfId = 0xac3ec4e5;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.ChatPhotoEmpty();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChatPhotoEmpty = ChatPhotoEmpty;
    class ChatPhoto extends index_js_1.TLObject {
        hasVideo;
        photoId;
        strippedThumb;
        dcId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChatPhoto';
            this.constructorId = 0x1c6e1c11;
            this.subclassOfId = 0xac3ec4e5;
            this._slots = ['hasVideo', 'photoId', 'strippedThumb', 'dcId'];
            this.hasVideo = params.hasVideo;
            this.photoId = params.photoId;
            this.strippedThumb = params.strippedThumb;
            this.dcId = params.dcId;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let hasVideo = flags & (1 << 0) ? true : false;
            let photoId = await index_js_1.Primitive.Long.read(_data);
            let strippedThumb = flags & (1 << 1) ? await index_js_1.Primitive.Bytes.read(_data) : undefined;
            let dcId = await index_js_1.Primitive.Int.read(_data);
            return new Raw.ChatPhoto({
                hasVideo: hasVideo,
                photoId: photoId,
                strippedThumb: strippedThumb,
                dcId: dcId,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.hasVideo ? 1 << 0 : 0;
            flags |= this.strippedThumb !== undefined ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.photoId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.photoId));
            }
            if (this.strippedThumb !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.strippedThumb));
            }
            if (this.dcId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.dcId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChatPhoto = ChatPhoto;
    class MessageEmpty extends index_js_1.TLObject {
        id;
        peerId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageEmpty';
            this.constructorId = 0x90a6ca84;
            this.subclassOfId = 0x790009e3;
            this._slots = ['id', 'peerId'];
            this.id = params.id;
            this.peerId = params.peerId;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let id = await index_js_1.Primitive.Int.read(_data);
            let peerId = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.MessageEmpty({ id: id, peerId: peerId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.peerId !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.id));
            }
            if (this.peerId !== undefined) {
                b.write(this.peerId.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageEmpty = MessageEmpty;
    class Message extends index_js_1.TLObject {
        out;
        mentioned;
        mediaUnread;
        silent;
        post;
        fromScheduled;
        legacy;
        editHide;
        pinned;
        noforwards;
        invertMedia;
        offline;
        id;
        fromId;
        fromBoostsApplied;
        peerId;
        savedPeerId;
        fwdFrom;
        viaBotId;
        viaBusinessBotId;
        replyTo;
        date;
        message;
        media;
        replyMarkup;
        entities;
        views;
        forwards;
        replies;
        editDate;
        postAuthor;
        groupedId;
        reactions;
        restrictionReason;
        ttlPeriod;
        quickReplyShortcutId;
        effect;
        factcheck;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'Message';
            this.constructorId = 0x94345242;
            this.subclassOfId = 0x790009e3;
            this._slots = [
                'out',
                'mentioned',
                'mediaUnread',
                'silent',
                'post',
                'fromScheduled',
                'legacy',
                'editHide',
                'pinned',
                'noforwards',
                'invertMedia',
                'offline',
                'id',
                'fromId',
                'fromBoostsApplied',
                'peerId',
                'savedPeerId',
                'fwdFrom',
                'viaBotId',
                'viaBusinessBotId',
                'replyTo',
                'date',
                'message',
                'media',
                'replyMarkup',
                'entities',
                'views',
                'forwards',
                'replies',
                'editDate',
                'postAuthor',
                'groupedId',
                'reactions',
                'restrictionReason',
                'ttlPeriod',
                'quickReplyShortcutId',
                'effect',
                'factcheck',
            ];
            this.out = params.out;
            this.mentioned = params.mentioned;
            this.mediaUnread = params.mediaUnread;
            this.silent = params.silent;
            this.post = params.post;
            this.fromScheduled = params.fromScheduled;
            this.legacy = params.legacy;
            this.editHide = params.editHide;
            this.pinned = params.pinned;
            this.noforwards = params.noforwards;
            this.invertMedia = params.invertMedia;
            this.offline = params.offline;
            this.id = params.id;
            this.fromId = params.fromId;
            this.fromBoostsApplied = params.fromBoostsApplied;
            this.peerId = params.peerId;
            this.savedPeerId = params.savedPeerId;
            this.fwdFrom = params.fwdFrom;
            this.viaBotId = params.viaBotId;
            this.viaBusinessBotId = params.viaBusinessBotId;
            this.replyTo = params.replyTo;
            this.date = params.date;
            this.message = params.message;
            this.media = params.media;
            this.replyMarkup = params.replyMarkup;
            this.entities = params.entities;
            this.views = params.views;
            this.forwards = params.forwards;
            this.replies = params.replies;
            this.editDate = params.editDate;
            this.postAuthor = params.postAuthor;
            this.groupedId = params.groupedId;
            this.reactions = params.reactions;
            this.restrictionReason = params.restrictionReason;
            this.ttlPeriod = params.ttlPeriod;
            this.quickReplyShortcutId = params.quickReplyShortcutId;
            this.effect = params.effect;
            this.factcheck = params.factcheck;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let out = flags & (1 << 1) ? true : false;
            let mentioned = flags & (1 << 4) ? true : false;
            let mediaUnread = flags & (1 << 5) ? true : false;
            let silent = flags & (1 << 13) ? true : false;
            let post = flags & (1 << 14) ? true : false;
            let fromScheduled = flags & (1 << 18) ? true : false;
            let legacy = flags & (1 << 19) ? true : false;
            let editHide = flags & (1 << 21) ? true : false;
            let pinned = flags & (1 << 24) ? true : false;
            let noforwards = flags & (1 << 26) ? true : false;
            let invertMedia = flags & (1 << 27) ? true : false;
            let flags2 = await index_js_1.Primitive.Int.read(_data);
            let offline = flags2 & (1 << 1) ? true : false;
            let id = await index_js_1.Primitive.Int.read(_data);
            let fromId = flags & (1 << 8) ? await index_js_1.TLObject.read(_data) : undefined;
            let fromBoostsApplied = flags & (1 << 29) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let peerId = await index_js_1.TLObject.read(_data);
            let savedPeerId = flags & (1 << 28) ? await index_js_1.TLObject.read(_data) : undefined;
            let fwdFrom = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
            let viaBotId = flags & (1 << 11) ? await index_js_1.Primitive.Long.read(_data) : undefined;
            let viaBusinessBotId = flags2 & (1 << 0) ? await index_js_1.Primitive.Long.read(_data) : undefined;
            let replyTo = flags & (1 << 3) ? await index_js_1.TLObject.read(_data) : undefined;
            let date = await index_js_1.Primitive.Int.read(_data);
            let message = await index_js_1.Primitive.String.read(_data);
            let media = flags & (1 << 9) ? await index_js_1.TLObject.read(_data) : undefined;
            let replyMarkup = flags & (1 << 6) ? await index_js_1.TLObject.read(_data) : undefined;
            let entities = flags & (1 << 7) ? await index_js_1.TLObject.read(_data) : [];
            let views = flags & (1 << 10) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let forwards = flags & (1 << 10) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let replies = flags & (1 << 23) ? await index_js_1.TLObject.read(_data) : undefined;
            let editDate = flags & (1 << 15) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let postAuthor = flags & (1 << 16) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let groupedId = flags & (1 << 17) ? await index_js_1.Primitive.Long.read(_data) : undefined;
            let reactions = flags & (1 << 20) ? await index_js_1.TLObject.read(_data) : undefined;
            let restrictionReason = flags & (1 << 22) ? await index_js_1.TLObject.read(_data) : [];
            let ttlPeriod = flags & (1 << 25) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let quickReplyShortcutId = flags & (1 << 30) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let effect = flags2 & (1 << 2) ? await index_js_1.Primitive.Long.read(_data) : undefined;
            let factcheck = flags2 & (1 << 3) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.Message({
                out: out,
                mentioned: mentioned,
                mediaUnread: mediaUnread,
                silent: silent,
                post: post,
                fromScheduled: fromScheduled,
                legacy: legacy,
                editHide: editHide,
                pinned: pinned,
                noforwards: noforwards,
                invertMedia: invertMedia,
                offline: offline,
                id: id,
                fromId: fromId,
                fromBoostsApplied: fromBoostsApplied,
                peerId: peerId,
                savedPeerId: savedPeerId,
                fwdFrom: fwdFrom,
                viaBotId: viaBotId,
                viaBusinessBotId: viaBusinessBotId,
                replyTo: replyTo,
                date: date,
                message: message,
                media: media,
                replyMarkup: replyMarkup,
                entities: entities,
                views: views,
                forwards: forwards,
                replies: replies,
                editDate: editDate,
                postAuthor: postAuthor,
                groupedId: groupedId,
                reactions: reactions,
                restrictionReason: restrictionReason,
                ttlPeriod: ttlPeriod,
                quickReplyShortcutId: quickReplyShortcutId,
                effect: effect,
                factcheck: factcheck,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.out ? 1 << 1 : 0;
            flags |= this.mentioned ? 1 << 4 : 0;
            flags |= this.mediaUnread ? 1 << 5 : 0;
            flags |= this.silent ? 1 << 13 : 0;
            flags |= this.post ? 1 << 14 : 0;
            flags |= this.fromScheduled ? 1 << 18 : 0;
            flags |= this.legacy ? 1 << 19 : 0;
            flags |= this.editHide ? 1 << 21 : 0;
            flags |= this.pinned ? 1 << 24 : 0;
            flags |= this.noforwards ? 1 << 26 : 0;
            flags |= this.invertMedia ? 1 << 27 : 0;
            flags |= this.fromId !== undefined ? 1 << 8 : 0;
            flags |= this.fromBoostsApplied !== undefined ? 1 << 29 : 0;
            flags |= this.savedPeerId !== undefined ? 1 << 28 : 0;
            flags |= this.fwdFrom !== undefined ? 1 << 2 : 0;
            flags |= this.viaBotId !== undefined ? 1 << 11 : 0;
            flags |= this.replyTo !== undefined ? 1 << 3 : 0;
            flags |= this.media !== undefined ? 1 << 9 : 0;
            flags |= this.replyMarkup !== undefined ? 1 << 6 : 0;
            flags |= this.entities ? 1 << 7 : 0;
            flags |= this.views !== undefined ? 1 << 10 : 0;
            flags |= this.forwards !== undefined ? 1 << 10 : 0;
            flags |= this.replies !== undefined ? 1 << 23 : 0;
            flags |= this.editDate !== undefined ? 1 << 15 : 0;
            flags |= this.postAuthor !== undefined ? 1 << 16 : 0;
            flags |= this.groupedId !== undefined ? 1 << 17 : 0;
            flags |= this.reactions !== undefined ? 1 << 20 : 0;
            flags |= this.restrictionReason ? 1 << 22 : 0;
            flags |= this.ttlPeriod !== undefined ? 1 << 25 : 0;
            flags |= this.quickReplyShortcutId !== undefined ? 1 << 30 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            let flags2 = 0;
            flags2 |= this.offline ? 1 << 1 : 0;
            flags2 |= this.viaBusinessBotId !== undefined ? 1 << 0 : 0;
            flags2 |= this.effect !== undefined ? 1 << 2 : 0;
            flags2 |= this.factcheck !== undefined ? 1 << 3 : 0;
            b.write(index_js_1.Primitive.Int.write(flags2));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.id));
            }
            if (this.fromId !== undefined) {
                b.write(this.fromId.write());
            }
            if (this.fromBoostsApplied !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.fromBoostsApplied));
            }
            if (this.peerId !== undefined) {
                b.write(this.peerId.write());
            }
            if (this.savedPeerId !== undefined) {
                b.write(this.savedPeerId.write());
            }
            if (this.fwdFrom !== undefined) {
                b.write(this.fwdFrom.write());
            }
            if (this.viaBotId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.viaBotId));
            }
            if (this.viaBusinessBotId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.viaBusinessBotId));
            }
            if (this.replyTo !== undefined) {
                b.write(this.replyTo.write());
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.message !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.message));
            }
            if (this.media !== undefined) {
                b.write(this.media.write());
            }
            if (this.replyMarkup !== undefined) {
                b.write(this.replyMarkup.write());
            }
            if (this.entities) {
                b.write(index_js_1.Primitive.Vector.write(this.entities));
            }
            if (this.views !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.views));
            }
            if (this.forwards !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.forwards));
            }
            if (this.replies !== undefined) {
                b.write(this.replies.write());
            }
            if (this.editDate !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.editDate));
            }
            if (this.postAuthor !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.postAuthor));
            }
            if (this.groupedId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.groupedId));
            }
            if (this.reactions !== undefined) {
                b.write(this.reactions.write());
            }
            if (this.restrictionReason) {
                b.write(index_js_1.Primitive.Vector.write(this.restrictionReason));
            }
            if (this.ttlPeriod !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.ttlPeriod));
            }
            if (this.quickReplyShortcutId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.quickReplyShortcutId));
            }
            if (this.effect !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.effect));
            }
            if (this.factcheck !== undefined) {
                b.write(this.factcheck.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.Message = Message;
    class MessageService extends index_js_1.TLObject {
        out;
        mentioned;
        mediaUnread;
        silent;
        post;
        legacy;
        id;
        fromId;
        peerId;
        replyTo;
        date;
        action;
        ttlPeriod;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageService';
            this.constructorId = 0x2b085862;
            this.subclassOfId = 0x790009e3;
            this._slots = [
                'out',
                'mentioned',
                'mediaUnread',
                'silent',
                'post',
                'legacy',
                'id',
                'fromId',
                'peerId',
                'replyTo',
                'date',
                'action',
                'ttlPeriod',
            ];
            this.out = params.out;
            this.mentioned = params.mentioned;
            this.mediaUnread = params.mediaUnread;
            this.silent = params.silent;
            this.post = params.post;
            this.legacy = params.legacy;
            this.id = params.id;
            this.fromId = params.fromId;
            this.peerId = params.peerId;
            this.replyTo = params.replyTo;
            this.date = params.date;
            this.action = params.action;
            this.ttlPeriod = params.ttlPeriod;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let out = flags & (1 << 1) ? true : false;
            let mentioned = flags & (1 << 4) ? true : false;
            let mediaUnread = flags & (1 << 5) ? true : false;
            let silent = flags & (1 << 13) ? true : false;
            let post = flags & (1 << 14) ? true : false;
            let legacy = flags & (1 << 19) ? true : false;
            let id = await index_js_1.Primitive.Int.read(_data);
            let fromId = flags & (1 << 8) ? await index_js_1.TLObject.read(_data) : undefined;
            let peerId = await index_js_1.TLObject.read(_data);
            let replyTo = flags & (1 << 3) ? await index_js_1.TLObject.read(_data) : undefined;
            let date = await index_js_1.Primitive.Int.read(_data);
            let action = await index_js_1.TLObject.read(_data);
            let ttlPeriod = flags & (1 << 25) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            return new Raw.MessageService({
                out: out,
                mentioned: mentioned,
                mediaUnread: mediaUnread,
                silent: silent,
                post: post,
                legacy: legacy,
                id: id,
                fromId: fromId,
                peerId: peerId,
                replyTo: replyTo,
                date: date,
                action: action,
                ttlPeriod: ttlPeriod,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.out ? 1 << 1 : 0;
            flags |= this.mentioned ? 1 << 4 : 0;
            flags |= this.mediaUnread ? 1 << 5 : 0;
            flags |= this.silent ? 1 << 13 : 0;
            flags |= this.post ? 1 << 14 : 0;
            flags |= this.legacy ? 1 << 19 : 0;
            flags |= this.fromId !== undefined ? 1 << 8 : 0;
            flags |= this.replyTo !== undefined ? 1 << 3 : 0;
            flags |= this.ttlPeriod !== undefined ? 1 << 25 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.id));
            }
            if (this.fromId !== undefined) {
                b.write(this.fromId.write());
            }
            if (this.peerId !== undefined) {
                b.write(this.peerId.write());
            }
            if (this.replyTo !== undefined) {
                b.write(this.replyTo.write());
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.action !== undefined) {
                b.write(this.action.write());
            }
            if (this.ttlPeriod !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.ttlPeriod));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageService = MessageService;
    class MessageMediaEmpty extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'MessageMediaEmpty';
            this.constructorId = 0x3ded6320;
            this.subclassOfId = 0x476cbe32;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.MessageMediaEmpty();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageMediaEmpty = MessageMediaEmpty;
    class MessageMediaPhoto extends index_js_1.TLObject {
        spoiler;
        photo;
        ttlSeconds;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageMediaPhoto';
            this.constructorId = 0x695150d7;
            this.subclassOfId = 0x476cbe32;
            this._slots = ['spoiler', 'photo', 'ttlSeconds'];
            this.spoiler = params.spoiler;
            this.photo = params.photo;
            this.ttlSeconds = params.ttlSeconds;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let spoiler = flags & (1 << 3) ? true : false;
            let photo = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
            let ttlSeconds = flags & (1 << 2) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            return new Raw.MessageMediaPhoto({ spoiler: spoiler, photo: photo, ttlSeconds: ttlSeconds });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.spoiler ? 1 << 3 : 0;
            flags |= this.photo !== undefined ? 1 << 0 : 0;
            flags |= this.ttlSeconds !== undefined ? 1 << 2 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.photo !== undefined) {
                b.write(this.photo.write());
            }
            if (this.ttlSeconds !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.ttlSeconds));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageMediaPhoto = MessageMediaPhoto;
    class MessageMediaGeo extends index_js_1.TLObject {
        geo;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageMediaGeo';
            this.constructorId = 0x56e0d474;
            this.subclassOfId = 0x476cbe32;
            this._slots = ['geo'];
            this.geo = params.geo;
        }
        static async read(_data, ..._args) {
            let geo = await index_js_1.TLObject.read(_data);
            return new Raw.MessageMediaGeo({ geo: geo });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.geo !== undefined) {
                b.write(this.geo.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageMediaGeo = MessageMediaGeo;
    class MessageMediaContact extends index_js_1.TLObject {
        phoneNumber;
        firstName;
        lastName;
        vcard;
        userId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageMediaContact';
            this.constructorId = 0x70322949;
            this.subclassOfId = 0x476cbe32;
            this._slots = ['phoneNumber', 'firstName', 'lastName', 'vcard', 'userId'];
            this.phoneNumber = params.phoneNumber;
            this.firstName = params.firstName;
            this.lastName = params.lastName;
            this.vcard = params.vcard;
            this.userId = params.userId;
        }
        static async read(_data, ..._args) {
            let phoneNumber = await index_js_1.Primitive.String.read(_data);
            let firstName = await index_js_1.Primitive.String.read(_data);
            let lastName = await index_js_1.Primitive.String.read(_data);
            let vcard = await index_js_1.Primitive.String.read(_data);
            let userId = await index_js_1.Primitive.Long.read(_data);
            return new Raw.MessageMediaContact({
                phoneNumber: phoneNumber,
                firstName: firstName,
                lastName: lastName,
                vcard: vcard,
                userId: userId,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.phoneNumber !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.phoneNumber));
            }
            if (this.firstName !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.firstName));
            }
            if (this.lastName !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.lastName));
            }
            if (this.vcard !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.vcard));
            }
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageMediaContact = MessageMediaContact;
    class MessageMediaUnsupported extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'MessageMediaUnsupported';
            this.constructorId = 0x9f84f49e;
            this.subclassOfId = 0x476cbe32;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.MessageMediaUnsupported();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageMediaUnsupported = MessageMediaUnsupported;
    class MessageMediaDocument extends index_js_1.TLObject {
        nopremium;
        spoiler;
        video;
        round;
        voice;
        document;
        altDocument;
        ttlSeconds;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageMediaDocument';
            this.constructorId = 0x4cf4d72d;
            this.subclassOfId = 0x476cbe32;
            this._slots = [
                'nopremium',
                'spoiler',
                'video',
                'round',
                'voice',
                'document',
                'altDocument',
                'ttlSeconds',
            ];
            this.nopremium = params.nopremium;
            this.spoiler = params.spoiler;
            this.video = params.video;
            this.round = params.round;
            this.voice = params.voice;
            this.document = params.document;
            this.altDocument = params.altDocument;
            this.ttlSeconds = params.ttlSeconds;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let nopremium = flags & (1 << 3) ? true : false;
            let spoiler = flags & (1 << 4) ? true : false;
            let video = flags & (1 << 6) ? true : false;
            let round = flags & (1 << 7) ? true : false;
            let voice = flags & (1 << 8) ? true : false;
            let document = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
            let altDocument = flags & (1 << 5) ? await index_js_1.TLObject.read(_data) : undefined;
            let ttlSeconds = flags & (1 << 2) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            return new Raw.MessageMediaDocument({
                nopremium: nopremium,
                spoiler: spoiler,
                video: video,
                round: round,
                voice: voice,
                document: document,
                altDocument: altDocument,
                ttlSeconds: ttlSeconds,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.nopremium ? 1 << 3 : 0;
            flags |= this.spoiler ? 1 << 4 : 0;
            flags |= this.video ? 1 << 6 : 0;
            flags |= this.round ? 1 << 7 : 0;
            flags |= this.voice ? 1 << 8 : 0;
            flags |= this.document !== undefined ? 1 << 0 : 0;
            flags |= this.altDocument !== undefined ? 1 << 5 : 0;
            flags |= this.ttlSeconds !== undefined ? 1 << 2 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.document !== undefined) {
                b.write(this.document.write());
            }
            if (this.altDocument !== undefined) {
                b.write(this.altDocument.write());
            }
            if (this.ttlSeconds !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.ttlSeconds));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageMediaDocument = MessageMediaDocument;
    class MessageMediaWebPage extends index_js_1.TLObject {
        forceLargeMedia;
        forceSmallMedia;
        manual;
        safe;
        webpage;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageMediaWebPage';
            this.constructorId = 0xddf10c3b;
            this.subclassOfId = 0x476cbe32;
            this._slots = ['forceLargeMedia', 'forceSmallMedia', 'manual', 'safe', 'webpage'];
            this.forceLargeMedia = params.forceLargeMedia;
            this.forceSmallMedia = params.forceSmallMedia;
            this.manual = params.manual;
            this.safe = params.safe;
            this.webpage = params.webpage;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let forceLargeMedia = flags & (1 << 0) ? true : false;
            let forceSmallMedia = flags & (1 << 1) ? true : false;
            let manual = flags & (1 << 3) ? true : false;
            let safe = flags & (1 << 4) ? true : false;
            let webpage = await index_js_1.TLObject.read(_data);
            return new Raw.MessageMediaWebPage({
                forceLargeMedia: forceLargeMedia,
                forceSmallMedia: forceSmallMedia,
                manual: manual,
                safe: safe,
                webpage: webpage,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.forceLargeMedia ? 1 << 0 : 0;
            flags |= this.forceSmallMedia ? 1 << 1 : 0;
            flags |= this.manual ? 1 << 3 : 0;
            flags |= this.safe ? 1 << 4 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.webpage !== undefined) {
                b.write(this.webpage.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageMediaWebPage = MessageMediaWebPage;
    class MessageMediaVenue extends index_js_1.TLObject {
        geo;
        title;
        address;
        provider;
        venueId;
        venueType;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageMediaVenue';
            this.constructorId = 0x2ec0533f;
            this.subclassOfId = 0x476cbe32;
            this._slots = ['geo', 'title', 'address', 'provider', 'venueId', 'venueType'];
            this.geo = params.geo;
            this.title = params.title;
            this.address = params.address;
            this.provider = params.provider;
            this.venueId = params.venueId;
            this.venueType = params.venueType;
        }
        static async read(_data, ..._args) {
            let geo = await index_js_1.TLObject.read(_data);
            let title = await index_js_1.Primitive.String.read(_data);
            let address = await index_js_1.Primitive.String.read(_data);
            let provider = await index_js_1.Primitive.String.read(_data);
            let venueId = await index_js_1.Primitive.String.read(_data);
            let venueType = await index_js_1.Primitive.String.read(_data);
            return new Raw.MessageMediaVenue({
                geo: geo,
                title: title,
                address: address,
                provider: provider,
                venueId: venueId,
                venueType: venueType,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.geo !== undefined) {
                b.write(this.geo.write());
            }
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            if (this.address !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.address));
            }
            if (this.provider !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.provider));
            }
            if (this.venueId !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.venueId));
            }
            if (this.venueType !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.venueType));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageMediaVenue = MessageMediaVenue;
    class MessageMediaGame extends index_js_1.TLObject {
        game;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageMediaGame';
            this.constructorId = 0xfdb19008;
            this.subclassOfId = 0x476cbe32;
            this._slots = ['game'];
            this.game = params.game;
        }
        static async read(_data, ..._args) {
            let game = await index_js_1.TLObject.read(_data);
            return new Raw.MessageMediaGame({ game: game });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.game !== undefined) {
                b.write(this.game.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageMediaGame = MessageMediaGame;
    class MessageMediaInvoice extends index_js_1.TLObject {
        shippingAddressRequested;
        test;
        title;
        description;
        photo;
        receiptMsgId;
        currency;
        totalAmount;
        startParam;
        extendedMedia;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageMediaInvoice';
            this.constructorId = 0xf6a548d3;
            this.subclassOfId = 0x476cbe32;
            this._slots = [
                'shippingAddressRequested',
                'test',
                'title',
                'description',
                'photo',
                'receiptMsgId',
                'currency',
                'totalAmount',
                'startParam',
                'extendedMedia',
            ];
            this.shippingAddressRequested = params.shippingAddressRequested;
            this.test = params.test;
            this.title = params.title;
            this.description = params.description;
            this.photo = params.photo;
            this.receiptMsgId = params.receiptMsgId;
            this.currency = params.currency;
            this.totalAmount = params.totalAmount;
            this.startParam = params.startParam;
            this.extendedMedia = params.extendedMedia;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let shippingAddressRequested = flags & (1 << 1) ? true : false;
            let test = flags & (1 << 3) ? true : false;
            let title = await index_js_1.Primitive.String.read(_data);
            let description = await index_js_1.Primitive.String.read(_data);
            let photo = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
            let receiptMsgId = flags & (1 << 2) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let currency = await index_js_1.Primitive.String.read(_data);
            let totalAmount = await index_js_1.Primitive.Long.read(_data);
            let startParam = await index_js_1.Primitive.String.read(_data);
            let extendedMedia = flags & (1 << 4) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.MessageMediaInvoice({
                shippingAddressRequested: shippingAddressRequested,
                test: test,
                title: title,
                description: description,
                photo: photo,
                receiptMsgId: receiptMsgId,
                currency: currency,
                totalAmount: totalAmount,
                startParam: startParam,
                extendedMedia: extendedMedia,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.shippingAddressRequested ? 1 << 1 : 0;
            flags |= this.test ? 1 << 3 : 0;
            flags |= this.photo !== undefined ? 1 << 0 : 0;
            flags |= this.receiptMsgId !== undefined ? 1 << 2 : 0;
            flags |= this.extendedMedia !== undefined ? 1 << 4 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            if (this.description !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.description));
            }
            if (this.photo !== undefined) {
                b.write(this.photo.write());
            }
            if (this.receiptMsgId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.receiptMsgId));
            }
            if (this.currency !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.currency));
            }
            if (this.totalAmount !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.totalAmount));
            }
            if (this.startParam !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.startParam));
            }
            if (this.extendedMedia !== undefined) {
                b.write(this.extendedMedia.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageMediaInvoice = MessageMediaInvoice;
    class MessageMediaGeoLive extends index_js_1.TLObject {
        geo;
        heading;
        period;
        proximityNotificationRadius;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageMediaGeoLive';
            this.constructorId = 0xb940c666;
            this.subclassOfId = 0x476cbe32;
            this._slots = ['geo', 'heading', 'period', 'proximityNotificationRadius'];
            this.geo = params.geo;
            this.heading = params.heading;
            this.period = params.period;
            this.proximityNotificationRadius = params.proximityNotificationRadius;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let geo = await index_js_1.TLObject.read(_data);
            let heading = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let period = await index_js_1.Primitive.Int.read(_data);
            let proximityNotificationRadius = flags & (1 << 1) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            return new Raw.MessageMediaGeoLive({
                geo: geo,
                heading: heading,
                period: period,
                proximityNotificationRadius: proximityNotificationRadius,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.heading !== undefined ? 1 << 0 : 0;
            flags |= this.proximityNotificationRadius !== undefined ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.geo !== undefined) {
                b.write(this.geo.write());
            }
            if (this.heading !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.heading));
            }
            if (this.period !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.period));
            }
            if (this.proximityNotificationRadius !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.proximityNotificationRadius));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageMediaGeoLive = MessageMediaGeoLive;
    class MessageMediaPoll extends index_js_1.TLObject {
        poll;
        results;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageMediaPoll';
            this.constructorId = 0x4bd6e798;
            this.subclassOfId = 0x476cbe32;
            this._slots = ['poll', 'results'];
            this.poll = params.poll;
            this.results = params.results;
        }
        static async read(_data, ..._args) {
            let poll = await index_js_1.TLObject.read(_data);
            let results = await index_js_1.TLObject.read(_data);
            return new Raw.MessageMediaPoll({ poll: poll, results: results });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.poll !== undefined) {
                b.write(this.poll.write());
            }
            if (this.results !== undefined) {
                b.write(this.results.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageMediaPoll = MessageMediaPoll;
    class MessageMediaDice extends index_js_1.TLObject {
        value;
        emoticon;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageMediaDice';
            this.constructorId = 0x3f7ee58b;
            this.subclassOfId = 0x476cbe32;
            this._slots = ['value', 'emoticon'];
            this.value = params.value;
            this.emoticon = params.emoticon;
        }
        static async read(_data, ..._args) {
            let value = await index_js_1.Primitive.Int.read(_data);
            let emoticon = await index_js_1.Primitive.String.read(_data);
            return new Raw.MessageMediaDice({ value: value, emoticon: emoticon });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.value !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.value));
            }
            if (this.emoticon !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.emoticon));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageMediaDice = MessageMediaDice;
    class MessageMediaStory extends index_js_1.TLObject {
        viaMention;
        peer;
        id;
        story;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageMediaStory';
            this.constructorId = 0x68cb6283;
            this.subclassOfId = 0x476cbe32;
            this._slots = ['viaMention', 'peer', 'id', 'story'];
            this.viaMention = params.viaMention;
            this.peer = params.peer;
            this.id = params.id;
            this.story = params.story;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let viaMention = flags & (1 << 1) ? true : false;
            let peer = await index_js_1.TLObject.read(_data);
            let id = await index_js_1.Primitive.Int.read(_data);
            let story = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.MessageMediaStory({
                viaMention: viaMention,
                peer: peer,
                id: id,
                story: story,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.viaMention ? 1 << 1 : 0;
            flags |= this.story !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.id));
            }
            if (this.story !== undefined) {
                b.write(this.story.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageMediaStory = MessageMediaStory;
    class MessageMediaGiveaway extends index_js_1.TLObject {
        onlyNewSubscribers;
        winnersAreVisible;
        channels;
        countriesIso2;
        prizeDescription;
        quantity;
        months;
        untilDate;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageMediaGiveaway';
            this.constructorId = 0xdaad85b0;
            this.subclassOfId = 0x476cbe32;
            this._slots = [
                'onlyNewSubscribers',
                'winnersAreVisible',
                'channels',
                'countriesIso2',
                'prizeDescription',
                'quantity',
                'months',
                'untilDate',
            ];
            this.onlyNewSubscribers = params.onlyNewSubscribers;
            this.winnersAreVisible = params.winnersAreVisible;
            this.channels = params.channels;
            this.countriesIso2 = params.countriesIso2;
            this.prizeDescription = params.prizeDescription;
            this.quantity = params.quantity;
            this.months = params.months;
            this.untilDate = params.untilDate;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let onlyNewSubscribers = flags & (1 << 0) ? true : false;
            let winnersAreVisible = flags & (1 << 2) ? true : false;
            let channels = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Long);
            let countriesIso2 = flags & (1 << 1) ? await index_js_1.TLObject.read(_data, index_js_1.Primitive.String) : [];
            let prizeDescription = flags & (1 << 3) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let quantity = await index_js_1.Primitive.Int.read(_data);
            let months = await index_js_1.Primitive.Int.read(_data);
            let untilDate = await index_js_1.Primitive.Int.read(_data);
            return new Raw.MessageMediaGiveaway({
                onlyNewSubscribers: onlyNewSubscribers,
                winnersAreVisible: winnersAreVisible,
                channels: channels,
                countriesIso2: countriesIso2,
                prizeDescription: prizeDescription,
                quantity: quantity,
                months: months,
                untilDate: untilDate,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.onlyNewSubscribers ? 1 << 0 : 0;
            flags |= this.winnersAreVisible ? 1 << 2 : 0;
            flags |= this.countriesIso2 ? 1 << 1 : 0;
            flags |= this.prizeDescription !== undefined ? 1 << 3 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.channels) {
                b.write(index_js_1.Primitive.Vector.write(this.channels, index_js_1.Primitive.Long));
            }
            if (this.countriesIso2) {
                b.write(index_js_1.Primitive.Vector.write(this.countriesIso2, index_js_1.Primitive.String));
            }
            if (this.prizeDescription !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.prizeDescription));
            }
            if (this.quantity !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.quantity));
            }
            if (this.months !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.months));
            }
            if (this.untilDate !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.untilDate));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageMediaGiveaway = MessageMediaGiveaway;
    class MessageMediaGiveawayResults extends index_js_1.TLObject {
        onlyNewSubscribers;
        refunded;
        channelId;
        additionalPeersCount;
        launchMsgId;
        winnersCount;
        unclaimedCount;
        winners;
        months;
        prizeDescription;
        untilDate;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageMediaGiveawayResults';
            this.constructorId = 0xc6991068;
            this.subclassOfId = 0x476cbe32;
            this._slots = [
                'onlyNewSubscribers',
                'refunded',
                'channelId',
                'additionalPeersCount',
                'launchMsgId',
                'winnersCount',
                'unclaimedCount',
                'winners',
                'months',
                'prizeDescription',
                'untilDate',
            ];
            this.onlyNewSubscribers = params.onlyNewSubscribers;
            this.refunded = params.refunded;
            this.channelId = params.channelId;
            this.additionalPeersCount = params.additionalPeersCount;
            this.launchMsgId = params.launchMsgId;
            this.winnersCount = params.winnersCount;
            this.unclaimedCount = params.unclaimedCount;
            this.winners = params.winners;
            this.months = params.months;
            this.prizeDescription = params.prizeDescription;
            this.untilDate = params.untilDate;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let onlyNewSubscribers = flags & (1 << 0) ? true : false;
            let refunded = flags & (1 << 2) ? true : false;
            let channelId = await index_js_1.Primitive.Long.read(_data);
            let additionalPeersCount = flags & (1 << 3) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let launchMsgId = await index_js_1.Primitive.Int.read(_data);
            let winnersCount = await index_js_1.Primitive.Int.read(_data);
            let unclaimedCount = await index_js_1.Primitive.Int.read(_data);
            let winners = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Long);
            let months = await index_js_1.Primitive.Int.read(_data);
            let prizeDescription = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let untilDate = await index_js_1.Primitive.Int.read(_data);
            return new Raw.MessageMediaGiveawayResults({
                onlyNewSubscribers: onlyNewSubscribers,
                refunded: refunded,
                channelId: channelId,
                additionalPeersCount: additionalPeersCount,
                launchMsgId: launchMsgId,
                winnersCount: winnersCount,
                unclaimedCount: unclaimedCount,
                winners: winners,
                months: months,
                prizeDescription: prizeDescription,
                untilDate: untilDate,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.onlyNewSubscribers ? 1 << 0 : 0;
            flags |= this.refunded ? 1 << 2 : 0;
            flags |= this.additionalPeersCount !== undefined ? 1 << 3 : 0;
            flags |= this.prizeDescription !== undefined ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.channelId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.channelId));
            }
            if (this.additionalPeersCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.additionalPeersCount));
            }
            if (this.launchMsgId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.launchMsgId));
            }
            if (this.winnersCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.winnersCount));
            }
            if (this.unclaimedCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.unclaimedCount));
            }
            if (this.winners) {
                b.write(index_js_1.Primitive.Vector.write(this.winners, index_js_1.Primitive.Long));
            }
            if (this.months !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.months));
            }
            if (this.prizeDescription !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.prizeDescription));
            }
            if (this.untilDate !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.untilDate));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageMediaGiveawayResults = MessageMediaGiveawayResults;
    class MessageActionEmpty extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'MessageActionEmpty';
            this.constructorId = 0xb6aef7b0;
            this.subclassOfId = 0x8680d126;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.MessageActionEmpty();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageActionEmpty = MessageActionEmpty;
    class MessageActionChatCreate extends index_js_1.TLObject {
        title;
        users;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageActionChatCreate';
            this.constructorId = 0xbd47cbad;
            this.subclassOfId = 0x8680d126;
            this._slots = ['title', 'users'];
            this.title = params.title;
            this.users = params.users;
        }
        static async read(_data, ..._args) {
            let title = await index_js_1.Primitive.String.read(_data);
            let users = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Long);
            return new Raw.MessageActionChatCreate({ title: title, users: users });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            if (this.users) {
                b.write(index_js_1.Primitive.Vector.write(this.users, index_js_1.Primitive.Long));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageActionChatCreate = MessageActionChatCreate;
    class MessageActionChatEditTitle extends index_js_1.TLObject {
        title;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageActionChatEditTitle';
            this.constructorId = 0xb5a1ce5a;
            this.subclassOfId = 0x8680d126;
            this._slots = ['title'];
            this.title = params.title;
        }
        static async read(_data, ..._args) {
            let title = await index_js_1.Primitive.String.read(_data);
            return new Raw.MessageActionChatEditTitle({ title: title });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageActionChatEditTitle = MessageActionChatEditTitle;
    class MessageActionChatEditPhoto extends index_js_1.TLObject {
        photo;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageActionChatEditPhoto';
            this.constructorId = 0x7fcb13a8;
            this.subclassOfId = 0x8680d126;
            this._slots = ['photo'];
            this.photo = params.photo;
        }
        static async read(_data, ..._args) {
            let photo = await index_js_1.TLObject.read(_data);
            return new Raw.MessageActionChatEditPhoto({ photo: photo });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.photo !== undefined) {
                b.write(this.photo.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageActionChatEditPhoto = MessageActionChatEditPhoto;
    class MessageActionChatDeletePhoto extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'MessageActionChatDeletePhoto';
            this.constructorId = 0x95e3fbef;
            this.subclassOfId = 0x8680d126;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.MessageActionChatDeletePhoto();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageActionChatDeletePhoto = MessageActionChatDeletePhoto;
    class MessageActionChatAddUser extends index_js_1.TLObject {
        users;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageActionChatAddUser';
            this.constructorId = 0x15cefd00;
            this.subclassOfId = 0x8680d126;
            this._slots = ['users'];
            this.users = params.users;
        }
        static async read(_data, ..._args) {
            let users = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Long);
            return new Raw.MessageActionChatAddUser({ users: users });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.users) {
                b.write(index_js_1.Primitive.Vector.write(this.users, index_js_1.Primitive.Long));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageActionChatAddUser = MessageActionChatAddUser;
    class MessageActionChatDeleteUser extends index_js_1.TLObject {
        userId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageActionChatDeleteUser';
            this.constructorId = 0xa43f30cc;
            this.subclassOfId = 0x8680d126;
            this._slots = ['userId'];
            this.userId = params.userId;
        }
        static async read(_data, ..._args) {
            let userId = await index_js_1.Primitive.Long.read(_data);
            return new Raw.MessageActionChatDeleteUser({ userId: userId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageActionChatDeleteUser = MessageActionChatDeleteUser;
    class MessageActionChatJoinedByLink extends index_js_1.TLObject {
        inviterId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageActionChatJoinedByLink';
            this.constructorId = 0x31224c3;
            this.subclassOfId = 0x8680d126;
            this._slots = ['inviterId'];
            this.inviterId = params.inviterId;
        }
        static async read(_data, ..._args) {
            let inviterId = await index_js_1.Primitive.Long.read(_data);
            return new Raw.MessageActionChatJoinedByLink({ inviterId: inviterId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.inviterId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.inviterId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageActionChatJoinedByLink = MessageActionChatJoinedByLink;
    class MessageActionChannelCreate extends index_js_1.TLObject {
        title;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageActionChannelCreate';
            this.constructorId = 0x95d2ac92;
            this.subclassOfId = 0x8680d126;
            this._slots = ['title'];
            this.title = params.title;
        }
        static async read(_data, ..._args) {
            let title = await index_js_1.Primitive.String.read(_data);
            return new Raw.MessageActionChannelCreate({ title: title });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageActionChannelCreate = MessageActionChannelCreate;
    class MessageActionChatMigrateTo extends index_js_1.TLObject {
        channelId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageActionChatMigrateTo';
            this.constructorId = 0xe1037f92;
            this.subclassOfId = 0x8680d126;
            this._slots = ['channelId'];
            this.channelId = params.channelId;
        }
        static async read(_data, ..._args) {
            let channelId = await index_js_1.Primitive.Long.read(_data);
            return new Raw.MessageActionChatMigrateTo({ channelId: channelId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.channelId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.channelId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageActionChatMigrateTo = MessageActionChatMigrateTo;
    class MessageActionChannelMigrateFrom extends index_js_1.TLObject {
        title;
        chatId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageActionChannelMigrateFrom';
            this.constructorId = 0xea3948e9;
            this.subclassOfId = 0x8680d126;
            this._slots = ['title', 'chatId'];
            this.title = params.title;
            this.chatId = params.chatId;
        }
        static async read(_data, ..._args) {
            let title = await index_js_1.Primitive.String.read(_data);
            let chatId = await index_js_1.Primitive.Long.read(_data);
            return new Raw.MessageActionChannelMigrateFrom({ title: title, chatId: chatId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            if (this.chatId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.chatId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageActionChannelMigrateFrom = MessageActionChannelMigrateFrom;
    class MessageActionPinMessage extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'MessageActionPinMessage';
            this.constructorId = 0x94bd38ed;
            this.subclassOfId = 0x8680d126;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.MessageActionPinMessage();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageActionPinMessage = MessageActionPinMessage;
    class MessageActionHistoryClear extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'MessageActionHistoryClear';
            this.constructorId = 0x9fbab604;
            this.subclassOfId = 0x8680d126;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.MessageActionHistoryClear();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageActionHistoryClear = MessageActionHistoryClear;
    class MessageActionGameScore extends index_js_1.TLObject {
        gameId;
        score;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageActionGameScore';
            this.constructorId = 0x92a72876;
            this.subclassOfId = 0x8680d126;
            this._slots = ['gameId', 'score'];
            this.gameId = params.gameId;
            this.score = params.score;
        }
        static async read(_data, ..._args) {
            let gameId = await index_js_1.Primitive.Long.read(_data);
            let score = await index_js_1.Primitive.Int.read(_data);
            return new Raw.MessageActionGameScore({ gameId: gameId, score: score });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.gameId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.gameId));
            }
            if (this.score !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.score));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageActionGameScore = MessageActionGameScore;
    class MessageActionPaymentSentMe extends index_js_1.TLObject {
        recurringInit;
        recurringUsed;
        currency;
        totalAmount;
        payload;
        info;
        shippingOptionId;
        charge;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageActionPaymentSentMe';
            this.constructorId = 0x8f31b327;
            this.subclassOfId = 0x8680d126;
            this._slots = [
                'recurringInit',
                'recurringUsed',
                'currency',
                'totalAmount',
                'payload',
                'info',
                'shippingOptionId',
                'charge',
            ];
            this.recurringInit = params.recurringInit;
            this.recurringUsed = params.recurringUsed;
            this.currency = params.currency;
            this.totalAmount = params.totalAmount;
            this.payload = params.payload;
            this.info = params.info;
            this.shippingOptionId = params.shippingOptionId;
            this.charge = params.charge;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let recurringInit = flags & (1 << 2) ? true : false;
            let recurringUsed = flags & (1 << 3) ? true : false;
            let currency = await index_js_1.Primitive.String.read(_data);
            let totalAmount = await index_js_1.Primitive.Long.read(_data);
            let payload = await index_js_1.Primitive.Bytes.read(_data);
            let info = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
            let shippingOptionId = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let charge = await index_js_1.TLObject.read(_data);
            return new Raw.MessageActionPaymentSentMe({
                recurringInit: recurringInit,
                recurringUsed: recurringUsed,
                currency: currency,
                totalAmount: totalAmount,
                payload: payload,
                info: info,
                shippingOptionId: shippingOptionId,
                charge: charge,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.recurringInit ? 1 << 2 : 0;
            flags |= this.recurringUsed ? 1 << 3 : 0;
            flags |= this.info !== undefined ? 1 << 0 : 0;
            flags |= this.shippingOptionId !== undefined ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.currency !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.currency));
            }
            if (this.totalAmount !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.totalAmount));
            }
            if (this.payload !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.payload));
            }
            if (this.info !== undefined) {
                b.write(this.info.write());
            }
            if (this.shippingOptionId !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.shippingOptionId));
            }
            if (this.charge !== undefined) {
                b.write(this.charge.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageActionPaymentSentMe = MessageActionPaymentSentMe;
    class MessageActionPaymentSent extends index_js_1.TLObject {
        recurringInit;
        recurringUsed;
        currency;
        totalAmount;
        invoiceSlug;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageActionPaymentSent';
            this.constructorId = 0x96163f56;
            this.subclassOfId = 0x8680d126;
            this._slots = ['recurringInit', 'recurringUsed', 'currency', 'totalAmount', 'invoiceSlug'];
            this.recurringInit = params.recurringInit;
            this.recurringUsed = params.recurringUsed;
            this.currency = params.currency;
            this.totalAmount = params.totalAmount;
            this.invoiceSlug = params.invoiceSlug;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let recurringInit = flags & (1 << 2) ? true : false;
            let recurringUsed = flags & (1 << 3) ? true : false;
            let currency = await index_js_1.Primitive.String.read(_data);
            let totalAmount = await index_js_1.Primitive.Long.read(_data);
            let invoiceSlug = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
            return new Raw.MessageActionPaymentSent({
                recurringInit: recurringInit,
                recurringUsed: recurringUsed,
                currency: currency,
                totalAmount: totalAmount,
                invoiceSlug: invoiceSlug,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.recurringInit ? 1 << 2 : 0;
            flags |= this.recurringUsed ? 1 << 3 : 0;
            flags |= this.invoiceSlug !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.currency !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.currency));
            }
            if (this.totalAmount !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.totalAmount));
            }
            if (this.invoiceSlug !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.invoiceSlug));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageActionPaymentSent = MessageActionPaymentSent;
    class MessageActionPhoneCall extends index_js_1.TLObject {
        video;
        callId;
        reason;
        duration;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageActionPhoneCall';
            this.constructorId = 0x80e11a7f;
            this.subclassOfId = 0x8680d126;
            this._slots = ['video', 'callId', 'reason', 'duration'];
            this.video = params.video;
            this.callId = params.callId;
            this.reason = params.reason;
            this.duration = params.duration;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let video = flags & (1 << 2) ? true : false;
            let callId = await index_js_1.Primitive.Long.read(_data);
            let reason = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
            let duration = flags & (1 << 1) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            return new Raw.MessageActionPhoneCall({
                video: video,
                callId: callId,
                reason: reason,
                duration: duration,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.video ? 1 << 2 : 0;
            flags |= this.reason !== undefined ? 1 << 0 : 0;
            flags |= this.duration !== undefined ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.callId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.callId));
            }
            if (this.reason !== undefined) {
                b.write(this.reason.write());
            }
            if (this.duration !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.duration));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageActionPhoneCall = MessageActionPhoneCall;
    class MessageActionScreenshotTaken extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'MessageActionScreenshotTaken';
            this.constructorId = 0x4792929b;
            this.subclassOfId = 0x8680d126;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.MessageActionScreenshotTaken();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageActionScreenshotTaken = MessageActionScreenshotTaken;
    class MessageActionCustomAction extends index_js_1.TLObject {
        message;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageActionCustomAction';
            this.constructorId = 0xfae69f56;
            this.subclassOfId = 0x8680d126;
            this._slots = ['message'];
            this.message = params.message;
        }
        static async read(_data, ..._args) {
            let message = await index_js_1.Primitive.String.read(_data);
            return new Raw.MessageActionCustomAction({ message: message });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.message !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.message));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageActionCustomAction = MessageActionCustomAction;
    class MessageActionBotAllowed extends index_js_1.TLObject {
        attachMenu;
        fromRequest;
        domain;
        app;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageActionBotAllowed';
            this.constructorId = 0xc516d679;
            this.subclassOfId = 0x8680d126;
            this._slots = ['attachMenu', 'fromRequest', 'domain', 'app'];
            this.attachMenu = params.attachMenu;
            this.fromRequest = params.fromRequest;
            this.domain = params.domain;
            this.app = params.app;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let attachMenu = flags & (1 << 1) ? true : false;
            let fromRequest = flags & (1 << 3) ? true : false;
            let domain = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let app = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.MessageActionBotAllowed({
                attachMenu: attachMenu,
                fromRequest: fromRequest,
                domain: domain,
                app: app,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.attachMenu ? 1 << 1 : 0;
            flags |= this.fromRequest ? 1 << 3 : 0;
            flags |= this.domain !== undefined ? 1 << 0 : 0;
            flags |= this.app !== undefined ? 1 << 2 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.domain !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.domain));
            }
            if (this.app !== undefined) {
                b.write(this.app.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageActionBotAllowed = MessageActionBotAllowed;
    class MessageActionSecureValuesSentMe extends index_js_1.TLObject {
        values;
        credentials;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageActionSecureValuesSentMe';
            this.constructorId = 0x1b287353;
            this.subclassOfId = 0x8680d126;
            this._slots = ['values', 'credentials'];
            this.values = params.values;
            this.credentials = params.credentials;
        }
        static async read(_data, ..._args) {
            let values = await index_js_1.TLObject.read(_data);
            let credentials = await index_js_1.TLObject.read(_data);
            return new Raw.MessageActionSecureValuesSentMe({ values: values, credentials: credentials });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.values) {
                b.write(index_js_1.Primitive.Vector.write(this.values));
            }
            if (this.credentials !== undefined) {
                b.write(this.credentials.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageActionSecureValuesSentMe = MessageActionSecureValuesSentMe;
    class MessageActionSecureValuesSent extends index_js_1.TLObject {
        types;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageActionSecureValuesSent';
            this.constructorId = 0xd95c6154;
            this.subclassOfId = 0x8680d126;
            this._slots = ['types'];
            this.types = params.types;
        }
        static async read(_data, ..._args) {
            let types = await index_js_1.TLObject.read(_data);
            return new Raw.MessageActionSecureValuesSent({ types: types });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.types) {
                b.write(index_js_1.Primitive.Vector.write(this.types));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageActionSecureValuesSent = MessageActionSecureValuesSent;
    class MessageActionContactSignUp extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'MessageActionContactSignUp';
            this.constructorId = 0xf3f25f76;
            this.subclassOfId = 0x8680d126;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.MessageActionContactSignUp();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageActionContactSignUp = MessageActionContactSignUp;
    class MessageActionGeoProximityReached extends index_js_1.TLObject {
        fromId;
        toId;
        distance;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageActionGeoProximityReached';
            this.constructorId = 0x98e0d697;
            this.subclassOfId = 0x8680d126;
            this._slots = ['fromId', 'toId', 'distance'];
            this.fromId = params.fromId;
            this.toId = params.toId;
            this.distance = params.distance;
        }
        static async read(_data, ..._args) {
            let fromId = await index_js_1.TLObject.read(_data);
            let toId = await index_js_1.TLObject.read(_data);
            let distance = await index_js_1.Primitive.Int.read(_data);
            return new Raw.MessageActionGeoProximityReached({
                fromId: fromId,
                toId: toId,
                distance: distance,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.fromId !== undefined) {
                b.write(this.fromId.write());
            }
            if (this.toId !== undefined) {
                b.write(this.toId.write());
            }
            if (this.distance !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.distance));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageActionGeoProximityReached = MessageActionGeoProximityReached;
    class MessageActionGroupCall extends index_js_1.TLObject {
        call;
        duration;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageActionGroupCall';
            this.constructorId = 0x7a0d7f42;
            this.subclassOfId = 0x8680d126;
            this._slots = ['call', 'duration'];
            this.call = params.call;
            this.duration = params.duration;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let call = await index_js_1.TLObject.read(_data);
            let duration = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            return new Raw.MessageActionGroupCall({ call: call, duration: duration });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.duration !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.call !== undefined) {
                b.write(this.call.write());
            }
            if (this.duration !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.duration));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageActionGroupCall = MessageActionGroupCall;
    class MessageActionInviteToGroupCall extends index_js_1.TLObject {
        call;
        users;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageActionInviteToGroupCall';
            this.constructorId = 0x502f92f7;
            this.subclassOfId = 0x8680d126;
            this._slots = ['call', 'users'];
            this.call = params.call;
            this.users = params.users;
        }
        static async read(_data, ..._args) {
            let call = await index_js_1.TLObject.read(_data);
            let users = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Long);
            return new Raw.MessageActionInviteToGroupCall({ call: call, users: users });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.call !== undefined) {
                b.write(this.call.write());
            }
            if (this.users) {
                b.write(index_js_1.Primitive.Vector.write(this.users, index_js_1.Primitive.Long));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageActionInviteToGroupCall = MessageActionInviteToGroupCall;
    class MessageActionSetMessagesTTL extends index_js_1.TLObject {
        period;
        autoSettingFrom;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageActionSetMessagesTTL';
            this.constructorId = 0x3c134d7b;
            this.subclassOfId = 0x8680d126;
            this._slots = ['period', 'autoSettingFrom'];
            this.period = params.period;
            this.autoSettingFrom = params.autoSettingFrom;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let period = await index_js_1.Primitive.Int.read(_data);
            let autoSettingFrom = flags & (1 << 0) ? await index_js_1.Primitive.Long.read(_data) : undefined;
            return new Raw.MessageActionSetMessagesTTL({
                period: period,
                autoSettingFrom: autoSettingFrom,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.autoSettingFrom !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.period !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.period));
            }
            if (this.autoSettingFrom !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.autoSettingFrom));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageActionSetMessagesTTL = MessageActionSetMessagesTTL;
    class MessageActionGroupCallScheduled extends index_js_1.TLObject {
        call;
        scheduleDate;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageActionGroupCallScheduled';
            this.constructorId = 0xb3a07661;
            this.subclassOfId = 0x8680d126;
            this._slots = ['call', 'scheduleDate'];
            this.call = params.call;
            this.scheduleDate = params.scheduleDate;
        }
        static async read(_data, ..._args) {
            let call = await index_js_1.TLObject.read(_data);
            let scheduleDate = await index_js_1.Primitive.Int.read(_data);
            return new Raw.MessageActionGroupCallScheduled({ call: call, scheduleDate: scheduleDate });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.call !== undefined) {
                b.write(this.call.write());
            }
            if (this.scheduleDate !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.scheduleDate));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageActionGroupCallScheduled = MessageActionGroupCallScheduled;
    class MessageActionSetChatTheme extends index_js_1.TLObject {
        emoticon;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageActionSetChatTheme';
            this.constructorId = 0xaa786345;
            this.subclassOfId = 0x8680d126;
            this._slots = ['emoticon'];
            this.emoticon = params.emoticon;
        }
        static async read(_data, ..._args) {
            let emoticon = await index_js_1.Primitive.String.read(_data);
            return new Raw.MessageActionSetChatTheme({ emoticon: emoticon });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.emoticon !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.emoticon));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageActionSetChatTheme = MessageActionSetChatTheme;
    class MessageActionChatJoinedByRequest extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'MessageActionChatJoinedByRequest';
            this.constructorId = 0xebbca3cb;
            this.subclassOfId = 0x8680d126;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.MessageActionChatJoinedByRequest();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageActionChatJoinedByRequest = MessageActionChatJoinedByRequest;
    class MessageActionWebViewDataSentMe extends index_js_1.TLObject {
        text;
        data;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageActionWebViewDataSentMe';
            this.constructorId = 0x47dd8079;
            this.subclassOfId = 0x8680d126;
            this._slots = ['text', 'data'];
            this.text = params.text;
            this.data = params.data;
        }
        static async read(_data, ..._args) {
            let text = await index_js_1.Primitive.String.read(_data);
            let data = await index_js_1.Primitive.String.read(_data);
            return new Raw.MessageActionWebViewDataSentMe({ text: text, data: data });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.text !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.text));
            }
            if (this.data !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.data));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageActionWebViewDataSentMe = MessageActionWebViewDataSentMe;
    class MessageActionWebViewDataSent extends index_js_1.TLObject {
        text;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageActionWebViewDataSent';
            this.constructorId = 0xb4c38cb5;
            this.subclassOfId = 0x8680d126;
            this._slots = ['text'];
            this.text = params.text;
        }
        static async read(_data, ..._args) {
            let text = await index_js_1.Primitive.String.read(_data);
            return new Raw.MessageActionWebViewDataSent({ text: text });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.text !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.text));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageActionWebViewDataSent = MessageActionWebViewDataSent;
    class MessageActionGiftPremium extends index_js_1.TLObject {
        currency;
        amount;
        months;
        cryptoCurrency;
        cryptoAmount;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageActionGiftPremium';
            this.constructorId = 0xc83d6aec;
            this.subclassOfId = 0x8680d126;
            this._slots = ['currency', 'amount', 'months', 'cryptoCurrency', 'cryptoAmount'];
            this.currency = params.currency;
            this.amount = params.amount;
            this.months = params.months;
            this.cryptoCurrency = params.cryptoCurrency;
            this.cryptoAmount = params.cryptoAmount;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let currency = await index_js_1.Primitive.String.read(_data);
            let amount = await index_js_1.Primitive.Long.read(_data);
            let months = await index_js_1.Primitive.Int.read(_data);
            let cryptoCurrency = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let cryptoAmount = flags & (1 << 0) ? await index_js_1.Primitive.Long.read(_data) : undefined;
            return new Raw.MessageActionGiftPremium({
                currency: currency,
                amount: amount,
                months: months,
                cryptoCurrency: cryptoCurrency,
                cryptoAmount: cryptoAmount,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.cryptoCurrency !== undefined ? 1 << 0 : 0;
            flags |= this.cryptoAmount !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.currency !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.currency));
            }
            if (this.amount !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.amount));
            }
            if (this.months !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.months));
            }
            if (this.cryptoCurrency !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.cryptoCurrency));
            }
            if (this.cryptoAmount !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.cryptoAmount));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageActionGiftPremium = MessageActionGiftPremium;
    class MessageActionTopicCreate extends index_js_1.TLObject {
        title;
        iconColor;
        iconEmojiId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageActionTopicCreate';
            this.constructorId = 0xd999256;
            this.subclassOfId = 0x8680d126;
            this._slots = ['title', 'iconColor', 'iconEmojiId'];
            this.title = params.title;
            this.iconColor = params.iconColor;
            this.iconEmojiId = params.iconEmojiId;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let title = await index_js_1.Primitive.String.read(_data);
            let iconColor = await index_js_1.Primitive.Int.read(_data);
            let iconEmojiId = flags & (1 << 0) ? await index_js_1.Primitive.Long.read(_data) : undefined;
            return new Raw.MessageActionTopicCreate({
                title: title,
                iconColor: iconColor,
                iconEmojiId: iconEmojiId,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.iconEmojiId !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            if (this.iconColor !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.iconColor));
            }
            if (this.iconEmojiId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.iconEmojiId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageActionTopicCreate = MessageActionTopicCreate;
    class MessageActionTopicEdit extends index_js_1.TLObject {
        title;
        iconEmojiId;
        closed;
        hidden;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageActionTopicEdit';
            this.constructorId = 0xc0944820;
            this.subclassOfId = 0x8680d126;
            this._slots = ['title', 'iconEmojiId', 'closed', 'hidden'];
            this.title = params.title;
            this.iconEmojiId = params.iconEmojiId;
            this.closed = params.closed;
            this.hidden = params.hidden;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let title = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let iconEmojiId = flags & (1 << 1) ? await index_js_1.Primitive.Long.read(_data) : undefined;
            let closed = flags & (1 << 2) ? await index_js_1.Primitive.Bool.read(_data) : undefined;
            let hidden = flags & (1 << 3) ? await index_js_1.Primitive.Bool.read(_data) : undefined;
            return new Raw.MessageActionTopicEdit({
                title: title,
                iconEmojiId: iconEmojiId,
                closed: closed,
                hidden: hidden,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.title !== undefined ? 1 << 0 : 0;
            flags |= this.iconEmojiId !== undefined ? 1 << 1 : 0;
            flags |= this.closed !== undefined ? 1 << 2 : 0;
            flags |= this.hidden !== undefined ? 1 << 3 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            if (this.iconEmojiId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.iconEmojiId));
            }
            if (this.closed !== undefined) {
                b.write(index_js_1.Primitive.Bool.write(this.closed));
            }
            if (this.hidden !== undefined) {
                b.write(index_js_1.Primitive.Bool.write(this.hidden));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageActionTopicEdit = MessageActionTopicEdit;
    class MessageActionSuggestProfilePhoto extends index_js_1.TLObject {
        photo;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageActionSuggestProfilePhoto';
            this.constructorId = 0x57de635e;
            this.subclassOfId = 0x8680d126;
            this._slots = ['photo'];
            this.photo = params.photo;
        }
        static async read(_data, ..._args) {
            let photo = await index_js_1.TLObject.read(_data);
            return new Raw.MessageActionSuggestProfilePhoto({ photo: photo });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.photo !== undefined) {
                b.write(this.photo.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageActionSuggestProfilePhoto = MessageActionSuggestProfilePhoto;
    class MessageActionRequestedPeer extends index_js_1.TLObject {
        buttonId;
        peers;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageActionRequestedPeer';
            this.constructorId = 0x31518e9b;
            this.subclassOfId = 0x8680d126;
            this._slots = ['buttonId', 'peers'];
            this.buttonId = params.buttonId;
            this.peers = params.peers;
        }
        static async read(_data, ..._args) {
            let buttonId = await index_js_1.Primitive.Int.read(_data);
            let peers = await index_js_1.TLObject.read(_data);
            return new Raw.MessageActionRequestedPeer({ buttonId: buttonId, peers: peers });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.buttonId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.buttonId));
            }
            if (this.peers) {
                b.write(index_js_1.Primitive.Vector.write(this.peers));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageActionRequestedPeer = MessageActionRequestedPeer;
    class MessageActionSetChatWallPaper extends index_js_1.TLObject {
        same;
        forBoth;
        wallpaper;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageActionSetChatWallPaper';
            this.constructorId = 0x5060a3f4;
            this.subclassOfId = 0x8680d126;
            this._slots = ['same', 'forBoth', 'wallpaper'];
            this.same = params.same;
            this.forBoth = params.forBoth;
            this.wallpaper = params.wallpaper;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let same = flags & (1 << 0) ? true : false;
            let forBoth = flags & (1 << 1) ? true : false;
            let wallpaper = await index_js_1.TLObject.read(_data);
            return new Raw.MessageActionSetChatWallPaper({
                same: same,
                forBoth: forBoth,
                wallpaper: wallpaper,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.same ? 1 << 0 : 0;
            flags |= this.forBoth ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.wallpaper !== undefined) {
                b.write(this.wallpaper.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageActionSetChatWallPaper = MessageActionSetChatWallPaper;
    class MessageActionGiftCode extends index_js_1.TLObject {
        viaGiveaway;
        unclaimed;
        boostPeer;
        months;
        slug;
        currency;
        amount;
        cryptoCurrency;
        cryptoAmount;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageActionGiftCode';
            this.constructorId = 0x678c2e09;
            this.subclassOfId = 0x8680d126;
            this._slots = [
                'viaGiveaway',
                'unclaimed',
                'boostPeer',
                'months',
                'slug',
                'currency',
                'amount',
                'cryptoCurrency',
                'cryptoAmount',
            ];
            this.viaGiveaway = params.viaGiveaway;
            this.unclaimed = params.unclaimed;
            this.boostPeer = params.boostPeer;
            this.months = params.months;
            this.slug = params.slug;
            this.currency = params.currency;
            this.amount = params.amount;
            this.cryptoCurrency = params.cryptoCurrency;
            this.cryptoAmount = params.cryptoAmount;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let viaGiveaway = flags & (1 << 0) ? true : false;
            let unclaimed = flags & (1 << 2) ? true : false;
            let boostPeer = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : undefined;
            let months = await index_js_1.Primitive.Int.read(_data);
            let slug = await index_js_1.Primitive.String.read(_data);
            let currency = flags & (1 << 2) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let amount = flags & (1 << 2) ? await index_js_1.Primitive.Long.read(_data) : undefined;
            let cryptoCurrency = flags & (1 << 3) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let cryptoAmount = flags & (1 << 3) ? await index_js_1.Primitive.Long.read(_data) : undefined;
            return new Raw.MessageActionGiftCode({
                viaGiveaway: viaGiveaway,
                unclaimed: unclaimed,
                boostPeer: boostPeer,
                months: months,
                slug: slug,
                currency: currency,
                amount: amount,
                cryptoCurrency: cryptoCurrency,
                cryptoAmount: cryptoAmount,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.viaGiveaway ? 1 << 0 : 0;
            flags |= this.unclaimed ? 1 << 2 : 0;
            flags |= this.boostPeer !== undefined ? 1 << 1 : 0;
            flags |= this.currency !== undefined ? 1 << 2 : 0;
            flags |= this.amount !== undefined ? 1 << 2 : 0;
            flags |= this.cryptoCurrency !== undefined ? 1 << 3 : 0;
            flags |= this.cryptoAmount !== undefined ? 1 << 3 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.boostPeer !== undefined) {
                b.write(this.boostPeer.write());
            }
            if (this.months !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.months));
            }
            if (this.slug !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.slug));
            }
            if (this.currency !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.currency));
            }
            if (this.amount !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.amount));
            }
            if (this.cryptoCurrency !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.cryptoCurrency));
            }
            if (this.cryptoAmount !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.cryptoAmount));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageActionGiftCode = MessageActionGiftCode;
    class MessageActionGiveawayLaunch extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'MessageActionGiveawayLaunch';
            this.constructorId = 0x332ba9ed;
            this.subclassOfId = 0x8680d126;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.MessageActionGiveawayLaunch();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageActionGiveawayLaunch = MessageActionGiveawayLaunch;
    class MessageActionGiveawayResults extends index_js_1.TLObject {
        winnersCount;
        unclaimedCount;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageActionGiveawayResults';
            this.constructorId = 0x2a9fadc5;
            this.subclassOfId = 0x8680d126;
            this._slots = ['winnersCount', 'unclaimedCount'];
            this.winnersCount = params.winnersCount;
            this.unclaimedCount = params.unclaimedCount;
        }
        static async read(_data, ..._args) {
            let winnersCount = await index_js_1.Primitive.Int.read(_data);
            let unclaimedCount = await index_js_1.Primitive.Int.read(_data);
            return new Raw.MessageActionGiveawayResults({
                winnersCount: winnersCount,
                unclaimedCount: unclaimedCount,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.winnersCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.winnersCount));
            }
            if (this.unclaimedCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.unclaimedCount));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageActionGiveawayResults = MessageActionGiveawayResults;
    class MessageActionBoostApply extends index_js_1.TLObject {
        boosts;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageActionBoostApply';
            this.constructorId = 0xcc02aa6d;
            this.subclassOfId = 0x8680d126;
            this._slots = ['boosts'];
            this.boosts = params.boosts;
        }
        static async read(_data, ..._args) {
            let boosts = await index_js_1.Primitive.Int.read(_data);
            return new Raw.MessageActionBoostApply({ boosts: boosts });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.boosts !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.boosts));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageActionBoostApply = MessageActionBoostApply;
    class MessageActionRequestedPeerSentMe extends index_js_1.TLObject {
        buttonId;
        peers;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageActionRequestedPeerSentMe';
            this.constructorId = 0x93b31848;
            this.subclassOfId = 0x8680d126;
            this._slots = ['buttonId', 'peers'];
            this.buttonId = params.buttonId;
            this.peers = params.peers;
        }
        static async read(_data, ..._args) {
            let buttonId = await index_js_1.Primitive.Int.read(_data);
            let peers = await index_js_1.TLObject.read(_data);
            return new Raw.MessageActionRequestedPeerSentMe({ buttonId: buttonId, peers: peers });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.buttonId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.buttonId));
            }
            if (this.peers) {
                b.write(index_js_1.Primitive.Vector.write(this.peers));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageActionRequestedPeerSentMe = MessageActionRequestedPeerSentMe;
    class Dialog extends index_js_1.TLObject {
        pinned;
        unreadMark;
        viewForumAsMessages;
        peer;
        topMessage;
        readInboxMaxId;
        readOutboxMaxId;
        unreadCount;
        unreadMentionsCount;
        unreadReactionsCount;
        notifySettings;
        pts;
        draft;
        folderId;
        ttlPeriod;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'Dialog';
            this.constructorId = 0xd58a08c6;
            this.subclassOfId = 0x42cddd54;
            this._slots = [
                'pinned',
                'unreadMark',
                'viewForumAsMessages',
                'peer',
                'topMessage',
                'readInboxMaxId',
                'readOutboxMaxId',
                'unreadCount',
                'unreadMentionsCount',
                'unreadReactionsCount',
                'notifySettings',
                'pts',
                'draft',
                'folderId',
                'ttlPeriod',
            ];
            this.pinned = params.pinned;
            this.unreadMark = params.unreadMark;
            this.viewForumAsMessages = params.viewForumAsMessages;
            this.peer = params.peer;
            this.topMessage = params.topMessage;
            this.readInboxMaxId = params.readInboxMaxId;
            this.readOutboxMaxId = params.readOutboxMaxId;
            this.unreadCount = params.unreadCount;
            this.unreadMentionsCount = params.unreadMentionsCount;
            this.unreadReactionsCount = params.unreadReactionsCount;
            this.notifySettings = params.notifySettings;
            this.pts = params.pts;
            this.draft = params.draft;
            this.folderId = params.folderId;
            this.ttlPeriod = params.ttlPeriod;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let pinned = flags & (1 << 2) ? true : false;
            let unreadMark = flags & (1 << 3) ? true : false;
            let viewForumAsMessages = flags & (1 << 6) ? true : false;
            let peer = await index_js_1.TLObject.read(_data);
            let topMessage = await index_js_1.Primitive.Int.read(_data);
            let readInboxMaxId = await index_js_1.Primitive.Int.read(_data);
            let readOutboxMaxId = await index_js_1.Primitive.Int.read(_data);
            let unreadCount = await index_js_1.Primitive.Int.read(_data);
            let unreadMentionsCount = await index_js_1.Primitive.Int.read(_data);
            let unreadReactionsCount = await index_js_1.Primitive.Int.read(_data);
            let notifySettings = await index_js_1.TLObject.read(_data);
            let pts = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let draft = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : undefined;
            let folderId = flags & (1 << 4) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let ttlPeriod = flags & (1 << 5) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            return new Raw.Dialog({
                pinned: pinned,
                unreadMark: unreadMark,
                viewForumAsMessages: viewForumAsMessages,
                peer: peer,
                topMessage: topMessage,
                readInboxMaxId: readInboxMaxId,
                readOutboxMaxId: readOutboxMaxId,
                unreadCount: unreadCount,
                unreadMentionsCount: unreadMentionsCount,
                unreadReactionsCount: unreadReactionsCount,
                notifySettings: notifySettings,
                pts: pts,
                draft: draft,
                folderId: folderId,
                ttlPeriod: ttlPeriod,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.pinned ? 1 << 2 : 0;
            flags |= this.unreadMark ? 1 << 3 : 0;
            flags |= this.viewForumAsMessages ? 1 << 6 : 0;
            flags |= this.pts !== undefined ? 1 << 0 : 0;
            flags |= this.draft !== undefined ? 1 << 1 : 0;
            flags |= this.folderId !== undefined ? 1 << 4 : 0;
            flags |= this.ttlPeriod !== undefined ? 1 << 5 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.topMessage !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.topMessage));
            }
            if (this.readInboxMaxId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.readInboxMaxId));
            }
            if (this.readOutboxMaxId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.readOutboxMaxId));
            }
            if (this.unreadCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.unreadCount));
            }
            if (this.unreadMentionsCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.unreadMentionsCount));
            }
            if (this.unreadReactionsCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.unreadReactionsCount));
            }
            if (this.notifySettings !== undefined) {
                b.write(this.notifySettings.write());
            }
            if (this.pts !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.pts));
            }
            if (this.draft !== undefined) {
                b.write(this.draft.write());
            }
            if (this.folderId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.folderId));
            }
            if (this.ttlPeriod !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.ttlPeriod));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.Dialog = Dialog;
    class DialogFolder extends index_js_1.TLObject {
        pinned;
        folder;
        peer;
        topMessage;
        unreadMutedPeersCount;
        unreadUnmutedPeersCount;
        unreadMutedMessagesCount;
        unreadUnmutedMessagesCount;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DialogFolder';
            this.constructorId = 0x71bd134c;
            this.subclassOfId = 0x42cddd54;
            this._slots = [
                'pinned',
                'folder',
                'peer',
                'topMessage',
                'unreadMutedPeersCount',
                'unreadUnmutedPeersCount',
                'unreadMutedMessagesCount',
                'unreadUnmutedMessagesCount',
            ];
            this.pinned = params.pinned;
            this.folder = params.folder;
            this.peer = params.peer;
            this.topMessage = params.topMessage;
            this.unreadMutedPeersCount = params.unreadMutedPeersCount;
            this.unreadUnmutedPeersCount = params.unreadUnmutedPeersCount;
            this.unreadMutedMessagesCount = params.unreadMutedMessagesCount;
            this.unreadUnmutedMessagesCount = params.unreadUnmutedMessagesCount;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let pinned = flags & (1 << 2) ? true : false;
            let folder = await index_js_1.TLObject.read(_data);
            let peer = await index_js_1.TLObject.read(_data);
            let topMessage = await index_js_1.Primitive.Int.read(_data);
            let unreadMutedPeersCount = await index_js_1.Primitive.Int.read(_data);
            let unreadUnmutedPeersCount = await index_js_1.Primitive.Int.read(_data);
            let unreadMutedMessagesCount = await index_js_1.Primitive.Int.read(_data);
            let unreadUnmutedMessagesCount = await index_js_1.Primitive.Int.read(_data);
            return new Raw.DialogFolder({
                pinned: pinned,
                folder: folder,
                peer: peer,
                topMessage: topMessage,
                unreadMutedPeersCount: unreadMutedPeersCount,
                unreadUnmutedPeersCount: unreadUnmutedPeersCount,
                unreadMutedMessagesCount: unreadMutedMessagesCount,
                unreadUnmutedMessagesCount: unreadUnmutedMessagesCount,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.pinned ? 1 << 2 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.folder !== undefined) {
                b.write(this.folder.write());
            }
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.topMessage !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.topMessage));
            }
            if (this.unreadMutedPeersCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.unreadMutedPeersCount));
            }
            if (this.unreadUnmutedPeersCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.unreadUnmutedPeersCount));
            }
            if (this.unreadMutedMessagesCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.unreadMutedMessagesCount));
            }
            if (this.unreadUnmutedMessagesCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.unreadUnmutedMessagesCount));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DialogFolder = DialogFolder;
    class PhotoEmpty extends index_js_1.TLObject {
        id;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PhotoEmpty';
            this.constructorId = 0x2331b22d;
            this.subclassOfId = 0xd576ab1c;
            this._slots = ['id'];
            this.id = params.id;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.Long.read(_data);
            return new Raw.PhotoEmpty({ id: id });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PhotoEmpty = PhotoEmpty;
    class Photo extends index_js_1.TLObject {
        hasStickers;
        id;
        accessHash;
        fileReference;
        date;
        sizes;
        videoSizes;
        dcId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'Photo';
            this.constructorId = 0xfb197a65;
            this.subclassOfId = 0xd576ab1c;
            this._slots = [
                'hasStickers',
                'id',
                'accessHash',
                'fileReference',
                'date',
                'sizes',
                'videoSizes',
                'dcId',
            ];
            this.hasStickers = params.hasStickers;
            this.id = params.id;
            this.accessHash = params.accessHash;
            this.fileReference = params.fileReference;
            this.date = params.date;
            this.sizes = params.sizes;
            this.videoSizes = params.videoSizes;
            this.dcId = params.dcId;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let hasStickers = flags & (1 << 0) ? true : false;
            let id = await index_js_1.Primitive.Long.read(_data);
            let accessHash = await index_js_1.Primitive.Long.read(_data);
            let fileReference = await index_js_1.Primitive.Bytes.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            let sizes = await index_js_1.TLObject.read(_data);
            let videoSizes = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : [];
            let dcId = await index_js_1.Primitive.Int.read(_data);
            return new Raw.Photo({
                hasStickers: hasStickers,
                id: id,
                accessHash: accessHash,
                fileReference: fileReference,
                date: date,
                sizes: sizes,
                videoSizes: videoSizes,
                dcId: dcId,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.hasStickers ? 1 << 0 : 0;
            flags |= this.videoSizes ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.accessHash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.accessHash));
            }
            if (this.fileReference !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.fileReference));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.sizes) {
                b.write(index_js_1.Primitive.Vector.write(this.sizes));
            }
            if (this.videoSizes) {
                b.write(index_js_1.Primitive.Vector.write(this.videoSizes));
            }
            if (this.dcId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.dcId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.Photo = Photo;
    class PhotoSizeEmpty extends index_js_1.TLObject {
        type;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PhotoSizeEmpty';
            this.constructorId = 0xe17e23c;
            this.subclassOfId = 0x17cc29d9;
            this._slots = ['type'];
            this.type = params.type;
        }
        static async read(_data, ..._args) {
            let type = await index_js_1.Primitive.String.read(_data);
            return new Raw.PhotoSizeEmpty({ type: type });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.type !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.type));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PhotoSizeEmpty = PhotoSizeEmpty;
    class PhotoSize extends index_js_1.TLObject {
        type;
        w;
        h;
        size;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PhotoSize';
            this.constructorId = 0x75c78e60;
            this.subclassOfId = 0x17cc29d9;
            this._slots = ['type', 'w', 'h', 'size'];
            this.type = params.type;
            this.w = params.w;
            this.h = params.h;
            this.size = params.size;
        }
        static async read(_data, ..._args) {
            let type = await index_js_1.Primitive.String.read(_data);
            let w = await index_js_1.Primitive.Int.read(_data);
            let h = await index_js_1.Primitive.Int.read(_data);
            let size = await index_js_1.Primitive.Int.read(_data);
            return new Raw.PhotoSize({ type: type, w: w, h: h, size: size });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.type !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.type));
            }
            if (this.w !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.w));
            }
            if (this.h !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.h));
            }
            if (this.size !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.size));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PhotoSize = PhotoSize;
    class PhotoCachedSize extends index_js_1.TLObject {
        type;
        w;
        h;
        bytes;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PhotoCachedSize';
            this.constructorId = 0x21e1ad6;
            this.subclassOfId = 0x17cc29d9;
            this._slots = ['type', 'w', 'h', 'bytes'];
            this.type = params.type;
            this.w = params.w;
            this.h = params.h;
            this.bytes = params.bytes;
        }
        static async read(_data, ..._args) {
            let type = await index_js_1.Primitive.String.read(_data);
            let w = await index_js_1.Primitive.Int.read(_data);
            let h = await index_js_1.Primitive.Int.read(_data);
            let bytes = await index_js_1.Primitive.Bytes.read(_data);
            return new Raw.PhotoCachedSize({ type: type, w: w, h: h, bytes: bytes });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.type !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.type));
            }
            if (this.w !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.w));
            }
            if (this.h !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.h));
            }
            if (this.bytes !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.bytes));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PhotoCachedSize = PhotoCachedSize;
    class PhotoStrippedSize extends index_js_1.TLObject {
        type;
        bytes;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PhotoStrippedSize';
            this.constructorId = 0xe0b0bc2e;
            this.subclassOfId = 0x17cc29d9;
            this._slots = ['type', 'bytes'];
            this.type = params.type;
            this.bytes = params.bytes;
        }
        static async read(_data, ..._args) {
            let type = await index_js_1.Primitive.String.read(_data);
            let bytes = await index_js_1.Primitive.Bytes.read(_data);
            return new Raw.PhotoStrippedSize({ type: type, bytes: bytes });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.type !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.type));
            }
            if (this.bytes !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.bytes));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PhotoStrippedSize = PhotoStrippedSize;
    class PhotoSizeProgressive extends index_js_1.TLObject {
        type;
        w;
        h;
        sizes;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PhotoSizeProgressive';
            this.constructorId = 0xfa3efb95;
            this.subclassOfId = 0x17cc29d9;
            this._slots = ['type', 'w', 'h', 'sizes'];
            this.type = params.type;
            this.w = params.w;
            this.h = params.h;
            this.sizes = params.sizes;
        }
        static async read(_data, ..._args) {
            let type = await index_js_1.Primitive.String.read(_data);
            let w = await index_js_1.Primitive.Int.read(_data);
            let h = await index_js_1.Primitive.Int.read(_data);
            let sizes = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int);
            return new Raw.PhotoSizeProgressive({ type: type, w: w, h: h, sizes: sizes });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.type !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.type));
            }
            if (this.w !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.w));
            }
            if (this.h !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.h));
            }
            if (this.sizes) {
                b.write(index_js_1.Primitive.Vector.write(this.sizes, index_js_1.Primitive.Int));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PhotoSizeProgressive = PhotoSizeProgressive;
    class PhotoPathSize extends index_js_1.TLObject {
        type;
        bytes;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PhotoPathSize';
            this.constructorId = 0xd8214d41;
            this.subclassOfId = 0x17cc29d9;
            this._slots = ['type', 'bytes'];
            this.type = params.type;
            this.bytes = params.bytes;
        }
        static async read(_data, ..._args) {
            let type = await index_js_1.Primitive.String.read(_data);
            let bytes = await index_js_1.Primitive.Bytes.read(_data);
            return new Raw.PhotoPathSize({ type: type, bytes: bytes });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.type !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.type));
            }
            if (this.bytes !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.bytes));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PhotoPathSize = PhotoPathSize;
    class GeoPointEmpty extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'GeoPointEmpty';
            this.constructorId = 0x1117dd5f;
            this.subclassOfId = 0xd610e16d;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.GeoPointEmpty();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.GeoPointEmpty = GeoPointEmpty;
    class GeoPoint extends index_js_1.TLObject {
        long;
        lat;
        accessHash;
        accuracyRadius;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'GeoPoint';
            this.constructorId = 0xb2a2f663;
            this.subclassOfId = 0xd610e16d;
            this._slots = ['long', 'lat', 'accessHash', 'accuracyRadius'];
            this.long = params.long;
            this.lat = params.lat;
            this.accessHash = params.accessHash;
            this.accuracyRadius = params.accuracyRadius;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let long = await index_js_1.Primitive.Double.read(_data);
            let lat = await index_js_1.Primitive.Double.read(_data);
            let accessHash = await index_js_1.Primitive.Long.read(_data);
            let accuracyRadius = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            return new Raw.GeoPoint({
                long: long,
                lat: lat,
                accessHash: accessHash,
                accuracyRadius: accuracyRadius,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.accuracyRadius !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.long !== undefined) {
                b.write(index_js_1.Primitive.Double.write(this.long));
            }
            if (this.lat !== undefined) {
                b.write(index_js_1.Primitive.Double.write(this.lat));
            }
            if (this.accessHash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.accessHash));
            }
            if (this.accuracyRadius !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.accuracyRadius));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.GeoPoint = GeoPoint;
    class InputNotifyPeer extends index_js_1.TLObject {
        peer;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputNotifyPeer';
            this.constructorId = 0xb8bc5b0c;
            this.subclassOfId = 0x58981615;
            this._slots = ['peer'];
            this.peer = params.peer;
        }
        static async read(_data, ..._args) {
            let peer = await index_js_1.TLObject.read(_data);
            return new Raw.InputNotifyPeer({ peer: peer });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputNotifyPeer = InputNotifyPeer;
    class InputNotifyUsers extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputNotifyUsers';
            this.constructorId = 0x193b4417;
            this.subclassOfId = 0x58981615;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputNotifyUsers();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputNotifyUsers = InputNotifyUsers;
    class InputNotifyChats extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputNotifyChats';
            this.constructorId = 0x4a95e84e;
            this.subclassOfId = 0x58981615;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputNotifyChats();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputNotifyChats = InputNotifyChats;
    class InputNotifyBroadcasts extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputNotifyBroadcasts';
            this.constructorId = 0xb1db7c7e;
            this.subclassOfId = 0x58981615;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputNotifyBroadcasts();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputNotifyBroadcasts = InputNotifyBroadcasts;
    class InputNotifyForumTopic extends index_js_1.TLObject {
        peer;
        topMsgId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputNotifyForumTopic';
            this.constructorId = 0x5c467992;
            this.subclassOfId = 0x58981615;
            this._slots = ['peer', 'topMsgId'];
            this.peer = params.peer;
            this.topMsgId = params.topMsgId;
        }
        static async read(_data, ..._args) {
            let peer = await index_js_1.TLObject.read(_data);
            let topMsgId = await index_js_1.Primitive.Int.read(_data);
            return new Raw.InputNotifyForumTopic({ peer: peer, topMsgId: topMsgId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.topMsgId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.topMsgId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputNotifyForumTopic = InputNotifyForumTopic;
    class InputPeerNotifySettings extends index_js_1.TLObject {
        showPreviews;
        silent;
        muteUntil;
        sound;
        storiesMuted;
        storiesHideSender;
        storiesSound;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputPeerNotifySettings';
            this.constructorId = 0xcacb6ae2;
            this.subclassOfId = 0x90db0b0d;
            this._slots = [
                'showPreviews',
                'silent',
                'muteUntil',
                'sound',
                'storiesMuted',
                'storiesHideSender',
                'storiesSound',
            ];
            this.showPreviews = params.showPreviews;
            this.silent = params.silent;
            this.muteUntil = params.muteUntil;
            this.sound = params.sound;
            this.storiesMuted = params.storiesMuted;
            this.storiesHideSender = params.storiesHideSender;
            this.storiesSound = params.storiesSound;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let showPreviews = flags & (1 << 0) ? await index_js_1.Primitive.Bool.read(_data) : undefined;
            let silent = flags & (1 << 1) ? await index_js_1.Primitive.Bool.read(_data) : undefined;
            let muteUntil = flags & (1 << 2) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let sound = flags & (1 << 3) ? await index_js_1.TLObject.read(_data) : undefined;
            let storiesMuted = flags & (1 << 6) ? await index_js_1.Primitive.Bool.read(_data) : undefined;
            let storiesHideSender = flags & (1 << 7) ? await index_js_1.Primitive.Bool.read(_data) : undefined;
            let storiesSound = flags & (1 << 8) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.InputPeerNotifySettings({
                showPreviews: showPreviews,
                silent: silent,
                muteUntil: muteUntil,
                sound: sound,
                storiesMuted: storiesMuted,
                storiesHideSender: storiesHideSender,
                storiesSound: storiesSound,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.showPreviews !== undefined ? 1 << 0 : 0;
            flags |= this.silent !== undefined ? 1 << 1 : 0;
            flags |= this.muteUntil !== undefined ? 1 << 2 : 0;
            flags |= this.sound !== undefined ? 1 << 3 : 0;
            flags |= this.storiesMuted !== undefined ? 1 << 6 : 0;
            flags |= this.storiesHideSender !== undefined ? 1 << 7 : 0;
            flags |= this.storiesSound !== undefined ? 1 << 8 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.showPreviews !== undefined) {
                b.write(index_js_1.Primitive.Bool.write(this.showPreviews));
            }
            if (this.silent !== undefined) {
                b.write(index_js_1.Primitive.Bool.write(this.silent));
            }
            if (this.muteUntil !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.muteUntil));
            }
            if (this.sound !== undefined) {
                b.write(this.sound.write());
            }
            if (this.storiesMuted !== undefined) {
                b.write(index_js_1.Primitive.Bool.write(this.storiesMuted));
            }
            if (this.storiesHideSender !== undefined) {
                b.write(index_js_1.Primitive.Bool.write(this.storiesHideSender));
            }
            if (this.storiesSound !== undefined) {
                b.write(this.storiesSound.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputPeerNotifySettings = InputPeerNotifySettings;
    class PeerNotifySettings extends index_js_1.TLObject {
        showPreviews;
        silent;
        muteUntil;
        iosSound;
        androidSound;
        otherSound;
        storiesMuted;
        storiesHideSender;
        storiesIosSound;
        storiesAndroidSound;
        storiesOtherSound;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PeerNotifySettings';
            this.constructorId = 0x99622c0c;
            this.subclassOfId = 0xcf20c074;
            this._slots = [
                'showPreviews',
                'silent',
                'muteUntil',
                'iosSound',
                'androidSound',
                'otherSound',
                'storiesMuted',
                'storiesHideSender',
                'storiesIosSound',
                'storiesAndroidSound',
                'storiesOtherSound',
            ];
            this.showPreviews = params.showPreviews;
            this.silent = params.silent;
            this.muteUntil = params.muteUntil;
            this.iosSound = params.iosSound;
            this.androidSound = params.androidSound;
            this.otherSound = params.otherSound;
            this.storiesMuted = params.storiesMuted;
            this.storiesHideSender = params.storiesHideSender;
            this.storiesIosSound = params.storiesIosSound;
            this.storiesAndroidSound = params.storiesAndroidSound;
            this.storiesOtherSound = params.storiesOtherSound;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let showPreviews = flags & (1 << 0) ? await index_js_1.Primitive.Bool.read(_data) : undefined;
            let silent = flags & (1 << 1) ? await index_js_1.Primitive.Bool.read(_data) : undefined;
            let muteUntil = flags & (1 << 2) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let iosSound = flags & (1 << 3) ? await index_js_1.TLObject.read(_data) : undefined;
            let androidSound = flags & (1 << 4) ? await index_js_1.TLObject.read(_data) : undefined;
            let otherSound = flags & (1 << 5) ? await index_js_1.TLObject.read(_data) : undefined;
            let storiesMuted = flags & (1 << 6) ? await index_js_1.Primitive.Bool.read(_data) : undefined;
            let storiesHideSender = flags & (1 << 7) ? await index_js_1.Primitive.Bool.read(_data) : undefined;
            let storiesIosSound = flags & (1 << 8) ? await index_js_1.TLObject.read(_data) : undefined;
            let storiesAndroidSound = flags & (1 << 9) ? await index_js_1.TLObject.read(_data) : undefined;
            let storiesOtherSound = flags & (1 << 10) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.PeerNotifySettings({
                showPreviews: showPreviews,
                silent: silent,
                muteUntil: muteUntil,
                iosSound: iosSound,
                androidSound: androidSound,
                otherSound: otherSound,
                storiesMuted: storiesMuted,
                storiesHideSender: storiesHideSender,
                storiesIosSound: storiesIosSound,
                storiesAndroidSound: storiesAndroidSound,
                storiesOtherSound: storiesOtherSound,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.showPreviews !== undefined ? 1 << 0 : 0;
            flags |= this.silent !== undefined ? 1 << 1 : 0;
            flags |= this.muteUntil !== undefined ? 1 << 2 : 0;
            flags |= this.iosSound !== undefined ? 1 << 3 : 0;
            flags |= this.androidSound !== undefined ? 1 << 4 : 0;
            flags |= this.otherSound !== undefined ? 1 << 5 : 0;
            flags |= this.storiesMuted !== undefined ? 1 << 6 : 0;
            flags |= this.storiesHideSender !== undefined ? 1 << 7 : 0;
            flags |= this.storiesIosSound !== undefined ? 1 << 8 : 0;
            flags |= this.storiesAndroidSound !== undefined ? 1 << 9 : 0;
            flags |= this.storiesOtherSound !== undefined ? 1 << 10 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.showPreviews !== undefined) {
                b.write(index_js_1.Primitive.Bool.write(this.showPreviews));
            }
            if (this.silent !== undefined) {
                b.write(index_js_1.Primitive.Bool.write(this.silent));
            }
            if (this.muteUntil !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.muteUntil));
            }
            if (this.iosSound !== undefined) {
                b.write(this.iosSound.write());
            }
            if (this.androidSound !== undefined) {
                b.write(this.androidSound.write());
            }
            if (this.otherSound !== undefined) {
                b.write(this.otherSound.write());
            }
            if (this.storiesMuted !== undefined) {
                b.write(index_js_1.Primitive.Bool.write(this.storiesMuted));
            }
            if (this.storiesHideSender !== undefined) {
                b.write(index_js_1.Primitive.Bool.write(this.storiesHideSender));
            }
            if (this.storiesIosSound !== undefined) {
                b.write(this.storiesIosSound.write());
            }
            if (this.storiesAndroidSound !== undefined) {
                b.write(this.storiesAndroidSound.write());
            }
            if (this.storiesOtherSound !== undefined) {
                b.write(this.storiesOtherSound.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PeerNotifySettings = PeerNotifySettings;
    class PeerSettings extends index_js_1.TLObject {
        reportSpam;
        addContact;
        blockContact;
        shareContact;
        needContactsException;
        reportGeo;
        autoarchived;
        inviteMembers;
        requestChatBroadcast;
        businessBotPaused;
        businessBotCanReply;
        geoDistance;
        requestChatTitle;
        requestChatDate;
        businessBotId;
        businessBotManageUrl;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PeerSettings';
            this.constructorId = 0xacd66c5e;
            this.subclassOfId = 0xf6a79f84;
            this._slots = [
                'reportSpam',
                'addContact',
                'blockContact',
                'shareContact',
                'needContactsException',
                'reportGeo',
                'autoarchived',
                'inviteMembers',
                'requestChatBroadcast',
                'businessBotPaused',
                'businessBotCanReply',
                'geoDistance',
                'requestChatTitle',
                'requestChatDate',
                'businessBotId',
                'businessBotManageUrl',
            ];
            this.reportSpam = params.reportSpam;
            this.addContact = params.addContact;
            this.blockContact = params.blockContact;
            this.shareContact = params.shareContact;
            this.needContactsException = params.needContactsException;
            this.reportGeo = params.reportGeo;
            this.autoarchived = params.autoarchived;
            this.inviteMembers = params.inviteMembers;
            this.requestChatBroadcast = params.requestChatBroadcast;
            this.businessBotPaused = params.businessBotPaused;
            this.businessBotCanReply = params.businessBotCanReply;
            this.geoDistance = params.geoDistance;
            this.requestChatTitle = params.requestChatTitle;
            this.requestChatDate = params.requestChatDate;
            this.businessBotId = params.businessBotId;
            this.businessBotManageUrl = params.businessBotManageUrl;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let reportSpam = flags & (1 << 0) ? true : false;
            let addContact = flags & (1 << 1) ? true : false;
            let blockContact = flags & (1 << 2) ? true : false;
            let shareContact = flags & (1 << 3) ? true : false;
            let needContactsException = flags & (1 << 4) ? true : false;
            let reportGeo = flags & (1 << 5) ? true : false;
            let autoarchived = flags & (1 << 7) ? true : false;
            let inviteMembers = flags & (1 << 8) ? true : false;
            let requestChatBroadcast = flags & (1 << 10) ? true : false;
            let businessBotPaused = flags & (1 << 11) ? true : false;
            let businessBotCanReply = flags & (1 << 12) ? true : false;
            let geoDistance = flags & (1 << 6) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let requestChatTitle = flags & (1 << 9) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let requestChatDate = flags & (1 << 9) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let businessBotId = flags & (1 << 13) ? await index_js_1.Primitive.Long.read(_data) : undefined;
            let businessBotManageUrl = flags & (1 << 13) ? await index_js_1.Primitive.String.read(_data) : undefined;
            return new Raw.PeerSettings({
                reportSpam: reportSpam,
                addContact: addContact,
                blockContact: blockContact,
                shareContact: shareContact,
                needContactsException: needContactsException,
                reportGeo: reportGeo,
                autoarchived: autoarchived,
                inviteMembers: inviteMembers,
                requestChatBroadcast: requestChatBroadcast,
                businessBotPaused: businessBotPaused,
                businessBotCanReply: businessBotCanReply,
                geoDistance: geoDistance,
                requestChatTitle: requestChatTitle,
                requestChatDate: requestChatDate,
                businessBotId: businessBotId,
                businessBotManageUrl: businessBotManageUrl,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.reportSpam ? 1 << 0 : 0;
            flags |= this.addContact ? 1 << 1 : 0;
            flags |= this.blockContact ? 1 << 2 : 0;
            flags |= this.shareContact ? 1 << 3 : 0;
            flags |= this.needContactsException ? 1 << 4 : 0;
            flags |= this.reportGeo ? 1 << 5 : 0;
            flags |= this.autoarchived ? 1 << 7 : 0;
            flags |= this.inviteMembers ? 1 << 8 : 0;
            flags |= this.requestChatBroadcast ? 1 << 10 : 0;
            flags |= this.businessBotPaused ? 1 << 11 : 0;
            flags |= this.businessBotCanReply ? 1 << 12 : 0;
            flags |= this.geoDistance !== undefined ? 1 << 6 : 0;
            flags |= this.requestChatTitle !== undefined ? 1 << 9 : 0;
            flags |= this.requestChatDate !== undefined ? 1 << 9 : 0;
            flags |= this.businessBotId !== undefined ? 1 << 13 : 0;
            flags |= this.businessBotManageUrl !== undefined ? 1 << 13 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.geoDistance !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.geoDistance));
            }
            if (this.requestChatTitle !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.requestChatTitle));
            }
            if (this.requestChatDate !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.requestChatDate));
            }
            if (this.businessBotId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.businessBotId));
            }
            if (this.businessBotManageUrl !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.businessBotManageUrl));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PeerSettings = PeerSettings;
    class WallPaper extends index_js_1.TLObject {
        id;
        creator;
        default;
        pattern;
        dark;
        accessHash;
        slug;
        document;
        settings;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'WallPaper';
            this.constructorId = 0xa437c3ed;
            this.subclassOfId = 0x96a2c98b;
            this._slots = [
                'id',
                'creator',
                'default',
                'pattern',
                'dark',
                'accessHash',
                'slug',
                'document',
                'settings',
            ];
            this.id = params.id;
            this.creator = params.creator;
            this.default = params.default;
            this.pattern = params.pattern;
            this.dark = params.dark;
            this.accessHash = params.accessHash;
            this.slug = params.slug;
            this.document = params.document;
            this.settings = params.settings;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.Long.read(_data);
            let flags = await index_js_1.Primitive.Int.read(_data);
            let creator = flags & (1 << 0) ? true : false;
            let _default = flags & (1 << 1) ? true : false;
            let pattern = flags & (1 << 3) ? true : false;
            let dark = flags & (1 << 4) ? true : false;
            let accessHash = await index_js_1.Primitive.Long.read(_data);
            let slug = await index_js_1.Primitive.String.read(_data);
            let document = await index_js_1.TLObject.read(_data);
            let settings = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.WallPaper({
                id: id,
                creator: creator,
                default: _default,
                pattern: pattern,
                dark: dark,
                accessHash: accessHash,
                slug: slug,
                document: document,
                settings: settings,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            let flags = 0;
            flags |= this.creator ? 1 << 0 : 0;
            flags |= this.default ? 1 << 1 : 0;
            flags |= this.pattern ? 1 << 3 : 0;
            flags |= this.dark ? 1 << 4 : 0;
            flags |= this.settings !== undefined ? 1 << 2 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.accessHash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.accessHash));
            }
            if (this.slug !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.slug));
            }
            if (this.document !== undefined) {
                b.write(this.document.write());
            }
            if (this.settings !== undefined) {
                b.write(this.settings.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.WallPaper = WallPaper;
    class WallPaperNoFile extends index_js_1.TLObject {
        id;
        default;
        dark;
        settings;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'WallPaperNoFile';
            this.constructorId = 0xe0804116;
            this.subclassOfId = 0x96a2c98b;
            this._slots = ['id', 'default', 'dark', 'settings'];
            this.id = params.id;
            this.default = params.default;
            this.dark = params.dark;
            this.settings = params.settings;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.Long.read(_data);
            let flags = await index_js_1.Primitive.Int.read(_data);
            let _default = flags & (1 << 1) ? true : false;
            let dark = flags & (1 << 4) ? true : false;
            let settings = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.WallPaperNoFile({ id: id, default: _default, dark: dark, settings: settings });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            let flags = 0;
            flags |= this.default ? 1 << 1 : 0;
            flags |= this.dark ? 1 << 4 : 0;
            flags |= this.settings !== undefined ? 1 << 2 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.settings !== undefined) {
                b.write(this.settings.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.WallPaperNoFile = WallPaperNoFile;
    class InputReportReasonSpam extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputReportReasonSpam';
            this.constructorId = 0x58dbcab8;
            this.subclassOfId = 0x8401bd27;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputReportReasonSpam();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputReportReasonSpam = InputReportReasonSpam;
    class InputReportReasonViolence extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputReportReasonViolence';
            this.constructorId = 0x1e22c78d;
            this.subclassOfId = 0x8401bd27;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputReportReasonViolence();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputReportReasonViolence = InputReportReasonViolence;
    class InputReportReasonPornography extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputReportReasonPornography';
            this.constructorId = 0x2e59d922;
            this.subclassOfId = 0x8401bd27;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputReportReasonPornography();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputReportReasonPornography = InputReportReasonPornography;
    class InputReportReasonChildAbuse extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputReportReasonChildAbuse';
            this.constructorId = 0xadf44ee3;
            this.subclassOfId = 0x8401bd27;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputReportReasonChildAbuse();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputReportReasonChildAbuse = InputReportReasonChildAbuse;
    class InputReportReasonOther extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputReportReasonOther';
            this.constructorId = 0xc1e4a2b1;
            this.subclassOfId = 0x8401bd27;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputReportReasonOther();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputReportReasonOther = InputReportReasonOther;
    class InputReportReasonCopyright extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputReportReasonCopyright';
            this.constructorId = 0x9b89f93a;
            this.subclassOfId = 0x8401bd27;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputReportReasonCopyright();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputReportReasonCopyright = InputReportReasonCopyright;
    class InputReportReasonGeoIrrelevant extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputReportReasonGeoIrrelevant';
            this.constructorId = 0xdbd4feed;
            this.subclassOfId = 0x8401bd27;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputReportReasonGeoIrrelevant();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputReportReasonGeoIrrelevant = InputReportReasonGeoIrrelevant;
    class InputReportReasonFake extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputReportReasonFake';
            this.constructorId = 0xf5ddd6e7;
            this.subclassOfId = 0x8401bd27;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputReportReasonFake();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputReportReasonFake = InputReportReasonFake;
    class InputReportReasonIllegalDrugs extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputReportReasonIllegalDrugs';
            this.constructorId = 0xa8eb2be;
            this.subclassOfId = 0x8401bd27;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputReportReasonIllegalDrugs();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputReportReasonIllegalDrugs = InputReportReasonIllegalDrugs;
    class InputReportReasonPersonalDetails extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputReportReasonPersonalDetails';
            this.constructorId = 0x9ec7863d;
            this.subclassOfId = 0x8401bd27;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputReportReasonPersonalDetails();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputReportReasonPersonalDetails = InputReportReasonPersonalDetails;
    class UserFull extends index_js_1.TLObject {
        blocked;
        phoneCallsAvailable;
        phoneCallsPrivate;
        canPinMessage;
        hasScheduled;
        videoCallsAvailable;
        voiceMessagesForbidden;
        translationsDisabled;
        storiesPinnedAvailable;
        blockedMyStoriesFrom;
        wallpaperOverridden;
        contactRequirePremium;
        readDatesPrivate;
        sponsoredEnabled;
        id;
        about;
        settings;
        personalPhoto;
        profilePhoto;
        fallbackPhoto;
        notifySettings;
        botInfo;
        pinnedMsgId;
        commonChatsCount;
        folderId;
        ttlPeriod;
        themeEmoticon;
        privateForwardName;
        botGroupAdminRights;
        botBroadcastAdminRights;
        premiumGifts;
        wallpaper;
        stories;
        businessWorkHours;
        businessLocation;
        businessGreetingMessage;
        businessAwayMessage;
        businessIntro;
        birthday;
        personalChannelId;
        personalChannelMessage;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UserFull';
            this.constructorId = 0xcc997720;
            this.subclassOfId = 0x1f4661b9;
            this._slots = [
                'blocked',
                'phoneCallsAvailable',
                'phoneCallsPrivate',
                'canPinMessage',
                'hasScheduled',
                'videoCallsAvailable',
                'voiceMessagesForbidden',
                'translationsDisabled',
                'storiesPinnedAvailable',
                'blockedMyStoriesFrom',
                'wallpaperOverridden',
                'contactRequirePremium',
                'readDatesPrivate',
                'sponsoredEnabled',
                'id',
                'about',
                'settings',
                'personalPhoto',
                'profilePhoto',
                'fallbackPhoto',
                'notifySettings',
                'botInfo',
                'pinnedMsgId',
                'commonChatsCount',
                'folderId',
                'ttlPeriod',
                'themeEmoticon',
                'privateForwardName',
                'botGroupAdminRights',
                'botBroadcastAdminRights',
                'premiumGifts',
                'wallpaper',
                'stories',
                'businessWorkHours',
                'businessLocation',
                'businessGreetingMessage',
                'businessAwayMessage',
                'businessIntro',
                'birthday',
                'personalChannelId',
                'personalChannelMessage',
            ];
            this.blocked = params.blocked;
            this.phoneCallsAvailable = params.phoneCallsAvailable;
            this.phoneCallsPrivate = params.phoneCallsPrivate;
            this.canPinMessage = params.canPinMessage;
            this.hasScheduled = params.hasScheduled;
            this.videoCallsAvailable = params.videoCallsAvailable;
            this.voiceMessagesForbidden = params.voiceMessagesForbidden;
            this.translationsDisabled = params.translationsDisabled;
            this.storiesPinnedAvailable = params.storiesPinnedAvailable;
            this.blockedMyStoriesFrom = params.blockedMyStoriesFrom;
            this.wallpaperOverridden = params.wallpaperOverridden;
            this.contactRequirePremium = params.contactRequirePremium;
            this.readDatesPrivate = params.readDatesPrivate;
            this.sponsoredEnabled = params.sponsoredEnabled;
            this.id = params.id;
            this.about = params.about;
            this.settings = params.settings;
            this.personalPhoto = params.personalPhoto;
            this.profilePhoto = params.profilePhoto;
            this.fallbackPhoto = params.fallbackPhoto;
            this.notifySettings = params.notifySettings;
            this.botInfo = params.botInfo;
            this.pinnedMsgId = params.pinnedMsgId;
            this.commonChatsCount = params.commonChatsCount;
            this.folderId = params.folderId;
            this.ttlPeriod = params.ttlPeriod;
            this.themeEmoticon = params.themeEmoticon;
            this.privateForwardName = params.privateForwardName;
            this.botGroupAdminRights = params.botGroupAdminRights;
            this.botBroadcastAdminRights = params.botBroadcastAdminRights;
            this.premiumGifts = params.premiumGifts;
            this.wallpaper = params.wallpaper;
            this.stories = params.stories;
            this.businessWorkHours = params.businessWorkHours;
            this.businessLocation = params.businessLocation;
            this.businessGreetingMessage = params.businessGreetingMessage;
            this.businessAwayMessage = params.businessAwayMessage;
            this.businessIntro = params.businessIntro;
            this.birthday = params.birthday;
            this.personalChannelId = params.personalChannelId;
            this.personalChannelMessage = params.personalChannelMessage;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let blocked = flags & (1 << 0) ? true : false;
            let phoneCallsAvailable = flags & (1 << 4) ? true : false;
            let phoneCallsPrivate = flags & (1 << 5) ? true : false;
            let canPinMessage = flags & (1 << 7) ? true : false;
            let hasScheduled = flags & (1 << 12) ? true : false;
            let videoCallsAvailable = flags & (1 << 13) ? true : false;
            let voiceMessagesForbidden = flags & (1 << 20) ? true : false;
            let translationsDisabled = flags & (1 << 23) ? true : false;
            let storiesPinnedAvailable = flags & (1 << 26) ? true : false;
            let blockedMyStoriesFrom = flags & (1 << 27) ? true : false;
            let wallpaperOverridden = flags & (1 << 28) ? true : false;
            let contactRequirePremium = flags & (1 << 29) ? true : false;
            let readDatesPrivate = flags & (1 << 30) ? true : false;
            let flags2 = await index_js_1.Primitive.Int.read(_data);
            let sponsoredEnabled = flags2 & (1 << 7) ? true : false;
            let id = await index_js_1.Primitive.Long.read(_data);
            let about = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let settings = await index_js_1.TLObject.read(_data);
            let personalPhoto = flags & (1 << 21) ? await index_js_1.TLObject.read(_data) : undefined;
            let profilePhoto = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
            let fallbackPhoto = flags & (1 << 22) ? await index_js_1.TLObject.read(_data) : undefined;
            let notifySettings = await index_js_1.TLObject.read(_data);
            let botInfo = flags & (1 << 3) ? await index_js_1.TLObject.read(_data) : undefined;
            let pinnedMsgId = flags & (1 << 6) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let commonChatsCount = await index_js_1.Primitive.Int.read(_data);
            let folderId = flags & (1 << 11) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let ttlPeriod = flags & (1 << 14) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let themeEmoticon = flags & (1 << 15) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let privateForwardName = flags & (1 << 16) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let botGroupAdminRights = flags & (1 << 17) ? await index_js_1.TLObject.read(_data) : undefined;
            let botBroadcastAdminRights = flags & (1 << 18) ? await index_js_1.TLObject.read(_data) : undefined;
            let premiumGifts = flags & (1 << 19) ? await index_js_1.TLObject.read(_data) : [];
            let wallpaper = flags & (1 << 24) ? await index_js_1.TLObject.read(_data) : undefined;
            let stories = flags & (1 << 25) ? await index_js_1.TLObject.read(_data) : undefined;
            let businessWorkHours = flags2 & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
            let businessLocation = flags2 & (1 << 1) ? await index_js_1.TLObject.read(_data) : undefined;
            let businessGreetingMessage = flags2 & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
            let businessAwayMessage = flags2 & (1 << 3) ? await index_js_1.TLObject.read(_data) : undefined;
            let businessIntro = flags2 & (1 << 4) ? await index_js_1.TLObject.read(_data) : undefined;
            let birthday = flags2 & (1 << 5) ? await index_js_1.TLObject.read(_data) : undefined;
            let personalChannelId = flags2 & (1 << 6) ? await index_js_1.Primitive.Long.read(_data) : undefined;
            let personalChannelMessage = flags2 & (1 << 6) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            return new Raw.UserFull({
                blocked: blocked,
                phoneCallsAvailable: phoneCallsAvailable,
                phoneCallsPrivate: phoneCallsPrivate,
                canPinMessage: canPinMessage,
                hasScheduled: hasScheduled,
                videoCallsAvailable: videoCallsAvailable,
                voiceMessagesForbidden: voiceMessagesForbidden,
                translationsDisabled: translationsDisabled,
                storiesPinnedAvailable: storiesPinnedAvailable,
                blockedMyStoriesFrom: blockedMyStoriesFrom,
                wallpaperOverridden: wallpaperOverridden,
                contactRequirePremium: contactRequirePremium,
                readDatesPrivate: readDatesPrivate,
                sponsoredEnabled: sponsoredEnabled,
                id: id,
                about: about,
                settings: settings,
                personalPhoto: personalPhoto,
                profilePhoto: profilePhoto,
                fallbackPhoto: fallbackPhoto,
                notifySettings: notifySettings,
                botInfo: botInfo,
                pinnedMsgId: pinnedMsgId,
                commonChatsCount: commonChatsCount,
                folderId: folderId,
                ttlPeriod: ttlPeriod,
                themeEmoticon: themeEmoticon,
                privateForwardName: privateForwardName,
                botGroupAdminRights: botGroupAdminRights,
                botBroadcastAdminRights: botBroadcastAdminRights,
                premiumGifts: premiumGifts,
                wallpaper: wallpaper,
                stories: stories,
                businessWorkHours: businessWorkHours,
                businessLocation: businessLocation,
                businessGreetingMessage: businessGreetingMessage,
                businessAwayMessage: businessAwayMessage,
                businessIntro: businessIntro,
                birthday: birthday,
                personalChannelId: personalChannelId,
                personalChannelMessage: personalChannelMessage,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.blocked ? 1 << 0 : 0;
            flags |= this.phoneCallsAvailable ? 1 << 4 : 0;
            flags |= this.phoneCallsPrivate ? 1 << 5 : 0;
            flags |= this.canPinMessage ? 1 << 7 : 0;
            flags |= this.hasScheduled ? 1 << 12 : 0;
            flags |= this.videoCallsAvailable ? 1 << 13 : 0;
            flags |= this.voiceMessagesForbidden ? 1 << 20 : 0;
            flags |= this.translationsDisabled ? 1 << 23 : 0;
            flags |= this.storiesPinnedAvailable ? 1 << 26 : 0;
            flags |= this.blockedMyStoriesFrom ? 1 << 27 : 0;
            flags |= this.wallpaperOverridden ? 1 << 28 : 0;
            flags |= this.contactRequirePremium ? 1 << 29 : 0;
            flags |= this.readDatesPrivate ? 1 << 30 : 0;
            flags |= this.about !== undefined ? 1 << 1 : 0;
            flags |= this.personalPhoto !== undefined ? 1 << 21 : 0;
            flags |= this.profilePhoto !== undefined ? 1 << 2 : 0;
            flags |= this.fallbackPhoto !== undefined ? 1 << 22 : 0;
            flags |= this.botInfo !== undefined ? 1 << 3 : 0;
            flags |= this.pinnedMsgId !== undefined ? 1 << 6 : 0;
            flags |= this.folderId !== undefined ? 1 << 11 : 0;
            flags |= this.ttlPeriod !== undefined ? 1 << 14 : 0;
            flags |= this.themeEmoticon !== undefined ? 1 << 15 : 0;
            flags |= this.privateForwardName !== undefined ? 1 << 16 : 0;
            flags |= this.botGroupAdminRights !== undefined ? 1 << 17 : 0;
            flags |= this.botBroadcastAdminRights !== undefined ? 1 << 18 : 0;
            flags |= this.premiumGifts ? 1 << 19 : 0;
            flags |= this.wallpaper !== undefined ? 1 << 24 : 0;
            flags |= this.stories !== undefined ? 1 << 25 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            let flags2 = 0;
            flags2 |= this.sponsoredEnabled ? 1 << 7 : 0;
            flags2 |= this.businessWorkHours !== undefined ? 1 << 0 : 0;
            flags2 |= this.businessLocation !== undefined ? 1 << 1 : 0;
            flags2 |= this.businessGreetingMessage !== undefined ? 1 << 2 : 0;
            flags2 |= this.businessAwayMessage !== undefined ? 1 << 3 : 0;
            flags2 |= this.businessIntro !== undefined ? 1 << 4 : 0;
            flags2 |= this.birthday !== undefined ? 1 << 5 : 0;
            flags2 |= this.personalChannelId !== undefined ? 1 << 6 : 0;
            flags2 |= this.personalChannelMessage !== undefined ? 1 << 6 : 0;
            b.write(index_js_1.Primitive.Int.write(flags2));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.about !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.about));
            }
            if (this.settings !== undefined) {
                b.write(this.settings.write());
            }
            if (this.personalPhoto !== undefined) {
                b.write(this.personalPhoto.write());
            }
            if (this.profilePhoto !== undefined) {
                b.write(this.profilePhoto.write());
            }
            if (this.fallbackPhoto !== undefined) {
                b.write(this.fallbackPhoto.write());
            }
            if (this.notifySettings !== undefined) {
                b.write(this.notifySettings.write());
            }
            if (this.botInfo !== undefined) {
                b.write(this.botInfo.write());
            }
            if (this.pinnedMsgId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.pinnedMsgId));
            }
            if (this.commonChatsCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.commonChatsCount));
            }
            if (this.folderId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.folderId));
            }
            if (this.ttlPeriod !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.ttlPeriod));
            }
            if (this.themeEmoticon !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.themeEmoticon));
            }
            if (this.privateForwardName !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.privateForwardName));
            }
            if (this.botGroupAdminRights !== undefined) {
                b.write(this.botGroupAdminRights.write());
            }
            if (this.botBroadcastAdminRights !== undefined) {
                b.write(this.botBroadcastAdminRights.write());
            }
            if (this.premiumGifts) {
                b.write(index_js_1.Primitive.Vector.write(this.premiumGifts));
            }
            if (this.wallpaper !== undefined) {
                b.write(this.wallpaper.write());
            }
            if (this.stories !== undefined) {
                b.write(this.stories.write());
            }
            if (this.businessWorkHours !== undefined) {
                b.write(this.businessWorkHours.write());
            }
            if (this.businessLocation !== undefined) {
                b.write(this.businessLocation.write());
            }
            if (this.businessGreetingMessage !== undefined) {
                b.write(this.businessGreetingMessage.write());
            }
            if (this.businessAwayMessage !== undefined) {
                b.write(this.businessAwayMessage.write());
            }
            if (this.businessIntro !== undefined) {
                b.write(this.businessIntro.write());
            }
            if (this.birthday !== undefined) {
                b.write(this.birthday.write());
            }
            if (this.personalChannelId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.personalChannelId));
            }
            if (this.personalChannelMessage !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.personalChannelMessage));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UserFull = UserFull;
    class Contact extends index_js_1.TLObject {
        userId;
        mutual;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'Contact';
            this.constructorId = 0x145ade0b;
            this.subclassOfId = 0x83dfdfa4;
            this._slots = ['userId', 'mutual'];
            this.userId = params.userId;
            this.mutual = params.mutual;
        }
        static async read(_data, ..._args) {
            let userId = await index_js_1.Primitive.Long.read(_data);
            let mutual = await index_js_1.Primitive.Bool.read(_data);
            return new Raw.Contact({ userId: userId, mutual: mutual });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            if (this.mutual !== undefined) {
                b.write(index_js_1.Primitive.Bool.write(this.mutual));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.Contact = Contact;
    class ImportedContact extends index_js_1.TLObject {
        userId;
        clientId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ImportedContact';
            this.constructorId = 0xc13e3c50;
            this.subclassOfId = 0xb545bbda;
            this._slots = ['userId', 'clientId'];
            this.userId = params.userId;
            this.clientId = params.clientId;
        }
        static async read(_data, ..._args) {
            let userId = await index_js_1.Primitive.Long.read(_data);
            let clientId = await index_js_1.Primitive.Long.read(_data);
            return new Raw.ImportedContact({ userId: userId, clientId: clientId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            if (this.clientId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.clientId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ImportedContact = ImportedContact;
    class ContactStatus extends index_js_1.TLObject {
        userId;
        status;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ContactStatus';
            this.constructorId = 0x16d9703b;
            this.subclassOfId = 0x68c0d74c;
            this._slots = ['userId', 'status'];
            this.userId = params.userId;
            this.status = params.status;
        }
        static async read(_data, ..._args) {
            let userId = await index_js_1.Primitive.Long.read(_data);
            let status = await index_js_1.TLObject.read(_data);
            return new Raw.ContactStatus({ userId: userId, status: status });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            if (this.status !== undefined) {
                b.write(this.status.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ContactStatus = ContactStatus;
    class InputMessagesFilterEmpty extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputMessagesFilterEmpty';
            this.constructorId = 0x57e2f66c;
            this.subclassOfId = 0x8a36ec14;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputMessagesFilterEmpty();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputMessagesFilterEmpty = InputMessagesFilterEmpty;
    class InputMessagesFilterPhotos extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputMessagesFilterPhotos';
            this.constructorId = 0x9609a51c;
            this.subclassOfId = 0x8a36ec14;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputMessagesFilterPhotos();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputMessagesFilterPhotos = InputMessagesFilterPhotos;
    class InputMessagesFilterVideo extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputMessagesFilterVideo';
            this.constructorId = 0x9fc00e65;
            this.subclassOfId = 0x8a36ec14;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputMessagesFilterVideo();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputMessagesFilterVideo = InputMessagesFilterVideo;
    class InputMessagesFilterPhotoVideo extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputMessagesFilterPhotoVideo';
            this.constructorId = 0x56e9f0e4;
            this.subclassOfId = 0x8a36ec14;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputMessagesFilterPhotoVideo();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputMessagesFilterPhotoVideo = InputMessagesFilterPhotoVideo;
    class InputMessagesFilterDocument extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputMessagesFilterDocument';
            this.constructorId = 0x9eddf188;
            this.subclassOfId = 0x8a36ec14;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputMessagesFilterDocument();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputMessagesFilterDocument = InputMessagesFilterDocument;
    class InputMessagesFilterUrl extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputMessagesFilterUrl';
            this.constructorId = 0x7ef0dd87;
            this.subclassOfId = 0x8a36ec14;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputMessagesFilterUrl();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputMessagesFilterUrl = InputMessagesFilterUrl;
    class InputMessagesFilterGif extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputMessagesFilterGif';
            this.constructorId = 0xffc86587;
            this.subclassOfId = 0x8a36ec14;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputMessagesFilterGif();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputMessagesFilterGif = InputMessagesFilterGif;
    class InputMessagesFilterVoice extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputMessagesFilterVoice';
            this.constructorId = 0x50f5c392;
            this.subclassOfId = 0x8a36ec14;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputMessagesFilterVoice();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputMessagesFilterVoice = InputMessagesFilterVoice;
    class InputMessagesFilterMusic extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputMessagesFilterMusic';
            this.constructorId = 0x3751b49e;
            this.subclassOfId = 0x8a36ec14;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputMessagesFilterMusic();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputMessagesFilterMusic = InputMessagesFilterMusic;
    class InputMessagesFilterChatPhotos extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputMessagesFilterChatPhotos';
            this.constructorId = 0x3a20ecb8;
            this.subclassOfId = 0x8a36ec14;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputMessagesFilterChatPhotos();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputMessagesFilterChatPhotos = InputMessagesFilterChatPhotos;
    class InputMessagesFilterPhoneCalls extends index_js_1.TLObject {
        missed;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputMessagesFilterPhoneCalls';
            this.constructorId = 0x80c99768;
            this.subclassOfId = 0x8a36ec14;
            this._slots = ['missed'];
            this.missed = params.missed;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let missed = flags & (1 << 0) ? true : false;
            return new Raw.InputMessagesFilterPhoneCalls({ missed: missed });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.missed ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputMessagesFilterPhoneCalls = InputMessagesFilterPhoneCalls;
    class InputMessagesFilterRoundVoice extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputMessagesFilterRoundVoice';
            this.constructorId = 0x7a7c17a4;
            this.subclassOfId = 0x8a36ec14;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputMessagesFilterRoundVoice();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputMessagesFilterRoundVoice = InputMessagesFilterRoundVoice;
    class InputMessagesFilterRoundVideo extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputMessagesFilterRoundVideo';
            this.constructorId = 0xb549da53;
            this.subclassOfId = 0x8a36ec14;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputMessagesFilterRoundVideo();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputMessagesFilterRoundVideo = InputMessagesFilterRoundVideo;
    class InputMessagesFilterMyMentions extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputMessagesFilterMyMentions';
            this.constructorId = 0xc1f8e69a;
            this.subclassOfId = 0x8a36ec14;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputMessagesFilterMyMentions();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputMessagesFilterMyMentions = InputMessagesFilterMyMentions;
    class InputMessagesFilterGeo extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputMessagesFilterGeo';
            this.constructorId = 0xe7026d0d;
            this.subclassOfId = 0x8a36ec14;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputMessagesFilterGeo();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputMessagesFilterGeo = InputMessagesFilterGeo;
    class InputMessagesFilterContacts extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputMessagesFilterContacts';
            this.constructorId = 0xe062db83;
            this.subclassOfId = 0x8a36ec14;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputMessagesFilterContacts();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputMessagesFilterContacts = InputMessagesFilterContacts;
    class InputMessagesFilterPinned extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputMessagesFilterPinned';
            this.constructorId = 0x1bb00451;
            this.subclassOfId = 0x8a36ec14;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputMessagesFilterPinned();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputMessagesFilterPinned = InputMessagesFilterPinned;
    class UpdateNewMessage extends index_js_1.TLObject {
        message;
        pts;
        ptsCount;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateNewMessage';
            this.constructorId = 0x1f2b0afd;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['message', 'pts', 'ptsCount'];
            this.message = params.message;
            this.pts = params.pts;
            this.ptsCount = params.ptsCount;
        }
        static async read(_data, ..._args) {
            let message = await index_js_1.TLObject.read(_data);
            let pts = await index_js_1.Primitive.Int.read(_data);
            let ptsCount = await index_js_1.Primitive.Int.read(_data);
            return new Raw.UpdateNewMessage({ message: message, pts: pts, ptsCount: ptsCount });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.message !== undefined) {
                b.write(this.message.write());
            }
            if (this.pts !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.pts));
            }
            if (this.ptsCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.ptsCount));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateNewMessage = UpdateNewMessage;
    class UpdateMessageID extends index_js_1.TLObject {
        id;
        randomId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateMessageID';
            this.constructorId = 0x4e90bfd6;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['id', 'randomId'];
            this.id = params.id;
            this.randomId = params.randomId;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.Int.read(_data);
            let randomId = await index_js_1.Primitive.Long.read(_data);
            return new Raw.UpdateMessageID({ id: id, randomId: randomId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.id));
            }
            if (this.randomId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.randomId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateMessageID = UpdateMessageID;
    class UpdateDeleteMessages extends index_js_1.TLObject {
        messages;
        pts;
        ptsCount;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateDeleteMessages';
            this.constructorId = 0xa20db0e5;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['messages', 'pts', 'ptsCount'];
            this.messages = params.messages;
            this.pts = params.pts;
            this.ptsCount = params.ptsCount;
        }
        static async read(_data, ..._args) {
            let messages = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int);
            let pts = await index_js_1.Primitive.Int.read(_data);
            let ptsCount = await index_js_1.Primitive.Int.read(_data);
            return new Raw.UpdateDeleteMessages({ messages: messages, pts: pts, ptsCount: ptsCount });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.messages) {
                b.write(index_js_1.Primitive.Vector.write(this.messages, index_js_1.Primitive.Int));
            }
            if (this.pts !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.pts));
            }
            if (this.ptsCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.ptsCount));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateDeleteMessages = UpdateDeleteMessages;
    class UpdateUserTyping extends index_js_1.TLObject {
        userId;
        action;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateUserTyping';
            this.constructorId = 0xc01e857f;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['userId', 'action'];
            this.userId = params.userId;
            this.action = params.action;
        }
        static async read(_data, ..._args) {
            let userId = await index_js_1.Primitive.Long.read(_data);
            let action = await index_js_1.TLObject.read(_data);
            return new Raw.UpdateUserTyping({ userId: userId, action: action });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            if (this.action !== undefined) {
                b.write(this.action.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateUserTyping = UpdateUserTyping;
    class UpdateChatUserTyping extends index_js_1.TLObject {
        chatId;
        fromId;
        action;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateChatUserTyping';
            this.constructorId = 0x83487af0;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['chatId', 'fromId', 'action'];
            this.chatId = params.chatId;
            this.fromId = params.fromId;
            this.action = params.action;
        }
        static async read(_data, ..._args) {
            let chatId = await index_js_1.Primitive.Long.read(_data);
            let fromId = await index_js_1.TLObject.read(_data);
            let action = await index_js_1.TLObject.read(_data);
            return new Raw.UpdateChatUserTyping({ chatId: chatId, fromId: fromId, action: action });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.chatId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.chatId));
            }
            if (this.fromId !== undefined) {
                b.write(this.fromId.write());
            }
            if (this.action !== undefined) {
                b.write(this.action.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateChatUserTyping = UpdateChatUserTyping;
    class UpdateChatParticipants extends index_js_1.TLObject {
        participants;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateChatParticipants';
            this.constructorId = 0x7761198;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['participants'];
            this.participants = params.participants;
        }
        static async read(_data, ..._args) {
            let participants = await index_js_1.TLObject.read(_data);
            return new Raw.UpdateChatParticipants({ participants: participants });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.participants !== undefined) {
                b.write(this.participants.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateChatParticipants = UpdateChatParticipants;
    class UpdateUserStatus extends index_js_1.TLObject {
        userId;
        status;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateUserStatus';
            this.constructorId = 0xe5bdf8de;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['userId', 'status'];
            this.userId = params.userId;
            this.status = params.status;
        }
        static async read(_data, ..._args) {
            let userId = await index_js_1.Primitive.Long.read(_data);
            let status = await index_js_1.TLObject.read(_data);
            return new Raw.UpdateUserStatus({ userId: userId, status: status });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            if (this.status !== undefined) {
                b.write(this.status.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateUserStatus = UpdateUserStatus;
    class UpdateUserName extends index_js_1.TLObject {
        userId;
        firstName;
        lastName;
        usernames;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateUserName';
            this.constructorId = 0xa7848924;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['userId', 'firstName', 'lastName', 'usernames'];
            this.userId = params.userId;
            this.firstName = params.firstName;
            this.lastName = params.lastName;
            this.usernames = params.usernames;
        }
        static async read(_data, ..._args) {
            let userId = await index_js_1.Primitive.Long.read(_data);
            let firstName = await index_js_1.Primitive.String.read(_data);
            let lastName = await index_js_1.Primitive.String.read(_data);
            let usernames = await index_js_1.TLObject.read(_data);
            return new Raw.UpdateUserName({
                userId: userId,
                firstName: firstName,
                lastName: lastName,
                usernames: usernames,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            if (this.firstName !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.firstName));
            }
            if (this.lastName !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.lastName));
            }
            if (this.usernames) {
                b.write(index_js_1.Primitive.Vector.write(this.usernames));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateUserName = UpdateUserName;
    class UpdateNewAuthorization extends index_js_1.TLObject {
        unconfirmed;
        hash;
        date;
        device;
        location;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateNewAuthorization';
            this.constructorId = 0x8951abef;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['unconfirmed', 'hash', 'date', 'device', 'location'];
            this.unconfirmed = params.unconfirmed;
            this.hash = params.hash;
            this.date = params.date;
            this.device = params.device;
            this.location = params.location;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let unconfirmed = flags & (1 << 0) ? true : false;
            let hash = await index_js_1.Primitive.Long.read(_data);
            let date = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let device = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let location = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
            return new Raw.UpdateNewAuthorization({
                unconfirmed: unconfirmed,
                hash: hash,
                date: date,
                device: device,
                location: location,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.unconfirmed ? 1 << 0 : 0;
            flags |= this.date !== undefined ? 1 << 0 : 0;
            flags |= this.device !== undefined ? 1 << 0 : 0;
            flags |= this.location !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.hash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.hash));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.device !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.device));
            }
            if (this.location !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.location));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateNewAuthorization = UpdateNewAuthorization;
    class UpdateNewEncryptedMessage extends index_js_1.TLObject {
        message;
        qts;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateNewEncryptedMessage';
            this.constructorId = 0x12bcbd9a;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['message', 'qts'];
            this.message = params.message;
            this.qts = params.qts;
        }
        static async read(_data, ..._args) {
            let message = await index_js_1.TLObject.read(_data);
            let qts = await index_js_1.Primitive.Int.read(_data);
            return new Raw.UpdateNewEncryptedMessage({ message: message, qts: qts });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.message !== undefined) {
                b.write(this.message.write());
            }
            if (this.qts !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.qts));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateNewEncryptedMessage = UpdateNewEncryptedMessage;
    class UpdateEncryptedChatTyping extends index_js_1.TLObject {
        chatId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateEncryptedChatTyping';
            this.constructorId = 0x1710f156;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['chatId'];
            this.chatId = params.chatId;
        }
        static async read(_data, ..._args) {
            let chatId = await index_js_1.Primitive.Int.read(_data);
            return new Raw.UpdateEncryptedChatTyping({ chatId: chatId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.chatId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.chatId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateEncryptedChatTyping = UpdateEncryptedChatTyping;
    class UpdateEncryption extends index_js_1.TLObject {
        chat;
        date;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateEncryption';
            this.constructorId = 0xb4a2e88d;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['chat', 'date'];
            this.chat = params.chat;
            this.date = params.date;
        }
        static async read(_data, ..._args) {
            let chat = await index_js_1.TLObject.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            return new Raw.UpdateEncryption({ chat: chat, date: date });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.chat !== undefined) {
                b.write(this.chat.write());
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateEncryption = UpdateEncryption;
    class UpdateEncryptedMessagesRead extends index_js_1.TLObject {
        chatId;
        maxDate;
        date;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateEncryptedMessagesRead';
            this.constructorId = 0x38fe25b7;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['chatId', 'maxDate', 'date'];
            this.chatId = params.chatId;
            this.maxDate = params.maxDate;
            this.date = params.date;
        }
        static async read(_data, ..._args) {
            let chatId = await index_js_1.Primitive.Int.read(_data);
            let maxDate = await index_js_1.Primitive.Int.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            return new Raw.UpdateEncryptedMessagesRead({ chatId: chatId, maxDate: maxDate, date: date });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.chatId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.chatId));
            }
            if (this.maxDate !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.maxDate));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateEncryptedMessagesRead = UpdateEncryptedMessagesRead;
    class UpdateChatParticipantAdd extends index_js_1.TLObject {
        chatId;
        userId;
        inviterId;
        date;
        version;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateChatParticipantAdd';
            this.constructorId = 0x3dda5451;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['chatId', 'userId', 'inviterId', 'date', 'version'];
            this.chatId = params.chatId;
            this.userId = params.userId;
            this.inviterId = params.inviterId;
            this.date = params.date;
            this.version = params.version;
        }
        static async read(_data, ..._args) {
            let chatId = await index_js_1.Primitive.Long.read(_data);
            let userId = await index_js_1.Primitive.Long.read(_data);
            let inviterId = await index_js_1.Primitive.Long.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            let version = await index_js_1.Primitive.Int.read(_data);
            return new Raw.UpdateChatParticipantAdd({
                chatId: chatId,
                userId: userId,
                inviterId: inviterId,
                date: date,
                version: version,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.chatId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.chatId));
            }
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            if (this.inviterId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.inviterId));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.version !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.version));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateChatParticipantAdd = UpdateChatParticipantAdd;
    class UpdateChatParticipantDelete extends index_js_1.TLObject {
        chatId;
        userId;
        version;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateChatParticipantDelete';
            this.constructorId = 0xe32f3d77;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['chatId', 'userId', 'version'];
            this.chatId = params.chatId;
            this.userId = params.userId;
            this.version = params.version;
        }
        static async read(_data, ..._args) {
            let chatId = await index_js_1.Primitive.Long.read(_data);
            let userId = await index_js_1.Primitive.Long.read(_data);
            let version = await index_js_1.Primitive.Int.read(_data);
            return new Raw.UpdateChatParticipantDelete({
                chatId: chatId,
                userId: userId,
                version: version,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.chatId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.chatId));
            }
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            if (this.version !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.version));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateChatParticipantDelete = UpdateChatParticipantDelete;
    class UpdateDcOptions extends index_js_1.TLObject {
        dcOptions;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateDcOptions';
            this.constructorId = 0x8e5e9873;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['dcOptions'];
            this.dcOptions = params.dcOptions;
        }
        static async read(_data, ..._args) {
            let dcOptions = await index_js_1.TLObject.read(_data);
            return new Raw.UpdateDcOptions({ dcOptions: dcOptions });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.dcOptions) {
                b.write(index_js_1.Primitive.Vector.write(this.dcOptions));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateDcOptions = UpdateDcOptions;
    class UpdateNotifySettings extends index_js_1.TLObject {
        peer;
        notifySettings;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateNotifySettings';
            this.constructorId = 0xbec268ef;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['peer', 'notifySettings'];
            this.peer = params.peer;
            this.notifySettings = params.notifySettings;
        }
        static async read(_data, ..._args) {
            let peer = await index_js_1.TLObject.read(_data);
            let notifySettings = await index_js_1.TLObject.read(_data);
            return new Raw.UpdateNotifySettings({ peer: peer, notifySettings: notifySettings });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.notifySettings !== undefined) {
                b.write(this.notifySettings.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateNotifySettings = UpdateNotifySettings;
    class UpdateServiceNotification extends index_js_1.TLObject {
        popup;
        invertMedia;
        inboxDate;
        type;
        message;
        media;
        entities;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateServiceNotification';
            this.constructorId = 0xebe46819;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['popup', 'invertMedia', 'inboxDate', 'type', 'message', 'media', 'entities'];
            this.popup = params.popup;
            this.invertMedia = params.invertMedia;
            this.inboxDate = params.inboxDate;
            this.type = params.type;
            this.message = params.message;
            this.media = params.media;
            this.entities = params.entities;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let popup = flags & (1 << 0) ? true : false;
            let invertMedia = flags & (1 << 2) ? true : false;
            let inboxDate = flags & (1 << 1) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let type = await index_js_1.Primitive.String.read(_data);
            let message = await index_js_1.Primitive.String.read(_data);
            let media = await index_js_1.TLObject.read(_data);
            let entities = await index_js_1.TLObject.read(_data);
            return new Raw.UpdateServiceNotification({
                popup: popup,
                invertMedia: invertMedia,
                inboxDate: inboxDate,
                type: type,
                message: message,
                media: media,
                entities: entities,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.popup ? 1 << 0 : 0;
            flags |= this.invertMedia ? 1 << 2 : 0;
            flags |= this.inboxDate !== undefined ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.inboxDate !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.inboxDate));
            }
            if (this.type !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.type));
            }
            if (this.message !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.message));
            }
            if (this.media !== undefined) {
                b.write(this.media.write());
            }
            if (this.entities) {
                b.write(index_js_1.Primitive.Vector.write(this.entities));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateServiceNotification = UpdateServiceNotification;
    class UpdatePrivacy extends index_js_1.TLObject {
        key;
        rules;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdatePrivacy';
            this.constructorId = 0xee3b272a;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['key', 'rules'];
            this.key = params.key;
            this.rules = params.rules;
        }
        static async read(_data, ..._args) {
            let key = await index_js_1.TLObject.read(_data);
            let rules = await index_js_1.TLObject.read(_data);
            return new Raw.UpdatePrivacy({ key: key, rules: rules });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.key !== undefined) {
                b.write(this.key.write());
            }
            if (this.rules) {
                b.write(index_js_1.Primitive.Vector.write(this.rules));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdatePrivacy = UpdatePrivacy;
    class UpdateUserPhone extends index_js_1.TLObject {
        userId;
        phone;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateUserPhone';
            this.constructorId = 0x5492a13;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['userId', 'phone'];
            this.userId = params.userId;
            this.phone = params.phone;
        }
        static async read(_data, ..._args) {
            let userId = await index_js_1.Primitive.Long.read(_data);
            let phone = await index_js_1.Primitive.String.read(_data);
            return new Raw.UpdateUserPhone({ userId: userId, phone: phone });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            if (this.phone !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.phone));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateUserPhone = UpdateUserPhone;
    class UpdateReadHistoryInbox extends index_js_1.TLObject {
        folderId;
        peer;
        maxId;
        stillUnreadCount;
        pts;
        ptsCount;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateReadHistoryInbox';
            this.constructorId = 0x9c974fdf;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['folderId', 'peer', 'maxId', 'stillUnreadCount', 'pts', 'ptsCount'];
            this.folderId = params.folderId;
            this.peer = params.peer;
            this.maxId = params.maxId;
            this.stillUnreadCount = params.stillUnreadCount;
            this.pts = params.pts;
            this.ptsCount = params.ptsCount;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let folderId = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let peer = await index_js_1.TLObject.read(_data);
            let maxId = await index_js_1.Primitive.Int.read(_data);
            let stillUnreadCount = await index_js_1.Primitive.Int.read(_data);
            let pts = await index_js_1.Primitive.Int.read(_data);
            let ptsCount = await index_js_1.Primitive.Int.read(_data);
            return new Raw.UpdateReadHistoryInbox({
                folderId: folderId,
                peer: peer,
                maxId: maxId,
                stillUnreadCount: stillUnreadCount,
                pts: pts,
                ptsCount: ptsCount,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.folderId !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.folderId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.folderId));
            }
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.maxId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.maxId));
            }
            if (this.stillUnreadCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.stillUnreadCount));
            }
            if (this.pts !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.pts));
            }
            if (this.ptsCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.ptsCount));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateReadHistoryInbox = UpdateReadHistoryInbox;
    class UpdateReadHistoryOutbox extends index_js_1.TLObject {
        peer;
        maxId;
        pts;
        ptsCount;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateReadHistoryOutbox';
            this.constructorId = 0x2f2f21bf;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['peer', 'maxId', 'pts', 'ptsCount'];
            this.peer = params.peer;
            this.maxId = params.maxId;
            this.pts = params.pts;
            this.ptsCount = params.ptsCount;
        }
        static async read(_data, ..._args) {
            let peer = await index_js_1.TLObject.read(_data);
            let maxId = await index_js_1.Primitive.Int.read(_data);
            let pts = await index_js_1.Primitive.Int.read(_data);
            let ptsCount = await index_js_1.Primitive.Int.read(_data);
            return new Raw.UpdateReadHistoryOutbox({
                peer: peer,
                maxId: maxId,
                pts: pts,
                ptsCount: ptsCount,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.maxId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.maxId));
            }
            if (this.pts !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.pts));
            }
            if (this.ptsCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.ptsCount));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateReadHistoryOutbox = UpdateReadHistoryOutbox;
    class UpdateWebPage extends index_js_1.TLObject {
        webpage;
        pts;
        ptsCount;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateWebPage';
            this.constructorId = 0x7f891213;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['webpage', 'pts', 'ptsCount'];
            this.webpage = params.webpage;
            this.pts = params.pts;
            this.ptsCount = params.ptsCount;
        }
        static async read(_data, ..._args) {
            let webpage = await index_js_1.TLObject.read(_data);
            let pts = await index_js_1.Primitive.Int.read(_data);
            let ptsCount = await index_js_1.Primitive.Int.read(_data);
            return new Raw.UpdateWebPage({ webpage: webpage, pts: pts, ptsCount: ptsCount });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.webpage !== undefined) {
                b.write(this.webpage.write());
            }
            if (this.pts !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.pts));
            }
            if (this.ptsCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.ptsCount));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateWebPage = UpdateWebPage;
    class UpdateReadMessagesContents extends index_js_1.TLObject {
        messages;
        pts;
        ptsCount;
        date;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateReadMessagesContents';
            this.constructorId = 0xf8227181;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['messages', 'pts', 'ptsCount', 'date'];
            this.messages = params.messages;
            this.pts = params.pts;
            this.ptsCount = params.ptsCount;
            this.date = params.date;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let messages = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int);
            let pts = await index_js_1.Primitive.Int.read(_data);
            let ptsCount = await index_js_1.Primitive.Int.read(_data);
            let date = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            return new Raw.UpdateReadMessagesContents({
                messages: messages,
                pts: pts,
                ptsCount: ptsCount,
                date: date,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.date !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.messages) {
                b.write(index_js_1.Primitive.Vector.write(this.messages, index_js_1.Primitive.Int));
            }
            if (this.pts !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.pts));
            }
            if (this.ptsCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.ptsCount));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateReadMessagesContents = UpdateReadMessagesContents;
    class UpdateChannelTooLong extends index_js_1.TLObject {
        channelId;
        pts;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateChannelTooLong';
            this.constructorId = 0x108d941f;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['channelId', 'pts'];
            this.channelId = params.channelId;
            this.pts = params.pts;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let channelId = await index_js_1.Primitive.Long.read(_data);
            let pts = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            return new Raw.UpdateChannelTooLong({ channelId: channelId, pts: pts });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.pts !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.channelId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.channelId));
            }
            if (this.pts !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.pts));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateChannelTooLong = UpdateChannelTooLong;
    class UpdateChannel extends index_js_1.TLObject {
        channelId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateChannel';
            this.constructorId = 0x635b4c09;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['channelId'];
            this.channelId = params.channelId;
        }
        static async read(_data, ..._args) {
            let channelId = await index_js_1.Primitive.Long.read(_data);
            return new Raw.UpdateChannel({ channelId: channelId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.channelId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.channelId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateChannel = UpdateChannel;
    class UpdateNewChannelMessage extends index_js_1.TLObject {
        message;
        pts;
        ptsCount;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateNewChannelMessage';
            this.constructorId = 0x62ba04d9;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['message', 'pts', 'ptsCount'];
            this.message = params.message;
            this.pts = params.pts;
            this.ptsCount = params.ptsCount;
        }
        static async read(_data, ..._args) {
            let message = await index_js_1.TLObject.read(_data);
            let pts = await index_js_1.Primitive.Int.read(_data);
            let ptsCount = await index_js_1.Primitive.Int.read(_data);
            return new Raw.UpdateNewChannelMessage({ message: message, pts: pts, ptsCount: ptsCount });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.message !== undefined) {
                b.write(this.message.write());
            }
            if (this.pts !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.pts));
            }
            if (this.ptsCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.ptsCount));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateNewChannelMessage = UpdateNewChannelMessage;
    class UpdateReadChannelInbox extends index_js_1.TLObject {
        folderId;
        channelId;
        maxId;
        stillUnreadCount;
        pts;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateReadChannelInbox';
            this.constructorId = 0x922e6e10;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['folderId', 'channelId', 'maxId', 'stillUnreadCount', 'pts'];
            this.folderId = params.folderId;
            this.channelId = params.channelId;
            this.maxId = params.maxId;
            this.stillUnreadCount = params.stillUnreadCount;
            this.pts = params.pts;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let folderId = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let channelId = await index_js_1.Primitive.Long.read(_data);
            let maxId = await index_js_1.Primitive.Int.read(_data);
            let stillUnreadCount = await index_js_1.Primitive.Int.read(_data);
            let pts = await index_js_1.Primitive.Int.read(_data);
            return new Raw.UpdateReadChannelInbox({
                folderId: folderId,
                channelId: channelId,
                maxId: maxId,
                stillUnreadCount: stillUnreadCount,
                pts: pts,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.folderId !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.folderId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.folderId));
            }
            if (this.channelId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.channelId));
            }
            if (this.maxId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.maxId));
            }
            if (this.stillUnreadCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.stillUnreadCount));
            }
            if (this.pts !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.pts));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateReadChannelInbox = UpdateReadChannelInbox;
    class UpdateDeleteChannelMessages extends index_js_1.TLObject {
        channelId;
        messages;
        pts;
        ptsCount;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateDeleteChannelMessages';
            this.constructorId = 0xc32d5b12;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['channelId', 'messages', 'pts', 'ptsCount'];
            this.channelId = params.channelId;
            this.messages = params.messages;
            this.pts = params.pts;
            this.ptsCount = params.ptsCount;
        }
        static async read(_data, ..._args) {
            let channelId = await index_js_1.Primitive.Long.read(_data);
            let messages = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int);
            let pts = await index_js_1.Primitive.Int.read(_data);
            let ptsCount = await index_js_1.Primitive.Int.read(_data);
            return new Raw.UpdateDeleteChannelMessages({
                channelId: channelId,
                messages: messages,
                pts: pts,
                ptsCount: ptsCount,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.channelId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.channelId));
            }
            if (this.messages) {
                b.write(index_js_1.Primitive.Vector.write(this.messages, index_js_1.Primitive.Int));
            }
            if (this.pts !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.pts));
            }
            if (this.ptsCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.ptsCount));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateDeleteChannelMessages = UpdateDeleteChannelMessages;
    class UpdateChannelMessageViews extends index_js_1.TLObject {
        channelId;
        id;
        views;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateChannelMessageViews';
            this.constructorId = 0xf226ac08;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['channelId', 'id', 'views'];
            this.channelId = params.channelId;
            this.id = params.id;
            this.views = params.views;
        }
        static async read(_data, ..._args) {
            let channelId = await index_js_1.Primitive.Long.read(_data);
            let id = await index_js_1.Primitive.Int.read(_data);
            let views = await index_js_1.Primitive.Int.read(_data);
            return new Raw.UpdateChannelMessageViews({ channelId: channelId, id: id, views: views });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.channelId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.channelId));
            }
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.id));
            }
            if (this.views !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.views));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateChannelMessageViews = UpdateChannelMessageViews;
    class UpdateChatParticipantAdmin extends index_js_1.TLObject {
        chatId;
        userId;
        isAdmin;
        version;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateChatParticipantAdmin';
            this.constructorId = 0xd7ca61a2;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['chatId', 'userId', 'isAdmin', 'version'];
            this.chatId = params.chatId;
            this.userId = params.userId;
            this.isAdmin = params.isAdmin;
            this.version = params.version;
        }
        static async read(_data, ..._args) {
            let chatId = await index_js_1.Primitive.Long.read(_data);
            let userId = await index_js_1.Primitive.Long.read(_data);
            let isAdmin = await index_js_1.Primitive.Bool.read(_data);
            let version = await index_js_1.Primitive.Int.read(_data);
            return new Raw.UpdateChatParticipantAdmin({
                chatId: chatId,
                userId: userId,
                isAdmin: isAdmin,
                version: version,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.chatId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.chatId));
            }
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            if (this.isAdmin !== undefined) {
                b.write(index_js_1.Primitive.Bool.write(this.isAdmin));
            }
            if (this.version !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.version));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateChatParticipantAdmin = UpdateChatParticipantAdmin;
    class UpdateNewStickerSet extends index_js_1.TLObject {
        stickerset;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateNewStickerSet';
            this.constructorId = 0x688a30aa;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['stickerset'];
            this.stickerset = params.stickerset;
        }
        static async read(_data, ..._args) {
            let stickerset = await index_js_1.TLObject.read(_data);
            return new Raw.UpdateNewStickerSet({ stickerset: stickerset });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.stickerset !== undefined) {
                b.write(this.stickerset.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateNewStickerSet = UpdateNewStickerSet;
    class UpdateStickerSetsOrder extends index_js_1.TLObject {
        masks;
        emojis;
        order;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateStickerSetsOrder';
            this.constructorId = 0xbb2d201;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['masks', 'emojis', 'order'];
            this.masks = params.masks;
            this.emojis = params.emojis;
            this.order = params.order;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let masks = flags & (1 << 0) ? true : false;
            let emojis = flags & (1 << 1) ? true : false;
            let order = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Long);
            return new Raw.UpdateStickerSetsOrder({ masks: masks, emojis: emojis, order: order });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.masks ? 1 << 0 : 0;
            flags |= this.emojis ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.order) {
                b.write(index_js_1.Primitive.Vector.write(this.order, index_js_1.Primitive.Long));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateStickerSetsOrder = UpdateStickerSetsOrder;
    class UpdateStickerSets extends index_js_1.TLObject {
        masks;
        emojis;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateStickerSets';
            this.constructorId = 0x31c24808;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['masks', 'emojis'];
            this.masks = params.masks;
            this.emojis = params.emojis;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let masks = flags & (1 << 0) ? true : false;
            let emojis = flags & (1 << 1) ? true : false;
            return new Raw.UpdateStickerSets({ masks: masks, emojis: emojis });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.masks ? 1 << 0 : 0;
            flags |= this.emojis ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateStickerSets = UpdateStickerSets;
    class UpdateSavedGifs extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'UpdateSavedGifs';
            this.constructorId = 0x9375341e;
            this.subclassOfId = 0x9f89304e;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.UpdateSavedGifs();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateSavedGifs = UpdateSavedGifs;
    class UpdateBotInlineQuery extends index_js_1.TLObject {
        queryId;
        userId;
        query;
        geo;
        peerType;
        offset;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateBotInlineQuery';
            this.constructorId = 0x496f379c;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['queryId', 'userId', 'query', 'geo', 'peerType', 'offset'];
            this.queryId = params.queryId;
            this.userId = params.userId;
            this.query = params.query;
            this.geo = params.geo;
            this.peerType = params.peerType;
            this.offset = params.offset;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let queryId = await index_js_1.Primitive.Long.read(_data);
            let userId = await index_js_1.Primitive.Long.read(_data);
            let query = await index_js_1.Primitive.String.read(_data);
            let geo = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
            let peerType = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : undefined;
            let offset = await index_js_1.Primitive.String.read(_data);
            return new Raw.UpdateBotInlineQuery({
                queryId: queryId,
                userId: userId,
                query: query,
                geo: geo,
                peerType: peerType,
                offset: offset,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.geo !== undefined ? 1 << 0 : 0;
            flags |= this.peerType !== undefined ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.queryId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.queryId));
            }
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            if (this.query !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.query));
            }
            if (this.geo !== undefined) {
                b.write(this.geo.write());
            }
            if (this.peerType !== undefined) {
                b.write(this.peerType.write());
            }
            if (this.offset !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.offset));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateBotInlineQuery = UpdateBotInlineQuery;
    class UpdateBotInlineSend extends index_js_1.TLObject {
        userId;
        query;
        geo;
        id;
        msgId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateBotInlineSend';
            this.constructorId = 0x12f12a07;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['userId', 'query', 'geo', 'id', 'msgId'];
            this.userId = params.userId;
            this.query = params.query;
            this.geo = params.geo;
            this.id = params.id;
            this.msgId = params.msgId;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let userId = await index_js_1.Primitive.Long.read(_data);
            let query = await index_js_1.Primitive.String.read(_data);
            let geo = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
            let id = await index_js_1.Primitive.String.read(_data);
            let msgId = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.UpdateBotInlineSend({
                userId: userId,
                query: query,
                geo: geo,
                id: id,
                msgId: msgId,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.geo !== undefined ? 1 << 0 : 0;
            flags |= this.msgId !== undefined ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            if (this.query !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.query));
            }
            if (this.geo !== undefined) {
                b.write(this.geo.write());
            }
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.id));
            }
            if (this.msgId !== undefined) {
                b.write(this.msgId.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateBotInlineSend = UpdateBotInlineSend;
    class UpdateEditChannelMessage extends index_js_1.TLObject {
        message;
        pts;
        ptsCount;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateEditChannelMessage';
            this.constructorId = 0x1b3f4df7;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['message', 'pts', 'ptsCount'];
            this.message = params.message;
            this.pts = params.pts;
            this.ptsCount = params.ptsCount;
        }
        static async read(_data, ..._args) {
            let message = await index_js_1.TLObject.read(_data);
            let pts = await index_js_1.Primitive.Int.read(_data);
            let ptsCount = await index_js_1.Primitive.Int.read(_data);
            return new Raw.UpdateEditChannelMessage({ message: message, pts: pts, ptsCount: ptsCount });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.message !== undefined) {
                b.write(this.message.write());
            }
            if (this.pts !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.pts));
            }
            if (this.ptsCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.ptsCount));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateEditChannelMessage = UpdateEditChannelMessage;
    class UpdateBotCallbackQuery extends index_js_1.TLObject {
        queryId;
        userId;
        peer;
        msgId;
        chatInstance;
        data;
        gameShortName;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateBotCallbackQuery';
            this.constructorId = 0xb9cfc48d;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['queryId', 'userId', 'peer', 'msgId', 'chatInstance', 'data', 'gameShortName'];
            this.queryId = params.queryId;
            this.userId = params.userId;
            this.peer = params.peer;
            this.msgId = params.msgId;
            this.chatInstance = params.chatInstance;
            this.data = params.data;
            this.gameShortName = params.gameShortName;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let queryId = await index_js_1.Primitive.Long.read(_data);
            let userId = await index_js_1.Primitive.Long.read(_data);
            let peer = await index_js_1.TLObject.read(_data);
            let msgId = await index_js_1.Primitive.Int.read(_data);
            let chatInstance = await index_js_1.Primitive.Long.read(_data);
            let data = flags & (1 << 0) ? await index_js_1.Primitive.Bytes.read(_data) : undefined;
            let gameShortName = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
            return new Raw.UpdateBotCallbackQuery({
                queryId: queryId,
                userId: userId,
                peer: peer,
                msgId: msgId,
                chatInstance: chatInstance,
                data: data,
                gameShortName: gameShortName,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.data !== undefined ? 1 << 0 : 0;
            flags |= this.gameShortName !== undefined ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.queryId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.queryId));
            }
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.msgId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.msgId));
            }
            if (this.chatInstance !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.chatInstance));
            }
            if (this.data !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.data));
            }
            if (this.gameShortName !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.gameShortName));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateBotCallbackQuery = UpdateBotCallbackQuery;
    class UpdateEditMessage extends index_js_1.TLObject {
        message;
        pts;
        ptsCount;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateEditMessage';
            this.constructorId = 0xe40370a3;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['message', 'pts', 'ptsCount'];
            this.message = params.message;
            this.pts = params.pts;
            this.ptsCount = params.ptsCount;
        }
        static async read(_data, ..._args) {
            let message = await index_js_1.TLObject.read(_data);
            let pts = await index_js_1.Primitive.Int.read(_data);
            let ptsCount = await index_js_1.Primitive.Int.read(_data);
            return new Raw.UpdateEditMessage({ message: message, pts: pts, ptsCount: ptsCount });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.message !== undefined) {
                b.write(this.message.write());
            }
            if (this.pts !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.pts));
            }
            if (this.ptsCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.ptsCount));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateEditMessage = UpdateEditMessage;
    class UpdateInlineBotCallbackQuery extends index_js_1.TLObject {
        queryId;
        userId;
        msgId;
        chatInstance;
        data;
        gameShortName;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateInlineBotCallbackQuery';
            this.constructorId = 0x691e9052;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['queryId', 'userId', 'msgId', 'chatInstance', 'data', 'gameShortName'];
            this.queryId = params.queryId;
            this.userId = params.userId;
            this.msgId = params.msgId;
            this.chatInstance = params.chatInstance;
            this.data = params.data;
            this.gameShortName = params.gameShortName;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let queryId = await index_js_1.Primitive.Long.read(_data);
            let userId = await index_js_1.Primitive.Long.read(_data);
            let msgId = await index_js_1.TLObject.read(_data);
            let chatInstance = await index_js_1.Primitive.Long.read(_data);
            let data = flags & (1 << 0) ? await index_js_1.Primitive.Bytes.read(_data) : undefined;
            let gameShortName = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
            return new Raw.UpdateInlineBotCallbackQuery({
                queryId: queryId,
                userId: userId,
                msgId: msgId,
                chatInstance: chatInstance,
                data: data,
                gameShortName: gameShortName,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.data !== undefined ? 1 << 0 : 0;
            flags |= this.gameShortName !== undefined ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.queryId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.queryId));
            }
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            if (this.msgId !== undefined) {
                b.write(this.msgId.write());
            }
            if (this.chatInstance !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.chatInstance));
            }
            if (this.data !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.data));
            }
            if (this.gameShortName !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.gameShortName));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateInlineBotCallbackQuery = UpdateInlineBotCallbackQuery;
    class UpdateReadChannelOutbox extends index_js_1.TLObject {
        channelId;
        maxId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateReadChannelOutbox';
            this.constructorId = 0xb75f99a9;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['channelId', 'maxId'];
            this.channelId = params.channelId;
            this.maxId = params.maxId;
        }
        static async read(_data, ..._args) {
            let channelId = await index_js_1.Primitive.Long.read(_data);
            let maxId = await index_js_1.Primitive.Int.read(_data);
            return new Raw.UpdateReadChannelOutbox({ channelId: channelId, maxId: maxId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.channelId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.channelId));
            }
            if (this.maxId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.maxId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateReadChannelOutbox = UpdateReadChannelOutbox;
    class UpdateDraftMessage extends index_js_1.TLObject {
        peer;
        topMsgId;
        draft;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateDraftMessage';
            this.constructorId = 0x1b49ec6d;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['peer', 'topMsgId', 'draft'];
            this.peer = params.peer;
            this.topMsgId = params.topMsgId;
            this.draft = params.draft;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let peer = await index_js_1.TLObject.read(_data);
            let topMsgId = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let draft = await index_js_1.TLObject.read(_data);
            return new Raw.UpdateDraftMessage({ peer: peer, topMsgId: topMsgId, draft: draft });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.topMsgId !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.topMsgId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.topMsgId));
            }
            if (this.draft !== undefined) {
                b.write(this.draft.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateDraftMessage = UpdateDraftMessage;
    class UpdateReadFeaturedStickers extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'UpdateReadFeaturedStickers';
            this.constructorId = 0x571d2742;
            this.subclassOfId = 0x9f89304e;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.UpdateReadFeaturedStickers();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateReadFeaturedStickers = UpdateReadFeaturedStickers;
    class UpdateRecentStickers extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'UpdateRecentStickers';
            this.constructorId = 0x9a422c20;
            this.subclassOfId = 0x9f89304e;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.UpdateRecentStickers();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateRecentStickers = UpdateRecentStickers;
    class UpdateConfig extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'UpdateConfig';
            this.constructorId = 0xa229dd06;
            this.subclassOfId = 0x9f89304e;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.UpdateConfig();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateConfig = UpdateConfig;
    class UpdatePtsChanged extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'UpdatePtsChanged';
            this.constructorId = 0x3354678f;
            this.subclassOfId = 0x9f89304e;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.UpdatePtsChanged();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdatePtsChanged = UpdatePtsChanged;
    class UpdateChannelWebPage extends index_js_1.TLObject {
        channelId;
        webpage;
        pts;
        ptsCount;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateChannelWebPage';
            this.constructorId = 0x2f2ba99f;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['channelId', 'webpage', 'pts', 'ptsCount'];
            this.channelId = params.channelId;
            this.webpage = params.webpage;
            this.pts = params.pts;
            this.ptsCount = params.ptsCount;
        }
        static async read(_data, ..._args) {
            let channelId = await index_js_1.Primitive.Long.read(_data);
            let webpage = await index_js_1.TLObject.read(_data);
            let pts = await index_js_1.Primitive.Int.read(_data);
            let ptsCount = await index_js_1.Primitive.Int.read(_data);
            return new Raw.UpdateChannelWebPage({
                channelId: channelId,
                webpage: webpage,
                pts: pts,
                ptsCount: ptsCount,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.channelId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.channelId));
            }
            if (this.webpage !== undefined) {
                b.write(this.webpage.write());
            }
            if (this.pts !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.pts));
            }
            if (this.ptsCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.ptsCount));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateChannelWebPage = UpdateChannelWebPage;
    class UpdateDialogPinned extends index_js_1.TLObject {
        pinned;
        folderId;
        peer;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateDialogPinned';
            this.constructorId = 0x6e6fe51c;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['pinned', 'folderId', 'peer'];
            this.pinned = params.pinned;
            this.folderId = params.folderId;
            this.peer = params.peer;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let pinned = flags & (1 << 0) ? true : false;
            let folderId = flags & (1 << 1) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let peer = await index_js_1.TLObject.read(_data);
            return new Raw.UpdateDialogPinned({ pinned: pinned, folderId: folderId, peer: peer });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.pinned ? 1 << 0 : 0;
            flags |= this.folderId !== undefined ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.folderId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.folderId));
            }
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateDialogPinned = UpdateDialogPinned;
    class UpdatePinnedDialogs extends index_js_1.TLObject {
        folderId;
        order;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdatePinnedDialogs';
            this.constructorId = 0xfa0f3ca2;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['folderId', 'order'];
            this.folderId = params.folderId;
            this.order = params.order;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let folderId = flags & (1 << 1) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let order = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : [];
            return new Raw.UpdatePinnedDialogs({ folderId: folderId, order: order });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.folderId !== undefined ? 1 << 1 : 0;
            flags |= this.order ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.folderId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.folderId));
            }
            if (this.order) {
                b.write(index_js_1.Primitive.Vector.write(this.order));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdatePinnedDialogs = UpdatePinnedDialogs;
    class UpdateBotWebhookJSON extends index_js_1.TLObject {
        data;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateBotWebhookJSON';
            this.constructorId = 0x8317c0c3;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['data'];
            this.data = params.data;
        }
        static async read(_data, ..._args) {
            let data = await index_js_1.TLObject.read(_data);
            return new Raw.UpdateBotWebhookJSON({ data: data });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.data !== undefined) {
                b.write(this.data.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateBotWebhookJSON = UpdateBotWebhookJSON;
    class UpdateBotWebhookJSONQuery extends index_js_1.TLObject {
        queryId;
        data;
        timeout;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateBotWebhookJSONQuery';
            this.constructorId = 0x9b9240a6;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['queryId', 'data', 'timeout'];
            this.queryId = params.queryId;
            this.data = params.data;
            this.timeout = params.timeout;
        }
        static async read(_data, ..._args) {
            let queryId = await index_js_1.Primitive.Long.read(_data);
            let data = await index_js_1.TLObject.read(_data);
            let timeout = await index_js_1.Primitive.Int.read(_data);
            return new Raw.UpdateBotWebhookJSONQuery({ queryId: queryId, data: data, timeout: timeout });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.queryId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.queryId));
            }
            if (this.data !== undefined) {
                b.write(this.data.write());
            }
            if (this.timeout !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.timeout));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateBotWebhookJSONQuery = UpdateBotWebhookJSONQuery;
    class UpdateBotShippingQuery extends index_js_1.TLObject {
        queryId;
        userId;
        payload;
        shippingAddress;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateBotShippingQuery';
            this.constructorId = 0xb5aefd7d;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['queryId', 'userId', 'payload', 'shippingAddress'];
            this.queryId = params.queryId;
            this.userId = params.userId;
            this.payload = params.payload;
            this.shippingAddress = params.shippingAddress;
        }
        static async read(_data, ..._args) {
            let queryId = await index_js_1.Primitive.Long.read(_data);
            let userId = await index_js_1.Primitive.Long.read(_data);
            let payload = await index_js_1.Primitive.Bytes.read(_data);
            let shippingAddress = await index_js_1.TLObject.read(_data);
            return new Raw.UpdateBotShippingQuery({
                queryId: queryId,
                userId: userId,
                payload: payload,
                shippingAddress: shippingAddress,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.queryId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.queryId));
            }
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            if (this.payload !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.payload));
            }
            if (this.shippingAddress !== undefined) {
                b.write(this.shippingAddress.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateBotShippingQuery = UpdateBotShippingQuery;
    class UpdateBotPrecheckoutQuery extends index_js_1.TLObject {
        queryId;
        userId;
        payload;
        info;
        shippingOptionId;
        currency;
        totalAmount;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateBotPrecheckoutQuery';
            this.constructorId = 0x8caa9a96;
            this.subclassOfId = 0x9f89304e;
            this._slots = [
                'queryId',
                'userId',
                'payload',
                'info',
                'shippingOptionId',
                'currency',
                'totalAmount',
            ];
            this.queryId = params.queryId;
            this.userId = params.userId;
            this.payload = params.payload;
            this.info = params.info;
            this.shippingOptionId = params.shippingOptionId;
            this.currency = params.currency;
            this.totalAmount = params.totalAmount;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let queryId = await index_js_1.Primitive.Long.read(_data);
            let userId = await index_js_1.Primitive.Long.read(_data);
            let payload = await index_js_1.Primitive.Bytes.read(_data);
            let info = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
            let shippingOptionId = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let currency = await index_js_1.Primitive.String.read(_data);
            let totalAmount = await index_js_1.Primitive.Long.read(_data);
            return new Raw.UpdateBotPrecheckoutQuery({
                queryId: queryId,
                userId: userId,
                payload: payload,
                info: info,
                shippingOptionId: shippingOptionId,
                currency: currency,
                totalAmount: totalAmount,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.info !== undefined ? 1 << 0 : 0;
            flags |= this.shippingOptionId !== undefined ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.queryId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.queryId));
            }
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            if (this.payload !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.payload));
            }
            if (this.info !== undefined) {
                b.write(this.info.write());
            }
            if (this.shippingOptionId !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.shippingOptionId));
            }
            if (this.currency !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.currency));
            }
            if (this.totalAmount !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.totalAmount));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateBotPrecheckoutQuery = UpdateBotPrecheckoutQuery;
    class UpdatePhoneCall extends index_js_1.TLObject {
        phoneCall;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdatePhoneCall';
            this.constructorId = 0xab0f6b1e;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['phoneCall'];
            this.phoneCall = params.phoneCall;
        }
        static async read(_data, ..._args) {
            let phoneCall = await index_js_1.TLObject.read(_data);
            return new Raw.UpdatePhoneCall({ phoneCall: phoneCall });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.phoneCall !== undefined) {
                b.write(this.phoneCall.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdatePhoneCall = UpdatePhoneCall;
    class UpdateLangPackTooLong extends index_js_1.TLObject {
        langCode;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateLangPackTooLong';
            this.constructorId = 0x46560264;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['langCode'];
            this.langCode = params.langCode;
        }
        static async read(_data, ..._args) {
            let langCode = await index_js_1.Primitive.String.read(_data);
            return new Raw.UpdateLangPackTooLong({ langCode: langCode });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.langCode !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.langCode));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateLangPackTooLong = UpdateLangPackTooLong;
    class UpdateLangPack extends index_js_1.TLObject {
        difference;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateLangPack';
            this.constructorId = 0x56022f4d;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['difference'];
            this.difference = params.difference;
        }
        static async read(_data, ..._args) {
            let difference = await index_js_1.TLObject.read(_data);
            return new Raw.UpdateLangPack({ difference: difference });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.difference !== undefined) {
                b.write(this.difference.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateLangPack = UpdateLangPack;
    class UpdateFavedStickers extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'UpdateFavedStickers';
            this.constructorId = 0xe511996d;
            this.subclassOfId = 0x9f89304e;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.UpdateFavedStickers();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateFavedStickers = UpdateFavedStickers;
    class UpdateChannelReadMessagesContents extends index_js_1.TLObject {
        channelId;
        topMsgId;
        messages;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateChannelReadMessagesContents';
            this.constructorId = 0xea29055d;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['channelId', 'topMsgId', 'messages'];
            this.channelId = params.channelId;
            this.topMsgId = params.topMsgId;
            this.messages = params.messages;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let channelId = await index_js_1.Primitive.Long.read(_data);
            let topMsgId = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let messages = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int);
            return new Raw.UpdateChannelReadMessagesContents({
                channelId: channelId,
                topMsgId: topMsgId,
                messages: messages,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.topMsgId !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.channelId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.channelId));
            }
            if (this.topMsgId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.topMsgId));
            }
            if (this.messages) {
                b.write(index_js_1.Primitive.Vector.write(this.messages, index_js_1.Primitive.Int));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateChannelReadMessagesContents = UpdateChannelReadMessagesContents;
    class UpdateContactsReset extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'UpdateContactsReset';
            this.constructorId = 0x7084a7be;
            this.subclassOfId = 0x9f89304e;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.UpdateContactsReset();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateContactsReset = UpdateContactsReset;
    class UpdateChannelAvailableMessages extends index_js_1.TLObject {
        channelId;
        availableMinId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateChannelAvailableMessages';
            this.constructorId = 0xb23fc698;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['channelId', 'availableMinId'];
            this.channelId = params.channelId;
            this.availableMinId = params.availableMinId;
        }
        static async read(_data, ..._args) {
            let channelId = await index_js_1.Primitive.Long.read(_data);
            let availableMinId = await index_js_1.Primitive.Int.read(_data);
            return new Raw.UpdateChannelAvailableMessages({
                channelId: channelId,
                availableMinId: availableMinId,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.channelId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.channelId));
            }
            if (this.availableMinId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.availableMinId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateChannelAvailableMessages = UpdateChannelAvailableMessages;
    class UpdateDialogUnreadMark extends index_js_1.TLObject {
        unread;
        peer;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateDialogUnreadMark';
            this.constructorId = 0xe16459c3;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['unread', 'peer'];
            this.unread = params.unread;
            this.peer = params.peer;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let unread = flags & (1 << 0) ? true : false;
            let peer = await index_js_1.TLObject.read(_data);
            return new Raw.UpdateDialogUnreadMark({ unread: unread, peer: peer });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.unread ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateDialogUnreadMark = UpdateDialogUnreadMark;
    class UpdateMessagePoll extends index_js_1.TLObject {
        pollId;
        poll;
        results;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateMessagePoll';
            this.constructorId = 0xaca1657b;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['pollId', 'poll', 'results'];
            this.pollId = params.pollId;
            this.poll = params.poll;
            this.results = params.results;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let pollId = await index_js_1.Primitive.Long.read(_data);
            let poll = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
            let results = await index_js_1.TLObject.read(_data);
            return new Raw.UpdateMessagePoll({ pollId: pollId, poll: poll, results: results });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.poll !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.pollId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.pollId));
            }
            if (this.poll !== undefined) {
                b.write(this.poll.write());
            }
            if (this.results !== undefined) {
                b.write(this.results.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateMessagePoll = UpdateMessagePoll;
    class UpdateChatDefaultBannedRights extends index_js_1.TLObject {
        peer;
        defaultBannedRights;
        version;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateChatDefaultBannedRights';
            this.constructorId = 0x54c01850;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['peer', 'defaultBannedRights', 'version'];
            this.peer = params.peer;
            this.defaultBannedRights = params.defaultBannedRights;
            this.version = params.version;
        }
        static async read(_data, ..._args) {
            let peer = await index_js_1.TLObject.read(_data);
            let defaultBannedRights = await index_js_1.TLObject.read(_data);
            let version = await index_js_1.Primitive.Int.read(_data);
            return new Raw.UpdateChatDefaultBannedRights({
                peer: peer,
                defaultBannedRights: defaultBannedRights,
                version: version,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.defaultBannedRights !== undefined) {
                b.write(this.defaultBannedRights.write());
            }
            if (this.version !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.version));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateChatDefaultBannedRights = UpdateChatDefaultBannedRights;
    class UpdateFolderPeers extends index_js_1.TLObject {
        folderPeers;
        pts;
        ptsCount;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateFolderPeers';
            this.constructorId = 0x19360dc0;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['folderPeers', 'pts', 'ptsCount'];
            this.folderPeers = params.folderPeers;
            this.pts = params.pts;
            this.ptsCount = params.ptsCount;
        }
        static async read(_data, ..._args) {
            let folderPeers = await index_js_1.TLObject.read(_data);
            let pts = await index_js_1.Primitive.Int.read(_data);
            let ptsCount = await index_js_1.Primitive.Int.read(_data);
            return new Raw.UpdateFolderPeers({ folderPeers: folderPeers, pts: pts, ptsCount: ptsCount });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.folderPeers) {
                b.write(index_js_1.Primitive.Vector.write(this.folderPeers));
            }
            if (this.pts !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.pts));
            }
            if (this.ptsCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.ptsCount));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateFolderPeers = UpdateFolderPeers;
    class UpdatePeerSettings extends index_js_1.TLObject {
        peer;
        settings;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdatePeerSettings';
            this.constructorId = 0x6a7e7366;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['peer', 'settings'];
            this.peer = params.peer;
            this.settings = params.settings;
        }
        static async read(_data, ..._args) {
            let peer = await index_js_1.TLObject.read(_data);
            let settings = await index_js_1.TLObject.read(_data);
            return new Raw.UpdatePeerSettings({ peer: peer, settings: settings });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.settings !== undefined) {
                b.write(this.settings.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdatePeerSettings = UpdatePeerSettings;
    class UpdatePeerLocated extends index_js_1.TLObject {
        peers;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdatePeerLocated';
            this.constructorId = 0xb4afcfb0;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['peers'];
            this.peers = params.peers;
        }
        static async read(_data, ..._args) {
            let peers = await index_js_1.TLObject.read(_data);
            return new Raw.UpdatePeerLocated({ peers: peers });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.peers) {
                b.write(index_js_1.Primitive.Vector.write(this.peers));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdatePeerLocated = UpdatePeerLocated;
    class UpdateNewScheduledMessage extends index_js_1.TLObject {
        message;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateNewScheduledMessage';
            this.constructorId = 0x39a51dfb;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['message'];
            this.message = params.message;
        }
        static async read(_data, ..._args) {
            let message = await index_js_1.TLObject.read(_data);
            return new Raw.UpdateNewScheduledMessage({ message: message });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.message !== undefined) {
                b.write(this.message.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateNewScheduledMessage = UpdateNewScheduledMessage;
    class UpdateDeleteScheduledMessages extends index_js_1.TLObject {
        peer;
        messages;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateDeleteScheduledMessages';
            this.constructorId = 0x90866cee;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['peer', 'messages'];
            this.peer = params.peer;
            this.messages = params.messages;
        }
        static async read(_data, ..._args) {
            let peer = await index_js_1.TLObject.read(_data);
            let messages = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int);
            return new Raw.UpdateDeleteScheduledMessages({ peer: peer, messages: messages });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.messages) {
                b.write(index_js_1.Primitive.Vector.write(this.messages, index_js_1.Primitive.Int));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateDeleteScheduledMessages = UpdateDeleteScheduledMessages;
    class UpdateTheme extends index_js_1.TLObject {
        theme;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateTheme';
            this.constructorId = 0x8216fba3;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['theme'];
            this.theme = params.theme;
        }
        static async read(_data, ..._args) {
            let theme = await index_js_1.TLObject.read(_data);
            return new Raw.UpdateTheme({ theme: theme });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.theme !== undefined) {
                b.write(this.theme.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateTheme = UpdateTheme;
    class UpdateGeoLiveViewed extends index_js_1.TLObject {
        peer;
        msgId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateGeoLiveViewed';
            this.constructorId = 0x871fb939;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['peer', 'msgId'];
            this.peer = params.peer;
            this.msgId = params.msgId;
        }
        static async read(_data, ..._args) {
            let peer = await index_js_1.TLObject.read(_data);
            let msgId = await index_js_1.Primitive.Int.read(_data);
            return new Raw.UpdateGeoLiveViewed({ peer: peer, msgId: msgId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.msgId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.msgId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateGeoLiveViewed = UpdateGeoLiveViewed;
    class UpdateLoginToken extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'UpdateLoginToken';
            this.constructorId = 0x564fe691;
            this.subclassOfId = 0x9f89304e;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.UpdateLoginToken();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateLoginToken = UpdateLoginToken;
    class UpdateMessagePollVote extends index_js_1.TLObject {
        pollId;
        peer;
        options;
        qts;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateMessagePollVote';
            this.constructorId = 0x24f40e77;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['pollId', 'peer', 'options', 'qts'];
            this.pollId = params.pollId;
            this.peer = params.peer;
            this.options = params.options;
            this.qts = params.qts;
        }
        static async read(_data, ..._args) {
            let pollId = await index_js_1.Primitive.Long.read(_data);
            let peer = await index_js_1.TLObject.read(_data);
            let options = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Bytes);
            let qts = await index_js_1.Primitive.Int.read(_data);
            return new Raw.UpdateMessagePollVote({
                pollId: pollId,
                peer: peer,
                options: options,
                qts: qts,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.pollId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.pollId));
            }
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.options) {
                b.write(index_js_1.Primitive.Vector.write(this.options, index_js_1.Primitive.Bytes));
            }
            if (this.qts !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.qts));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateMessagePollVote = UpdateMessagePollVote;
    class UpdateDialogFilter extends index_js_1.TLObject {
        id;
        filter;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateDialogFilter';
            this.constructorId = 0x26ffde7d;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['id', 'filter'];
            this.id = params.id;
            this.filter = params.filter;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let id = await index_js_1.Primitive.Int.read(_data);
            let filter = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.UpdateDialogFilter({ id: id, filter: filter });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.filter !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.id));
            }
            if (this.filter !== undefined) {
                b.write(this.filter.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateDialogFilter = UpdateDialogFilter;
    class UpdateDialogFilterOrder extends index_js_1.TLObject {
        order;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateDialogFilterOrder';
            this.constructorId = 0xa5d72105;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['order'];
            this.order = params.order;
        }
        static async read(_data, ..._args) {
            let order = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int);
            return new Raw.UpdateDialogFilterOrder({ order: order });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.order) {
                b.write(index_js_1.Primitive.Vector.write(this.order, index_js_1.Primitive.Int));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateDialogFilterOrder = UpdateDialogFilterOrder;
    class UpdateDialogFilters extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'UpdateDialogFilters';
            this.constructorId = 0x3504914f;
            this.subclassOfId = 0x9f89304e;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.UpdateDialogFilters();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateDialogFilters = UpdateDialogFilters;
    class UpdatePhoneCallSignalingData extends index_js_1.TLObject {
        phoneCallId;
        data;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdatePhoneCallSignalingData';
            this.constructorId = 0x2661bf09;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['phoneCallId', 'data'];
            this.phoneCallId = params.phoneCallId;
            this.data = params.data;
        }
        static async read(_data, ..._args) {
            let phoneCallId = await index_js_1.Primitive.Long.read(_data);
            let data = await index_js_1.Primitive.Bytes.read(_data);
            return new Raw.UpdatePhoneCallSignalingData({ phoneCallId: phoneCallId, data: data });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.phoneCallId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.phoneCallId));
            }
            if (this.data !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.data));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdatePhoneCallSignalingData = UpdatePhoneCallSignalingData;
    class UpdateChannelMessageForwards extends index_js_1.TLObject {
        channelId;
        id;
        forwards;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateChannelMessageForwards';
            this.constructorId = 0xd29a27f4;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['channelId', 'id', 'forwards'];
            this.channelId = params.channelId;
            this.id = params.id;
            this.forwards = params.forwards;
        }
        static async read(_data, ..._args) {
            let channelId = await index_js_1.Primitive.Long.read(_data);
            let id = await index_js_1.Primitive.Int.read(_data);
            let forwards = await index_js_1.Primitive.Int.read(_data);
            return new Raw.UpdateChannelMessageForwards({
                channelId: channelId,
                id: id,
                forwards: forwards,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.channelId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.channelId));
            }
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.id));
            }
            if (this.forwards !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.forwards));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateChannelMessageForwards = UpdateChannelMessageForwards;
    class UpdateReadChannelDiscussionInbox extends index_js_1.TLObject {
        channelId;
        topMsgId;
        readMaxId;
        broadcastId;
        broadcastPost;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateReadChannelDiscussionInbox';
            this.constructorId = 0xd6b19546;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['channelId', 'topMsgId', 'readMaxId', 'broadcastId', 'broadcastPost'];
            this.channelId = params.channelId;
            this.topMsgId = params.topMsgId;
            this.readMaxId = params.readMaxId;
            this.broadcastId = params.broadcastId;
            this.broadcastPost = params.broadcastPost;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let channelId = await index_js_1.Primitive.Long.read(_data);
            let topMsgId = await index_js_1.Primitive.Int.read(_data);
            let readMaxId = await index_js_1.Primitive.Int.read(_data);
            let broadcastId = flags & (1 << 0) ? await index_js_1.Primitive.Long.read(_data) : undefined;
            let broadcastPost = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            return new Raw.UpdateReadChannelDiscussionInbox({
                channelId: channelId,
                topMsgId: topMsgId,
                readMaxId: readMaxId,
                broadcastId: broadcastId,
                broadcastPost: broadcastPost,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.broadcastId !== undefined ? 1 << 0 : 0;
            flags |= this.broadcastPost !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.channelId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.channelId));
            }
            if (this.topMsgId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.topMsgId));
            }
            if (this.readMaxId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.readMaxId));
            }
            if (this.broadcastId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.broadcastId));
            }
            if (this.broadcastPost !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.broadcastPost));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateReadChannelDiscussionInbox = UpdateReadChannelDiscussionInbox;
    class UpdateReadChannelDiscussionOutbox extends index_js_1.TLObject {
        channelId;
        topMsgId;
        readMaxId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateReadChannelDiscussionOutbox';
            this.constructorId = 0x695c9e7c;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['channelId', 'topMsgId', 'readMaxId'];
            this.channelId = params.channelId;
            this.topMsgId = params.topMsgId;
            this.readMaxId = params.readMaxId;
        }
        static async read(_data, ..._args) {
            let channelId = await index_js_1.Primitive.Long.read(_data);
            let topMsgId = await index_js_1.Primitive.Int.read(_data);
            let readMaxId = await index_js_1.Primitive.Int.read(_data);
            return new Raw.UpdateReadChannelDiscussionOutbox({
                channelId: channelId,
                topMsgId: topMsgId,
                readMaxId: readMaxId,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.channelId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.channelId));
            }
            if (this.topMsgId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.topMsgId));
            }
            if (this.readMaxId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.readMaxId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateReadChannelDiscussionOutbox = UpdateReadChannelDiscussionOutbox;
    class UpdatePeerBlocked extends index_js_1.TLObject {
        blocked;
        blockedMyStoriesFrom;
        peerId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdatePeerBlocked';
            this.constructorId = 0xebe07752;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['blocked', 'blockedMyStoriesFrom', 'peerId'];
            this.blocked = params.blocked;
            this.blockedMyStoriesFrom = params.blockedMyStoriesFrom;
            this.peerId = params.peerId;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let blocked = flags & (1 << 0) ? true : false;
            let blockedMyStoriesFrom = flags & (1 << 1) ? true : false;
            let peerId = await index_js_1.TLObject.read(_data);
            return new Raw.UpdatePeerBlocked({
                blocked: blocked,
                blockedMyStoriesFrom: blockedMyStoriesFrom,
                peerId: peerId,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.blocked ? 1 << 0 : 0;
            flags |= this.blockedMyStoriesFrom ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.peerId !== undefined) {
                b.write(this.peerId.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdatePeerBlocked = UpdatePeerBlocked;
    class UpdateChannelUserTyping extends index_js_1.TLObject {
        channelId;
        topMsgId;
        fromId;
        action;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateChannelUserTyping';
            this.constructorId = 0x8c88c923;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['channelId', 'topMsgId', 'fromId', 'action'];
            this.channelId = params.channelId;
            this.topMsgId = params.topMsgId;
            this.fromId = params.fromId;
            this.action = params.action;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let channelId = await index_js_1.Primitive.Long.read(_data);
            let topMsgId = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let fromId = await index_js_1.TLObject.read(_data);
            let action = await index_js_1.TLObject.read(_data);
            return new Raw.UpdateChannelUserTyping({
                channelId: channelId,
                topMsgId: topMsgId,
                fromId: fromId,
                action: action,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.topMsgId !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.channelId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.channelId));
            }
            if (this.topMsgId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.topMsgId));
            }
            if (this.fromId !== undefined) {
                b.write(this.fromId.write());
            }
            if (this.action !== undefined) {
                b.write(this.action.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateChannelUserTyping = UpdateChannelUserTyping;
    class UpdatePinnedMessages extends index_js_1.TLObject {
        pinned;
        peer;
        messages;
        pts;
        ptsCount;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdatePinnedMessages';
            this.constructorId = 0xed85eab5;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['pinned', 'peer', 'messages', 'pts', 'ptsCount'];
            this.pinned = params.pinned;
            this.peer = params.peer;
            this.messages = params.messages;
            this.pts = params.pts;
            this.ptsCount = params.ptsCount;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let pinned = flags & (1 << 0) ? true : false;
            let peer = await index_js_1.TLObject.read(_data);
            let messages = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int);
            let pts = await index_js_1.Primitive.Int.read(_data);
            let ptsCount = await index_js_1.Primitive.Int.read(_data);
            return new Raw.UpdatePinnedMessages({
                pinned: pinned,
                peer: peer,
                messages: messages,
                pts: pts,
                ptsCount: ptsCount,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.pinned ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.messages) {
                b.write(index_js_1.Primitive.Vector.write(this.messages, index_js_1.Primitive.Int));
            }
            if (this.pts !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.pts));
            }
            if (this.ptsCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.ptsCount));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdatePinnedMessages = UpdatePinnedMessages;
    class UpdatePinnedChannelMessages extends index_js_1.TLObject {
        pinned;
        channelId;
        messages;
        pts;
        ptsCount;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdatePinnedChannelMessages';
            this.constructorId = 0x5bb98608;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['pinned', 'channelId', 'messages', 'pts', 'ptsCount'];
            this.pinned = params.pinned;
            this.channelId = params.channelId;
            this.messages = params.messages;
            this.pts = params.pts;
            this.ptsCount = params.ptsCount;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let pinned = flags & (1 << 0) ? true : false;
            let channelId = await index_js_1.Primitive.Long.read(_data);
            let messages = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int);
            let pts = await index_js_1.Primitive.Int.read(_data);
            let ptsCount = await index_js_1.Primitive.Int.read(_data);
            return new Raw.UpdatePinnedChannelMessages({
                pinned: pinned,
                channelId: channelId,
                messages: messages,
                pts: pts,
                ptsCount: ptsCount,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.pinned ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.channelId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.channelId));
            }
            if (this.messages) {
                b.write(index_js_1.Primitive.Vector.write(this.messages, index_js_1.Primitive.Int));
            }
            if (this.pts !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.pts));
            }
            if (this.ptsCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.ptsCount));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdatePinnedChannelMessages = UpdatePinnedChannelMessages;
    class UpdateChat extends index_js_1.TLObject {
        chatId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateChat';
            this.constructorId = 0xf89a6a4e;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['chatId'];
            this.chatId = params.chatId;
        }
        static async read(_data, ..._args) {
            let chatId = await index_js_1.Primitive.Long.read(_data);
            return new Raw.UpdateChat({ chatId: chatId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.chatId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.chatId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateChat = UpdateChat;
    class UpdateGroupCallParticipants extends index_js_1.TLObject {
        call;
        participants;
        version;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateGroupCallParticipants';
            this.constructorId = 0xf2ebdb4e;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['call', 'participants', 'version'];
            this.call = params.call;
            this.participants = params.participants;
            this.version = params.version;
        }
        static async read(_data, ..._args) {
            let call = await index_js_1.TLObject.read(_data);
            let participants = await index_js_1.TLObject.read(_data);
            let version = await index_js_1.Primitive.Int.read(_data);
            return new Raw.UpdateGroupCallParticipants({
                call: call,
                participants: participants,
                version: version,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.call !== undefined) {
                b.write(this.call.write());
            }
            if (this.participants) {
                b.write(index_js_1.Primitive.Vector.write(this.participants));
            }
            if (this.version !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.version));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateGroupCallParticipants = UpdateGroupCallParticipants;
    class UpdateGroupCall extends index_js_1.TLObject {
        chatId;
        call;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateGroupCall';
            this.constructorId = 0x14b24500;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['chatId', 'call'];
            this.chatId = params.chatId;
            this.call = params.call;
        }
        static async read(_data, ..._args) {
            let chatId = await index_js_1.Primitive.Long.read(_data);
            let call = await index_js_1.TLObject.read(_data);
            return new Raw.UpdateGroupCall({ chatId: chatId, call: call });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.chatId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.chatId));
            }
            if (this.call !== undefined) {
                b.write(this.call.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateGroupCall = UpdateGroupCall;
    class UpdatePeerHistoryTTL extends index_js_1.TLObject {
        peer;
        ttlPeriod;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdatePeerHistoryTTL';
            this.constructorId = 0xbb9bb9a5;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['peer', 'ttlPeriod'];
            this.peer = params.peer;
            this.ttlPeriod = params.ttlPeriod;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let peer = await index_js_1.TLObject.read(_data);
            let ttlPeriod = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            return new Raw.UpdatePeerHistoryTTL({ peer: peer, ttlPeriod: ttlPeriod });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.ttlPeriod !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.ttlPeriod !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.ttlPeriod));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdatePeerHistoryTTL = UpdatePeerHistoryTTL;
    class UpdateChatParticipant extends index_js_1.TLObject {
        chatId;
        date;
        actorId;
        userId;
        prevParticipant;
        newParticipant;
        invite;
        qts;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateChatParticipant';
            this.constructorId = 0xd087663a;
            this.subclassOfId = 0x9f89304e;
            this._slots = [
                'chatId',
                'date',
                'actorId',
                'userId',
                'prevParticipant',
                'newParticipant',
                'invite',
                'qts',
            ];
            this.chatId = params.chatId;
            this.date = params.date;
            this.actorId = params.actorId;
            this.userId = params.userId;
            this.prevParticipant = params.prevParticipant;
            this.newParticipant = params.newParticipant;
            this.invite = params.invite;
            this.qts = params.qts;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let chatId = await index_js_1.Primitive.Long.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            let actorId = await index_js_1.Primitive.Long.read(_data);
            let userId = await index_js_1.Primitive.Long.read(_data);
            let prevParticipant = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
            let newParticipant = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : undefined;
            let invite = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
            let qts = await index_js_1.Primitive.Int.read(_data);
            return new Raw.UpdateChatParticipant({
                chatId: chatId,
                date: date,
                actorId: actorId,
                userId: userId,
                prevParticipant: prevParticipant,
                newParticipant: newParticipant,
                invite: invite,
                qts: qts,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.prevParticipant !== undefined ? 1 << 0 : 0;
            flags |= this.newParticipant !== undefined ? 1 << 1 : 0;
            flags |= this.invite !== undefined ? 1 << 2 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.chatId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.chatId));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.actorId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.actorId));
            }
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            if (this.prevParticipant !== undefined) {
                b.write(this.prevParticipant.write());
            }
            if (this.newParticipant !== undefined) {
                b.write(this.newParticipant.write());
            }
            if (this.invite !== undefined) {
                b.write(this.invite.write());
            }
            if (this.qts !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.qts));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateChatParticipant = UpdateChatParticipant;
    class UpdateChannelParticipant extends index_js_1.TLObject {
        viaChatlist;
        channelId;
        date;
        actorId;
        userId;
        prevParticipant;
        newParticipant;
        invite;
        qts;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateChannelParticipant';
            this.constructorId = 0x985d3abb;
            this.subclassOfId = 0x9f89304e;
            this._slots = [
                'viaChatlist',
                'channelId',
                'date',
                'actorId',
                'userId',
                'prevParticipant',
                'newParticipant',
                'invite',
                'qts',
            ];
            this.viaChatlist = params.viaChatlist;
            this.channelId = params.channelId;
            this.date = params.date;
            this.actorId = params.actorId;
            this.userId = params.userId;
            this.prevParticipant = params.prevParticipant;
            this.newParticipant = params.newParticipant;
            this.invite = params.invite;
            this.qts = params.qts;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let viaChatlist = flags & (1 << 3) ? true : false;
            let channelId = await index_js_1.Primitive.Long.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            let actorId = await index_js_1.Primitive.Long.read(_data);
            let userId = await index_js_1.Primitive.Long.read(_data);
            let prevParticipant = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
            let newParticipant = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : undefined;
            let invite = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
            let qts = await index_js_1.Primitive.Int.read(_data);
            return new Raw.UpdateChannelParticipant({
                viaChatlist: viaChatlist,
                channelId: channelId,
                date: date,
                actorId: actorId,
                userId: userId,
                prevParticipant: prevParticipant,
                newParticipant: newParticipant,
                invite: invite,
                qts: qts,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.viaChatlist ? 1 << 3 : 0;
            flags |= this.prevParticipant !== undefined ? 1 << 0 : 0;
            flags |= this.newParticipant !== undefined ? 1 << 1 : 0;
            flags |= this.invite !== undefined ? 1 << 2 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.channelId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.channelId));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.actorId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.actorId));
            }
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            if (this.prevParticipant !== undefined) {
                b.write(this.prevParticipant.write());
            }
            if (this.newParticipant !== undefined) {
                b.write(this.newParticipant.write());
            }
            if (this.invite !== undefined) {
                b.write(this.invite.write());
            }
            if (this.qts !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.qts));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateChannelParticipant = UpdateChannelParticipant;
    class UpdateBotStopped extends index_js_1.TLObject {
        userId;
        date;
        stopped;
        qts;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateBotStopped';
            this.constructorId = 0xc4870a49;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['userId', 'date', 'stopped', 'qts'];
            this.userId = params.userId;
            this.date = params.date;
            this.stopped = params.stopped;
            this.qts = params.qts;
        }
        static async read(_data, ..._args) {
            let userId = await index_js_1.Primitive.Long.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            let stopped = await index_js_1.Primitive.Bool.read(_data);
            let qts = await index_js_1.Primitive.Int.read(_data);
            return new Raw.UpdateBotStopped({ userId: userId, date: date, stopped: stopped, qts: qts });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.stopped !== undefined) {
                b.write(index_js_1.Primitive.Bool.write(this.stopped));
            }
            if (this.qts !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.qts));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateBotStopped = UpdateBotStopped;
    class UpdateGroupCallConnection extends index_js_1.TLObject {
        presentation;
        params;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateGroupCallConnection';
            this.constructorId = 0xb783982;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['presentation', 'params'];
            this.presentation = params.presentation;
            this.params = params.params;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let presentation = flags & (1 << 0) ? true : false;
            let params = await index_js_1.TLObject.read(_data);
            return new Raw.UpdateGroupCallConnection({ presentation: presentation, params: params });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.presentation ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.params !== undefined) {
                b.write(this.params.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateGroupCallConnection = UpdateGroupCallConnection;
    class UpdateBotCommands extends index_js_1.TLObject {
        peer;
        botId;
        commands;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateBotCommands';
            this.constructorId = 0x4d712f2e;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['peer', 'botId', 'commands'];
            this.peer = params.peer;
            this.botId = params.botId;
            this.commands = params.commands;
        }
        static async read(_data, ..._args) {
            let peer = await index_js_1.TLObject.read(_data);
            let botId = await index_js_1.Primitive.Long.read(_data);
            let commands = await index_js_1.TLObject.read(_data);
            return new Raw.UpdateBotCommands({ peer: peer, botId: botId, commands: commands });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.botId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.botId));
            }
            if (this.commands) {
                b.write(index_js_1.Primitive.Vector.write(this.commands));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateBotCommands = UpdateBotCommands;
    class UpdatePendingJoinRequests extends index_js_1.TLObject {
        peer;
        requestsPending;
        recentRequesters;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdatePendingJoinRequests';
            this.constructorId = 0x7063c3db;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['peer', 'requestsPending', 'recentRequesters'];
            this.peer = params.peer;
            this.requestsPending = params.requestsPending;
            this.recentRequesters = params.recentRequesters;
        }
        static async read(_data, ..._args) {
            let peer = await index_js_1.TLObject.read(_data);
            let requestsPending = await index_js_1.Primitive.Int.read(_data);
            let recentRequesters = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Long);
            return new Raw.UpdatePendingJoinRequests({
                peer: peer,
                requestsPending: requestsPending,
                recentRequesters: recentRequesters,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.requestsPending !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.requestsPending));
            }
            if (this.recentRequesters) {
                b.write(index_js_1.Primitive.Vector.write(this.recentRequesters, index_js_1.Primitive.Long));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdatePendingJoinRequests = UpdatePendingJoinRequests;
    class UpdateBotChatInviteRequester extends index_js_1.TLObject {
        peer;
        date;
        userId;
        about;
        invite;
        qts;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateBotChatInviteRequester';
            this.constructorId = 0x11dfa986;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['peer', 'date', 'userId', 'about', 'invite', 'qts'];
            this.peer = params.peer;
            this.date = params.date;
            this.userId = params.userId;
            this.about = params.about;
            this.invite = params.invite;
            this.qts = params.qts;
        }
        static async read(_data, ..._args) {
            let peer = await index_js_1.TLObject.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            let userId = await index_js_1.Primitive.Long.read(_data);
            let about = await index_js_1.Primitive.String.read(_data);
            let invite = await index_js_1.TLObject.read(_data);
            let qts = await index_js_1.Primitive.Int.read(_data);
            return new Raw.UpdateBotChatInviteRequester({
                peer: peer,
                date: date,
                userId: userId,
                about: about,
                invite: invite,
                qts: qts,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            if (this.about !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.about));
            }
            if (this.invite !== undefined) {
                b.write(this.invite.write());
            }
            if (this.qts !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.qts));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateBotChatInviteRequester = UpdateBotChatInviteRequester;
    class UpdateMessageReactions extends index_js_1.TLObject {
        peer;
        msgId;
        topMsgId;
        reactions;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateMessageReactions';
            this.constructorId = 0x5e1b3cb8;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['peer', 'msgId', 'topMsgId', 'reactions'];
            this.peer = params.peer;
            this.msgId = params.msgId;
            this.topMsgId = params.topMsgId;
            this.reactions = params.reactions;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let peer = await index_js_1.TLObject.read(_data);
            let msgId = await index_js_1.Primitive.Int.read(_data);
            let topMsgId = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let reactions = await index_js_1.TLObject.read(_data);
            return new Raw.UpdateMessageReactions({
                peer: peer,
                msgId: msgId,
                topMsgId: topMsgId,
                reactions: reactions,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.topMsgId !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.msgId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.msgId));
            }
            if (this.topMsgId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.topMsgId));
            }
            if (this.reactions !== undefined) {
                b.write(this.reactions.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateMessageReactions = UpdateMessageReactions;
    class UpdateAttachMenuBots extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'UpdateAttachMenuBots';
            this.constructorId = 0x17b7a20b;
            this.subclassOfId = 0x9f89304e;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.UpdateAttachMenuBots();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateAttachMenuBots = UpdateAttachMenuBots;
    class UpdateWebViewResultSent extends index_js_1.TLObject {
        queryId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateWebViewResultSent';
            this.constructorId = 0x1592b79d;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['queryId'];
            this.queryId = params.queryId;
        }
        static async read(_data, ..._args) {
            let queryId = await index_js_1.Primitive.Long.read(_data);
            return new Raw.UpdateWebViewResultSent({ queryId: queryId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.queryId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.queryId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateWebViewResultSent = UpdateWebViewResultSent;
    class UpdateBotMenuButton extends index_js_1.TLObject {
        botId;
        button;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateBotMenuButton';
            this.constructorId = 0x14b85813;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['botId', 'button'];
            this.botId = params.botId;
            this.button = params.button;
        }
        static async read(_data, ..._args) {
            let botId = await index_js_1.Primitive.Long.read(_data);
            let button = await index_js_1.TLObject.read(_data);
            return new Raw.UpdateBotMenuButton({ botId: botId, button: button });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.botId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.botId));
            }
            if (this.button !== undefined) {
                b.write(this.button.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateBotMenuButton = UpdateBotMenuButton;
    class UpdateSavedRingtones extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'UpdateSavedRingtones';
            this.constructorId = 0x74d8be99;
            this.subclassOfId = 0x9f89304e;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.UpdateSavedRingtones();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateSavedRingtones = UpdateSavedRingtones;
    class UpdateTranscribedAudio extends index_js_1.TLObject {
        pending;
        peer;
        msgId;
        transcriptionId;
        text;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateTranscribedAudio';
            this.constructorId = 0x84cd5a;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['pending', 'peer', 'msgId', 'transcriptionId', 'text'];
            this.pending = params.pending;
            this.peer = params.peer;
            this.msgId = params.msgId;
            this.transcriptionId = params.transcriptionId;
            this.text = params.text;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let pending = flags & (1 << 0) ? true : false;
            let peer = await index_js_1.TLObject.read(_data);
            let msgId = await index_js_1.Primitive.Int.read(_data);
            let transcriptionId = await index_js_1.Primitive.Long.read(_data);
            let text = await index_js_1.Primitive.String.read(_data);
            return new Raw.UpdateTranscribedAudio({
                pending: pending,
                peer: peer,
                msgId: msgId,
                transcriptionId: transcriptionId,
                text: text,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.pending ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.msgId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.msgId));
            }
            if (this.transcriptionId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.transcriptionId));
            }
            if (this.text !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.text));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateTranscribedAudio = UpdateTranscribedAudio;
    class UpdateReadFeaturedEmojiStickers extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'UpdateReadFeaturedEmojiStickers';
            this.constructorId = 0xfb4c496c;
            this.subclassOfId = 0x9f89304e;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.UpdateReadFeaturedEmojiStickers();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateReadFeaturedEmojiStickers = UpdateReadFeaturedEmojiStickers;
    class UpdateUserEmojiStatus extends index_js_1.TLObject {
        userId;
        emojiStatus;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateUserEmojiStatus';
            this.constructorId = 0x28373599;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['userId', 'emojiStatus'];
            this.userId = params.userId;
            this.emojiStatus = params.emojiStatus;
        }
        static async read(_data, ..._args) {
            let userId = await index_js_1.Primitive.Long.read(_data);
            let emojiStatus = await index_js_1.TLObject.read(_data);
            return new Raw.UpdateUserEmojiStatus({ userId: userId, emojiStatus: emojiStatus });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            if (this.emojiStatus !== undefined) {
                b.write(this.emojiStatus.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateUserEmojiStatus = UpdateUserEmojiStatus;
    class UpdateRecentEmojiStatuses extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'UpdateRecentEmojiStatuses';
            this.constructorId = 0x30f443db;
            this.subclassOfId = 0x9f89304e;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.UpdateRecentEmojiStatuses();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateRecentEmojiStatuses = UpdateRecentEmojiStatuses;
    class UpdateRecentReactions extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'UpdateRecentReactions';
            this.constructorId = 0x6f7863f4;
            this.subclassOfId = 0x9f89304e;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.UpdateRecentReactions();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateRecentReactions = UpdateRecentReactions;
    class UpdateMoveStickerSetToTop extends index_js_1.TLObject {
        masks;
        emojis;
        stickerset;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateMoveStickerSetToTop';
            this.constructorId = 0x86fccf85;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['masks', 'emojis', 'stickerset'];
            this.masks = params.masks;
            this.emojis = params.emojis;
            this.stickerset = params.stickerset;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let masks = flags & (1 << 0) ? true : false;
            let emojis = flags & (1 << 1) ? true : false;
            let stickerset = await index_js_1.Primitive.Long.read(_data);
            return new Raw.UpdateMoveStickerSetToTop({
                masks: masks,
                emojis: emojis,
                stickerset: stickerset,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.masks ? 1 << 0 : 0;
            flags |= this.emojis ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.stickerset !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.stickerset));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateMoveStickerSetToTop = UpdateMoveStickerSetToTop;
    class UpdateMessageExtendedMedia extends index_js_1.TLObject {
        peer;
        msgId;
        extendedMedia;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateMessageExtendedMedia';
            this.constructorId = 0x5a73a98c;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['peer', 'msgId', 'extendedMedia'];
            this.peer = params.peer;
            this.msgId = params.msgId;
            this.extendedMedia = params.extendedMedia;
        }
        static async read(_data, ..._args) {
            let peer = await index_js_1.TLObject.read(_data);
            let msgId = await index_js_1.Primitive.Int.read(_data);
            let extendedMedia = await index_js_1.TLObject.read(_data);
            return new Raw.UpdateMessageExtendedMedia({
                peer: peer,
                msgId: msgId,
                extendedMedia: extendedMedia,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.msgId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.msgId));
            }
            if (this.extendedMedia !== undefined) {
                b.write(this.extendedMedia.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateMessageExtendedMedia = UpdateMessageExtendedMedia;
    class UpdateChannelPinnedTopic extends index_js_1.TLObject {
        pinned;
        channelId;
        topicId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateChannelPinnedTopic';
            this.constructorId = 0x192efbe3;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['pinned', 'channelId', 'topicId'];
            this.pinned = params.pinned;
            this.channelId = params.channelId;
            this.topicId = params.topicId;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let pinned = flags & (1 << 0) ? true : false;
            let channelId = await index_js_1.Primitive.Long.read(_data);
            let topicId = await index_js_1.Primitive.Int.read(_data);
            return new Raw.UpdateChannelPinnedTopic({
                pinned: pinned,
                channelId: channelId,
                topicId: topicId,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.pinned ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.channelId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.channelId));
            }
            if (this.topicId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.topicId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateChannelPinnedTopic = UpdateChannelPinnedTopic;
    class UpdateChannelPinnedTopics extends index_js_1.TLObject {
        channelId;
        order;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateChannelPinnedTopics';
            this.constructorId = 0xfe198602;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['channelId', 'order'];
            this.channelId = params.channelId;
            this.order = params.order;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let channelId = await index_js_1.Primitive.Long.read(_data);
            let order = flags & (1 << 0) ? await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int) : [];
            return new Raw.UpdateChannelPinnedTopics({ channelId: channelId, order: order });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.order ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.channelId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.channelId));
            }
            if (this.order) {
                b.write(index_js_1.Primitive.Vector.write(this.order, index_js_1.Primitive.Int));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateChannelPinnedTopics = UpdateChannelPinnedTopics;
    class UpdateUser extends index_js_1.TLObject {
        userId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateUser';
            this.constructorId = 0x20529438;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['userId'];
            this.userId = params.userId;
        }
        static async read(_data, ..._args) {
            let userId = await index_js_1.Primitive.Long.read(_data);
            return new Raw.UpdateUser({ userId: userId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateUser = UpdateUser;
    class UpdateAutoSaveSettings extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'UpdateAutoSaveSettings';
            this.constructorId = 0xec05b097;
            this.subclassOfId = 0x9f89304e;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.UpdateAutoSaveSettings();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateAutoSaveSettings = UpdateAutoSaveSettings;
    class UpdateStory extends index_js_1.TLObject {
        peer;
        story;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateStory';
            this.constructorId = 0x75b3b798;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['peer', 'story'];
            this.peer = params.peer;
            this.story = params.story;
        }
        static async read(_data, ..._args) {
            let peer = await index_js_1.TLObject.read(_data);
            let story = await index_js_1.TLObject.read(_data);
            return new Raw.UpdateStory({ peer: peer, story: story });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.story !== undefined) {
                b.write(this.story.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateStory = UpdateStory;
    class UpdateReadStories extends index_js_1.TLObject {
        peer;
        maxId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateReadStories';
            this.constructorId = 0xf74e932b;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['peer', 'maxId'];
            this.peer = params.peer;
            this.maxId = params.maxId;
        }
        static async read(_data, ..._args) {
            let peer = await index_js_1.TLObject.read(_data);
            let maxId = await index_js_1.Primitive.Int.read(_data);
            return new Raw.UpdateReadStories({ peer: peer, maxId: maxId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.maxId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.maxId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateReadStories = UpdateReadStories;
    class UpdateStoryID extends index_js_1.TLObject {
        id;
        randomId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateStoryID';
            this.constructorId = 0x1bf335b9;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['id', 'randomId'];
            this.id = params.id;
            this.randomId = params.randomId;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.Int.read(_data);
            let randomId = await index_js_1.Primitive.Long.read(_data);
            return new Raw.UpdateStoryID({ id: id, randomId: randomId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.id));
            }
            if (this.randomId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.randomId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateStoryID = UpdateStoryID;
    class UpdateStoriesStealthMode extends index_js_1.TLObject {
        stealthMode;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateStoriesStealthMode';
            this.constructorId = 0x2c084dc1;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['stealthMode'];
            this.stealthMode = params.stealthMode;
        }
        static async read(_data, ..._args) {
            let stealthMode = await index_js_1.TLObject.read(_data);
            return new Raw.UpdateStoriesStealthMode({ stealthMode: stealthMode });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.stealthMode !== undefined) {
                b.write(this.stealthMode.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateStoriesStealthMode = UpdateStoriesStealthMode;
    class UpdateSentStoryReaction extends index_js_1.TLObject {
        peer;
        storyId;
        reaction;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateSentStoryReaction';
            this.constructorId = 0x7d627683;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['peer', 'storyId', 'reaction'];
            this.peer = params.peer;
            this.storyId = params.storyId;
            this.reaction = params.reaction;
        }
        static async read(_data, ..._args) {
            let peer = await index_js_1.TLObject.read(_data);
            let storyId = await index_js_1.Primitive.Int.read(_data);
            let reaction = await index_js_1.TLObject.read(_data);
            return new Raw.UpdateSentStoryReaction({ peer: peer, storyId: storyId, reaction: reaction });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.storyId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.storyId));
            }
            if (this.reaction !== undefined) {
                b.write(this.reaction.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateSentStoryReaction = UpdateSentStoryReaction;
    class UpdateBotChatBoost extends index_js_1.TLObject {
        peer;
        boost;
        qts;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateBotChatBoost';
            this.constructorId = 0x904dd49c;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['peer', 'boost', 'qts'];
            this.peer = params.peer;
            this.boost = params.boost;
            this.qts = params.qts;
        }
        static async read(_data, ..._args) {
            let peer = await index_js_1.TLObject.read(_data);
            let boost = await index_js_1.TLObject.read(_data);
            let qts = await index_js_1.Primitive.Int.read(_data);
            return new Raw.UpdateBotChatBoost({ peer: peer, boost: boost, qts: qts });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.boost !== undefined) {
                b.write(this.boost.write());
            }
            if (this.qts !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.qts));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateBotChatBoost = UpdateBotChatBoost;
    class UpdateChannelViewForumAsMessages extends index_js_1.TLObject {
        channelId;
        enabled;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateChannelViewForumAsMessages';
            this.constructorId = 0x7b68920;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['channelId', 'enabled'];
            this.channelId = params.channelId;
            this.enabled = params.enabled;
        }
        static async read(_data, ..._args) {
            let channelId = await index_js_1.Primitive.Long.read(_data);
            let enabled = await index_js_1.Primitive.Bool.read(_data);
            return new Raw.UpdateChannelViewForumAsMessages({ channelId: channelId, enabled: enabled });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.channelId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.channelId));
            }
            if (this.enabled !== undefined) {
                b.write(index_js_1.Primitive.Bool.write(this.enabled));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateChannelViewForumAsMessages = UpdateChannelViewForumAsMessages;
    class UpdatePeerWallpaper extends index_js_1.TLObject {
        wallpaperOverridden;
        peer;
        wallpaper;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdatePeerWallpaper';
            this.constructorId = 0xae3f101d;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['wallpaperOverridden', 'peer', 'wallpaper'];
            this.wallpaperOverridden = params.wallpaperOverridden;
            this.peer = params.peer;
            this.wallpaper = params.wallpaper;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let wallpaperOverridden = flags & (1 << 1) ? true : false;
            let peer = await index_js_1.TLObject.read(_data);
            let wallpaper = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.UpdatePeerWallpaper({
                wallpaperOverridden: wallpaperOverridden,
                peer: peer,
                wallpaper: wallpaper,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.wallpaperOverridden ? 1 << 1 : 0;
            flags |= this.wallpaper !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.wallpaper !== undefined) {
                b.write(this.wallpaper.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdatePeerWallpaper = UpdatePeerWallpaper;
    class UpdateBotMessageReaction extends index_js_1.TLObject {
        peer;
        msgId;
        date;
        actor;
        oldReactions;
        newReactions;
        qts;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateBotMessageReaction';
            this.constructorId = 0xac21d3ce;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['peer', 'msgId', 'date', 'actor', 'oldReactions', 'newReactions', 'qts'];
            this.peer = params.peer;
            this.msgId = params.msgId;
            this.date = params.date;
            this.actor = params.actor;
            this.oldReactions = params.oldReactions;
            this.newReactions = params.newReactions;
            this.qts = params.qts;
        }
        static async read(_data, ..._args) {
            let peer = await index_js_1.TLObject.read(_data);
            let msgId = await index_js_1.Primitive.Int.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            let actor = await index_js_1.TLObject.read(_data);
            let oldReactions = await index_js_1.TLObject.read(_data);
            let newReactions = await index_js_1.TLObject.read(_data);
            let qts = await index_js_1.Primitive.Int.read(_data);
            return new Raw.UpdateBotMessageReaction({
                peer: peer,
                msgId: msgId,
                date: date,
                actor: actor,
                oldReactions: oldReactions,
                newReactions: newReactions,
                qts: qts,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.msgId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.msgId));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.actor !== undefined) {
                b.write(this.actor.write());
            }
            if (this.oldReactions) {
                b.write(index_js_1.Primitive.Vector.write(this.oldReactions));
            }
            if (this.newReactions) {
                b.write(index_js_1.Primitive.Vector.write(this.newReactions));
            }
            if (this.qts !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.qts));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateBotMessageReaction = UpdateBotMessageReaction;
    class UpdateBotMessageReactions extends index_js_1.TLObject {
        peer;
        msgId;
        date;
        reactions;
        qts;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateBotMessageReactions';
            this.constructorId = 0x9cb7759;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['peer', 'msgId', 'date', 'reactions', 'qts'];
            this.peer = params.peer;
            this.msgId = params.msgId;
            this.date = params.date;
            this.reactions = params.reactions;
            this.qts = params.qts;
        }
        static async read(_data, ..._args) {
            let peer = await index_js_1.TLObject.read(_data);
            let msgId = await index_js_1.Primitive.Int.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            let reactions = await index_js_1.TLObject.read(_data);
            let qts = await index_js_1.Primitive.Int.read(_data);
            return new Raw.UpdateBotMessageReactions({
                peer: peer,
                msgId: msgId,
                date: date,
                reactions: reactions,
                qts: qts,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.msgId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.msgId));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.reactions) {
                b.write(index_js_1.Primitive.Vector.write(this.reactions));
            }
            if (this.qts !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.qts));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateBotMessageReactions = UpdateBotMessageReactions;
    class UpdateSavedDialogPinned extends index_js_1.TLObject {
        pinned;
        peer;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateSavedDialogPinned';
            this.constructorId = 0xaeaf9e74;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['pinned', 'peer'];
            this.pinned = params.pinned;
            this.peer = params.peer;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let pinned = flags & (1 << 0) ? true : false;
            let peer = await index_js_1.TLObject.read(_data);
            return new Raw.UpdateSavedDialogPinned({ pinned: pinned, peer: peer });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.pinned ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateSavedDialogPinned = UpdateSavedDialogPinned;
    class UpdatePinnedSavedDialogs extends index_js_1.TLObject {
        order;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdatePinnedSavedDialogs';
            this.constructorId = 0x686c85a6;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['order'];
            this.order = params.order;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let order = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : [];
            return new Raw.UpdatePinnedSavedDialogs({ order: order });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.order ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.order) {
                b.write(index_js_1.Primitive.Vector.write(this.order));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdatePinnedSavedDialogs = UpdatePinnedSavedDialogs;
    class UpdateSavedReactionTags extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'UpdateSavedReactionTags';
            this.constructorId = 0x39c67432;
            this.subclassOfId = 0x9f89304e;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.UpdateSavedReactionTags();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateSavedReactionTags = UpdateSavedReactionTags;
    class UpdateSmsJob extends index_js_1.TLObject {
        jobId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateSmsJob';
            this.constructorId = 0xf16269d4;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['jobId'];
            this.jobId = params.jobId;
        }
        static async read(_data, ..._args) {
            let jobId = await index_js_1.Primitive.String.read(_data);
            return new Raw.UpdateSmsJob({ jobId: jobId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.jobId !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.jobId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateSmsJob = UpdateSmsJob;
    class UpdateQuickReplies extends index_js_1.TLObject {
        quickReplies;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateQuickReplies';
            this.constructorId = 0xf9470ab2;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['quickReplies'];
            this.quickReplies = params.quickReplies;
        }
        static async read(_data, ..._args) {
            let quickReplies = await index_js_1.TLObject.read(_data);
            return new Raw.UpdateQuickReplies({ quickReplies: quickReplies });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.quickReplies) {
                b.write(index_js_1.Primitive.Vector.write(this.quickReplies));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateQuickReplies = UpdateQuickReplies;
    class UpdateNewQuickReply extends index_js_1.TLObject {
        quickReply;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateNewQuickReply';
            this.constructorId = 0xf53da717;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['quickReply'];
            this.quickReply = params.quickReply;
        }
        static async read(_data, ..._args) {
            let quickReply = await index_js_1.TLObject.read(_data);
            return new Raw.UpdateNewQuickReply({ quickReply: quickReply });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.quickReply !== undefined) {
                b.write(this.quickReply.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateNewQuickReply = UpdateNewQuickReply;
    class UpdateDeleteQuickReply extends index_js_1.TLObject {
        shortcutId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateDeleteQuickReply';
            this.constructorId = 0x53e6f1ec;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['shortcutId'];
            this.shortcutId = params.shortcutId;
        }
        static async read(_data, ..._args) {
            let shortcutId = await index_js_1.Primitive.Int.read(_data);
            return new Raw.UpdateDeleteQuickReply({ shortcutId: shortcutId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.shortcutId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.shortcutId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateDeleteQuickReply = UpdateDeleteQuickReply;
    class UpdateQuickReplyMessage extends index_js_1.TLObject {
        message;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateQuickReplyMessage';
            this.constructorId = 0x3e050d0f;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['message'];
            this.message = params.message;
        }
        static async read(_data, ..._args) {
            let message = await index_js_1.TLObject.read(_data);
            return new Raw.UpdateQuickReplyMessage({ message: message });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.message !== undefined) {
                b.write(this.message.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateQuickReplyMessage = UpdateQuickReplyMessage;
    class UpdateDeleteQuickReplyMessages extends index_js_1.TLObject {
        shortcutId;
        messages;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateDeleteQuickReplyMessages';
            this.constructorId = 0x566fe7cd;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['shortcutId', 'messages'];
            this.shortcutId = params.shortcutId;
            this.messages = params.messages;
        }
        static async read(_data, ..._args) {
            let shortcutId = await index_js_1.Primitive.Int.read(_data);
            let messages = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int);
            return new Raw.UpdateDeleteQuickReplyMessages({ shortcutId: shortcutId, messages: messages });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.shortcutId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.shortcutId));
            }
            if (this.messages) {
                b.write(index_js_1.Primitive.Vector.write(this.messages, index_js_1.Primitive.Int));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateDeleteQuickReplyMessages = UpdateDeleteQuickReplyMessages;
    class UpdateBotBusinessConnect extends index_js_1.TLObject {
        connection;
        qts;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateBotBusinessConnect';
            this.constructorId = 0x8ae5c97a;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['connection', 'qts'];
            this.connection = params.connection;
            this.qts = params.qts;
        }
        static async read(_data, ..._args) {
            let connection = await index_js_1.TLObject.read(_data);
            let qts = await index_js_1.Primitive.Int.read(_data);
            return new Raw.UpdateBotBusinessConnect({ connection: connection, qts: qts });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.connection !== undefined) {
                b.write(this.connection.write());
            }
            if (this.qts !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.qts));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateBotBusinessConnect = UpdateBotBusinessConnect;
    class UpdateBotNewBusinessMessage extends index_js_1.TLObject {
        connectionId;
        message;
        replyToMessage;
        qts;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateBotNewBusinessMessage';
            this.constructorId = 0x9ddb347c;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['connectionId', 'message', 'replyToMessage', 'qts'];
            this.connectionId = params.connectionId;
            this.message = params.message;
            this.replyToMessage = params.replyToMessage;
            this.qts = params.qts;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let connectionId = await index_js_1.Primitive.String.read(_data);
            let message = await index_js_1.TLObject.read(_data);
            let replyToMessage = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
            let qts = await index_js_1.Primitive.Int.read(_data);
            return new Raw.UpdateBotNewBusinessMessage({
                connectionId: connectionId,
                message: message,
                replyToMessage: replyToMessage,
                qts: qts,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.replyToMessage !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.connectionId !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.connectionId));
            }
            if (this.message !== undefined) {
                b.write(this.message.write());
            }
            if (this.replyToMessage !== undefined) {
                b.write(this.replyToMessage.write());
            }
            if (this.qts !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.qts));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateBotNewBusinessMessage = UpdateBotNewBusinessMessage;
    class UpdateBotEditBusinessMessage extends index_js_1.TLObject {
        connectionId;
        message;
        replyToMessage;
        qts;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateBotEditBusinessMessage';
            this.constructorId = 0x7df587c;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['connectionId', 'message', 'replyToMessage', 'qts'];
            this.connectionId = params.connectionId;
            this.message = params.message;
            this.replyToMessage = params.replyToMessage;
            this.qts = params.qts;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let connectionId = await index_js_1.Primitive.String.read(_data);
            let message = await index_js_1.TLObject.read(_data);
            let replyToMessage = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
            let qts = await index_js_1.Primitive.Int.read(_data);
            return new Raw.UpdateBotEditBusinessMessage({
                connectionId: connectionId,
                message: message,
                replyToMessage: replyToMessage,
                qts: qts,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.replyToMessage !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.connectionId !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.connectionId));
            }
            if (this.message !== undefined) {
                b.write(this.message.write());
            }
            if (this.replyToMessage !== undefined) {
                b.write(this.replyToMessage.write());
            }
            if (this.qts !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.qts));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateBotEditBusinessMessage = UpdateBotEditBusinessMessage;
    class UpdateBotDeleteBusinessMessage extends index_js_1.TLObject {
        connectionId;
        peer;
        messages;
        qts;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateBotDeleteBusinessMessage';
            this.constructorId = 0xa02a982e;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['connectionId', 'peer', 'messages', 'qts'];
            this.connectionId = params.connectionId;
            this.peer = params.peer;
            this.messages = params.messages;
            this.qts = params.qts;
        }
        static async read(_data, ..._args) {
            let connectionId = await index_js_1.Primitive.String.read(_data);
            let peer = await index_js_1.TLObject.read(_data);
            let messages = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int);
            let qts = await index_js_1.Primitive.Int.read(_data);
            return new Raw.UpdateBotDeleteBusinessMessage({
                connectionId: connectionId,
                peer: peer,
                messages: messages,
                qts: qts,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.connectionId !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.connectionId));
            }
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.messages) {
                b.write(index_js_1.Primitive.Vector.write(this.messages, index_js_1.Primitive.Int));
            }
            if (this.qts !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.qts));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateBotDeleteBusinessMessage = UpdateBotDeleteBusinessMessage;
    class UpdateNewStoryReaction extends index_js_1.TLObject {
        storyId;
        peer;
        reaction;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateNewStoryReaction';
            this.constructorId = 0x1824e40b;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['storyId', 'peer', 'reaction'];
            this.storyId = params.storyId;
            this.peer = params.peer;
            this.reaction = params.reaction;
        }
        static async read(_data, ..._args) {
            let storyId = await index_js_1.Primitive.Int.read(_data);
            let peer = await index_js_1.TLObject.read(_data);
            let reaction = await index_js_1.TLObject.read(_data);
            return new Raw.UpdateNewStoryReaction({ storyId: storyId, peer: peer, reaction: reaction });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.storyId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.storyId));
            }
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.reaction !== undefined) {
                b.write(this.reaction.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateNewStoryReaction = UpdateNewStoryReaction;
    class UpdateBroadcastRevenueTransactions extends index_js_1.TLObject {
        peer;
        balances;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateBroadcastRevenueTransactions';
            this.constructorId = 0xdfd961f5;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['peer', 'balances'];
            this.peer = params.peer;
            this.balances = params.balances;
        }
        static async read(_data, ..._args) {
            let peer = await index_js_1.TLObject.read(_data);
            let balances = await index_js_1.TLObject.read(_data);
            return new Raw.UpdateBroadcastRevenueTransactions({ peer: peer, balances: balances });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.balances !== undefined) {
                b.write(this.balances.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateBroadcastRevenueTransactions = UpdateBroadcastRevenueTransactions;
    class UpdateStarsBalance extends index_js_1.TLObject {
        balance;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateStarsBalance';
            this.constructorId = 0xfb85198;
            this.subclassOfId = 0x9f89304e;
            this._slots = ['balance'];
            this.balance = params.balance;
        }
        static async read(_data, ..._args) {
            let balance = await index_js_1.Primitive.Long.read(_data);
            return new Raw.UpdateStarsBalance({ balance: balance });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.balance !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.balance));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateStarsBalance = UpdateStarsBalance;
    class UpdatesTooLong extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'UpdatesTooLong';
            this.constructorId = 0xe317af7e;
            this.subclassOfId = 0x8af52aac;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.UpdatesTooLong();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdatesTooLong = UpdatesTooLong;
    class UpdateShortMessage extends index_js_1.TLObject {
        out;
        mentioned;
        mediaUnread;
        silent;
        id;
        userId;
        message;
        pts;
        ptsCount;
        date;
        fwdFrom;
        viaBotId;
        replyTo;
        entities;
        ttlPeriod;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateShortMessage';
            this.constructorId = 0x313bc7f8;
            this.subclassOfId = 0x8af52aac;
            this._slots = [
                'out',
                'mentioned',
                'mediaUnread',
                'silent',
                'id',
                'userId',
                'message',
                'pts',
                'ptsCount',
                'date',
                'fwdFrom',
                'viaBotId',
                'replyTo',
                'entities',
                'ttlPeriod',
            ];
            this.out = params.out;
            this.mentioned = params.mentioned;
            this.mediaUnread = params.mediaUnread;
            this.silent = params.silent;
            this.id = params.id;
            this.userId = params.userId;
            this.message = params.message;
            this.pts = params.pts;
            this.ptsCount = params.ptsCount;
            this.date = params.date;
            this.fwdFrom = params.fwdFrom;
            this.viaBotId = params.viaBotId;
            this.replyTo = params.replyTo;
            this.entities = params.entities;
            this.ttlPeriod = params.ttlPeriod;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let out = flags & (1 << 1) ? true : false;
            let mentioned = flags & (1 << 4) ? true : false;
            let mediaUnread = flags & (1 << 5) ? true : false;
            let silent = flags & (1 << 13) ? true : false;
            let id = await index_js_1.Primitive.Int.read(_data);
            let userId = await index_js_1.Primitive.Long.read(_data);
            let message = await index_js_1.Primitive.String.read(_data);
            let pts = await index_js_1.Primitive.Int.read(_data);
            let ptsCount = await index_js_1.Primitive.Int.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            let fwdFrom = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
            let viaBotId = flags & (1 << 11) ? await index_js_1.Primitive.Long.read(_data) : undefined;
            let replyTo = flags & (1 << 3) ? await index_js_1.TLObject.read(_data) : undefined;
            let entities = flags & (1 << 7) ? await index_js_1.TLObject.read(_data) : [];
            let ttlPeriod = flags & (1 << 25) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            return new Raw.UpdateShortMessage({
                out: out,
                mentioned: mentioned,
                mediaUnread: mediaUnread,
                silent: silent,
                id: id,
                userId: userId,
                message: message,
                pts: pts,
                ptsCount: ptsCount,
                date: date,
                fwdFrom: fwdFrom,
                viaBotId: viaBotId,
                replyTo: replyTo,
                entities: entities,
                ttlPeriod: ttlPeriod,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.out ? 1 << 1 : 0;
            flags |= this.mentioned ? 1 << 4 : 0;
            flags |= this.mediaUnread ? 1 << 5 : 0;
            flags |= this.silent ? 1 << 13 : 0;
            flags |= this.fwdFrom !== undefined ? 1 << 2 : 0;
            flags |= this.viaBotId !== undefined ? 1 << 11 : 0;
            flags |= this.replyTo !== undefined ? 1 << 3 : 0;
            flags |= this.entities ? 1 << 7 : 0;
            flags |= this.ttlPeriod !== undefined ? 1 << 25 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.id));
            }
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            if (this.message !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.message));
            }
            if (this.pts !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.pts));
            }
            if (this.ptsCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.ptsCount));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.fwdFrom !== undefined) {
                b.write(this.fwdFrom.write());
            }
            if (this.viaBotId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.viaBotId));
            }
            if (this.replyTo !== undefined) {
                b.write(this.replyTo.write());
            }
            if (this.entities) {
                b.write(index_js_1.Primitive.Vector.write(this.entities));
            }
            if (this.ttlPeriod !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.ttlPeriod));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateShortMessage = UpdateShortMessage;
    class UpdateShortChatMessage extends index_js_1.TLObject {
        out;
        mentioned;
        mediaUnread;
        silent;
        id;
        fromId;
        chatId;
        message;
        pts;
        ptsCount;
        date;
        fwdFrom;
        viaBotId;
        replyTo;
        entities;
        ttlPeriod;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateShortChatMessage';
            this.constructorId = 0x4d6deea5;
            this.subclassOfId = 0x8af52aac;
            this._slots = [
                'out',
                'mentioned',
                'mediaUnread',
                'silent',
                'id',
                'fromId',
                'chatId',
                'message',
                'pts',
                'ptsCount',
                'date',
                'fwdFrom',
                'viaBotId',
                'replyTo',
                'entities',
                'ttlPeriod',
            ];
            this.out = params.out;
            this.mentioned = params.mentioned;
            this.mediaUnread = params.mediaUnread;
            this.silent = params.silent;
            this.id = params.id;
            this.fromId = params.fromId;
            this.chatId = params.chatId;
            this.message = params.message;
            this.pts = params.pts;
            this.ptsCount = params.ptsCount;
            this.date = params.date;
            this.fwdFrom = params.fwdFrom;
            this.viaBotId = params.viaBotId;
            this.replyTo = params.replyTo;
            this.entities = params.entities;
            this.ttlPeriod = params.ttlPeriod;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let out = flags & (1 << 1) ? true : false;
            let mentioned = flags & (1 << 4) ? true : false;
            let mediaUnread = flags & (1 << 5) ? true : false;
            let silent = flags & (1 << 13) ? true : false;
            let id = await index_js_1.Primitive.Int.read(_data);
            let fromId = await index_js_1.Primitive.Long.read(_data);
            let chatId = await index_js_1.Primitive.Long.read(_data);
            let message = await index_js_1.Primitive.String.read(_data);
            let pts = await index_js_1.Primitive.Int.read(_data);
            let ptsCount = await index_js_1.Primitive.Int.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            let fwdFrom = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
            let viaBotId = flags & (1 << 11) ? await index_js_1.Primitive.Long.read(_data) : undefined;
            let replyTo = flags & (1 << 3) ? await index_js_1.TLObject.read(_data) : undefined;
            let entities = flags & (1 << 7) ? await index_js_1.TLObject.read(_data) : [];
            let ttlPeriod = flags & (1 << 25) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            return new Raw.UpdateShortChatMessage({
                out: out,
                mentioned: mentioned,
                mediaUnread: mediaUnread,
                silent: silent,
                id: id,
                fromId: fromId,
                chatId: chatId,
                message: message,
                pts: pts,
                ptsCount: ptsCount,
                date: date,
                fwdFrom: fwdFrom,
                viaBotId: viaBotId,
                replyTo: replyTo,
                entities: entities,
                ttlPeriod: ttlPeriod,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.out ? 1 << 1 : 0;
            flags |= this.mentioned ? 1 << 4 : 0;
            flags |= this.mediaUnread ? 1 << 5 : 0;
            flags |= this.silent ? 1 << 13 : 0;
            flags |= this.fwdFrom !== undefined ? 1 << 2 : 0;
            flags |= this.viaBotId !== undefined ? 1 << 11 : 0;
            flags |= this.replyTo !== undefined ? 1 << 3 : 0;
            flags |= this.entities ? 1 << 7 : 0;
            flags |= this.ttlPeriod !== undefined ? 1 << 25 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.id));
            }
            if (this.fromId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.fromId));
            }
            if (this.chatId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.chatId));
            }
            if (this.message !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.message));
            }
            if (this.pts !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.pts));
            }
            if (this.ptsCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.ptsCount));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.fwdFrom !== undefined) {
                b.write(this.fwdFrom.write());
            }
            if (this.viaBotId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.viaBotId));
            }
            if (this.replyTo !== undefined) {
                b.write(this.replyTo.write());
            }
            if (this.entities) {
                b.write(index_js_1.Primitive.Vector.write(this.entities));
            }
            if (this.ttlPeriod !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.ttlPeriod));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateShortChatMessage = UpdateShortChatMessage;
    class UpdateShort extends index_js_1.TLObject {
        update;
        date;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateShort';
            this.constructorId = 0x78d4dec1;
            this.subclassOfId = 0x8af52aac;
            this._slots = ['update', 'date'];
            this.update = params.update;
            this.date = params.date;
        }
        static async read(_data, ..._args) {
            let update = await index_js_1.TLObject.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            return new Raw.UpdateShort({ update: update, date: date });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.update !== undefined) {
                b.write(this.update.write());
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateShort = UpdateShort;
    class UpdatesCombined extends index_js_1.TLObject {
        updates;
        users;
        chats;
        date;
        seqStart;
        seq;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdatesCombined';
            this.constructorId = 0x725b04c3;
            this.subclassOfId = 0x8af52aac;
            this._slots = ['updates', 'users', 'chats', 'date', 'seqStart', 'seq'];
            this.updates = params.updates;
            this.users = params.users;
            this.chats = params.chats;
            this.date = params.date;
            this.seqStart = params.seqStart;
            this.seq = params.seq;
        }
        static async read(_data, ..._args) {
            let updates = await index_js_1.TLObject.read(_data);
            let users = await index_js_1.TLObject.read(_data);
            let chats = await index_js_1.TLObject.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            let seqStart = await index_js_1.Primitive.Int.read(_data);
            let seq = await index_js_1.Primitive.Int.read(_data);
            return new Raw.UpdatesCombined({
                updates: updates,
                users: users,
                chats: chats,
                date: date,
                seqStart: seqStart,
                seq: seq,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.updates) {
                b.write(index_js_1.Primitive.Vector.write(this.updates));
            }
            if (this.users) {
                b.write(index_js_1.Primitive.Vector.write(this.users));
            }
            if (this.chats) {
                b.write(index_js_1.Primitive.Vector.write(this.chats));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.seqStart !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.seqStart));
            }
            if (this.seq !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.seq));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdatesCombined = UpdatesCombined;
    class Updates extends index_js_1.TLObject {
        updates;
        users;
        chats;
        date;
        seq;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'Updates';
            this.constructorId = 0x74ae4240;
            this.subclassOfId = 0x8af52aac;
            this._slots = ['updates', 'users', 'chats', 'date', 'seq'];
            this.updates = params.updates;
            this.users = params.users;
            this.chats = params.chats;
            this.date = params.date;
            this.seq = params.seq;
        }
        static async read(_data, ..._args) {
            let updates = await index_js_1.TLObject.read(_data);
            let users = await index_js_1.TLObject.read(_data);
            let chats = await index_js_1.TLObject.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            let seq = await index_js_1.Primitive.Int.read(_data);
            return new Raw.Updates({
                updates: updates,
                users: users,
                chats: chats,
                date: date,
                seq: seq,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.updates) {
                b.write(index_js_1.Primitive.Vector.write(this.updates));
            }
            if (this.users) {
                b.write(index_js_1.Primitive.Vector.write(this.users));
            }
            if (this.chats) {
                b.write(index_js_1.Primitive.Vector.write(this.chats));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.seq !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.seq));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.Updates = Updates;
    class UpdateShortSentMessage extends index_js_1.TLObject {
        out;
        id;
        pts;
        ptsCount;
        date;
        media;
        entities;
        ttlPeriod;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UpdateShortSentMessage';
            this.constructorId = 0x9015e101;
            this.subclassOfId = 0x8af52aac;
            this._slots = ['out', 'id', 'pts', 'ptsCount', 'date', 'media', 'entities', 'ttlPeriod'];
            this.out = params.out;
            this.id = params.id;
            this.pts = params.pts;
            this.ptsCount = params.ptsCount;
            this.date = params.date;
            this.media = params.media;
            this.entities = params.entities;
            this.ttlPeriod = params.ttlPeriod;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let out = flags & (1 << 1) ? true : false;
            let id = await index_js_1.Primitive.Int.read(_data);
            let pts = await index_js_1.Primitive.Int.read(_data);
            let ptsCount = await index_js_1.Primitive.Int.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            let media = flags & (1 << 9) ? await index_js_1.TLObject.read(_data) : undefined;
            let entities = flags & (1 << 7) ? await index_js_1.TLObject.read(_data) : [];
            let ttlPeriod = flags & (1 << 25) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            return new Raw.UpdateShortSentMessage({
                out: out,
                id: id,
                pts: pts,
                ptsCount: ptsCount,
                date: date,
                media: media,
                entities: entities,
                ttlPeriod: ttlPeriod,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.out ? 1 << 1 : 0;
            flags |= this.media !== undefined ? 1 << 9 : 0;
            flags |= this.entities ? 1 << 7 : 0;
            flags |= this.ttlPeriod !== undefined ? 1 << 25 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.id));
            }
            if (this.pts !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.pts));
            }
            if (this.ptsCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.ptsCount));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.media !== undefined) {
                b.write(this.media.write());
            }
            if (this.entities) {
                b.write(index_js_1.Primitive.Vector.write(this.entities));
            }
            if (this.ttlPeriod !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.ttlPeriod));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UpdateShortSentMessage = UpdateShortSentMessage;
    class DcOption extends index_js_1.TLObject {
        ipv6;
        mediaOnly;
        tcpoOnly;
        cdn;
        static;
        thisPortOnly;
        id;
        ipAddress;
        port;
        secret;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DcOption';
            this.constructorId = 0x18b7a10d;
            this.subclassOfId = 0x9e43e123;
            this._slots = [
                'ipv6',
                'mediaOnly',
                'tcpoOnly',
                'cdn',
                'static',
                'thisPortOnly',
                'id',
                'ipAddress',
                'port',
                'secret',
            ];
            this.ipv6 = params.ipv6;
            this.mediaOnly = params.mediaOnly;
            this.tcpoOnly = params.tcpoOnly;
            this.cdn = params.cdn;
            this.static = params.static;
            this.thisPortOnly = params.thisPortOnly;
            this.id = params.id;
            this.ipAddress = params.ipAddress;
            this.port = params.port;
            this.secret = params.secret;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let ipv6 = flags & (1 << 0) ? true : false;
            let mediaOnly = flags & (1 << 1) ? true : false;
            let tcpoOnly = flags & (1 << 2) ? true : false;
            let cdn = flags & (1 << 3) ? true : false;
            let _static = flags & (1 << 4) ? true : false;
            let thisPortOnly = flags & (1 << 5) ? true : false;
            let id = await index_js_1.Primitive.Int.read(_data);
            let ipAddress = await index_js_1.Primitive.String.read(_data);
            let port = await index_js_1.Primitive.Int.read(_data);
            let secret = flags & (1 << 10) ? await index_js_1.Primitive.Bytes.read(_data) : undefined;
            return new Raw.DcOption({
                ipv6: ipv6,
                mediaOnly: mediaOnly,
                tcpoOnly: tcpoOnly,
                cdn: cdn,
                static: _static,
                thisPortOnly: thisPortOnly,
                id: id,
                ipAddress: ipAddress,
                port: port,
                secret: secret,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.ipv6 ? 1 << 0 : 0;
            flags |= this.mediaOnly ? 1 << 1 : 0;
            flags |= this.tcpoOnly ? 1 << 2 : 0;
            flags |= this.cdn ? 1 << 3 : 0;
            flags |= this.static ? 1 << 4 : 0;
            flags |= this.thisPortOnly ? 1 << 5 : 0;
            flags |= this.secret !== undefined ? 1 << 10 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.id));
            }
            if (this.ipAddress !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.ipAddress));
            }
            if (this.port !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.port));
            }
            if (this.secret !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.secret));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DcOption = DcOption;
    class Config extends index_js_1.TLObject {
        defaultP2pContacts;
        preloadFeaturedStickers;
        revokePmInbox;
        blockedMode;
        forceTryIpv6;
        date;
        expires;
        testMode;
        thisDc;
        dcOptions;
        dcTxtDomainName;
        chatSizeMax;
        megagroupSizeMax;
        forwardedCountMax;
        onlineUpdatePeriodMs;
        offlineBlurTimeoutMs;
        offlineIdleTimeoutMs;
        onlineCloudTimeoutMs;
        notifyCloudDelayMs;
        notifyDefaultDelayMs;
        pushChatPeriodMs;
        pushChatLimit;
        editTimeLimit;
        revokeTimeLimit;
        revokePmTimeLimit;
        ratingEDecay;
        stickersRecentLimit;
        channelsReadMediaPeriod;
        tmpSessions;
        callReceiveTimeoutMs;
        callRingTimeoutMs;
        callConnectTimeoutMs;
        callPacketTimeoutMs;
        meUrlPrefix;
        autoupdateUrlPrefix;
        gifSearchUsername;
        venueSearchUsername;
        imgSearchUsername;
        staticMapsProvider;
        captionLengthMax;
        messageLengthMax;
        webfileDcId;
        suggestedLangCode;
        langPackVersion;
        baseLangPackVersion;
        reactionsDefault;
        autologinToken;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'Config';
            this.constructorId = 0xcc1a241e;
            this.subclassOfId = 0xd3262a4a;
            this._slots = [
                'defaultP2pContacts',
                'preloadFeaturedStickers',
                'revokePmInbox',
                'blockedMode',
                'forceTryIpv6',
                'date',
                'expires',
                'testMode',
                'thisDc',
                'dcOptions',
                'dcTxtDomainName',
                'chatSizeMax',
                'megagroupSizeMax',
                'forwardedCountMax',
                'onlineUpdatePeriodMs',
                'offlineBlurTimeoutMs',
                'offlineIdleTimeoutMs',
                'onlineCloudTimeoutMs',
                'notifyCloudDelayMs',
                'notifyDefaultDelayMs',
                'pushChatPeriodMs',
                'pushChatLimit',
                'editTimeLimit',
                'revokeTimeLimit',
                'revokePmTimeLimit',
                'ratingEDecay',
                'stickersRecentLimit',
                'channelsReadMediaPeriod',
                'tmpSessions',
                'callReceiveTimeoutMs',
                'callRingTimeoutMs',
                'callConnectTimeoutMs',
                'callPacketTimeoutMs',
                'meUrlPrefix',
                'autoupdateUrlPrefix',
                'gifSearchUsername',
                'venueSearchUsername',
                'imgSearchUsername',
                'staticMapsProvider',
                'captionLengthMax',
                'messageLengthMax',
                'webfileDcId',
                'suggestedLangCode',
                'langPackVersion',
                'baseLangPackVersion',
                'reactionsDefault',
                'autologinToken',
            ];
            this.defaultP2pContacts = params.defaultP2pContacts;
            this.preloadFeaturedStickers = params.preloadFeaturedStickers;
            this.revokePmInbox = params.revokePmInbox;
            this.blockedMode = params.blockedMode;
            this.forceTryIpv6 = params.forceTryIpv6;
            this.date = params.date;
            this.expires = params.expires;
            this.testMode = params.testMode;
            this.thisDc = params.thisDc;
            this.dcOptions = params.dcOptions;
            this.dcTxtDomainName = params.dcTxtDomainName;
            this.chatSizeMax = params.chatSizeMax;
            this.megagroupSizeMax = params.megagroupSizeMax;
            this.forwardedCountMax = params.forwardedCountMax;
            this.onlineUpdatePeriodMs = params.onlineUpdatePeriodMs;
            this.offlineBlurTimeoutMs = params.offlineBlurTimeoutMs;
            this.offlineIdleTimeoutMs = params.offlineIdleTimeoutMs;
            this.onlineCloudTimeoutMs = params.onlineCloudTimeoutMs;
            this.notifyCloudDelayMs = params.notifyCloudDelayMs;
            this.notifyDefaultDelayMs = params.notifyDefaultDelayMs;
            this.pushChatPeriodMs = params.pushChatPeriodMs;
            this.pushChatLimit = params.pushChatLimit;
            this.editTimeLimit = params.editTimeLimit;
            this.revokeTimeLimit = params.revokeTimeLimit;
            this.revokePmTimeLimit = params.revokePmTimeLimit;
            this.ratingEDecay = params.ratingEDecay;
            this.stickersRecentLimit = params.stickersRecentLimit;
            this.channelsReadMediaPeriod = params.channelsReadMediaPeriod;
            this.tmpSessions = params.tmpSessions;
            this.callReceiveTimeoutMs = params.callReceiveTimeoutMs;
            this.callRingTimeoutMs = params.callRingTimeoutMs;
            this.callConnectTimeoutMs = params.callConnectTimeoutMs;
            this.callPacketTimeoutMs = params.callPacketTimeoutMs;
            this.meUrlPrefix = params.meUrlPrefix;
            this.autoupdateUrlPrefix = params.autoupdateUrlPrefix;
            this.gifSearchUsername = params.gifSearchUsername;
            this.venueSearchUsername = params.venueSearchUsername;
            this.imgSearchUsername = params.imgSearchUsername;
            this.staticMapsProvider = params.staticMapsProvider;
            this.captionLengthMax = params.captionLengthMax;
            this.messageLengthMax = params.messageLengthMax;
            this.webfileDcId = params.webfileDcId;
            this.suggestedLangCode = params.suggestedLangCode;
            this.langPackVersion = params.langPackVersion;
            this.baseLangPackVersion = params.baseLangPackVersion;
            this.reactionsDefault = params.reactionsDefault;
            this.autologinToken = params.autologinToken;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let defaultP2pContacts = flags & (1 << 3) ? true : false;
            let preloadFeaturedStickers = flags & (1 << 4) ? true : false;
            let revokePmInbox = flags & (1 << 6) ? true : false;
            let blockedMode = flags & (1 << 8) ? true : false;
            let forceTryIpv6 = flags & (1 << 14) ? true : false;
            let date = await index_js_1.Primitive.Int.read(_data);
            let expires = await index_js_1.Primitive.Int.read(_data);
            let testMode = await index_js_1.Primitive.Bool.read(_data);
            let thisDc = await index_js_1.Primitive.Int.read(_data);
            let dcOptions = await index_js_1.TLObject.read(_data);
            let dcTxtDomainName = await index_js_1.Primitive.String.read(_data);
            let chatSizeMax = await index_js_1.Primitive.Int.read(_data);
            let megagroupSizeMax = await index_js_1.Primitive.Int.read(_data);
            let forwardedCountMax = await index_js_1.Primitive.Int.read(_data);
            let onlineUpdatePeriodMs = await index_js_1.Primitive.Int.read(_data);
            let offlineBlurTimeoutMs = await index_js_1.Primitive.Int.read(_data);
            let offlineIdleTimeoutMs = await index_js_1.Primitive.Int.read(_data);
            let onlineCloudTimeoutMs = await index_js_1.Primitive.Int.read(_data);
            let notifyCloudDelayMs = await index_js_1.Primitive.Int.read(_data);
            let notifyDefaultDelayMs = await index_js_1.Primitive.Int.read(_data);
            let pushChatPeriodMs = await index_js_1.Primitive.Int.read(_data);
            let pushChatLimit = await index_js_1.Primitive.Int.read(_data);
            let editTimeLimit = await index_js_1.Primitive.Int.read(_data);
            let revokeTimeLimit = await index_js_1.Primitive.Int.read(_data);
            let revokePmTimeLimit = await index_js_1.Primitive.Int.read(_data);
            let ratingEDecay = await index_js_1.Primitive.Int.read(_data);
            let stickersRecentLimit = await index_js_1.Primitive.Int.read(_data);
            let channelsReadMediaPeriod = await index_js_1.Primitive.Int.read(_data);
            let tmpSessions = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let callReceiveTimeoutMs = await index_js_1.Primitive.Int.read(_data);
            let callRingTimeoutMs = await index_js_1.Primitive.Int.read(_data);
            let callConnectTimeoutMs = await index_js_1.Primitive.Int.read(_data);
            let callPacketTimeoutMs = await index_js_1.Primitive.Int.read(_data);
            let meUrlPrefix = await index_js_1.Primitive.String.read(_data);
            let autoupdateUrlPrefix = flags & (1 << 7) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let gifSearchUsername = flags & (1 << 9) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let venueSearchUsername = flags & (1 << 10) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let imgSearchUsername = flags & (1 << 11) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let staticMapsProvider = flags & (1 << 12) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let captionLengthMax = await index_js_1.Primitive.Int.read(_data);
            let messageLengthMax = await index_js_1.Primitive.Int.read(_data);
            let webfileDcId = await index_js_1.Primitive.Int.read(_data);
            let suggestedLangCode = flags & (1 << 2) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let langPackVersion = flags & (1 << 2) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let baseLangPackVersion = flags & (1 << 2) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let reactionsDefault = flags & (1 << 15) ? await index_js_1.TLObject.read(_data) : undefined;
            let autologinToken = flags & (1 << 16) ? await index_js_1.Primitive.String.read(_data) : undefined;
            return new Raw.Config({
                defaultP2pContacts: defaultP2pContacts,
                preloadFeaturedStickers: preloadFeaturedStickers,
                revokePmInbox: revokePmInbox,
                blockedMode: blockedMode,
                forceTryIpv6: forceTryIpv6,
                date: date,
                expires: expires,
                testMode: testMode,
                thisDc: thisDc,
                dcOptions: dcOptions,
                dcTxtDomainName: dcTxtDomainName,
                chatSizeMax: chatSizeMax,
                megagroupSizeMax: megagroupSizeMax,
                forwardedCountMax: forwardedCountMax,
                onlineUpdatePeriodMs: onlineUpdatePeriodMs,
                offlineBlurTimeoutMs: offlineBlurTimeoutMs,
                offlineIdleTimeoutMs: offlineIdleTimeoutMs,
                onlineCloudTimeoutMs: onlineCloudTimeoutMs,
                notifyCloudDelayMs: notifyCloudDelayMs,
                notifyDefaultDelayMs: notifyDefaultDelayMs,
                pushChatPeriodMs: pushChatPeriodMs,
                pushChatLimit: pushChatLimit,
                editTimeLimit: editTimeLimit,
                revokeTimeLimit: revokeTimeLimit,
                revokePmTimeLimit: revokePmTimeLimit,
                ratingEDecay: ratingEDecay,
                stickersRecentLimit: stickersRecentLimit,
                channelsReadMediaPeriod: channelsReadMediaPeriod,
                tmpSessions: tmpSessions,
                callReceiveTimeoutMs: callReceiveTimeoutMs,
                callRingTimeoutMs: callRingTimeoutMs,
                callConnectTimeoutMs: callConnectTimeoutMs,
                callPacketTimeoutMs: callPacketTimeoutMs,
                meUrlPrefix: meUrlPrefix,
                autoupdateUrlPrefix: autoupdateUrlPrefix,
                gifSearchUsername: gifSearchUsername,
                venueSearchUsername: venueSearchUsername,
                imgSearchUsername: imgSearchUsername,
                staticMapsProvider: staticMapsProvider,
                captionLengthMax: captionLengthMax,
                messageLengthMax: messageLengthMax,
                webfileDcId: webfileDcId,
                suggestedLangCode: suggestedLangCode,
                langPackVersion: langPackVersion,
                baseLangPackVersion: baseLangPackVersion,
                reactionsDefault: reactionsDefault,
                autologinToken: autologinToken,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.defaultP2pContacts ? 1 << 3 : 0;
            flags |= this.preloadFeaturedStickers ? 1 << 4 : 0;
            flags |= this.revokePmInbox ? 1 << 6 : 0;
            flags |= this.blockedMode ? 1 << 8 : 0;
            flags |= this.forceTryIpv6 ? 1 << 14 : 0;
            flags |= this.tmpSessions !== undefined ? 1 << 0 : 0;
            flags |= this.autoupdateUrlPrefix !== undefined ? 1 << 7 : 0;
            flags |= this.gifSearchUsername !== undefined ? 1 << 9 : 0;
            flags |= this.venueSearchUsername !== undefined ? 1 << 10 : 0;
            flags |= this.imgSearchUsername !== undefined ? 1 << 11 : 0;
            flags |= this.staticMapsProvider !== undefined ? 1 << 12 : 0;
            flags |= this.suggestedLangCode !== undefined ? 1 << 2 : 0;
            flags |= this.langPackVersion !== undefined ? 1 << 2 : 0;
            flags |= this.baseLangPackVersion !== undefined ? 1 << 2 : 0;
            flags |= this.reactionsDefault !== undefined ? 1 << 15 : 0;
            flags |= this.autologinToken !== undefined ? 1 << 16 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.expires !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.expires));
            }
            if (this.testMode !== undefined) {
                b.write(index_js_1.Primitive.Bool.write(this.testMode));
            }
            if (this.thisDc !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.thisDc));
            }
            if (this.dcOptions) {
                b.write(index_js_1.Primitive.Vector.write(this.dcOptions));
            }
            if (this.dcTxtDomainName !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.dcTxtDomainName));
            }
            if (this.chatSizeMax !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.chatSizeMax));
            }
            if (this.megagroupSizeMax !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.megagroupSizeMax));
            }
            if (this.forwardedCountMax !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.forwardedCountMax));
            }
            if (this.onlineUpdatePeriodMs !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.onlineUpdatePeriodMs));
            }
            if (this.offlineBlurTimeoutMs !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.offlineBlurTimeoutMs));
            }
            if (this.offlineIdleTimeoutMs !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.offlineIdleTimeoutMs));
            }
            if (this.onlineCloudTimeoutMs !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.onlineCloudTimeoutMs));
            }
            if (this.notifyCloudDelayMs !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.notifyCloudDelayMs));
            }
            if (this.notifyDefaultDelayMs !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.notifyDefaultDelayMs));
            }
            if (this.pushChatPeriodMs !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.pushChatPeriodMs));
            }
            if (this.pushChatLimit !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.pushChatLimit));
            }
            if (this.editTimeLimit !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.editTimeLimit));
            }
            if (this.revokeTimeLimit !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.revokeTimeLimit));
            }
            if (this.revokePmTimeLimit !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.revokePmTimeLimit));
            }
            if (this.ratingEDecay !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.ratingEDecay));
            }
            if (this.stickersRecentLimit !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.stickersRecentLimit));
            }
            if (this.channelsReadMediaPeriod !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.channelsReadMediaPeriod));
            }
            if (this.tmpSessions !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.tmpSessions));
            }
            if (this.callReceiveTimeoutMs !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.callReceiveTimeoutMs));
            }
            if (this.callRingTimeoutMs !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.callRingTimeoutMs));
            }
            if (this.callConnectTimeoutMs !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.callConnectTimeoutMs));
            }
            if (this.callPacketTimeoutMs !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.callPacketTimeoutMs));
            }
            if (this.meUrlPrefix !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.meUrlPrefix));
            }
            if (this.autoupdateUrlPrefix !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.autoupdateUrlPrefix));
            }
            if (this.gifSearchUsername !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.gifSearchUsername));
            }
            if (this.venueSearchUsername !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.venueSearchUsername));
            }
            if (this.imgSearchUsername !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.imgSearchUsername));
            }
            if (this.staticMapsProvider !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.staticMapsProvider));
            }
            if (this.captionLengthMax !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.captionLengthMax));
            }
            if (this.messageLengthMax !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.messageLengthMax));
            }
            if (this.webfileDcId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.webfileDcId));
            }
            if (this.suggestedLangCode !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.suggestedLangCode));
            }
            if (this.langPackVersion !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.langPackVersion));
            }
            if (this.baseLangPackVersion !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.baseLangPackVersion));
            }
            if (this.reactionsDefault !== undefined) {
                b.write(this.reactionsDefault.write());
            }
            if (this.autologinToken !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.autologinToken));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.Config = Config;
    class NearestDc extends index_js_1.TLObject {
        country;
        thisDc;
        nearestDc;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'NearestDc';
            this.constructorId = 0x8e1a1775;
            this.subclassOfId = 0x3877045f;
            this._slots = ['country', 'thisDc', 'nearestDc'];
            this.country = params.country;
            this.thisDc = params.thisDc;
            this.nearestDc = params.nearestDc;
        }
        static async read(_data, ..._args) {
            let country = await index_js_1.Primitive.String.read(_data);
            let thisDc = await index_js_1.Primitive.Int.read(_data);
            let nearestDc = await index_js_1.Primitive.Int.read(_data);
            return new Raw.NearestDc({ country: country, thisDc: thisDc, nearestDc: nearestDc });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.country !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.country));
            }
            if (this.thisDc !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.thisDc));
            }
            if (this.nearestDc !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.nearestDc));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.NearestDc = NearestDc;
    class EncryptedChatEmpty extends index_js_1.TLObject {
        id;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'EncryptedChatEmpty';
            this.constructorId = 0xab7ec0a0;
            this.subclassOfId = 0x6d28a37a;
            this._slots = ['id'];
            this.id = params.id;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.Int.read(_data);
            return new Raw.EncryptedChatEmpty({ id: id });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.id));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.EncryptedChatEmpty = EncryptedChatEmpty;
    class EncryptedChatWaiting extends index_js_1.TLObject {
        id;
        accessHash;
        date;
        adminId;
        participantId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'EncryptedChatWaiting';
            this.constructorId = 0x66b25953;
            this.subclassOfId = 0x6d28a37a;
            this._slots = ['id', 'accessHash', 'date', 'adminId', 'participantId'];
            this.id = params.id;
            this.accessHash = params.accessHash;
            this.date = params.date;
            this.adminId = params.adminId;
            this.participantId = params.participantId;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.Int.read(_data);
            let accessHash = await index_js_1.Primitive.Long.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            let adminId = await index_js_1.Primitive.Long.read(_data);
            let participantId = await index_js_1.Primitive.Long.read(_data);
            return new Raw.EncryptedChatWaiting({
                id: id,
                accessHash: accessHash,
                date: date,
                adminId: adminId,
                participantId: participantId,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.id));
            }
            if (this.accessHash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.accessHash));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.adminId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.adminId));
            }
            if (this.participantId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.participantId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.EncryptedChatWaiting = EncryptedChatWaiting;
    class EncryptedChatRequested extends index_js_1.TLObject {
        folderId;
        id;
        accessHash;
        date;
        adminId;
        participantId;
        gA;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'EncryptedChatRequested';
            this.constructorId = 0x48f1d94c;
            this.subclassOfId = 0x6d28a37a;
            this._slots = ['folderId', 'id', 'accessHash', 'date', 'adminId', 'participantId', 'gA'];
            this.folderId = params.folderId;
            this.id = params.id;
            this.accessHash = params.accessHash;
            this.date = params.date;
            this.adminId = params.adminId;
            this.participantId = params.participantId;
            this.gA = params.gA;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let folderId = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let id = await index_js_1.Primitive.Int.read(_data);
            let accessHash = await index_js_1.Primitive.Long.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            let adminId = await index_js_1.Primitive.Long.read(_data);
            let participantId = await index_js_1.Primitive.Long.read(_data);
            let gA = await index_js_1.Primitive.Bytes.read(_data);
            return new Raw.EncryptedChatRequested({
                folderId: folderId,
                id: id,
                accessHash: accessHash,
                date: date,
                adminId: adminId,
                participantId: participantId,
                gA: gA,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.folderId !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.folderId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.folderId));
            }
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.id));
            }
            if (this.accessHash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.accessHash));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.adminId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.adminId));
            }
            if (this.participantId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.participantId));
            }
            if (this.gA !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.gA));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.EncryptedChatRequested = EncryptedChatRequested;
    class EncryptedChat extends index_js_1.TLObject {
        id;
        accessHash;
        date;
        adminId;
        participantId;
        gAOrB;
        keyFingerprint;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'EncryptedChat';
            this.constructorId = 0x61f0d4c7;
            this.subclassOfId = 0x6d28a37a;
            this._slots = [
                'id',
                'accessHash',
                'date',
                'adminId',
                'participantId',
                'gAOrB',
                'keyFingerprint',
            ];
            this.id = params.id;
            this.accessHash = params.accessHash;
            this.date = params.date;
            this.adminId = params.adminId;
            this.participantId = params.participantId;
            this.gAOrB = params.gAOrB;
            this.keyFingerprint = params.keyFingerprint;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.Int.read(_data);
            let accessHash = await index_js_1.Primitive.Long.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            let adminId = await index_js_1.Primitive.Long.read(_data);
            let participantId = await index_js_1.Primitive.Long.read(_data);
            let gAOrB = await index_js_1.Primitive.Bytes.read(_data);
            let keyFingerprint = await index_js_1.Primitive.Long.read(_data);
            return new Raw.EncryptedChat({
                id: id,
                accessHash: accessHash,
                date: date,
                adminId: adminId,
                participantId: participantId,
                gAOrB: gAOrB,
                keyFingerprint: keyFingerprint,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.id));
            }
            if (this.accessHash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.accessHash));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.adminId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.adminId));
            }
            if (this.participantId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.participantId));
            }
            if (this.gAOrB !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.gAOrB));
            }
            if (this.keyFingerprint !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.keyFingerprint));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.EncryptedChat = EncryptedChat;
    class EncryptedChatDiscarded extends index_js_1.TLObject {
        historyDeleted;
        id;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'EncryptedChatDiscarded';
            this.constructorId = 0x1e1c7c45;
            this.subclassOfId = 0x6d28a37a;
            this._slots = ['historyDeleted', 'id'];
            this.historyDeleted = params.historyDeleted;
            this.id = params.id;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let historyDeleted = flags & (1 << 0) ? true : false;
            let id = await index_js_1.Primitive.Int.read(_data);
            return new Raw.EncryptedChatDiscarded({ historyDeleted: historyDeleted, id: id });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.historyDeleted ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.id));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.EncryptedChatDiscarded = EncryptedChatDiscarded;
    class InputEncryptedChat extends index_js_1.TLObject {
        chatId;
        accessHash;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputEncryptedChat';
            this.constructorId = 0xf141b5e1;
            this.subclassOfId = 0x6c7606c0;
            this._slots = ['chatId', 'accessHash'];
            this.chatId = params.chatId;
            this.accessHash = params.accessHash;
        }
        static async read(_data, ..._args) {
            let chatId = await index_js_1.Primitive.Int.read(_data);
            let accessHash = await index_js_1.Primitive.Long.read(_data);
            return new Raw.InputEncryptedChat({ chatId: chatId, accessHash: accessHash });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.chatId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.chatId));
            }
            if (this.accessHash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.accessHash));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputEncryptedChat = InputEncryptedChat;
    class EncryptedFileEmpty extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'EncryptedFileEmpty';
            this.constructorId = 0xc21f497e;
            this.subclassOfId = 0x842a67c0;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.EncryptedFileEmpty();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.EncryptedFileEmpty = EncryptedFileEmpty;
    class EncryptedFile extends index_js_1.TLObject {
        id;
        accessHash;
        size;
        dcId;
        keyFingerprint;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'EncryptedFile';
            this.constructorId = 0xa8008cd8;
            this.subclassOfId = 0x842a67c0;
            this._slots = ['id', 'accessHash', 'size', 'dcId', 'keyFingerprint'];
            this.id = params.id;
            this.accessHash = params.accessHash;
            this.size = params.size;
            this.dcId = params.dcId;
            this.keyFingerprint = params.keyFingerprint;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.Long.read(_data);
            let accessHash = await index_js_1.Primitive.Long.read(_data);
            let size = await index_js_1.Primitive.Long.read(_data);
            let dcId = await index_js_1.Primitive.Int.read(_data);
            let keyFingerprint = await index_js_1.Primitive.Int.read(_data);
            return new Raw.EncryptedFile({
                id: id,
                accessHash: accessHash,
                size: size,
                dcId: dcId,
                keyFingerprint: keyFingerprint,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.accessHash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.accessHash));
            }
            if (this.size !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.size));
            }
            if (this.dcId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.dcId));
            }
            if (this.keyFingerprint !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.keyFingerprint));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.EncryptedFile = EncryptedFile;
    class InputEncryptedFileEmpty extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputEncryptedFileEmpty';
            this.constructorId = 0x1837c364;
            this.subclassOfId = 0x8574c27a;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputEncryptedFileEmpty();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputEncryptedFileEmpty = InputEncryptedFileEmpty;
    class InputEncryptedFileUploaded extends index_js_1.TLObject {
        id;
        parts;
        md5Checksum;
        keyFingerprint;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputEncryptedFileUploaded';
            this.constructorId = 0x64bd0306;
            this.subclassOfId = 0x8574c27a;
            this._slots = ['id', 'parts', 'md5Checksum', 'keyFingerprint'];
            this.id = params.id;
            this.parts = params.parts;
            this.md5Checksum = params.md5Checksum;
            this.keyFingerprint = params.keyFingerprint;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.Long.read(_data);
            let parts = await index_js_1.Primitive.Int.read(_data);
            let md5Checksum = await index_js_1.Primitive.String.read(_data);
            let keyFingerprint = await index_js_1.Primitive.Int.read(_data);
            return new Raw.InputEncryptedFileUploaded({
                id: id,
                parts: parts,
                md5Checksum: md5Checksum,
                keyFingerprint: keyFingerprint,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.parts !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.parts));
            }
            if (this.md5Checksum !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.md5Checksum));
            }
            if (this.keyFingerprint !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.keyFingerprint));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputEncryptedFileUploaded = InputEncryptedFileUploaded;
    class InputEncryptedFile extends index_js_1.TLObject {
        id;
        accessHash;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputEncryptedFile';
            this.constructorId = 0x5a17b5e5;
            this.subclassOfId = 0x8574c27a;
            this._slots = ['id', 'accessHash'];
            this.id = params.id;
            this.accessHash = params.accessHash;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.Long.read(_data);
            let accessHash = await index_js_1.Primitive.Long.read(_data);
            return new Raw.InputEncryptedFile({ id: id, accessHash: accessHash });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.accessHash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.accessHash));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputEncryptedFile = InputEncryptedFile;
    class InputEncryptedFileBigUploaded extends index_js_1.TLObject {
        id;
        parts;
        keyFingerprint;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputEncryptedFileBigUploaded';
            this.constructorId = 0x2dc173c8;
            this.subclassOfId = 0x8574c27a;
            this._slots = ['id', 'parts', 'keyFingerprint'];
            this.id = params.id;
            this.parts = params.parts;
            this.keyFingerprint = params.keyFingerprint;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.Long.read(_data);
            let parts = await index_js_1.Primitive.Int.read(_data);
            let keyFingerprint = await index_js_1.Primitive.Int.read(_data);
            return new Raw.InputEncryptedFileBigUploaded({
                id: id,
                parts: parts,
                keyFingerprint: keyFingerprint,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.parts !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.parts));
            }
            if (this.keyFingerprint !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.keyFingerprint));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputEncryptedFileBigUploaded = InputEncryptedFileBigUploaded;
    class EncryptedMessage extends index_js_1.TLObject {
        randomId;
        chatId;
        date;
        bytes;
        file;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'EncryptedMessage';
            this.constructorId = 0xed18c118;
            this.subclassOfId = 0x239f2e51;
            this._slots = ['randomId', 'chatId', 'date', 'bytes', 'file'];
            this.randomId = params.randomId;
            this.chatId = params.chatId;
            this.date = params.date;
            this.bytes = params.bytes;
            this.file = params.file;
        }
        static async read(_data, ..._args) {
            let randomId = await index_js_1.Primitive.Long.read(_data);
            let chatId = await index_js_1.Primitive.Int.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            let bytes = await index_js_1.Primitive.Bytes.read(_data);
            let file = await index_js_1.TLObject.read(_data);
            return new Raw.EncryptedMessage({
                randomId: randomId,
                chatId: chatId,
                date: date,
                bytes: bytes,
                file: file,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.randomId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.randomId));
            }
            if (this.chatId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.chatId));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.bytes !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.bytes));
            }
            if (this.file !== undefined) {
                b.write(this.file.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.EncryptedMessage = EncryptedMessage;
    class EncryptedMessageService extends index_js_1.TLObject {
        randomId;
        chatId;
        date;
        bytes;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'EncryptedMessageService';
            this.constructorId = 0x23734b06;
            this.subclassOfId = 0x239f2e51;
            this._slots = ['randomId', 'chatId', 'date', 'bytes'];
            this.randomId = params.randomId;
            this.chatId = params.chatId;
            this.date = params.date;
            this.bytes = params.bytes;
        }
        static async read(_data, ..._args) {
            let randomId = await index_js_1.Primitive.Long.read(_data);
            let chatId = await index_js_1.Primitive.Int.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            let bytes = await index_js_1.Primitive.Bytes.read(_data);
            return new Raw.EncryptedMessageService({
                randomId: randomId,
                chatId: chatId,
                date: date,
                bytes: bytes,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.randomId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.randomId));
            }
            if (this.chatId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.chatId));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.bytes !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.bytes));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.EncryptedMessageService = EncryptedMessageService;
    class InputDocumentEmpty extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputDocumentEmpty';
            this.constructorId = 0x72f0eaae;
            this.subclassOfId = 0xf33fdb68;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputDocumentEmpty();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputDocumentEmpty = InputDocumentEmpty;
    class InputDocument extends index_js_1.TLObject {
        id;
        accessHash;
        fileReference;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputDocument';
            this.constructorId = 0x1abfb575;
            this.subclassOfId = 0xf33fdb68;
            this._slots = ['id', 'accessHash', 'fileReference'];
            this.id = params.id;
            this.accessHash = params.accessHash;
            this.fileReference = params.fileReference;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.Long.read(_data);
            let accessHash = await index_js_1.Primitive.Long.read(_data);
            let fileReference = await index_js_1.Primitive.Bytes.read(_data);
            return new Raw.InputDocument({
                id: id,
                accessHash: accessHash,
                fileReference: fileReference,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.accessHash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.accessHash));
            }
            if (this.fileReference !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.fileReference));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputDocument = InputDocument;
    class DocumentEmpty extends index_js_1.TLObject {
        id;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DocumentEmpty';
            this.constructorId = 0x36f8c871;
            this.subclassOfId = 0x211fe820;
            this._slots = ['id'];
            this.id = params.id;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.Long.read(_data);
            return new Raw.DocumentEmpty({ id: id });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DocumentEmpty = DocumentEmpty;
    class Document extends index_js_1.TLObject {
        id;
        accessHash;
        fileReference;
        date;
        mimeType;
        size;
        thumbs;
        videoThumbs;
        dcId;
        attributes;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'Document';
            this.constructorId = 0x8fd4c4d8;
            this.subclassOfId = 0x211fe820;
            this._slots = [
                'id',
                'accessHash',
                'fileReference',
                'date',
                'mimeType',
                'size',
                'thumbs',
                'videoThumbs',
                'dcId',
                'attributes',
            ];
            this.id = params.id;
            this.accessHash = params.accessHash;
            this.fileReference = params.fileReference;
            this.date = params.date;
            this.mimeType = params.mimeType;
            this.size = params.size;
            this.thumbs = params.thumbs;
            this.videoThumbs = params.videoThumbs;
            this.dcId = params.dcId;
            this.attributes = params.attributes;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let id = await index_js_1.Primitive.Long.read(_data);
            let accessHash = await index_js_1.Primitive.Long.read(_data);
            let fileReference = await index_js_1.Primitive.Bytes.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            let mimeType = await index_js_1.Primitive.String.read(_data);
            let size = await index_js_1.Primitive.Long.read(_data);
            let thumbs = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : [];
            let videoThumbs = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : [];
            let dcId = await index_js_1.Primitive.Int.read(_data);
            let attributes = await index_js_1.TLObject.read(_data);
            return new Raw.Document({
                id: id,
                accessHash: accessHash,
                fileReference: fileReference,
                date: date,
                mimeType: mimeType,
                size: size,
                thumbs: thumbs,
                videoThumbs: videoThumbs,
                dcId: dcId,
                attributes: attributes,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.thumbs ? 1 << 0 : 0;
            flags |= this.videoThumbs ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.accessHash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.accessHash));
            }
            if (this.fileReference !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.fileReference));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.mimeType !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.mimeType));
            }
            if (this.size !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.size));
            }
            if (this.thumbs) {
                b.write(index_js_1.Primitive.Vector.write(this.thumbs));
            }
            if (this.videoThumbs) {
                b.write(index_js_1.Primitive.Vector.write(this.videoThumbs));
            }
            if (this.dcId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.dcId));
            }
            if (this.attributes) {
                b.write(index_js_1.Primitive.Vector.write(this.attributes));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.Document = Document;
    class NotifyPeer extends index_js_1.TLObject {
        peer;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'NotifyPeer';
            this.constructorId = 0x9fd40bd8;
            this.subclassOfId = 0xdfe8602e;
            this._slots = ['peer'];
            this.peer = params.peer;
        }
        static async read(_data, ..._args) {
            let peer = await index_js_1.TLObject.read(_data);
            return new Raw.NotifyPeer({ peer: peer });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.NotifyPeer = NotifyPeer;
    class NotifyUsers extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'NotifyUsers';
            this.constructorId = 0xb4c83b4c;
            this.subclassOfId = 0xdfe8602e;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.NotifyUsers();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.NotifyUsers = NotifyUsers;
    class NotifyChats extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'NotifyChats';
            this.constructorId = 0xc007cec3;
            this.subclassOfId = 0xdfe8602e;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.NotifyChats();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.NotifyChats = NotifyChats;
    class NotifyBroadcasts extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'NotifyBroadcasts';
            this.constructorId = 0xd612e8ef;
            this.subclassOfId = 0xdfe8602e;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.NotifyBroadcasts();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.NotifyBroadcasts = NotifyBroadcasts;
    class NotifyForumTopic extends index_js_1.TLObject {
        peer;
        topMsgId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'NotifyForumTopic';
            this.constructorId = 0x226e6308;
            this.subclassOfId = 0xdfe8602e;
            this._slots = ['peer', 'topMsgId'];
            this.peer = params.peer;
            this.topMsgId = params.topMsgId;
        }
        static async read(_data, ..._args) {
            let peer = await index_js_1.TLObject.read(_data);
            let topMsgId = await index_js_1.Primitive.Int.read(_data);
            return new Raw.NotifyForumTopic({ peer: peer, topMsgId: topMsgId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.topMsgId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.topMsgId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.NotifyForumTopic = NotifyForumTopic;
    class SendMessageTypingAction extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'SendMessageTypingAction';
            this.constructorId = 0x16bf744e;
            this.subclassOfId = 0x20b2cc21;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.SendMessageTypingAction();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SendMessageTypingAction = SendMessageTypingAction;
    class SendMessageCancelAction extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'SendMessageCancelAction';
            this.constructorId = 0xfd5ec8f5;
            this.subclassOfId = 0x20b2cc21;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.SendMessageCancelAction();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SendMessageCancelAction = SendMessageCancelAction;
    class SendMessageRecordVideoAction extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'SendMessageRecordVideoAction';
            this.constructorId = 0xa187d66f;
            this.subclassOfId = 0x20b2cc21;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.SendMessageRecordVideoAction();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SendMessageRecordVideoAction = SendMessageRecordVideoAction;
    class SendMessageUploadVideoAction extends index_js_1.TLObject {
        progress;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'SendMessageUploadVideoAction';
            this.constructorId = 0xe9763aec;
            this.subclassOfId = 0x20b2cc21;
            this._slots = ['progress'];
            this.progress = params.progress;
        }
        static async read(_data, ..._args) {
            let progress = await index_js_1.Primitive.Int.read(_data);
            return new Raw.SendMessageUploadVideoAction({ progress: progress });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.progress !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.progress));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SendMessageUploadVideoAction = SendMessageUploadVideoAction;
    class SendMessageRecordAudioAction extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'SendMessageRecordAudioAction';
            this.constructorId = 0xd52f73f7;
            this.subclassOfId = 0x20b2cc21;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.SendMessageRecordAudioAction();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SendMessageRecordAudioAction = SendMessageRecordAudioAction;
    class SendMessageUploadAudioAction extends index_js_1.TLObject {
        progress;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'SendMessageUploadAudioAction';
            this.constructorId = 0xf351d7ab;
            this.subclassOfId = 0x20b2cc21;
            this._slots = ['progress'];
            this.progress = params.progress;
        }
        static async read(_data, ..._args) {
            let progress = await index_js_1.Primitive.Int.read(_data);
            return new Raw.SendMessageUploadAudioAction({ progress: progress });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.progress !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.progress));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SendMessageUploadAudioAction = SendMessageUploadAudioAction;
    class SendMessageUploadPhotoAction extends index_js_1.TLObject {
        progress;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'SendMessageUploadPhotoAction';
            this.constructorId = 0xd1d34a26;
            this.subclassOfId = 0x20b2cc21;
            this._slots = ['progress'];
            this.progress = params.progress;
        }
        static async read(_data, ..._args) {
            let progress = await index_js_1.Primitive.Int.read(_data);
            return new Raw.SendMessageUploadPhotoAction({ progress: progress });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.progress !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.progress));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SendMessageUploadPhotoAction = SendMessageUploadPhotoAction;
    class SendMessageUploadDocumentAction extends index_js_1.TLObject {
        progress;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'SendMessageUploadDocumentAction';
            this.constructorId = 0xaa0cd9e4;
            this.subclassOfId = 0x20b2cc21;
            this._slots = ['progress'];
            this.progress = params.progress;
        }
        static async read(_data, ..._args) {
            let progress = await index_js_1.Primitive.Int.read(_data);
            return new Raw.SendMessageUploadDocumentAction({ progress: progress });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.progress !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.progress));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SendMessageUploadDocumentAction = SendMessageUploadDocumentAction;
    class SendMessageGeoLocationAction extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'SendMessageGeoLocationAction';
            this.constructorId = 0x176f8ba1;
            this.subclassOfId = 0x20b2cc21;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.SendMessageGeoLocationAction();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SendMessageGeoLocationAction = SendMessageGeoLocationAction;
    class SendMessageChooseContactAction extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'SendMessageChooseContactAction';
            this.constructorId = 0x628cbc6f;
            this.subclassOfId = 0x20b2cc21;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.SendMessageChooseContactAction();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SendMessageChooseContactAction = SendMessageChooseContactAction;
    class SendMessageGamePlayAction extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'SendMessageGamePlayAction';
            this.constructorId = 0xdd6a8f48;
            this.subclassOfId = 0x20b2cc21;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.SendMessageGamePlayAction();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SendMessageGamePlayAction = SendMessageGamePlayAction;
    class SendMessageRecordRoundAction extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'SendMessageRecordRoundAction';
            this.constructorId = 0x88f27fbc;
            this.subclassOfId = 0x20b2cc21;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.SendMessageRecordRoundAction();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SendMessageRecordRoundAction = SendMessageRecordRoundAction;
    class SendMessageUploadRoundAction extends index_js_1.TLObject {
        progress;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'SendMessageUploadRoundAction';
            this.constructorId = 0x243e1c66;
            this.subclassOfId = 0x20b2cc21;
            this._slots = ['progress'];
            this.progress = params.progress;
        }
        static async read(_data, ..._args) {
            let progress = await index_js_1.Primitive.Int.read(_data);
            return new Raw.SendMessageUploadRoundAction({ progress: progress });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.progress !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.progress));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SendMessageUploadRoundAction = SendMessageUploadRoundAction;
    class SpeakingInGroupCallAction extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'SpeakingInGroupCallAction';
            this.constructorId = 0xd92c2285;
            this.subclassOfId = 0x20b2cc21;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.SpeakingInGroupCallAction();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SpeakingInGroupCallAction = SpeakingInGroupCallAction;
    class SendMessageHistoryImportAction extends index_js_1.TLObject {
        progress;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'SendMessageHistoryImportAction';
            this.constructorId = 0xdbda9246;
            this.subclassOfId = 0x20b2cc21;
            this._slots = ['progress'];
            this.progress = params.progress;
        }
        static async read(_data, ..._args) {
            let progress = await index_js_1.Primitive.Int.read(_data);
            return new Raw.SendMessageHistoryImportAction({ progress: progress });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.progress !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.progress));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SendMessageHistoryImportAction = SendMessageHistoryImportAction;
    class SendMessageChooseStickerAction extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'SendMessageChooseStickerAction';
            this.constructorId = 0xb05ac6b1;
            this.subclassOfId = 0x20b2cc21;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.SendMessageChooseStickerAction();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SendMessageChooseStickerAction = SendMessageChooseStickerAction;
    class SendMessageEmojiInteraction extends index_js_1.TLObject {
        emoticon;
        msgId;
        interaction;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'SendMessageEmojiInteraction';
            this.constructorId = 0x25972bcb;
            this.subclassOfId = 0x20b2cc21;
            this._slots = ['emoticon', 'msgId', 'interaction'];
            this.emoticon = params.emoticon;
            this.msgId = params.msgId;
            this.interaction = params.interaction;
        }
        static async read(_data, ..._args) {
            let emoticon = await index_js_1.Primitive.String.read(_data);
            let msgId = await index_js_1.Primitive.Int.read(_data);
            let interaction = await index_js_1.TLObject.read(_data);
            return new Raw.SendMessageEmojiInteraction({
                emoticon: emoticon,
                msgId: msgId,
                interaction: interaction,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.emoticon !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.emoticon));
            }
            if (this.msgId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.msgId));
            }
            if (this.interaction !== undefined) {
                b.write(this.interaction.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SendMessageEmojiInteraction = SendMessageEmojiInteraction;
    class SendMessageEmojiInteractionSeen extends index_js_1.TLObject {
        emoticon;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'SendMessageEmojiInteractionSeen';
            this.constructorId = 0xb665902e;
            this.subclassOfId = 0x20b2cc21;
            this._slots = ['emoticon'];
            this.emoticon = params.emoticon;
        }
        static async read(_data, ..._args) {
            let emoticon = await index_js_1.Primitive.String.read(_data);
            return new Raw.SendMessageEmojiInteractionSeen({ emoticon: emoticon });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.emoticon !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.emoticon));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SendMessageEmojiInteractionSeen = SendMessageEmojiInteractionSeen;
    class InputPrivacyKeyStatusTimestamp extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputPrivacyKeyStatusTimestamp';
            this.constructorId = 0x4f96cb18;
            this.subclassOfId = 0x53627f8;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputPrivacyKeyStatusTimestamp();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputPrivacyKeyStatusTimestamp = InputPrivacyKeyStatusTimestamp;
    class InputPrivacyKeyChatInvite extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputPrivacyKeyChatInvite';
            this.constructorId = 0xbdfb0426;
            this.subclassOfId = 0x53627f8;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputPrivacyKeyChatInvite();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputPrivacyKeyChatInvite = InputPrivacyKeyChatInvite;
    class InputPrivacyKeyPhoneCall extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputPrivacyKeyPhoneCall';
            this.constructorId = 0xfabadc5f;
            this.subclassOfId = 0x53627f8;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputPrivacyKeyPhoneCall();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputPrivacyKeyPhoneCall = InputPrivacyKeyPhoneCall;
    class InputPrivacyKeyPhoneP2P extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputPrivacyKeyPhoneP2P';
            this.constructorId = 0xdb9e70d2;
            this.subclassOfId = 0x53627f8;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputPrivacyKeyPhoneP2P();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputPrivacyKeyPhoneP2P = InputPrivacyKeyPhoneP2P;
    class InputPrivacyKeyForwards extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputPrivacyKeyForwards';
            this.constructorId = 0xa4dd4c08;
            this.subclassOfId = 0x53627f8;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputPrivacyKeyForwards();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputPrivacyKeyForwards = InputPrivacyKeyForwards;
    class InputPrivacyKeyProfilePhoto extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputPrivacyKeyProfilePhoto';
            this.constructorId = 0x5719bacc;
            this.subclassOfId = 0x53627f8;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputPrivacyKeyProfilePhoto();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputPrivacyKeyProfilePhoto = InputPrivacyKeyProfilePhoto;
    class InputPrivacyKeyPhoneNumber extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputPrivacyKeyPhoneNumber';
            this.constructorId = 0x352dafa;
            this.subclassOfId = 0x53627f8;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputPrivacyKeyPhoneNumber();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputPrivacyKeyPhoneNumber = InputPrivacyKeyPhoneNumber;
    class InputPrivacyKeyAddedByPhone extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputPrivacyKeyAddedByPhone';
            this.constructorId = 0xd1219bdd;
            this.subclassOfId = 0x53627f8;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputPrivacyKeyAddedByPhone();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputPrivacyKeyAddedByPhone = InputPrivacyKeyAddedByPhone;
    class InputPrivacyKeyVoiceMessages extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputPrivacyKeyVoiceMessages';
            this.constructorId = 0xaee69d68;
            this.subclassOfId = 0x53627f8;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputPrivacyKeyVoiceMessages();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputPrivacyKeyVoiceMessages = InputPrivacyKeyVoiceMessages;
    class InputPrivacyKeyAbout extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputPrivacyKeyAbout';
            this.constructorId = 0x3823cc40;
            this.subclassOfId = 0x53627f8;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputPrivacyKeyAbout();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputPrivacyKeyAbout = InputPrivacyKeyAbout;
    class InputPrivacyKeyBirthday extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputPrivacyKeyBirthday';
            this.constructorId = 0xd65a11cc;
            this.subclassOfId = 0x53627f8;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputPrivacyKeyBirthday();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputPrivacyKeyBirthday = InputPrivacyKeyBirthday;
    class PrivacyKeyStatusTimestamp extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'PrivacyKeyStatusTimestamp';
            this.constructorId = 0xbc2eab30;
            this.subclassOfId = 0x824651c3;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.PrivacyKeyStatusTimestamp();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PrivacyKeyStatusTimestamp = PrivacyKeyStatusTimestamp;
    class PrivacyKeyChatInvite extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'PrivacyKeyChatInvite';
            this.constructorId = 0x500e6dfa;
            this.subclassOfId = 0x824651c3;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.PrivacyKeyChatInvite();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PrivacyKeyChatInvite = PrivacyKeyChatInvite;
    class PrivacyKeyPhoneCall extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'PrivacyKeyPhoneCall';
            this.constructorId = 0x3d662b7b;
            this.subclassOfId = 0x824651c3;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.PrivacyKeyPhoneCall();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PrivacyKeyPhoneCall = PrivacyKeyPhoneCall;
    class PrivacyKeyPhoneP2P extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'PrivacyKeyPhoneP2P';
            this.constructorId = 0x39491cc8;
            this.subclassOfId = 0x824651c3;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.PrivacyKeyPhoneP2P();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PrivacyKeyPhoneP2P = PrivacyKeyPhoneP2P;
    class PrivacyKeyForwards extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'PrivacyKeyForwards';
            this.constructorId = 0x69ec56a3;
            this.subclassOfId = 0x824651c3;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.PrivacyKeyForwards();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PrivacyKeyForwards = PrivacyKeyForwards;
    class PrivacyKeyProfilePhoto extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'PrivacyKeyProfilePhoto';
            this.constructorId = 0x96151fed;
            this.subclassOfId = 0x824651c3;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.PrivacyKeyProfilePhoto();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PrivacyKeyProfilePhoto = PrivacyKeyProfilePhoto;
    class PrivacyKeyPhoneNumber extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'PrivacyKeyPhoneNumber';
            this.constructorId = 0xd19ae46d;
            this.subclassOfId = 0x824651c3;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.PrivacyKeyPhoneNumber();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PrivacyKeyPhoneNumber = PrivacyKeyPhoneNumber;
    class PrivacyKeyAddedByPhone extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'PrivacyKeyAddedByPhone';
            this.constructorId = 0x42ffd42b;
            this.subclassOfId = 0x824651c3;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.PrivacyKeyAddedByPhone();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PrivacyKeyAddedByPhone = PrivacyKeyAddedByPhone;
    class PrivacyKeyVoiceMessages extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'PrivacyKeyVoiceMessages';
            this.constructorId = 0x697f414;
            this.subclassOfId = 0x824651c3;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.PrivacyKeyVoiceMessages();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PrivacyKeyVoiceMessages = PrivacyKeyVoiceMessages;
    class PrivacyKeyAbout extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'PrivacyKeyAbout';
            this.constructorId = 0xa486b761;
            this.subclassOfId = 0x824651c3;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.PrivacyKeyAbout();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PrivacyKeyAbout = PrivacyKeyAbout;
    class PrivacyKeyBirthday extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'PrivacyKeyBirthday';
            this.constructorId = 0x2000a518;
            this.subclassOfId = 0x824651c3;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.PrivacyKeyBirthday();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PrivacyKeyBirthday = PrivacyKeyBirthday;
    class InputPrivacyValueAllowContacts extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputPrivacyValueAllowContacts';
            this.constructorId = 0xd09e07b;
            this.subclassOfId = 0x5a3b6b22;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputPrivacyValueAllowContacts();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputPrivacyValueAllowContacts = InputPrivacyValueAllowContacts;
    class InputPrivacyValueAllowAll extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputPrivacyValueAllowAll';
            this.constructorId = 0x184b35ce;
            this.subclassOfId = 0x5a3b6b22;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputPrivacyValueAllowAll();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputPrivacyValueAllowAll = InputPrivacyValueAllowAll;
    class InputPrivacyValueAllowUsers extends index_js_1.TLObject {
        users;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputPrivacyValueAllowUsers';
            this.constructorId = 0x131cc67f;
            this.subclassOfId = 0x5a3b6b22;
            this._slots = ['users'];
            this.users = params.users;
        }
        static async read(_data, ..._args) {
            let users = await index_js_1.TLObject.read(_data);
            return new Raw.InputPrivacyValueAllowUsers({ users: users });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.users) {
                b.write(index_js_1.Primitive.Vector.write(this.users));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputPrivacyValueAllowUsers = InputPrivacyValueAllowUsers;
    class InputPrivacyValueDisallowContacts extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputPrivacyValueDisallowContacts';
            this.constructorId = 0xba52007;
            this.subclassOfId = 0x5a3b6b22;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputPrivacyValueDisallowContacts();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputPrivacyValueDisallowContacts = InputPrivacyValueDisallowContacts;
    class InputPrivacyValueDisallowAll extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputPrivacyValueDisallowAll';
            this.constructorId = 0xd66b66c9;
            this.subclassOfId = 0x5a3b6b22;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputPrivacyValueDisallowAll();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputPrivacyValueDisallowAll = InputPrivacyValueDisallowAll;
    class InputPrivacyValueDisallowUsers extends index_js_1.TLObject {
        users;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputPrivacyValueDisallowUsers';
            this.constructorId = 0x90110467;
            this.subclassOfId = 0x5a3b6b22;
            this._slots = ['users'];
            this.users = params.users;
        }
        static async read(_data, ..._args) {
            let users = await index_js_1.TLObject.read(_data);
            return new Raw.InputPrivacyValueDisallowUsers({ users: users });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.users) {
                b.write(index_js_1.Primitive.Vector.write(this.users));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputPrivacyValueDisallowUsers = InputPrivacyValueDisallowUsers;
    class InputPrivacyValueAllowChatParticipants extends index_js_1.TLObject {
        chats;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputPrivacyValueAllowChatParticipants';
            this.constructorId = 0x840649cf;
            this.subclassOfId = 0x5a3b6b22;
            this._slots = ['chats'];
            this.chats = params.chats;
        }
        static async read(_data, ..._args) {
            let chats = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Long);
            return new Raw.InputPrivacyValueAllowChatParticipants({ chats: chats });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.chats) {
                b.write(index_js_1.Primitive.Vector.write(this.chats, index_js_1.Primitive.Long));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputPrivacyValueAllowChatParticipants = InputPrivacyValueAllowChatParticipants;
    class InputPrivacyValueDisallowChatParticipants extends index_js_1.TLObject {
        chats;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputPrivacyValueDisallowChatParticipants';
            this.constructorId = 0xe94f0f86;
            this.subclassOfId = 0x5a3b6b22;
            this._slots = ['chats'];
            this.chats = params.chats;
        }
        static async read(_data, ..._args) {
            let chats = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Long);
            return new Raw.InputPrivacyValueDisallowChatParticipants({ chats: chats });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.chats) {
                b.write(index_js_1.Primitive.Vector.write(this.chats, index_js_1.Primitive.Long));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputPrivacyValueDisallowChatParticipants = InputPrivacyValueDisallowChatParticipants;
    class InputPrivacyValueAllowCloseFriends extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputPrivacyValueAllowCloseFriends';
            this.constructorId = 0x2f453e49;
            this.subclassOfId = 0x5a3b6b22;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputPrivacyValueAllowCloseFriends();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputPrivacyValueAllowCloseFriends = InputPrivacyValueAllowCloseFriends;
    class InputPrivacyValueAllowPremium extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputPrivacyValueAllowPremium';
            this.constructorId = 0x77cdc9f1;
            this.subclassOfId = 0x5a3b6b22;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputPrivacyValueAllowPremium();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputPrivacyValueAllowPremium = InputPrivacyValueAllowPremium;
    class PrivacyValueAllowContacts extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'PrivacyValueAllowContacts';
            this.constructorId = 0xfffe1bac;
            this.subclassOfId = 0xebb7f270;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.PrivacyValueAllowContacts();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PrivacyValueAllowContacts = PrivacyValueAllowContacts;
    class PrivacyValueAllowAll extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'PrivacyValueAllowAll';
            this.constructorId = 0x65427b82;
            this.subclassOfId = 0xebb7f270;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.PrivacyValueAllowAll();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PrivacyValueAllowAll = PrivacyValueAllowAll;
    class PrivacyValueAllowUsers extends index_js_1.TLObject {
        users;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PrivacyValueAllowUsers';
            this.constructorId = 0xb8905fb2;
            this.subclassOfId = 0xebb7f270;
            this._slots = ['users'];
            this.users = params.users;
        }
        static async read(_data, ..._args) {
            let users = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Long);
            return new Raw.PrivacyValueAllowUsers({ users: users });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.users) {
                b.write(index_js_1.Primitive.Vector.write(this.users, index_js_1.Primitive.Long));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PrivacyValueAllowUsers = PrivacyValueAllowUsers;
    class PrivacyValueDisallowContacts extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'PrivacyValueDisallowContacts';
            this.constructorId = 0xf888fa1a;
            this.subclassOfId = 0xebb7f270;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.PrivacyValueDisallowContacts();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PrivacyValueDisallowContacts = PrivacyValueDisallowContacts;
    class PrivacyValueDisallowAll extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'PrivacyValueDisallowAll';
            this.constructorId = 0x8b73e763;
            this.subclassOfId = 0xebb7f270;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.PrivacyValueDisallowAll();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PrivacyValueDisallowAll = PrivacyValueDisallowAll;
    class PrivacyValueDisallowUsers extends index_js_1.TLObject {
        users;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PrivacyValueDisallowUsers';
            this.constructorId = 0xe4621141;
            this.subclassOfId = 0xebb7f270;
            this._slots = ['users'];
            this.users = params.users;
        }
        static async read(_data, ..._args) {
            let users = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Long);
            return new Raw.PrivacyValueDisallowUsers({ users: users });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.users) {
                b.write(index_js_1.Primitive.Vector.write(this.users, index_js_1.Primitive.Long));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PrivacyValueDisallowUsers = PrivacyValueDisallowUsers;
    class PrivacyValueAllowChatParticipants extends index_js_1.TLObject {
        chats;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PrivacyValueAllowChatParticipants';
            this.constructorId = 0x6b134e8e;
            this.subclassOfId = 0xebb7f270;
            this._slots = ['chats'];
            this.chats = params.chats;
        }
        static async read(_data, ..._args) {
            let chats = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Long);
            return new Raw.PrivacyValueAllowChatParticipants({ chats: chats });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.chats) {
                b.write(index_js_1.Primitive.Vector.write(this.chats, index_js_1.Primitive.Long));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PrivacyValueAllowChatParticipants = PrivacyValueAllowChatParticipants;
    class PrivacyValueDisallowChatParticipants extends index_js_1.TLObject {
        chats;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PrivacyValueDisallowChatParticipants';
            this.constructorId = 0x41c87565;
            this.subclassOfId = 0xebb7f270;
            this._slots = ['chats'];
            this.chats = params.chats;
        }
        static async read(_data, ..._args) {
            let chats = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Long);
            return new Raw.PrivacyValueDisallowChatParticipants({ chats: chats });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.chats) {
                b.write(index_js_1.Primitive.Vector.write(this.chats, index_js_1.Primitive.Long));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PrivacyValueDisallowChatParticipants = PrivacyValueDisallowChatParticipants;
    class PrivacyValueAllowCloseFriends extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'PrivacyValueAllowCloseFriends';
            this.constructorId = 0xf7e8d89b;
            this.subclassOfId = 0xebb7f270;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.PrivacyValueAllowCloseFriends();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PrivacyValueAllowCloseFriends = PrivacyValueAllowCloseFriends;
    class PrivacyValueAllowPremium extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'PrivacyValueAllowPremium';
            this.constructorId = 0xece9814b;
            this.subclassOfId = 0xebb7f270;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.PrivacyValueAllowPremium();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PrivacyValueAllowPremium = PrivacyValueAllowPremium;
    class AccountDaysTTL extends index_js_1.TLObject {
        days;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'AccountDaysTTL';
            this.constructorId = 0xb8d0afdf;
            this.subclassOfId = 0xbaa39d88;
            this._slots = ['days'];
            this.days = params.days;
        }
        static async read(_data, ..._args) {
            let days = await index_js_1.Primitive.Int.read(_data);
            return new Raw.AccountDaysTTL({ days: days });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.days !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.days));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.AccountDaysTTL = AccountDaysTTL;
    class DocumentAttributeImageSize extends index_js_1.TLObject {
        w;
        h;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DocumentAttributeImageSize';
            this.constructorId = 0x6c37c15c;
            this.subclassOfId = 0xf729eb9b;
            this._slots = ['w', 'h'];
            this.w = params.w;
            this.h = params.h;
        }
        static async read(_data, ..._args) {
            let w = await index_js_1.Primitive.Int.read(_data);
            let h = await index_js_1.Primitive.Int.read(_data);
            return new Raw.DocumentAttributeImageSize({ w: w, h: h });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.w !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.w));
            }
            if (this.h !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.h));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DocumentAttributeImageSize = DocumentAttributeImageSize;
    class DocumentAttributeAnimated extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'DocumentAttributeAnimated';
            this.constructorId = 0x11b58939;
            this.subclassOfId = 0xf729eb9b;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.DocumentAttributeAnimated();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DocumentAttributeAnimated = DocumentAttributeAnimated;
    class DocumentAttributeSticker extends index_js_1.TLObject {
        mask;
        alt;
        stickerset;
        maskCoords;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DocumentAttributeSticker';
            this.constructorId = 0x6319d612;
            this.subclassOfId = 0xf729eb9b;
            this._slots = ['mask', 'alt', 'stickerset', 'maskCoords'];
            this.mask = params.mask;
            this.alt = params.alt;
            this.stickerset = params.stickerset;
            this.maskCoords = params.maskCoords;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let mask = flags & (1 << 1) ? true : false;
            let alt = await index_js_1.Primitive.String.read(_data);
            let stickerset = await index_js_1.TLObject.read(_data);
            let maskCoords = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.DocumentAttributeSticker({
                mask: mask,
                alt: alt,
                stickerset: stickerset,
                maskCoords: maskCoords,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.mask ? 1 << 1 : 0;
            flags |= this.maskCoords !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.alt !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.alt));
            }
            if (this.stickerset !== undefined) {
                b.write(this.stickerset.write());
            }
            if (this.maskCoords !== undefined) {
                b.write(this.maskCoords.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DocumentAttributeSticker = DocumentAttributeSticker;
    class DocumentAttributeVideo extends index_js_1.TLObject {
        roundMessage;
        supportsStreaming;
        nosound;
        duration;
        w;
        h;
        preloadPrefixSize;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DocumentAttributeVideo';
            this.constructorId = 0xd38ff1c2;
            this.subclassOfId = 0xf729eb9b;
            this._slots = [
                'roundMessage',
                'supportsStreaming',
                'nosound',
                'duration',
                'w',
                'h',
                'preloadPrefixSize',
            ];
            this.roundMessage = params.roundMessage;
            this.supportsStreaming = params.supportsStreaming;
            this.nosound = params.nosound;
            this.duration = params.duration;
            this.w = params.w;
            this.h = params.h;
            this.preloadPrefixSize = params.preloadPrefixSize;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let roundMessage = flags & (1 << 0) ? true : false;
            let supportsStreaming = flags & (1 << 1) ? true : false;
            let nosound = flags & (1 << 3) ? true : false;
            let duration = await index_js_1.Primitive.Double.read(_data);
            let w = await index_js_1.Primitive.Int.read(_data);
            let h = await index_js_1.Primitive.Int.read(_data);
            let preloadPrefixSize = flags & (1 << 2) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            return new Raw.DocumentAttributeVideo({
                roundMessage: roundMessage,
                supportsStreaming: supportsStreaming,
                nosound: nosound,
                duration: duration,
                w: w,
                h: h,
                preloadPrefixSize: preloadPrefixSize,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.roundMessage ? 1 << 0 : 0;
            flags |= this.supportsStreaming ? 1 << 1 : 0;
            flags |= this.nosound ? 1 << 3 : 0;
            flags |= this.preloadPrefixSize !== undefined ? 1 << 2 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.duration !== undefined) {
                b.write(index_js_1.Primitive.Double.write(this.duration));
            }
            if (this.w !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.w));
            }
            if (this.h !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.h));
            }
            if (this.preloadPrefixSize !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.preloadPrefixSize));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DocumentAttributeVideo = DocumentAttributeVideo;
    class DocumentAttributeAudio extends index_js_1.TLObject {
        voice;
        duration;
        title;
        performer;
        waveform;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DocumentAttributeAudio';
            this.constructorId = 0x9852f9c6;
            this.subclassOfId = 0xf729eb9b;
            this._slots = ['voice', 'duration', 'title', 'performer', 'waveform'];
            this.voice = params.voice;
            this.duration = params.duration;
            this.title = params.title;
            this.performer = params.performer;
            this.waveform = params.waveform;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let voice = flags & (1 << 10) ? true : false;
            let duration = await index_js_1.Primitive.Int.read(_data);
            let title = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let performer = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let waveform = flags & (1 << 2) ? await index_js_1.Primitive.Bytes.read(_data) : undefined;
            return new Raw.DocumentAttributeAudio({
                voice: voice,
                duration: duration,
                title: title,
                performer: performer,
                waveform: waveform,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.voice ? 1 << 10 : 0;
            flags |= this.title !== undefined ? 1 << 0 : 0;
            flags |= this.performer !== undefined ? 1 << 1 : 0;
            flags |= this.waveform !== undefined ? 1 << 2 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.duration !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.duration));
            }
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            if (this.performer !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.performer));
            }
            if (this.waveform !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.waveform));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DocumentAttributeAudio = DocumentAttributeAudio;
    class DocumentAttributeFilename extends index_js_1.TLObject {
        fileName;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DocumentAttributeFilename';
            this.constructorId = 0x15590068;
            this.subclassOfId = 0xf729eb9b;
            this._slots = ['fileName'];
            this.fileName = params.fileName;
        }
        static async read(_data, ..._args) {
            let fileName = await index_js_1.Primitive.String.read(_data);
            return new Raw.DocumentAttributeFilename({ fileName: fileName });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.fileName !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.fileName));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DocumentAttributeFilename = DocumentAttributeFilename;
    class DocumentAttributeHasStickers extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'DocumentAttributeHasStickers';
            this.constructorId = 0x9801d2f7;
            this.subclassOfId = 0xf729eb9b;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.DocumentAttributeHasStickers();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DocumentAttributeHasStickers = DocumentAttributeHasStickers;
    class DocumentAttributeCustomEmoji extends index_js_1.TLObject {
        free;
        textColor;
        alt;
        stickerset;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DocumentAttributeCustomEmoji';
            this.constructorId = 0xfd149899;
            this.subclassOfId = 0xf729eb9b;
            this._slots = ['free', 'textColor', 'alt', 'stickerset'];
            this.free = params.free;
            this.textColor = params.textColor;
            this.alt = params.alt;
            this.stickerset = params.stickerset;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let free = flags & (1 << 0) ? true : false;
            let textColor = flags & (1 << 1) ? true : false;
            let alt = await index_js_1.Primitive.String.read(_data);
            let stickerset = await index_js_1.TLObject.read(_data);
            return new Raw.DocumentAttributeCustomEmoji({
                free: free,
                textColor: textColor,
                alt: alt,
                stickerset: stickerset,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.free ? 1 << 0 : 0;
            flags |= this.textColor ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.alt !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.alt));
            }
            if (this.stickerset !== undefined) {
                b.write(this.stickerset.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DocumentAttributeCustomEmoji = DocumentAttributeCustomEmoji;
    class StickerPack extends index_js_1.TLObject {
        emoticon;
        documents;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'StickerPack';
            this.constructorId = 0x12b299d4;
            this.subclassOfId = 0x9fefa4d4;
            this._slots = ['emoticon', 'documents'];
            this.emoticon = params.emoticon;
            this.documents = params.documents;
        }
        static async read(_data, ..._args) {
            let emoticon = await index_js_1.Primitive.String.read(_data);
            let documents = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Long);
            return new Raw.StickerPack({ emoticon: emoticon, documents: documents });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.emoticon !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.emoticon));
            }
            if (this.documents) {
                b.write(index_js_1.Primitive.Vector.write(this.documents, index_js_1.Primitive.Long));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.StickerPack = StickerPack;
    class WebPageEmpty extends index_js_1.TLObject {
        id;
        url;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'WebPageEmpty';
            this.constructorId = 0x211a1788;
            this.subclassOfId = 0x55a97481;
            this._slots = ['id', 'url'];
            this.id = params.id;
            this.url = params.url;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let id = await index_js_1.Primitive.Long.read(_data);
            let url = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
            return new Raw.WebPageEmpty({ id: id, url: url });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.url !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.url !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.url));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.WebPageEmpty = WebPageEmpty;
    class WebPagePending extends index_js_1.TLObject {
        id;
        url;
        date;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'WebPagePending';
            this.constructorId = 0xb0d13e47;
            this.subclassOfId = 0x55a97481;
            this._slots = ['id', 'url', 'date'];
            this.id = params.id;
            this.url = params.url;
            this.date = params.date;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let id = await index_js_1.Primitive.Long.read(_data);
            let url = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let date = await index_js_1.Primitive.Int.read(_data);
            return new Raw.WebPagePending({ id: id, url: url, date: date });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.url !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.url !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.url));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.WebPagePending = WebPagePending;
    class WebPage extends index_js_1.TLObject {
        hasLargeMedia;
        id;
        url;
        displayUrl;
        hash;
        type;
        siteName;
        title;
        description;
        photo;
        embedUrl;
        embedType;
        embedWidth;
        embedHeight;
        duration;
        author;
        document;
        cachedPage;
        attributes;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'WebPage';
            this.constructorId = 0xe89c45b2;
            this.subclassOfId = 0x55a97481;
            this._slots = [
                'hasLargeMedia',
                'id',
                'url',
                'displayUrl',
                'hash',
                'type',
                'siteName',
                'title',
                'description',
                'photo',
                'embedUrl',
                'embedType',
                'embedWidth',
                'embedHeight',
                'duration',
                'author',
                'document',
                'cachedPage',
                'attributes',
            ];
            this.hasLargeMedia = params.hasLargeMedia;
            this.id = params.id;
            this.url = params.url;
            this.displayUrl = params.displayUrl;
            this.hash = params.hash;
            this.type = params.type;
            this.siteName = params.siteName;
            this.title = params.title;
            this.description = params.description;
            this.photo = params.photo;
            this.embedUrl = params.embedUrl;
            this.embedType = params.embedType;
            this.embedWidth = params.embedWidth;
            this.embedHeight = params.embedHeight;
            this.duration = params.duration;
            this.author = params.author;
            this.document = params.document;
            this.cachedPage = params.cachedPage;
            this.attributes = params.attributes;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let hasLargeMedia = flags & (1 << 13) ? true : false;
            let id = await index_js_1.Primitive.Long.read(_data);
            let url = await index_js_1.Primitive.String.read(_data);
            let displayUrl = await index_js_1.Primitive.String.read(_data);
            let hash = await index_js_1.Primitive.Int.read(_data);
            let type = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let siteName = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let title = flags & (1 << 2) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let description = flags & (1 << 3) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let photo = flags & (1 << 4) ? await index_js_1.TLObject.read(_data) : undefined;
            let embedUrl = flags & (1 << 5) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let embedType = flags & (1 << 5) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let embedWidth = flags & (1 << 6) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let embedHeight = flags & (1 << 6) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let duration = flags & (1 << 7) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let author = flags & (1 << 8) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let document = flags & (1 << 9) ? await index_js_1.TLObject.read(_data) : undefined;
            let cachedPage = flags & (1 << 10) ? await index_js_1.TLObject.read(_data) : undefined;
            let attributes = flags & (1 << 12) ? await index_js_1.TLObject.read(_data) : [];
            return new Raw.WebPage({
                hasLargeMedia: hasLargeMedia,
                id: id,
                url: url,
                displayUrl: displayUrl,
                hash: hash,
                type: type,
                siteName: siteName,
                title: title,
                description: description,
                photo: photo,
                embedUrl: embedUrl,
                embedType: embedType,
                embedWidth: embedWidth,
                embedHeight: embedHeight,
                duration: duration,
                author: author,
                document: document,
                cachedPage: cachedPage,
                attributes: attributes,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.hasLargeMedia ? 1 << 13 : 0;
            flags |= this.type !== undefined ? 1 << 0 : 0;
            flags |= this.siteName !== undefined ? 1 << 1 : 0;
            flags |= this.title !== undefined ? 1 << 2 : 0;
            flags |= this.description !== undefined ? 1 << 3 : 0;
            flags |= this.photo !== undefined ? 1 << 4 : 0;
            flags |= this.embedUrl !== undefined ? 1 << 5 : 0;
            flags |= this.embedType !== undefined ? 1 << 5 : 0;
            flags |= this.embedWidth !== undefined ? 1 << 6 : 0;
            flags |= this.embedHeight !== undefined ? 1 << 6 : 0;
            flags |= this.duration !== undefined ? 1 << 7 : 0;
            flags |= this.author !== undefined ? 1 << 8 : 0;
            flags |= this.document !== undefined ? 1 << 9 : 0;
            flags |= this.cachedPage !== undefined ? 1 << 10 : 0;
            flags |= this.attributes ? 1 << 12 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.url !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.url));
            }
            if (this.displayUrl !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.displayUrl));
            }
            if (this.hash !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.hash));
            }
            if (this.type !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.type));
            }
            if (this.siteName !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.siteName));
            }
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            if (this.description !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.description));
            }
            if (this.photo !== undefined) {
                b.write(this.photo.write());
            }
            if (this.embedUrl !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.embedUrl));
            }
            if (this.embedType !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.embedType));
            }
            if (this.embedWidth !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.embedWidth));
            }
            if (this.embedHeight !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.embedHeight));
            }
            if (this.duration !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.duration));
            }
            if (this.author !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.author));
            }
            if (this.document !== undefined) {
                b.write(this.document.write());
            }
            if (this.cachedPage !== undefined) {
                b.write(this.cachedPage.write());
            }
            if (this.attributes) {
                b.write(index_js_1.Primitive.Vector.write(this.attributes));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.WebPage = WebPage;
    class WebPageNotModified extends index_js_1.TLObject {
        cachedPageViews;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'WebPageNotModified';
            this.constructorId = 0x7311ca11;
            this.subclassOfId = 0x55a97481;
            this._slots = ['cachedPageViews'];
            this.cachedPageViews = params.cachedPageViews;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let cachedPageViews = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            return new Raw.WebPageNotModified({ cachedPageViews: cachedPageViews });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.cachedPageViews !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.cachedPageViews !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.cachedPageViews));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.WebPageNotModified = WebPageNotModified;
    class Authorization extends index_js_1.TLObject {
        current;
        officialApp;
        passwordPending;
        encryptedRequestsDisabled;
        callRequestsDisabled;
        unconfirmed;
        hash;
        deviceModel;
        platform;
        systemVersion;
        apiId;
        appName;
        appVersion;
        dateCreated;
        dateActive;
        ip;
        country;
        region;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'Authorization';
            this.constructorId = 0xad01d61d;
            this.subclassOfId = 0xc913c01a;
            this._slots = [
                'current',
                'officialApp',
                'passwordPending',
                'encryptedRequestsDisabled',
                'callRequestsDisabled',
                'unconfirmed',
                'hash',
                'deviceModel',
                'platform',
                'systemVersion',
                'apiId',
                'appName',
                'appVersion',
                'dateCreated',
                'dateActive',
                'ip',
                'country',
                'region',
            ];
            this.current = params.current;
            this.officialApp = params.officialApp;
            this.passwordPending = params.passwordPending;
            this.encryptedRequestsDisabled = params.encryptedRequestsDisabled;
            this.callRequestsDisabled = params.callRequestsDisabled;
            this.unconfirmed = params.unconfirmed;
            this.hash = params.hash;
            this.deviceModel = params.deviceModel;
            this.platform = params.platform;
            this.systemVersion = params.systemVersion;
            this.apiId = params.apiId;
            this.appName = params.appName;
            this.appVersion = params.appVersion;
            this.dateCreated = params.dateCreated;
            this.dateActive = params.dateActive;
            this.ip = params.ip;
            this.country = params.country;
            this.region = params.region;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let current = flags & (1 << 0) ? true : false;
            let officialApp = flags & (1 << 1) ? true : false;
            let passwordPending = flags & (1 << 2) ? true : false;
            let encryptedRequestsDisabled = flags & (1 << 3) ? true : false;
            let callRequestsDisabled = flags & (1 << 4) ? true : false;
            let unconfirmed = flags & (1 << 5) ? true : false;
            let hash = await index_js_1.Primitive.Long.read(_data);
            let deviceModel = await index_js_1.Primitive.String.read(_data);
            let platform = await index_js_1.Primitive.String.read(_data);
            let systemVersion = await index_js_1.Primitive.String.read(_data);
            let apiId = await index_js_1.Primitive.Int.read(_data);
            let appName = await index_js_1.Primitive.String.read(_data);
            let appVersion = await index_js_1.Primitive.String.read(_data);
            let dateCreated = await index_js_1.Primitive.Int.read(_data);
            let dateActive = await index_js_1.Primitive.Int.read(_data);
            let ip = await index_js_1.Primitive.String.read(_data);
            let country = await index_js_1.Primitive.String.read(_data);
            let region = await index_js_1.Primitive.String.read(_data);
            return new Raw.Authorization({
                current: current,
                officialApp: officialApp,
                passwordPending: passwordPending,
                encryptedRequestsDisabled: encryptedRequestsDisabled,
                callRequestsDisabled: callRequestsDisabled,
                unconfirmed: unconfirmed,
                hash: hash,
                deviceModel: deviceModel,
                platform: platform,
                systemVersion: systemVersion,
                apiId: apiId,
                appName: appName,
                appVersion: appVersion,
                dateCreated: dateCreated,
                dateActive: dateActive,
                ip: ip,
                country: country,
                region: region,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.current ? 1 << 0 : 0;
            flags |= this.officialApp ? 1 << 1 : 0;
            flags |= this.passwordPending ? 1 << 2 : 0;
            flags |= this.encryptedRequestsDisabled ? 1 << 3 : 0;
            flags |= this.callRequestsDisabled ? 1 << 4 : 0;
            flags |= this.unconfirmed ? 1 << 5 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.hash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.hash));
            }
            if (this.deviceModel !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.deviceModel));
            }
            if (this.platform !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.platform));
            }
            if (this.systemVersion !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.systemVersion));
            }
            if (this.apiId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.apiId));
            }
            if (this.appName !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.appName));
            }
            if (this.appVersion !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.appVersion));
            }
            if (this.dateCreated !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.dateCreated));
            }
            if (this.dateActive !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.dateActive));
            }
            if (this.ip !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.ip));
            }
            if (this.country !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.country));
            }
            if (this.region !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.region));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.Authorization = Authorization;
    class ReceivedNotifyMessage extends index_js_1.TLObject {
        id;
        flags;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ReceivedNotifyMessage';
            this.constructorId = 0xa384b779;
            this.subclassOfId = 0xa962381e;
            this._slots = ['id', 'flags'];
            this.id = params.id;
            this.flags = params.flags;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.Int.read(_data);
            let flags = await index_js_1.Primitive.Int.read(_data);
            return new Raw.ReceivedNotifyMessage({ id: id, flags: flags });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.id));
            }
            if (this.flags !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.flags));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ReceivedNotifyMessage = ReceivedNotifyMessage;
    class ChatInviteExported extends index_js_1.TLObject {
        revoked;
        permanent;
        requestNeeded;
        link;
        adminId;
        date;
        startDate;
        expireDate;
        usageLimit;
        usage;
        requested;
        title;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChatInviteExported';
            this.constructorId = 0xab4a819;
            this.subclassOfId = 0xb4748a58;
            this._slots = [
                'revoked',
                'permanent',
                'requestNeeded',
                'link',
                'adminId',
                'date',
                'startDate',
                'expireDate',
                'usageLimit',
                'usage',
                'requested',
                'title',
            ];
            this.revoked = params.revoked;
            this.permanent = params.permanent;
            this.requestNeeded = params.requestNeeded;
            this.link = params.link;
            this.adminId = params.adminId;
            this.date = params.date;
            this.startDate = params.startDate;
            this.expireDate = params.expireDate;
            this.usageLimit = params.usageLimit;
            this.usage = params.usage;
            this.requested = params.requested;
            this.title = params.title;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let revoked = flags & (1 << 0) ? true : false;
            let permanent = flags & (1 << 5) ? true : false;
            let requestNeeded = flags & (1 << 6) ? true : false;
            let link = await index_js_1.Primitive.String.read(_data);
            let adminId = await index_js_1.Primitive.Long.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            let startDate = flags & (1 << 4) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let expireDate = flags & (1 << 1) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let usageLimit = flags & (1 << 2) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let usage = flags & (1 << 3) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let requested = flags & (1 << 7) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let title = flags & (1 << 8) ? await index_js_1.Primitive.String.read(_data) : undefined;
            return new Raw.ChatInviteExported({
                revoked: revoked,
                permanent: permanent,
                requestNeeded: requestNeeded,
                link: link,
                adminId: adminId,
                date: date,
                startDate: startDate,
                expireDate: expireDate,
                usageLimit: usageLimit,
                usage: usage,
                requested: requested,
                title: title,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.revoked ? 1 << 0 : 0;
            flags |= this.permanent ? 1 << 5 : 0;
            flags |= this.requestNeeded ? 1 << 6 : 0;
            flags |= this.startDate !== undefined ? 1 << 4 : 0;
            flags |= this.expireDate !== undefined ? 1 << 1 : 0;
            flags |= this.usageLimit !== undefined ? 1 << 2 : 0;
            flags |= this.usage !== undefined ? 1 << 3 : 0;
            flags |= this.requested !== undefined ? 1 << 7 : 0;
            flags |= this.title !== undefined ? 1 << 8 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.link !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.link));
            }
            if (this.adminId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.adminId));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.startDate !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.startDate));
            }
            if (this.expireDate !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.expireDate));
            }
            if (this.usageLimit !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.usageLimit));
            }
            if (this.usage !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.usage));
            }
            if (this.requested !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.requested));
            }
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChatInviteExported = ChatInviteExported;
    class ChatInvitePublicJoinRequests extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'ChatInvitePublicJoinRequests';
            this.constructorId = 0xed107ab7;
            this.subclassOfId = 0xb4748a58;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.ChatInvitePublicJoinRequests();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChatInvitePublicJoinRequests = ChatInvitePublicJoinRequests;
    class ChatInviteAlready extends index_js_1.TLObject {
        chat;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChatInviteAlready';
            this.constructorId = 0x5a686d7c;
            this.subclassOfId = 0x4561736;
            this._slots = ['chat'];
            this.chat = params.chat;
        }
        static async read(_data, ..._args) {
            let chat = await index_js_1.TLObject.read(_data);
            return new Raw.ChatInviteAlready({ chat: chat });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.chat !== undefined) {
                b.write(this.chat.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChatInviteAlready = ChatInviteAlready;
    class ChatInvite extends index_js_1.TLObject {
        channel;
        broadcast;
        public;
        megagroup;
        requestNeeded;
        verified;
        scam;
        fake;
        title;
        about;
        photo;
        participantsCount;
        participants;
        color;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChatInvite';
            this.constructorId = 0xcde0ec40;
            this.subclassOfId = 0x4561736;
            this._slots = [
                'channel',
                'broadcast',
                'public',
                'megagroup',
                'requestNeeded',
                'verified',
                'scam',
                'fake',
                'title',
                'about',
                'photo',
                'participantsCount',
                'participants',
                'color',
            ];
            this.channel = params.channel;
            this.broadcast = params.broadcast;
            this.public = params.public;
            this.megagroup = params.megagroup;
            this.requestNeeded = params.requestNeeded;
            this.verified = params.verified;
            this.scam = params.scam;
            this.fake = params.fake;
            this.title = params.title;
            this.about = params.about;
            this.photo = params.photo;
            this.participantsCount = params.participantsCount;
            this.participants = params.participants;
            this.color = params.color;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let channel = flags & (1 << 0) ? true : false;
            let broadcast = flags & (1 << 1) ? true : false;
            let _public = flags & (1 << 2) ? true : false;
            let megagroup = flags & (1 << 3) ? true : false;
            let requestNeeded = flags & (1 << 6) ? true : false;
            let verified = flags & (1 << 7) ? true : false;
            let scam = flags & (1 << 8) ? true : false;
            let fake = flags & (1 << 9) ? true : false;
            let title = await index_js_1.Primitive.String.read(_data);
            let about = flags & (1 << 5) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let photo = await index_js_1.TLObject.read(_data);
            let participantsCount = await index_js_1.Primitive.Int.read(_data);
            let participants = flags & (1 << 4) ? await index_js_1.TLObject.read(_data) : [];
            let color = await index_js_1.Primitive.Int.read(_data);
            return new Raw.ChatInvite({
                channel: channel,
                broadcast: broadcast,
                public: _public,
                megagroup: megagroup,
                requestNeeded: requestNeeded,
                verified: verified,
                scam: scam,
                fake: fake,
                title: title,
                about: about,
                photo: photo,
                participantsCount: participantsCount,
                participants: participants,
                color: color,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.channel ? 1 << 0 : 0;
            flags |= this.broadcast ? 1 << 1 : 0;
            flags |= this.public ? 1 << 2 : 0;
            flags |= this.megagroup ? 1 << 3 : 0;
            flags |= this.requestNeeded ? 1 << 6 : 0;
            flags |= this.verified ? 1 << 7 : 0;
            flags |= this.scam ? 1 << 8 : 0;
            flags |= this.fake ? 1 << 9 : 0;
            flags |= this.about !== undefined ? 1 << 5 : 0;
            flags |= this.participants ? 1 << 4 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            if (this.about !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.about));
            }
            if (this.photo !== undefined) {
                b.write(this.photo.write());
            }
            if (this.participantsCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.participantsCount));
            }
            if (this.participants) {
                b.write(index_js_1.Primitive.Vector.write(this.participants));
            }
            if (this.color !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.color));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChatInvite = ChatInvite;
    class ChatInvitePeek extends index_js_1.TLObject {
        chat;
        expires;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChatInvitePeek';
            this.constructorId = 0x61695cb0;
            this.subclassOfId = 0x4561736;
            this._slots = ['chat', 'expires'];
            this.chat = params.chat;
            this.expires = params.expires;
        }
        static async read(_data, ..._args) {
            let chat = await index_js_1.TLObject.read(_data);
            let expires = await index_js_1.Primitive.Int.read(_data);
            return new Raw.ChatInvitePeek({ chat: chat, expires: expires });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.chat !== undefined) {
                b.write(this.chat.write());
            }
            if (this.expires !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.expires));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChatInvitePeek = ChatInvitePeek;
    class InputStickerSetEmpty extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputStickerSetEmpty';
            this.constructorId = 0xffb62b95;
            this.subclassOfId = 0x3da389aa;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputStickerSetEmpty();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputStickerSetEmpty = InputStickerSetEmpty;
    class InputStickerSetID extends index_js_1.TLObject {
        id;
        accessHash;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputStickerSetID';
            this.constructorId = 0x9de7a269;
            this.subclassOfId = 0x3da389aa;
            this._slots = ['id', 'accessHash'];
            this.id = params.id;
            this.accessHash = params.accessHash;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.Long.read(_data);
            let accessHash = await index_js_1.Primitive.Long.read(_data);
            return new Raw.InputStickerSetID({ id: id, accessHash: accessHash });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.accessHash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.accessHash));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputStickerSetID = InputStickerSetID;
    class InputStickerSetShortName extends index_js_1.TLObject {
        shortName;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputStickerSetShortName';
            this.constructorId = 0x861cc8a0;
            this.subclassOfId = 0x3da389aa;
            this._slots = ['shortName'];
            this.shortName = params.shortName;
        }
        static async read(_data, ..._args) {
            let shortName = await index_js_1.Primitive.String.read(_data);
            return new Raw.InputStickerSetShortName({ shortName: shortName });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.shortName !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.shortName));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputStickerSetShortName = InputStickerSetShortName;
    class InputStickerSetAnimatedEmoji extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputStickerSetAnimatedEmoji';
            this.constructorId = 0x28703c8;
            this.subclassOfId = 0x3da389aa;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputStickerSetAnimatedEmoji();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputStickerSetAnimatedEmoji = InputStickerSetAnimatedEmoji;
    class InputStickerSetDice extends index_js_1.TLObject {
        emoticon;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputStickerSetDice';
            this.constructorId = 0xe67f520e;
            this.subclassOfId = 0x3da389aa;
            this._slots = ['emoticon'];
            this.emoticon = params.emoticon;
        }
        static async read(_data, ..._args) {
            let emoticon = await index_js_1.Primitive.String.read(_data);
            return new Raw.InputStickerSetDice({ emoticon: emoticon });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.emoticon !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.emoticon));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputStickerSetDice = InputStickerSetDice;
    class InputStickerSetAnimatedEmojiAnimations extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputStickerSetAnimatedEmojiAnimations';
            this.constructorId = 0xcde3739;
            this.subclassOfId = 0x3da389aa;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputStickerSetAnimatedEmojiAnimations();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputStickerSetAnimatedEmojiAnimations = InputStickerSetAnimatedEmojiAnimations;
    class InputStickerSetPremiumGifts extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputStickerSetPremiumGifts';
            this.constructorId = 0xc88b3b02;
            this.subclassOfId = 0x3da389aa;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputStickerSetPremiumGifts();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputStickerSetPremiumGifts = InputStickerSetPremiumGifts;
    class InputStickerSetEmojiGenericAnimations extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputStickerSetEmojiGenericAnimations';
            this.constructorId = 0x4c4d4ce;
            this.subclassOfId = 0x3da389aa;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputStickerSetEmojiGenericAnimations();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputStickerSetEmojiGenericAnimations = InputStickerSetEmojiGenericAnimations;
    class InputStickerSetEmojiDefaultStatuses extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputStickerSetEmojiDefaultStatuses';
            this.constructorId = 0x29d0f5ee;
            this.subclassOfId = 0x3da389aa;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputStickerSetEmojiDefaultStatuses();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputStickerSetEmojiDefaultStatuses = InputStickerSetEmojiDefaultStatuses;
    class InputStickerSetEmojiDefaultTopicIcons extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputStickerSetEmojiDefaultTopicIcons';
            this.constructorId = 0x44c1f8e9;
            this.subclassOfId = 0x3da389aa;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputStickerSetEmojiDefaultTopicIcons();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputStickerSetEmojiDefaultTopicIcons = InputStickerSetEmojiDefaultTopicIcons;
    class InputStickerSetEmojiChannelDefaultStatuses extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputStickerSetEmojiChannelDefaultStatuses';
            this.constructorId = 0x49748553;
            this.subclassOfId = 0x3da389aa;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputStickerSetEmojiChannelDefaultStatuses();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputStickerSetEmojiChannelDefaultStatuses = InputStickerSetEmojiChannelDefaultStatuses;
    class StickerSet extends index_js_1.TLObject {
        archived;
        official;
        masks;
        emojis;
        textColor;
        channelEmojiStatus;
        creator;
        installedDate;
        id;
        accessHash;
        title;
        shortName;
        thumbs;
        thumbDcId;
        thumbVersion;
        thumbDocumentId;
        count;
        hash;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'StickerSet';
            this.constructorId = 0x2dd14edc;
            this.subclassOfId = 0xbad3ff91;
            this._slots = [
                'archived',
                'official',
                'masks',
                'emojis',
                'textColor',
                'channelEmojiStatus',
                'creator',
                'installedDate',
                'id',
                'accessHash',
                'title',
                'shortName',
                'thumbs',
                'thumbDcId',
                'thumbVersion',
                'thumbDocumentId',
                'count',
                'hash',
            ];
            this.archived = params.archived;
            this.official = params.official;
            this.masks = params.masks;
            this.emojis = params.emojis;
            this.textColor = params.textColor;
            this.channelEmojiStatus = params.channelEmojiStatus;
            this.creator = params.creator;
            this.installedDate = params.installedDate;
            this.id = params.id;
            this.accessHash = params.accessHash;
            this.title = params.title;
            this.shortName = params.shortName;
            this.thumbs = params.thumbs;
            this.thumbDcId = params.thumbDcId;
            this.thumbVersion = params.thumbVersion;
            this.thumbDocumentId = params.thumbDocumentId;
            this.count = params.count;
            this.hash = params.hash;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let archived = flags & (1 << 1) ? true : false;
            let official = flags & (1 << 2) ? true : false;
            let masks = flags & (1 << 3) ? true : false;
            let emojis = flags & (1 << 7) ? true : false;
            let textColor = flags & (1 << 9) ? true : false;
            let channelEmojiStatus = flags & (1 << 10) ? true : false;
            let creator = flags & (1 << 11) ? true : false;
            let installedDate = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let id = await index_js_1.Primitive.Long.read(_data);
            let accessHash = await index_js_1.Primitive.Long.read(_data);
            let title = await index_js_1.Primitive.String.read(_data);
            let shortName = await index_js_1.Primitive.String.read(_data);
            let thumbs = flags & (1 << 4) ? await index_js_1.TLObject.read(_data) : [];
            let thumbDcId = flags & (1 << 4) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let thumbVersion = flags & (1 << 4) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let thumbDocumentId = flags & (1 << 8) ? await index_js_1.Primitive.Long.read(_data) : undefined;
            let count = await index_js_1.Primitive.Int.read(_data);
            let hash = await index_js_1.Primitive.Int.read(_data);
            return new Raw.StickerSet({
                archived: archived,
                official: official,
                masks: masks,
                emojis: emojis,
                textColor: textColor,
                channelEmojiStatus: channelEmojiStatus,
                creator: creator,
                installedDate: installedDate,
                id: id,
                accessHash: accessHash,
                title: title,
                shortName: shortName,
                thumbs: thumbs,
                thumbDcId: thumbDcId,
                thumbVersion: thumbVersion,
                thumbDocumentId: thumbDocumentId,
                count: count,
                hash: hash,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.archived ? 1 << 1 : 0;
            flags |= this.official ? 1 << 2 : 0;
            flags |= this.masks ? 1 << 3 : 0;
            flags |= this.emojis ? 1 << 7 : 0;
            flags |= this.textColor ? 1 << 9 : 0;
            flags |= this.channelEmojiStatus ? 1 << 10 : 0;
            flags |= this.creator ? 1 << 11 : 0;
            flags |= this.installedDate !== undefined ? 1 << 0 : 0;
            flags |= this.thumbs ? 1 << 4 : 0;
            flags |= this.thumbDcId !== undefined ? 1 << 4 : 0;
            flags |= this.thumbVersion !== undefined ? 1 << 4 : 0;
            flags |= this.thumbDocumentId !== undefined ? 1 << 8 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.installedDate !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.installedDate));
            }
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.accessHash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.accessHash));
            }
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            if (this.shortName !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.shortName));
            }
            if (this.thumbs) {
                b.write(index_js_1.Primitive.Vector.write(this.thumbs));
            }
            if (this.thumbDcId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.thumbDcId));
            }
            if (this.thumbVersion !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.thumbVersion));
            }
            if (this.thumbDocumentId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.thumbDocumentId));
            }
            if (this.count !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.count));
            }
            if (this.hash !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.hash));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.StickerSet = StickerSet;
    class BotCommand extends index_js_1.TLObject {
        command;
        description;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'BotCommand';
            this.constructorId = 0xc27ac8c7;
            this.subclassOfId = 0xe1e62c2;
            this._slots = ['command', 'description'];
            this.command = params.command;
            this.description = params.description;
        }
        static async read(_data, ..._args) {
            let command = await index_js_1.Primitive.String.read(_data);
            let description = await index_js_1.Primitive.String.read(_data);
            return new Raw.BotCommand({ command: command, description: description });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.command !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.command));
            }
            if (this.description !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.description));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.BotCommand = BotCommand;
    class BotInfo extends index_js_1.TLObject {
        userId;
        description;
        descriptionPhoto;
        descriptionDocument;
        commands;
        menuButton;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'BotInfo';
            this.constructorId = 0x8f300b57;
            this.subclassOfId = 0xf1f701db;
            this._slots = [
                'userId',
                'description',
                'descriptionPhoto',
                'descriptionDocument',
                'commands',
                'menuButton',
            ];
            this.userId = params.userId;
            this.description = params.description;
            this.descriptionPhoto = params.descriptionPhoto;
            this.descriptionDocument = params.descriptionDocument;
            this.commands = params.commands;
            this.menuButton = params.menuButton;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let userId = flags & (1 << 0) ? await index_js_1.Primitive.Long.read(_data) : undefined;
            let description = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let descriptionPhoto = flags & (1 << 4) ? await index_js_1.TLObject.read(_data) : undefined;
            let descriptionDocument = flags & (1 << 5) ? await index_js_1.TLObject.read(_data) : undefined;
            let commands = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : [];
            let menuButton = flags & (1 << 3) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.BotInfo({
                userId: userId,
                description: description,
                descriptionPhoto: descriptionPhoto,
                descriptionDocument: descriptionDocument,
                commands: commands,
                menuButton: menuButton,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.userId !== undefined ? 1 << 0 : 0;
            flags |= this.description !== undefined ? 1 << 1 : 0;
            flags |= this.descriptionPhoto !== undefined ? 1 << 4 : 0;
            flags |= this.descriptionDocument !== undefined ? 1 << 5 : 0;
            flags |= this.commands ? 1 << 2 : 0;
            flags |= this.menuButton !== undefined ? 1 << 3 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            if (this.description !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.description));
            }
            if (this.descriptionPhoto !== undefined) {
                b.write(this.descriptionPhoto.write());
            }
            if (this.descriptionDocument !== undefined) {
                b.write(this.descriptionDocument.write());
            }
            if (this.commands) {
                b.write(index_js_1.Primitive.Vector.write(this.commands));
            }
            if (this.menuButton !== undefined) {
                b.write(this.menuButton.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.BotInfo = BotInfo;
    class KeyboardButton extends index_js_1.TLObject {
        text;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'KeyboardButton';
            this.constructorId = 0xa2fa4880;
            this.subclassOfId = 0xbad74a3;
            this._slots = ['text'];
            this.text = params.text;
        }
        static async read(_data, ..._args) {
            let text = await index_js_1.Primitive.String.read(_data);
            return new Raw.KeyboardButton({ text: text });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.text !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.text));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.KeyboardButton = KeyboardButton;
    class KeyboardButtonUrl extends index_js_1.TLObject {
        text;
        url;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'KeyboardButtonUrl';
            this.constructorId = 0x258aff05;
            this.subclassOfId = 0xbad74a3;
            this._slots = ['text', 'url'];
            this.text = params.text;
            this.url = params.url;
        }
        static async read(_data, ..._args) {
            let text = await index_js_1.Primitive.String.read(_data);
            let url = await index_js_1.Primitive.String.read(_data);
            return new Raw.KeyboardButtonUrl({ text: text, url: url });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.text !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.text));
            }
            if (this.url !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.url));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.KeyboardButtonUrl = KeyboardButtonUrl;
    class KeyboardButtonCallback extends index_js_1.TLObject {
        requiresPassword;
        text;
        data;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'KeyboardButtonCallback';
            this.constructorId = 0x35bbdb6b;
            this.subclassOfId = 0xbad74a3;
            this._slots = ['requiresPassword', 'text', 'data'];
            this.requiresPassword = params.requiresPassword;
            this.text = params.text;
            this.data = params.data;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let requiresPassword = flags & (1 << 0) ? true : false;
            let text = await index_js_1.Primitive.String.read(_data);
            let data = await index_js_1.Primitive.Bytes.read(_data);
            return new Raw.KeyboardButtonCallback({
                requiresPassword: requiresPassword,
                text: text,
                data: data,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.requiresPassword ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.text !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.text));
            }
            if (this.data !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.data));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.KeyboardButtonCallback = KeyboardButtonCallback;
    class KeyboardButtonRequestPhone extends index_js_1.TLObject {
        text;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'KeyboardButtonRequestPhone';
            this.constructorId = 0xb16a6c29;
            this.subclassOfId = 0xbad74a3;
            this._slots = ['text'];
            this.text = params.text;
        }
        static async read(_data, ..._args) {
            let text = await index_js_1.Primitive.String.read(_data);
            return new Raw.KeyboardButtonRequestPhone({ text: text });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.text !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.text));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.KeyboardButtonRequestPhone = KeyboardButtonRequestPhone;
    class KeyboardButtonRequestGeoLocation extends index_js_1.TLObject {
        text;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'KeyboardButtonRequestGeoLocation';
            this.constructorId = 0xfc796b3f;
            this.subclassOfId = 0xbad74a3;
            this._slots = ['text'];
            this.text = params.text;
        }
        static async read(_data, ..._args) {
            let text = await index_js_1.Primitive.String.read(_data);
            return new Raw.KeyboardButtonRequestGeoLocation({ text: text });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.text !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.text));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.KeyboardButtonRequestGeoLocation = KeyboardButtonRequestGeoLocation;
    class KeyboardButtonSwitchInline extends index_js_1.TLObject {
        samePeer;
        text;
        query;
        peerTypes;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'KeyboardButtonSwitchInline';
            this.constructorId = 0x93b9fbb5;
            this.subclassOfId = 0xbad74a3;
            this._slots = ['samePeer', 'text', 'query', 'peerTypes'];
            this.samePeer = params.samePeer;
            this.text = params.text;
            this.query = params.query;
            this.peerTypes = params.peerTypes;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let samePeer = flags & (1 << 0) ? true : false;
            let text = await index_js_1.Primitive.String.read(_data);
            let query = await index_js_1.Primitive.String.read(_data);
            let peerTypes = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : [];
            return new Raw.KeyboardButtonSwitchInline({
                samePeer: samePeer,
                text: text,
                query: query,
                peerTypes: peerTypes,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.samePeer ? 1 << 0 : 0;
            flags |= this.peerTypes ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.text !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.text));
            }
            if (this.query !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.query));
            }
            if (this.peerTypes) {
                b.write(index_js_1.Primitive.Vector.write(this.peerTypes));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.KeyboardButtonSwitchInline = KeyboardButtonSwitchInline;
    class KeyboardButtonGame extends index_js_1.TLObject {
        text;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'KeyboardButtonGame';
            this.constructorId = 0x50f41ccf;
            this.subclassOfId = 0xbad74a3;
            this._slots = ['text'];
            this.text = params.text;
        }
        static async read(_data, ..._args) {
            let text = await index_js_1.Primitive.String.read(_data);
            return new Raw.KeyboardButtonGame({ text: text });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.text !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.text));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.KeyboardButtonGame = KeyboardButtonGame;
    class KeyboardButtonBuy extends index_js_1.TLObject {
        text;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'KeyboardButtonBuy';
            this.constructorId = 0xafd93fbb;
            this.subclassOfId = 0xbad74a3;
            this._slots = ['text'];
            this.text = params.text;
        }
        static async read(_data, ..._args) {
            let text = await index_js_1.Primitive.String.read(_data);
            return new Raw.KeyboardButtonBuy({ text: text });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.text !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.text));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.KeyboardButtonBuy = KeyboardButtonBuy;
    class KeyboardButtonUrlAuth extends index_js_1.TLObject {
        text;
        fwdText;
        url;
        buttonId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'KeyboardButtonUrlAuth';
            this.constructorId = 0x10b78d29;
            this.subclassOfId = 0xbad74a3;
            this._slots = ['text', 'fwdText', 'url', 'buttonId'];
            this.text = params.text;
            this.fwdText = params.fwdText;
            this.url = params.url;
            this.buttonId = params.buttonId;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let text = await index_js_1.Primitive.String.read(_data);
            let fwdText = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let url = await index_js_1.Primitive.String.read(_data);
            let buttonId = await index_js_1.Primitive.Int.read(_data);
            return new Raw.KeyboardButtonUrlAuth({
                text: text,
                fwdText: fwdText,
                url: url,
                buttonId: buttonId,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.fwdText !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.text !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.text));
            }
            if (this.fwdText !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.fwdText));
            }
            if (this.url !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.url));
            }
            if (this.buttonId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.buttonId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.KeyboardButtonUrlAuth = KeyboardButtonUrlAuth;
    class InputKeyboardButtonUrlAuth extends index_js_1.TLObject {
        requestWriteAccess;
        text;
        fwdText;
        url;
        bot;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputKeyboardButtonUrlAuth';
            this.constructorId = 0xd02e7fd4;
            this.subclassOfId = 0xbad74a3;
            this._slots = ['requestWriteAccess', 'text', 'fwdText', 'url', 'bot'];
            this.requestWriteAccess = params.requestWriteAccess;
            this.text = params.text;
            this.fwdText = params.fwdText;
            this.url = params.url;
            this.bot = params.bot;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let requestWriteAccess = flags & (1 << 0) ? true : false;
            let text = await index_js_1.Primitive.String.read(_data);
            let fwdText = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let url = await index_js_1.Primitive.String.read(_data);
            let bot = await index_js_1.TLObject.read(_data);
            return new Raw.InputKeyboardButtonUrlAuth({
                requestWriteAccess: requestWriteAccess,
                text: text,
                fwdText: fwdText,
                url: url,
                bot: bot,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.requestWriteAccess ? 1 << 0 : 0;
            flags |= this.fwdText !== undefined ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.text !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.text));
            }
            if (this.fwdText !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.fwdText));
            }
            if (this.url !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.url));
            }
            if (this.bot !== undefined) {
                b.write(this.bot.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputKeyboardButtonUrlAuth = InputKeyboardButtonUrlAuth;
    class KeyboardButtonRequestPoll extends index_js_1.TLObject {
        quiz;
        text;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'KeyboardButtonRequestPoll';
            this.constructorId = 0xbbc7515d;
            this.subclassOfId = 0xbad74a3;
            this._slots = ['quiz', 'text'];
            this.quiz = params.quiz;
            this.text = params.text;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let quiz = flags & (1 << 0) ? await index_js_1.Primitive.Bool.read(_data) : undefined;
            let text = await index_js_1.Primitive.String.read(_data);
            return new Raw.KeyboardButtonRequestPoll({ quiz: quiz, text: text });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.quiz !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.quiz !== undefined) {
                b.write(index_js_1.Primitive.Bool.write(this.quiz));
            }
            if (this.text !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.text));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.KeyboardButtonRequestPoll = KeyboardButtonRequestPoll;
    class InputKeyboardButtonUserProfile extends index_js_1.TLObject {
        text;
        userId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputKeyboardButtonUserProfile';
            this.constructorId = 0xe988037b;
            this.subclassOfId = 0xbad74a3;
            this._slots = ['text', 'userId'];
            this.text = params.text;
            this.userId = params.userId;
        }
        static async read(_data, ..._args) {
            let text = await index_js_1.Primitive.String.read(_data);
            let userId = await index_js_1.TLObject.read(_data);
            return new Raw.InputKeyboardButtonUserProfile({ text: text, userId: userId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.text !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.text));
            }
            if (this.userId !== undefined) {
                b.write(this.userId.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputKeyboardButtonUserProfile = InputKeyboardButtonUserProfile;
    class KeyboardButtonUserProfile extends index_js_1.TLObject {
        text;
        userId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'KeyboardButtonUserProfile';
            this.constructorId = 0x308660c1;
            this.subclassOfId = 0xbad74a3;
            this._slots = ['text', 'userId'];
            this.text = params.text;
            this.userId = params.userId;
        }
        static async read(_data, ..._args) {
            let text = await index_js_1.Primitive.String.read(_data);
            let userId = await index_js_1.Primitive.Long.read(_data);
            return new Raw.KeyboardButtonUserProfile({ text: text, userId: userId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.text !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.text));
            }
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.KeyboardButtonUserProfile = KeyboardButtonUserProfile;
    class KeyboardButtonWebView extends index_js_1.TLObject {
        text;
        url;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'KeyboardButtonWebView';
            this.constructorId = 0x13767230;
            this.subclassOfId = 0xbad74a3;
            this._slots = ['text', 'url'];
            this.text = params.text;
            this.url = params.url;
        }
        static async read(_data, ..._args) {
            let text = await index_js_1.Primitive.String.read(_data);
            let url = await index_js_1.Primitive.String.read(_data);
            return new Raw.KeyboardButtonWebView({ text: text, url: url });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.text !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.text));
            }
            if (this.url !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.url));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.KeyboardButtonWebView = KeyboardButtonWebView;
    class KeyboardButtonSimpleWebView extends index_js_1.TLObject {
        text;
        url;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'KeyboardButtonSimpleWebView';
            this.constructorId = 0xa0c0505c;
            this.subclassOfId = 0xbad74a3;
            this._slots = ['text', 'url'];
            this.text = params.text;
            this.url = params.url;
        }
        static async read(_data, ..._args) {
            let text = await index_js_1.Primitive.String.read(_data);
            let url = await index_js_1.Primitive.String.read(_data);
            return new Raw.KeyboardButtonSimpleWebView({ text: text, url: url });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.text !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.text));
            }
            if (this.url !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.url));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.KeyboardButtonSimpleWebView = KeyboardButtonSimpleWebView;
    class KeyboardButtonRequestPeer extends index_js_1.TLObject {
        text;
        buttonId;
        peerType;
        maxQuantity;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'KeyboardButtonRequestPeer';
            this.constructorId = 0x53d7bfd8;
            this.subclassOfId = 0xbad74a3;
            this._slots = ['text', 'buttonId', 'peerType', 'maxQuantity'];
            this.text = params.text;
            this.buttonId = params.buttonId;
            this.peerType = params.peerType;
            this.maxQuantity = params.maxQuantity;
        }
        static async read(_data, ..._args) {
            let text = await index_js_1.Primitive.String.read(_data);
            let buttonId = await index_js_1.Primitive.Int.read(_data);
            let peerType = await index_js_1.TLObject.read(_data);
            let maxQuantity = await index_js_1.Primitive.Int.read(_data);
            return new Raw.KeyboardButtonRequestPeer({
                text: text,
                buttonId: buttonId,
                peerType: peerType,
                maxQuantity: maxQuantity,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.text !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.text));
            }
            if (this.buttonId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.buttonId));
            }
            if (this.peerType !== undefined) {
                b.write(this.peerType.write());
            }
            if (this.maxQuantity !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.maxQuantity));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.KeyboardButtonRequestPeer = KeyboardButtonRequestPeer;
    class InputKeyboardButtonRequestPeer extends index_js_1.TLObject {
        nameRequested;
        usernameRequested;
        photoRequested;
        text;
        buttonId;
        peerType;
        maxQuantity;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputKeyboardButtonRequestPeer';
            this.constructorId = 0xc9662d05;
            this.subclassOfId = 0xbad74a3;
            this._slots = [
                'nameRequested',
                'usernameRequested',
                'photoRequested',
                'text',
                'buttonId',
                'peerType',
                'maxQuantity',
            ];
            this.nameRequested = params.nameRequested;
            this.usernameRequested = params.usernameRequested;
            this.photoRequested = params.photoRequested;
            this.text = params.text;
            this.buttonId = params.buttonId;
            this.peerType = params.peerType;
            this.maxQuantity = params.maxQuantity;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let nameRequested = flags & (1 << 0) ? true : false;
            let usernameRequested = flags & (1 << 1) ? true : false;
            let photoRequested = flags & (1 << 2) ? true : false;
            let text = await index_js_1.Primitive.String.read(_data);
            let buttonId = await index_js_1.Primitive.Int.read(_data);
            let peerType = await index_js_1.TLObject.read(_data);
            let maxQuantity = await index_js_1.Primitive.Int.read(_data);
            return new Raw.InputKeyboardButtonRequestPeer({
                nameRequested: nameRequested,
                usernameRequested: usernameRequested,
                photoRequested: photoRequested,
                text: text,
                buttonId: buttonId,
                peerType: peerType,
                maxQuantity: maxQuantity,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.nameRequested ? 1 << 0 : 0;
            flags |= this.usernameRequested ? 1 << 1 : 0;
            flags |= this.photoRequested ? 1 << 2 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.text !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.text));
            }
            if (this.buttonId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.buttonId));
            }
            if (this.peerType !== undefined) {
                b.write(this.peerType.write());
            }
            if (this.maxQuantity !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.maxQuantity));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputKeyboardButtonRequestPeer = InputKeyboardButtonRequestPeer;
    class KeyboardButtonRow extends index_js_1.TLObject {
        buttons;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'KeyboardButtonRow';
            this.constructorId = 0x77608b83;
            this.subclassOfId = 0x847730ae;
            this._slots = ['buttons'];
            this.buttons = params.buttons;
        }
        static async read(_data, ..._args) {
            let buttons = await index_js_1.TLObject.read(_data);
            return new Raw.KeyboardButtonRow({ buttons: buttons });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.buttons) {
                b.write(index_js_1.Primitive.Vector.write(this.buttons));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.KeyboardButtonRow = KeyboardButtonRow;
    class ReplyKeyboardHide extends index_js_1.TLObject {
        selective;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ReplyKeyboardHide';
            this.constructorId = 0xa03e5b85;
            this.subclassOfId = 0xe2e10ef2;
            this._slots = ['selective'];
            this.selective = params.selective;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let selective = flags & (1 << 2) ? true : false;
            return new Raw.ReplyKeyboardHide({ selective: selective });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.selective ? 1 << 2 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ReplyKeyboardHide = ReplyKeyboardHide;
    class ReplyKeyboardForceReply extends index_js_1.TLObject {
        singleUse;
        selective;
        placeholder;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ReplyKeyboardForceReply';
            this.constructorId = 0x86b40b08;
            this.subclassOfId = 0xe2e10ef2;
            this._slots = ['singleUse', 'selective', 'placeholder'];
            this.singleUse = params.singleUse;
            this.selective = params.selective;
            this.placeholder = params.placeholder;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let singleUse = flags & (1 << 1) ? true : false;
            let selective = flags & (1 << 2) ? true : false;
            let placeholder = flags & (1 << 3) ? await index_js_1.Primitive.String.read(_data) : undefined;
            return new Raw.ReplyKeyboardForceReply({
                singleUse: singleUse,
                selective: selective,
                placeholder: placeholder,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.singleUse ? 1 << 1 : 0;
            flags |= this.selective ? 1 << 2 : 0;
            flags |= this.placeholder !== undefined ? 1 << 3 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.placeholder !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.placeholder));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ReplyKeyboardForceReply = ReplyKeyboardForceReply;
    class ReplyKeyboardMarkup extends index_js_1.TLObject {
        resize;
        singleUse;
        selective;
        persistent;
        rows;
        placeholder;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ReplyKeyboardMarkup';
            this.constructorId = 0x85dd99d1;
            this.subclassOfId = 0xe2e10ef2;
            this._slots = ['resize', 'singleUse', 'selective', 'persistent', 'rows', 'placeholder'];
            this.resize = params.resize;
            this.singleUse = params.singleUse;
            this.selective = params.selective;
            this.persistent = params.persistent;
            this.rows = params.rows;
            this.placeholder = params.placeholder;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let resize = flags & (1 << 0) ? true : false;
            let singleUse = flags & (1 << 1) ? true : false;
            let selective = flags & (1 << 2) ? true : false;
            let persistent = flags & (1 << 4) ? true : false;
            let rows = await index_js_1.TLObject.read(_data);
            let placeholder = flags & (1 << 3) ? await index_js_1.Primitive.String.read(_data) : undefined;
            return new Raw.ReplyKeyboardMarkup({
                resize: resize,
                singleUse: singleUse,
                selective: selective,
                persistent: persistent,
                rows: rows,
                placeholder: placeholder,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.resize ? 1 << 0 : 0;
            flags |= this.singleUse ? 1 << 1 : 0;
            flags |= this.selective ? 1 << 2 : 0;
            flags |= this.persistent ? 1 << 4 : 0;
            flags |= this.placeholder !== undefined ? 1 << 3 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.rows) {
                b.write(index_js_1.Primitive.Vector.write(this.rows));
            }
            if (this.placeholder !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.placeholder));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ReplyKeyboardMarkup = ReplyKeyboardMarkup;
    class ReplyInlineMarkup extends index_js_1.TLObject {
        rows;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ReplyInlineMarkup';
            this.constructorId = 0x48a30254;
            this.subclassOfId = 0xe2e10ef2;
            this._slots = ['rows'];
            this.rows = params.rows;
        }
        static async read(_data, ..._args) {
            let rows = await index_js_1.TLObject.read(_data);
            return new Raw.ReplyInlineMarkup({ rows: rows });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.rows) {
                b.write(index_js_1.Primitive.Vector.write(this.rows));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ReplyInlineMarkup = ReplyInlineMarkup;
    class MessageEntityUnknown extends index_js_1.TLObject {
        offset;
        length;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageEntityUnknown';
            this.constructorId = 0xbb92ba95;
            this.subclassOfId = 0xcf6419dc;
            this._slots = ['offset', 'length'];
            this.offset = params.offset;
            this.length = params.length;
        }
        static async read(_data, ..._args) {
            let offset = await index_js_1.Primitive.Int.read(_data);
            let length = await index_js_1.Primitive.Int.read(_data);
            return new Raw.MessageEntityUnknown({ offset: offset, length: length });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.offset !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.offset));
            }
            if (this.length !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.length));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageEntityUnknown = MessageEntityUnknown;
    class MessageEntityMention extends index_js_1.TLObject {
        offset;
        length;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageEntityMention';
            this.constructorId = 0xfa04579d;
            this.subclassOfId = 0xcf6419dc;
            this._slots = ['offset', 'length'];
            this.offset = params.offset;
            this.length = params.length;
        }
        static async read(_data, ..._args) {
            let offset = await index_js_1.Primitive.Int.read(_data);
            let length = await index_js_1.Primitive.Int.read(_data);
            return new Raw.MessageEntityMention({ offset: offset, length: length });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.offset !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.offset));
            }
            if (this.length !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.length));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageEntityMention = MessageEntityMention;
    class MessageEntityHashtag extends index_js_1.TLObject {
        offset;
        length;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageEntityHashtag';
            this.constructorId = 0x6f635b0d;
            this.subclassOfId = 0xcf6419dc;
            this._slots = ['offset', 'length'];
            this.offset = params.offset;
            this.length = params.length;
        }
        static async read(_data, ..._args) {
            let offset = await index_js_1.Primitive.Int.read(_data);
            let length = await index_js_1.Primitive.Int.read(_data);
            return new Raw.MessageEntityHashtag({ offset: offset, length: length });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.offset !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.offset));
            }
            if (this.length !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.length));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageEntityHashtag = MessageEntityHashtag;
    class MessageEntityBotCommand extends index_js_1.TLObject {
        offset;
        length;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageEntityBotCommand';
            this.constructorId = 0x6cef8ac7;
            this.subclassOfId = 0xcf6419dc;
            this._slots = ['offset', 'length'];
            this.offset = params.offset;
            this.length = params.length;
        }
        static async read(_data, ..._args) {
            let offset = await index_js_1.Primitive.Int.read(_data);
            let length = await index_js_1.Primitive.Int.read(_data);
            return new Raw.MessageEntityBotCommand({ offset: offset, length: length });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.offset !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.offset));
            }
            if (this.length !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.length));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageEntityBotCommand = MessageEntityBotCommand;
    class MessageEntityUrl extends index_js_1.TLObject {
        offset;
        length;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageEntityUrl';
            this.constructorId = 0x6ed02538;
            this.subclassOfId = 0xcf6419dc;
            this._slots = ['offset', 'length'];
            this.offset = params.offset;
            this.length = params.length;
        }
        static async read(_data, ..._args) {
            let offset = await index_js_1.Primitive.Int.read(_data);
            let length = await index_js_1.Primitive.Int.read(_data);
            return new Raw.MessageEntityUrl({ offset: offset, length: length });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.offset !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.offset));
            }
            if (this.length !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.length));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageEntityUrl = MessageEntityUrl;
    class MessageEntityEmail extends index_js_1.TLObject {
        offset;
        length;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageEntityEmail';
            this.constructorId = 0x64e475c2;
            this.subclassOfId = 0xcf6419dc;
            this._slots = ['offset', 'length'];
            this.offset = params.offset;
            this.length = params.length;
        }
        static async read(_data, ..._args) {
            let offset = await index_js_1.Primitive.Int.read(_data);
            let length = await index_js_1.Primitive.Int.read(_data);
            return new Raw.MessageEntityEmail({ offset: offset, length: length });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.offset !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.offset));
            }
            if (this.length !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.length));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageEntityEmail = MessageEntityEmail;
    class MessageEntityBold extends index_js_1.TLObject {
        offset;
        length;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageEntityBold';
            this.constructorId = 0xbd610bc9;
            this.subclassOfId = 0xcf6419dc;
            this._slots = ['offset', 'length'];
            this.offset = params.offset;
            this.length = params.length;
        }
        static async read(_data, ..._args) {
            let offset = await index_js_1.Primitive.Int.read(_data);
            let length = await index_js_1.Primitive.Int.read(_data);
            return new Raw.MessageEntityBold({ offset: offset, length: length });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.offset !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.offset));
            }
            if (this.length !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.length));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageEntityBold = MessageEntityBold;
    class MessageEntityItalic extends index_js_1.TLObject {
        offset;
        length;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageEntityItalic';
            this.constructorId = 0x826f8b60;
            this.subclassOfId = 0xcf6419dc;
            this._slots = ['offset', 'length'];
            this.offset = params.offset;
            this.length = params.length;
        }
        static async read(_data, ..._args) {
            let offset = await index_js_1.Primitive.Int.read(_data);
            let length = await index_js_1.Primitive.Int.read(_data);
            return new Raw.MessageEntityItalic({ offset: offset, length: length });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.offset !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.offset));
            }
            if (this.length !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.length));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageEntityItalic = MessageEntityItalic;
    class MessageEntityCode extends index_js_1.TLObject {
        offset;
        length;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageEntityCode';
            this.constructorId = 0x28a20571;
            this.subclassOfId = 0xcf6419dc;
            this._slots = ['offset', 'length'];
            this.offset = params.offset;
            this.length = params.length;
        }
        static async read(_data, ..._args) {
            let offset = await index_js_1.Primitive.Int.read(_data);
            let length = await index_js_1.Primitive.Int.read(_data);
            return new Raw.MessageEntityCode({ offset: offset, length: length });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.offset !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.offset));
            }
            if (this.length !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.length));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageEntityCode = MessageEntityCode;
    class MessageEntityPre extends index_js_1.TLObject {
        offset;
        length;
        language;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageEntityPre';
            this.constructorId = 0x73924be0;
            this.subclassOfId = 0xcf6419dc;
            this._slots = ['offset', 'length', 'language'];
            this.offset = params.offset;
            this.length = params.length;
            this.language = params.language;
        }
        static async read(_data, ..._args) {
            let offset = await index_js_1.Primitive.Int.read(_data);
            let length = await index_js_1.Primitive.Int.read(_data);
            let language = await index_js_1.Primitive.String.read(_data);
            return new Raw.MessageEntityPre({ offset: offset, length: length, language: language });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.offset !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.offset));
            }
            if (this.length !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.length));
            }
            if (this.language !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.language));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageEntityPre = MessageEntityPre;
    class MessageEntityTextUrl extends index_js_1.TLObject {
        offset;
        length;
        url;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageEntityTextUrl';
            this.constructorId = 0x76a6d327;
            this.subclassOfId = 0xcf6419dc;
            this._slots = ['offset', 'length', 'url'];
            this.offset = params.offset;
            this.length = params.length;
            this.url = params.url;
        }
        static async read(_data, ..._args) {
            let offset = await index_js_1.Primitive.Int.read(_data);
            let length = await index_js_1.Primitive.Int.read(_data);
            let url = await index_js_1.Primitive.String.read(_data);
            return new Raw.MessageEntityTextUrl({ offset: offset, length: length, url: url });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.offset !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.offset));
            }
            if (this.length !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.length));
            }
            if (this.url !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.url));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageEntityTextUrl = MessageEntityTextUrl;
    class MessageEntityMentionName extends index_js_1.TLObject {
        offset;
        length;
        userId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageEntityMentionName';
            this.constructorId = 0xdc7b1140;
            this.subclassOfId = 0xcf6419dc;
            this._slots = ['offset', 'length', 'userId'];
            this.offset = params.offset;
            this.length = params.length;
            this.userId = params.userId;
        }
        static async read(_data, ..._args) {
            let offset = await index_js_1.Primitive.Int.read(_data);
            let length = await index_js_1.Primitive.Int.read(_data);
            let userId = await index_js_1.Primitive.Long.read(_data);
            return new Raw.MessageEntityMentionName({ offset: offset, length: length, userId: userId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.offset !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.offset));
            }
            if (this.length !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.length));
            }
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageEntityMentionName = MessageEntityMentionName;
    class InputMessageEntityMentionName extends index_js_1.TLObject {
        offset;
        length;
        userId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputMessageEntityMentionName';
            this.constructorId = 0x208e68c9;
            this.subclassOfId = 0xcf6419dc;
            this._slots = ['offset', 'length', 'userId'];
            this.offset = params.offset;
            this.length = params.length;
            this.userId = params.userId;
        }
        static async read(_data, ..._args) {
            let offset = await index_js_1.Primitive.Int.read(_data);
            let length = await index_js_1.Primitive.Int.read(_data);
            let userId = await index_js_1.TLObject.read(_data);
            return new Raw.InputMessageEntityMentionName({
                offset: offset,
                length: length,
                userId: userId,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.offset !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.offset));
            }
            if (this.length !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.length));
            }
            if (this.userId !== undefined) {
                b.write(this.userId.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputMessageEntityMentionName = InputMessageEntityMentionName;
    class MessageEntityPhone extends index_js_1.TLObject {
        offset;
        length;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageEntityPhone';
            this.constructorId = 0x9b69e34b;
            this.subclassOfId = 0xcf6419dc;
            this._slots = ['offset', 'length'];
            this.offset = params.offset;
            this.length = params.length;
        }
        static async read(_data, ..._args) {
            let offset = await index_js_1.Primitive.Int.read(_data);
            let length = await index_js_1.Primitive.Int.read(_data);
            return new Raw.MessageEntityPhone({ offset: offset, length: length });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.offset !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.offset));
            }
            if (this.length !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.length));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageEntityPhone = MessageEntityPhone;
    class MessageEntityCashtag extends index_js_1.TLObject {
        offset;
        length;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageEntityCashtag';
            this.constructorId = 0x4c4e743f;
            this.subclassOfId = 0xcf6419dc;
            this._slots = ['offset', 'length'];
            this.offset = params.offset;
            this.length = params.length;
        }
        static async read(_data, ..._args) {
            let offset = await index_js_1.Primitive.Int.read(_data);
            let length = await index_js_1.Primitive.Int.read(_data);
            return new Raw.MessageEntityCashtag({ offset: offset, length: length });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.offset !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.offset));
            }
            if (this.length !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.length));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageEntityCashtag = MessageEntityCashtag;
    class MessageEntityUnderline extends index_js_1.TLObject {
        offset;
        length;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageEntityUnderline';
            this.constructorId = 0x9c4e7e8b;
            this.subclassOfId = 0xcf6419dc;
            this._slots = ['offset', 'length'];
            this.offset = params.offset;
            this.length = params.length;
        }
        static async read(_data, ..._args) {
            let offset = await index_js_1.Primitive.Int.read(_data);
            let length = await index_js_1.Primitive.Int.read(_data);
            return new Raw.MessageEntityUnderline({ offset: offset, length: length });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.offset !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.offset));
            }
            if (this.length !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.length));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageEntityUnderline = MessageEntityUnderline;
    class MessageEntityStrike extends index_js_1.TLObject {
        offset;
        length;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageEntityStrike';
            this.constructorId = 0xbf0693d4;
            this.subclassOfId = 0xcf6419dc;
            this._slots = ['offset', 'length'];
            this.offset = params.offset;
            this.length = params.length;
        }
        static async read(_data, ..._args) {
            let offset = await index_js_1.Primitive.Int.read(_data);
            let length = await index_js_1.Primitive.Int.read(_data);
            return new Raw.MessageEntityStrike({ offset: offset, length: length });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.offset !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.offset));
            }
            if (this.length !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.length));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageEntityStrike = MessageEntityStrike;
    class MessageEntityBankCard extends index_js_1.TLObject {
        offset;
        length;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageEntityBankCard';
            this.constructorId = 0x761e6af4;
            this.subclassOfId = 0xcf6419dc;
            this._slots = ['offset', 'length'];
            this.offset = params.offset;
            this.length = params.length;
        }
        static async read(_data, ..._args) {
            let offset = await index_js_1.Primitive.Int.read(_data);
            let length = await index_js_1.Primitive.Int.read(_data);
            return new Raw.MessageEntityBankCard({ offset: offset, length: length });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.offset !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.offset));
            }
            if (this.length !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.length));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageEntityBankCard = MessageEntityBankCard;
    class MessageEntitySpoiler extends index_js_1.TLObject {
        offset;
        length;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageEntitySpoiler';
            this.constructorId = 0x32ca960f;
            this.subclassOfId = 0xcf6419dc;
            this._slots = ['offset', 'length'];
            this.offset = params.offset;
            this.length = params.length;
        }
        static async read(_data, ..._args) {
            let offset = await index_js_1.Primitive.Int.read(_data);
            let length = await index_js_1.Primitive.Int.read(_data);
            return new Raw.MessageEntitySpoiler({ offset: offset, length: length });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.offset !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.offset));
            }
            if (this.length !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.length));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageEntitySpoiler = MessageEntitySpoiler;
    class MessageEntityCustomEmoji extends index_js_1.TLObject {
        offset;
        length;
        documentId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageEntityCustomEmoji';
            this.constructorId = 0xc8cf05f8;
            this.subclassOfId = 0xcf6419dc;
            this._slots = ['offset', 'length', 'documentId'];
            this.offset = params.offset;
            this.length = params.length;
            this.documentId = params.documentId;
        }
        static async read(_data, ..._args) {
            let offset = await index_js_1.Primitive.Int.read(_data);
            let length = await index_js_1.Primitive.Int.read(_data);
            let documentId = await index_js_1.Primitive.Long.read(_data);
            return new Raw.MessageEntityCustomEmoji({
                offset: offset,
                length: length,
                documentId: documentId,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.offset !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.offset));
            }
            if (this.length !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.length));
            }
            if (this.documentId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.documentId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageEntityCustomEmoji = MessageEntityCustomEmoji;
    class MessageEntityBlockquote extends index_js_1.TLObject {
        collapsed;
        offset;
        length;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageEntityBlockquote';
            this.constructorId = 0xf1ccaaac;
            this.subclassOfId = 0xcf6419dc;
            this._slots = ['collapsed', 'offset', 'length'];
            this.collapsed = params.collapsed;
            this.offset = params.offset;
            this.length = params.length;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let collapsed = flags & (1 << 0) ? true : false;
            let offset = await index_js_1.Primitive.Int.read(_data);
            let length = await index_js_1.Primitive.Int.read(_data);
            return new Raw.MessageEntityBlockquote({
                collapsed: collapsed,
                offset: offset,
                length: length,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.collapsed ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.offset !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.offset));
            }
            if (this.length !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.length));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageEntityBlockquote = MessageEntityBlockquote;
    class InputChannelEmpty extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputChannelEmpty';
            this.constructorId = 0xee8c1e86;
            this.subclassOfId = 0x40f202fd;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputChannelEmpty();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputChannelEmpty = InputChannelEmpty;
    class InputChannel extends index_js_1.TLObject {
        channelId;
        accessHash;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputChannel';
            this.constructorId = 0xf35aec28;
            this.subclassOfId = 0x40f202fd;
            this._slots = ['channelId', 'accessHash'];
            this.channelId = params.channelId;
            this.accessHash = params.accessHash;
        }
        static async read(_data, ..._args) {
            let channelId = await index_js_1.Primitive.Long.read(_data);
            let accessHash = await index_js_1.Primitive.Long.read(_data);
            return new Raw.InputChannel({ channelId: channelId, accessHash: accessHash });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.channelId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.channelId));
            }
            if (this.accessHash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.accessHash));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputChannel = InputChannel;
    class InputChannelFromMessage extends index_js_1.TLObject {
        peer;
        msgId;
        channelId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputChannelFromMessage';
            this.constructorId = 0x5b934f9d;
            this.subclassOfId = 0x40f202fd;
            this._slots = ['peer', 'msgId', 'channelId'];
            this.peer = params.peer;
            this.msgId = params.msgId;
            this.channelId = params.channelId;
        }
        static async read(_data, ..._args) {
            let peer = await index_js_1.TLObject.read(_data);
            let msgId = await index_js_1.Primitive.Int.read(_data);
            let channelId = await index_js_1.Primitive.Long.read(_data);
            return new Raw.InputChannelFromMessage({ peer: peer, msgId: msgId, channelId: channelId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.msgId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.msgId));
            }
            if (this.channelId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.channelId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputChannelFromMessage = InputChannelFromMessage;
    class MessageRange extends index_js_1.TLObject {
        minId;
        maxId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageRange';
            this.constructorId = 0xae30253;
            this.subclassOfId = 0xbec74577;
            this._slots = ['minId', 'maxId'];
            this.minId = params.minId;
            this.maxId = params.maxId;
        }
        static async read(_data, ..._args) {
            let minId = await index_js_1.Primitive.Int.read(_data);
            let maxId = await index_js_1.Primitive.Int.read(_data);
            return new Raw.MessageRange({ minId: minId, maxId: maxId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.minId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.minId));
            }
            if (this.maxId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.maxId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageRange = MessageRange;
    class ChannelMessagesFilterEmpty extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'ChannelMessagesFilterEmpty';
            this.constructorId = 0x94d42ee7;
            this.subclassOfId = 0x13336a56;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.ChannelMessagesFilterEmpty();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelMessagesFilterEmpty = ChannelMessagesFilterEmpty;
    class ChannelMessagesFilter extends index_js_1.TLObject {
        excludeNewMessages;
        ranges;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelMessagesFilter';
            this.constructorId = 0xcd77d957;
            this.subclassOfId = 0x13336a56;
            this._slots = ['excludeNewMessages', 'ranges'];
            this.excludeNewMessages = params.excludeNewMessages;
            this.ranges = params.ranges;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let excludeNewMessages = flags & (1 << 1) ? true : false;
            let ranges = await index_js_1.TLObject.read(_data);
            return new Raw.ChannelMessagesFilter({
                excludeNewMessages: excludeNewMessages,
                ranges: ranges,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.excludeNewMessages ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.ranges) {
                b.write(index_js_1.Primitive.Vector.write(this.ranges));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelMessagesFilter = ChannelMessagesFilter;
    class ChannelParticipant extends index_js_1.TLObject {
        userId;
        date;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelParticipant';
            this.constructorId = 0xc00c07c0;
            this.subclassOfId = 0xd9c7fc18;
            this._slots = ['userId', 'date'];
            this.userId = params.userId;
            this.date = params.date;
        }
        static async read(_data, ..._args) {
            let userId = await index_js_1.Primitive.Long.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            return new Raw.ChannelParticipant({ userId: userId, date: date });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelParticipant = ChannelParticipant;
    class ChannelParticipantSelf extends index_js_1.TLObject {
        viaRequest;
        userId;
        inviterId;
        date;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelParticipantSelf';
            this.constructorId = 0x35a8bfa7;
            this.subclassOfId = 0xd9c7fc18;
            this._slots = ['viaRequest', 'userId', 'inviterId', 'date'];
            this.viaRequest = params.viaRequest;
            this.userId = params.userId;
            this.inviterId = params.inviterId;
            this.date = params.date;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let viaRequest = flags & (1 << 0) ? true : false;
            let userId = await index_js_1.Primitive.Long.read(_data);
            let inviterId = await index_js_1.Primitive.Long.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            return new Raw.ChannelParticipantSelf({
                viaRequest: viaRequest,
                userId: userId,
                inviterId: inviterId,
                date: date,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.viaRequest ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            if (this.inviterId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.inviterId));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelParticipantSelf = ChannelParticipantSelf;
    class ChannelParticipantCreator extends index_js_1.TLObject {
        userId;
        adminRights;
        rank;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelParticipantCreator';
            this.constructorId = 0x2fe601d3;
            this.subclassOfId = 0xd9c7fc18;
            this._slots = ['userId', 'adminRights', 'rank'];
            this.userId = params.userId;
            this.adminRights = params.adminRights;
            this.rank = params.rank;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let userId = await index_js_1.Primitive.Long.read(_data);
            let adminRights = await index_js_1.TLObject.read(_data);
            let rank = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
            return new Raw.ChannelParticipantCreator({
                userId: userId,
                adminRights: adminRights,
                rank: rank,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.rank !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            if (this.adminRights !== undefined) {
                b.write(this.adminRights.write());
            }
            if (this.rank !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.rank));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelParticipantCreator = ChannelParticipantCreator;
    class ChannelParticipantAdmin extends index_js_1.TLObject {
        canEdit;
        self;
        userId;
        inviterId;
        promotedBy;
        date;
        adminRights;
        rank;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelParticipantAdmin';
            this.constructorId = 0x34c3bb53;
            this.subclassOfId = 0xd9c7fc18;
            this._slots = [
                'canEdit',
                'self',
                'userId',
                'inviterId',
                'promotedBy',
                'date',
                'adminRights',
                'rank',
            ];
            this.canEdit = params.canEdit;
            this.self = params.self;
            this.userId = params.userId;
            this.inviterId = params.inviterId;
            this.promotedBy = params.promotedBy;
            this.date = params.date;
            this.adminRights = params.adminRights;
            this.rank = params.rank;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let canEdit = flags & (1 << 0) ? true : false;
            let self = flags & (1 << 1) ? true : false;
            let userId = await index_js_1.Primitive.Long.read(_data);
            let inviterId = flags & (1 << 1) ? await index_js_1.Primitive.Long.read(_data) : undefined;
            let promotedBy = await index_js_1.Primitive.Long.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            let adminRights = await index_js_1.TLObject.read(_data);
            let rank = flags & (1 << 2) ? await index_js_1.Primitive.String.read(_data) : undefined;
            return new Raw.ChannelParticipantAdmin({
                canEdit: canEdit,
                self: self,
                userId: userId,
                inviterId: inviterId,
                promotedBy: promotedBy,
                date: date,
                adminRights: adminRights,
                rank: rank,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.canEdit ? 1 << 0 : 0;
            flags |= this.self ? 1 << 1 : 0;
            flags |= this.inviterId !== undefined ? 1 << 1 : 0;
            flags |= this.rank !== undefined ? 1 << 2 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            if (this.inviterId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.inviterId));
            }
            if (this.promotedBy !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.promotedBy));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.adminRights !== undefined) {
                b.write(this.adminRights.write());
            }
            if (this.rank !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.rank));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelParticipantAdmin = ChannelParticipantAdmin;
    class ChannelParticipantBanned extends index_js_1.TLObject {
        left;
        peer;
        kickedBy;
        date;
        bannedRights;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelParticipantBanned';
            this.constructorId = 0x6df8014e;
            this.subclassOfId = 0xd9c7fc18;
            this._slots = ['left', 'peer', 'kickedBy', 'date', 'bannedRights'];
            this.left = params.left;
            this.peer = params.peer;
            this.kickedBy = params.kickedBy;
            this.date = params.date;
            this.bannedRights = params.bannedRights;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let left = flags & (1 << 0) ? true : false;
            let peer = await index_js_1.TLObject.read(_data);
            let kickedBy = await index_js_1.Primitive.Long.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            let bannedRights = await index_js_1.TLObject.read(_data);
            return new Raw.ChannelParticipantBanned({
                left: left,
                peer: peer,
                kickedBy: kickedBy,
                date: date,
                bannedRights: bannedRights,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.left ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.kickedBy !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.kickedBy));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.bannedRights !== undefined) {
                b.write(this.bannedRights.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelParticipantBanned = ChannelParticipantBanned;
    class ChannelParticipantLeft extends index_js_1.TLObject {
        peer;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelParticipantLeft';
            this.constructorId = 0x1b03f006;
            this.subclassOfId = 0xd9c7fc18;
            this._slots = ['peer'];
            this.peer = params.peer;
        }
        static async read(_data, ..._args) {
            let peer = await index_js_1.TLObject.read(_data);
            return new Raw.ChannelParticipantLeft({ peer: peer });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelParticipantLeft = ChannelParticipantLeft;
    class ChannelParticipantsRecent extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'ChannelParticipantsRecent';
            this.constructorId = 0xde3f3c79;
            this.subclassOfId = 0xbf4e2753;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.ChannelParticipantsRecent();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelParticipantsRecent = ChannelParticipantsRecent;
    class ChannelParticipantsAdmins extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'ChannelParticipantsAdmins';
            this.constructorId = 0xb4608969;
            this.subclassOfId = 0xbf4e2753;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.ChannelParticipantsAdmins();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelParticipantsAdmins = ChannelParticipantsAdmins;
    class ChannelParticipantsKicked extends index_js_1.TLObject {
        q;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelParticipantsKicked';
            this.constructorId = 0xa3b54985;
            this.subclassOfId = 0xbf4e2753;
            this._slots = ['q'];
            this.q = params.q;
        }
        static async read(_data, ..._args) {
            let q = await index_js_1.Primitive.String.read(_data);
            return new Raw.ChannelParticipantsKicked({ q: q });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.q !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.q));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelParticipantsKicked = ChannelParticipantsKicked;
    class ChannelParticipantsBots extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'ChannelParticipantsBots';
            this.constructorId = 0xb0d1865b;
            this.subclassOfId = 0xbf4e2753;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.ChannelParticipantsBots();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelParticipantsBots = ChannelParticipantsBots;
    class ChannelParticipantsBanned extends index_js_1.TLObject {
        q;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelParticipantsBanned';
            this.constructorId = 0x1427a5e1;
            this.subclassOfId = 0xbf4e2753;
            this._slots = ['q'];
            this.q = params.q;
        }
        static async read(_data, ..._args) {
            let q = await index_js_1.Primitive.String.read(_data);
            return new Raw.ChannelParticipantsBanned({ q: q });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.q !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.q));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelParticipantsBanned = ChannelParticipantsBanned;
    class ChannelParticipantsSearch extends index_js_1.TLObject {
        q;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelParticipantsSearch';
            this.constructorId = 0x656ac4b;
            this.subclassOfId = 0xbf4e2753;
            this._slots = ['q'];
            this.q = params.q;
        }
        static async read(_data, ..._args) {
            let q = await index_js_1.Primitive.String.read(_data);
            return new Raw.ChannelParticipantsSearch({ q: q });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.q !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.q));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelParticipantsSearch = ChannelParticipantsSearch;
    class ChannelParticipantsContacts extends index_js_1.TLObject {
        q;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelParticipantsContacts';
            this.constructorId = 0xbb6ae88d;
            this.subclassOfId = 0xbf4e2753;
            this._slots = ['q'];
            this.q = params.q;
        }
        static async read(_data, ..._args) {
            let q = await index_js_1.Primitive.String.read(_data);
            return new Raw.ChannelParticipantsContacts({ q: q });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.q !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.q));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelParticipantsContacts = ChannelParticipantsContacts;
    class ChannelParticipantsMentions extends index_js_1.TLObject {
        q;
        topMsgId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelParticipantsMentions';
            this.constructorId = 0xe04b5ceb;
            this.subclassOfId = 0xbf4e2753;
            this._slots = ['q', 'topMsgId'];
            this.q = params.q;
            this.topMsgId = params.topMsgId;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let q = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let topMsgId = flags & (1 << 1) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            return new Raw.ChannelParticipantsMentions({ q: q, topMsgId: topMsgId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.q !== undefined ? 1 << 0 : 0;
            flags |= this.topMsgId !== undefined ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.q !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.q));
            }
            if (this.topMsgId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.topMsgId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelParticipantsMentions = ChannelParticipantsMentions;
    class InputBotInlineMessageMediaAuto extends index_js_1.TLObject {
        invertMedia;
        message;
        entities;
        replyMarkup;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputBotInlineMessageMediaAuto';
            this.constructorId = 0x3380c786;
            this.subclassOfId = 0x53fb4010;
            this._slots = ['invertMedia', 'message', 'entities', 'replyMarkup'];
            this.invertMedia = params.invertMedia;
            this.message = params.message;
            this.entities = params.entities;
            this.replyMarkup = params.replyMarkup;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let invertMedia = flags & (1 << 3) ? true : false;
            let message = await index_js_1.Primitive.String.read(_data);
            let entities = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : [];
            let replyMarkup = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.InputBotInlineMessageMediaAuto({
                invertMedia: invertMedia,
                message: message,
                entities: entities,
                replyMarkup: replyMarkup,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.invertMedia ? 1 << 3 : 0;
            flags |= this.entities ? 1 << 1 : 0;
            flags |= this.replyMarkup !== undefined ? 1 << 2 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.message !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.message));
            }
            if (this.entities) {
                b.write(index_js_1.Primitive.Vector.write(this.entities));
            }
            if (this.replyMarkup !== undefined) {
                b.write(this.replyMarkup.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputBotInlineMessageMediaAuto = InputBotInlineMessageMediaAuto;
    class InputBotInlineMessageText extends index_js_1.TLObject {
        noWebpage;
        invertMedia;
        message;
        entities;
        replyMarkup;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputBotInlineMessageText';
            this.constructorId = 0x3dcd7a87;
            this.subclassOfId = 0x53fb4010;
            this._slots = ['noWebpage', 'invertMedia', 'message', 'entities', 'replyMarkup'];
            this.noWebpage = params.noWebpage;
            this.invertMedia = params.invertMedia;
            this.message = params.message;
            this.entities = params.entities;
            this.replyMarkup = params.replyMarkup;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let noWebpage = flags & (1 << 0) ? true : false;
            let invertMedia = flags & (1 << 3) ? true : false;
            let message = await index_js_1.Primitive.String.read(_data);
            let entities = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : [];
            let replyMarkup = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.InputBotInlineMessageText({
                noWebpage: noWebpage,
                invertMedia: invertMedia,
                message: message,
                entities: entities,
                replyMarkup: replyMarkup,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.noWebpage ? 1 << 0 : 0;
            flags |= this.invertMedia ? 1 << 3 : 0;
            flags |= this.entities ? 1 << 1 : 0;
            flags |= this.replyMarkup !== undefined ? 1 << 2 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.message !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.message));
            }
            if (this.entities) {
                b.write(index_js_1.Primitive.Vector.write(this.entities));
            }
            if (this.replyMarkup !== undefined) {
                b.write(this.replyMarkup.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputBotInlineMessageText = InputBotInlineMessageText;
    class InputBotInlineMessageMediaGeo extends index_js_1.TLObject {
        geoPoint;
        heading;
        period;
        proximityNotificationRadius;
        replyMarkup;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputBotInlineMessageMediaGeo';
            this.constructorId = 0x96929a85;
            this.subclassOfId = 0x53fb4010;
            this._slots = ['geoPoint', 'heading', 'period', 'proximityNotificationRadius', 'replyMarkup'];
            this.geoPoint = params.geoPoint;
            this.heading = params.heading;
            this.period = params.period;
            this.proximityNotificationRadius = params.proximityNotificationRadius;
            this.replyMarkup = params.replyMarkup;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let geoPoint = await index_js_1.TLObject.read(_data);
            let heading = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let period = flags & (1 << 1) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let proximityNotificationRadius = flags & (1 << 3) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let replyMarkup = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.InputBotInlineMessageMediaGeo({
                geoPoint: geoPoint,
                heading: heading,
                period: period,
                proximityNotificationRadius: proximityNotificationRadius,
                replyMarkup: replyMarkup,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.heading !== undefined ? 1 << 0 : 0;
            flags |= this.period !== undefined ? 1 << 1 : 0;
            flags |= this.proximityNotificationRadius !== undefined ? 1 << 3 : 0;
            flags |= this.replyMarkup !== undefined ? 1 << 2 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.geoPoint !== undefined) {
                b.write(this.geoPoint.write());
            }
            if (this.heading !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.heading));
            }
            if (this.period !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.period));
            }
            if (this.proximityNotificationRadius !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.proximityNotificationRadius));
            }
            if (this.replyMarkup !== undefined) {
                b.write(this.replyMarkup.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputBotInlineMessageMediaGeo = InputBotInlineMessageMediaGeo;
    class InputBotInlineMessageMediaVenue extends index_js_1.TLObject {
        geoPoint;
        title;
        address;
        provider;
        venueId;
        venueType;
        replyMarkup;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputBotInlineMessageMediaVenue';
            this.constructorId = 0x417bbf11;
            this.subclassOfId = 0x53fb4010;
            this._slots = [
                'geoPoint',
                'title',
                'address',
                'provider',
                'venueId',
                'venueType',
                'replyMarkup',
            ];
            this.geoPoint = params.geoPoint;
            this.title = params.title;
            this.address = params.address;
            this.provider = params.provider;
            this.venueId = params.venueId;
            this.venueType = params.venueType;
            this.replyMarkup = params.replyMarkup;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let geoPoint = await index_js_1.TLObject.read(_data);
            let title = await index_js_1.Primitive.String.read(_data);
            let address = await index_js_1.Primitive.String.read(_data);
            let provider = await index_js_1.Primitive.String.read(_data);
            let venueId = await index_js_1.Primitive.String.read(_data);
            let venueType = await index_js_1.Primitive.String.read(_data);
            let replyMarkup = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.InputBotInlineMessageMediaVenue({
                geoPoint: geoPoint,
                title: title,
                address: address,
                provider: provider,
                venueId: venueId,
                venueType: venueType,
                replyMarkup: replyMarkup,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.replyMarkup !== undefined ? 1 << 2 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.geoPoint !== undefined) {
                b.write(this.geoPoint.write());
            }
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            if (this.address !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.address));
            }
            if (this.provider !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.provider));
            }
            if (this.venueId !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.venueId));
            }
            if (this.venueType !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.venueType));
            }
            if (this.replyMarkup !== undefined) {
                b.write(this.replyMarkup.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputBotInlineMessageMediaVenue = InputBotInlineMessageMediaVenue;
    class InputBotInlineMessageMediaContact extends index_js_1.TLObject {
        phoneNumber;
        firstName;
        lastName;
        vcard;
        replyMarkup;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputBotInlineMessageMediaContact';
            this.constructorId = 0xa6edbffd;
            this.subclassOfId = 0x53fb4010;
            this._slots = ['phoneNumber', 'firstName', 'lastName', 'vcard', 'replyMarkup'];
            this.phoneNumber = params.phoneNumber;
            this.firstName = params.firstName;
            this.lastName = params.lastName;
            this.vcard = params.vcard;
            this.replyMarkup = params.replyMarkup;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let phoneNumber = await index_js_1.Primitive.String.read(_data);
            let firstName = await index_js_1.Primitive.String.read(_data);
            let lastName = await index_js_1.Primitive.String.read(_data);
            let vcard = await index_js_1.Primitive.String.read(_data);
            let replyMarkup = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.InputBotInlineMessageMediaContact({
                phoneNumber: phoneNumber,
                firstName: firstName,
                lastName: lastName,
                vcard: vcard,
                replyMarkup: replyMarkup,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.replyMarkup !== undefined ? 1 << 2 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.phoneNumber !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.phoneNumber));
            }
            if (this.firstName !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.firstName));
            }
            if (this.lastName !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.lastName));
            }
            if (this.vcard !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.vcard));
            }
            if (this.replyMarkup !== undefined) {
                b.write(this.replyMarkup.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputBotInlineMessageMediaContact = InputBotInlineMessageMediaContact;
    class InputBotInlineMessageGame extends index_js_1.TLObject {
        replyMarkup;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputBotInlineMessageGame';
            this.constructorId = 0x4b425864;
            this.subclassOfId = 0x53fb4010;
            this._slots = ['replyMarkup'];
            this.replyMarkup = params.replyMarkup;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let replyMarkup = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.InputBotInlineMessageGame({ replyMarkup: replyMarkup });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.replyMarkup !== undefined ? 1 << 2 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.replyMarkup !== undefined) {
                b.write(this.replyMarkup.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputBotInlineMessageGame = InputBotInlineMessageGame;
    class InputBotInlineMessageMediaInvoice extends index_js_1.TLObject {
        title;
        description;
        photo;
        invoice;
        payload;
        provider;
        providerData;
        replyMarkup;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputBotInlineMessageMediaInvoice';
            this.constructorId = 0xd7e78225;
            this.subclassOfId = 0x53fb4010;
            this._slots = [
                'title',
                'description',
                'photo',
                'invoice',
                'payload',
                'provider',
                'providerData',
                'replyMarkup',
            ];
            this.title = params.title;
            this.description = params.description;
            this.photo = params.photo;
            this.invoice = params.invoice;
            this.payload = params.payload;
            this.provider = params.provider;
            this.providerData = params.providerData;
            this.replyMarkup = params.replyMarkup;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let title = await index_js_1.Primitive.String.read(_data);
            let description = await index_js_1.Primitive.String.read(_data);
            let photo = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
            let invoice = await index_js_1.TLObject.read(_data);
            let payload = await index_js_1.Primitive.Bytes.read(_data);
            let provider = await index_js_1.Primitive.String.read(_data);
            let providerData = await index_js_1.TLObject.read(_data);
            let replyMarkup = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.InputBotInlineMessageMediaInvoice({
                title: title,
                description: description,
                photo: photo,
                invoice: invoice,
                payload: payload,
                provider: provider,
                providerData: providerData,
                replyMarkup: replyMarkup,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.photo !== undefined ? 1 << 0 : 0;
            flags |= this.replyMarkup !== undefined ? 1 << 2 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            if (this.description !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.description));
            }
            if (this.photo !== undefined) {
                b.write(this.photo.write());
            }
            if (this.invoice !== undefined) {
                b.write(this.invoice.write());
            }
            if (this.payload !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.payload));
            }
            if (this.provider !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.provider));
            }
            if (this.providerData !== undefined) {
                b.write(this.providerData.write());
            }
            if (this.replyMarkup !== undefined) {
                b.write(this.replyMarkup.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputBotInlineMessageMediaInvoice = InputBotInlineMessageMediaInvoice;
    class InputBotInlineMessageMediaWebPage extends index_js_1.TLObject {
        invertMedia;
        forceLargeMedia;
        forceSmallMedia;
        optional;
        message;
        entities;
        url;
        replyMarkup;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputBotInlineMessageMediaWebPage';
            this.constructorId = 0xbddcc510;
            this.subclassOfId = 0x53fb4010;
            this._slots = [
                'invertMedia',
                'forceLargeMedia',
                'forceSmallMedia',
                'optional',
                'message',
                'entities',
                'url',
                'replyMarkup',
            ];
            this.invertMedia = params.invertMedia;
            this.forceLargeMedia = params.forceLargeMedia;
            this.forceSmallMedia = params.forceSmallMedia;
            this.optional = params.optional;
            this.message = params.message;
            this.entities = params.entities;
            this.url = params.url;
            this.replyMarkup = params.replyMarkup;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let invertMedia = flags & (1 << 3) ? true : false;
            let forceLargeMedia = flags & (1 << 4) ? true : false;
            let forceSmallMedia = flags & (1 << 5) ? true : false;
            let optional = flags & (1 << 6) ? true : false;
            let message = await index_js_1.Primitive.String.read(_data);
            let entities = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : [];
            let url = await index_js_1.Primitive.String.read(_data);
            let replyMarkup = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.InputBotInlineMessageMediaWebPage({
                invertMedia: invertMedia,
                forceLargeMedia: forceLargeMedia,
                forceSmallMedia: forceSmallMedia,
                optional: optional,
                message: message,
                entities: entities,
                url: url,
                replyMarkup: replyMarkup,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.invertMedia ? 1 << 3 : 0;
            flags |= this.forceLargeMedia ? 1 << 4 : 0;
            flags |= this.forceSmallMedia ? 1 << 5 : 0;
            flags |= this.optional ? 1 << 6 : 0;
            flags |= this.entities ? 1 << 1 : 0;
            flags |= this.replyMarkup !== undefined ? 1 << 2 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.message !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.message));
            }
            if (this.entities) {
                b.write(index_js_1.Primitive.Vector.write(this.entities));
            }
            if (this.url !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.url));
            }
            if (this.replyMarkup !== undefined) {
                b.write(this.replyMarkup.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputBotInlineMessageMediaWebPage = InputBotInlineMessageMediaWebPage;
    class InputBotInlineResult extends index_js_1.TLObject {
        id;
        type;
        title;
        description;
        url;
        thumb;
        content;
        sendMessage;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputBotInlineResult';
            this.constructorId = 0x88bf9319;
            this.subclassOfId = 0x80a4a3de;
            this._slots = [
                'id',
                'type',
                'title',
                'description',
                'url',
                'thumb',
                'content',
                'sendMessage',
            ];
            this.id = params.id;
            this.type = params.type;
            this.title = params.title;
            this.description = params.description;
            this.url = params.url;
            this.thumb = params.thumb;
            this.content = params.content;
            this.sendMessage = params.sendMessage;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let id = await index_js_1.Primitive.String.read(_data);
            let type = await index_js_1.Primitive.String.read(_data);
            let title = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let description = flags & (1 << 2) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let url = flags & (1 << 3) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let thumb = flags & (1 << 4) ? await index_js_1.TLObject.read(_data) : undefined;
            let content = flags & (1 << 5) ? await index_js_1.TLObject.read(_data) : undefined;
            let sendMessage = await index_js_1.TLObject.read(_data);
            return new Raw.InputBotInlineResult({
                id: id,
                type: type,
                title: title,
                description: description,
                url: url,
                thumb: thumb,
                content: content,
                sendMessage: sendMessage,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.title !== undefined ? 1 << 1 : 0;
            flags |= this.description !== undefined ? 1 << 2 : 0;
            flags |= this.url !== undefined ? 1 << 3 : 0;
            flags |= this.thumb !== undefined ? 1 << 4 : 0;
            flags |= this.content !== undefined ? 1 << 5 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.id));
            }
            if (this.type !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.type));
            }
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            if (this.description !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.description));
            }
            if (this.url !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.url));
            }
            if (this.thumb !== undefined) {
                b.write(this.thumb.write());
            }
            if (this.content !== undefined) {
                b.write(this.content.write());
            }
            if (this.sendMessage !== undefined) {
                b.write(this.sendMessage.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputBotInlineResult = InputBotInlineResult;
    class InputBotInlineResultPhoto extends index_js_1.TLObject {
        id;
        type;
        photo;
        sendMessage;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputBotInlineResultPhoto';
            this.constructorId = 0xa8d864a7;
            this.subclassOfId = 0x80a4a3de;
            this._slots = ['id', 'type', 'photo', 'sendMessage'];
            this.id = params.id;
            this.type = params.type;
            this.photo = params.photo;
            this.sendMessage = params.sendMessage;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.String.read(_data);
            let type = await index_js_1.Primitive.String.read(_data);
            let photo = await index_js_1.TLObject.read(_data);
            let sendMessage = await index_js_1.TLObject.read(_data);
            return new Raw.InputBotInlineResultPhoto({
                id: id,
                type: type,
                photo: photo,
                sendMessage: sendMessage,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.id));
            }
            if (this.type !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.type));
            }
            if (this.photo !== undefined) {
                b.write(this.photo.write());
            }
            if (this.sendMessage !== undefined) {
                b.write(this.sendMessage.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputBotInlineResultPhoto = InputBotInlineResultPhoto;
    class InputBotInlineResultDocument extends index_js_1.TLObject {
        id;
        type;
        title;
        description;
        document;
        sendMessage;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputBotInlineResultDocument';
            this.constructorId = 0xfff8fdc4;
            this.subclassOfId = 0x80a4a3de;
            this._slots = ['id', 'type', 'title', 'description', 'document', 'sendMessage'];
            this.id = params.id;
            this.type = params.type;
            this.title = params.title;
            this.description = params.description;
            this.document = params.document;
            this.sendMessage = params.sendMessage;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let id = await index_js_1.Primitive.String.read(_data);
            let type = await index_js_1.Primitive.String.read(_data);
            let title = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let description = flags & (1 << 2) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let document = await index_js_1.TLObject.read(_data);
            let sendMessage = await index_js_1.TLObject.read(_data);
            return new Raw.InputBotInlineResultDocument({
                id: id,
                type: type,
                title: title,
                description: description,
                document: document,
                sendMessage: sendMessage,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.title !== undefined ? 1 << 1 : 0;
            flags |= this.description !== undefined ? 1 << 2 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.id));
            }
            if (this.type !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.type));
            }
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            if (this.description !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.description));
            }
            if (this.document !== undefined) {
                b.write(this.document.write());
            }
            if (this.sendMessage !== undefined) {
                b.write(this.sendMessage.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputBotInlineResultDocument = InputBotInlineResultDocument;
    class InputBotInlineResultGame extends index_js_1.TLObject {
        id;
        shortName;
        sendMessage;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputBotInlineResultGame';
            this.constructorId = 0x4fa417f2;
            this.subclassOfId = 0x80a4a3de;
            this._slots = ['id', 'shortName', 'sendMessage'];
            this.id = params.id;
            this.shortName = params.shortName;
            this.sendMessage = params.sendMessage;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.String.read(_data);
            let shortName = await index_js_1.Primitive.String.read(_data);
            let sendMessage = await index_js_1.TLObject.read(_data);
            return new Raw.InputBotInlineResultGame({
                id: id,
                shortName: shortName,
                sendMessage: sendMessage,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.id));
            }
            if (this.shortName !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.shortName));
            }
            if (this.sendMessage !== undefined) {
                b.write(this.sendMessage.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputBotInlineResultGame = InputBotInlineResultGame;
    class BotInlineMessageMediaAuto extends index_js_1.TLObject {
        invertMedia;
        message;
        entities;
        replyMarkup;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'BotInlineMessageMediaAuto';
            this.constructorId = 0x764cf810;
            this.subclassOfId = 0xc4910f88;
            this._slots = ['invertMedia', 'message', 'entities', 'replyMarkup'];
            this.invertMedia = params.invertMedia;
            this.message = params.message;
            this.entities = params.entities;
            this.replyMarkup = params.replyMarkup;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let invertMedia = flags & (1 << 3) ? true : false;
            let message = await index_js_1.Primitive.String.read(_data);
            let entities = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : [];
            let replyMarkup = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.BotInlineMessageMediaAuto({
                invertMedia: invertMedia,
                message: message,
                entities: entities,
                replyMarkup: replyMarkup,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.invertMedia ? 1 << 3 : 0;
            flags |= this.entities ? 1 << 1 : 0;
            flags |= this.replyMarkup !== undefined ? 1 << 2 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.message !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.message));
            }
            if (this.entities) {
                b.write(index_js_1.Primitive.Vector.write(this.entities));
            }
            if (this.replyMarkup !== undefined) {
                b.write(this.replyMarkup.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.BotInlineMessageMediaAuto = BotInlineMessageMediaAuto;
    class BotInlineMessageText extends index_js_1.TLObject {
        noWebpage;
        invertMedia;
        message;
        entities;
        replyMarkup;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'BotInlineMessageText';
            this.constructorId = 0x8c7f65e2;
            this.subclassOfId = 0xc4910f88;
            this._slots = ['noWebpage', 'invertMedia', 'message', 'entities', 'replyMarkup'];
            this.noWebpage = params.noWebpage;
            this.invertMedia = params.invertMedia;
            this.message = params.message;
            this.entities = params.entities;
            this.replyMarkup = params.replyMarkup;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let noWebpage = flags & (1 << 0) ? true : false;
            let invertMedia = flags & (1 << 3) ? true : false;
            let message = await index_js_1.Primitive.String.read(_data);
            let entities = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : [];
            let replyMarkup = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.BotInlineMessageText({
                noWebpage: noWebpage,
                invertMedia: invertMedia,
                message: message,
                entities: entities,
                replyMarkup: replyMarkup,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.noWebpage ? 1 << 0 : 0;
            flags |= this.invertMedia ? 1 << 3 : 0;
            flags |= this.entities ? 1 << 1 : 0;
            flags |= this.replyMarkup !== undefined ? 1 << 2 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.message !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.message));
            }
            if (this.entities) {
                b.write(index_js_1.Primitive.Vector.write(this.entities));
            }
            if (this.replyMarkup !== undefined) {
                b.write(this.replyMarkup.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.BotInlineMessageText = BotInlineMessageText;
    class BotInlineMessageMediaGeo extends index_js_1.TLObject {
        geo;
        heading;
        period;
        proximityNotificationRadius;
        replyMarkup;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'BotInlineMessageMediaGeo';
            this.constructorId = 0x51846fd;
            this.subclassOfId = 0xc4910f88;
            this._slots = ['geo', 'heading', 'period', 'proximityNotificationRadius', 'replyMarkup'];
            this.geo = params.geo;
            this.heading = params.heading;
            this.period = params.period;
            this.proximityNotificationRadius = params.proximityNotificationRadius;
            this.replyMarkup = params.replyMarkup;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let geo = await index_js_1.TLObject.read(_data);
            let heading = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let period = flags & (1 << 1) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let proximityNotificationRadius = flags & (1 << 3) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let replyMarkup = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.BotInlineMessageMediaGeo({
                geo: geo,
                heading: heading,
                period: period,
                proximityNotificationRadius: proximityNotificationRadius,
                replyMarkup: replyMarkup,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.heading !== undefined ? 1 << 0 : 0;
            flags |= this.period !== undefined ? 1 << 1 : 0;
            flags |= this.proximityNotificationRadius !== undefined ? 1 << 3 : 0;
            flags |= this.replyMarkup !== undefined ? 1 << 2 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.geo !== undefined) {
                b.write(this.geo.write());
            }
            if (this.heading !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.heading));
            }
            if (this.period !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.period));
            }
            if (this.proximityNotificationRadius !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.proximityNotificationRadius));
            }
            if (this.replyMarkup !== undefined) {
                b.write(this.replyMarkup.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.BotInlineMessageMediaGeo = BotInlineMessageMediaGeo;
    class BotInlineMessageMediaVenue extends index_js_1.TLObject {
        geo;
        title;
        address;
        provider;
        venueId;
        venueType;
        replyMarkup;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'BotInlineMessageMediaVenue';
            this.constructorId = 0x8a86659c;
            this.subclassOfId = 0xc4910f88;
            this._slots = ['geo', 'title', 'address', 'provider', 'venueId', 'venueType', 'replyMarkup'];
            this.geo = params.geo;
            this.title = params.title;
            this.address = params.address;
            this.provider = params.provider;
            this.venueId = params.venueId;
            this.venueType = params.venueType;
            this.replyMarkup = params.replyMarkup;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let geo = await index_js_1.TLObject.read(_data);
            let title = await index_js_1.Primitive.String.read(_data);
            let address = await index_js_1.Primitive.String.read(_data);
            let provider = await index_js_1.Primitive.String.read(_data);
            let venueId = await index_js_1.Primitive.String.read(_data);
            let venueType = await index_js_1.Primitive.String.read(_data);
            let replyMarkup = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.BotInlineMessageMediaVenue({
                geo: geo,
                title: title,
                address: address,
                provider: provider,
                venueId: venueId,
                venueType: venueType,
                replyMarkup: replyMarkup,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.replyMarkup !== undefined ? 1 << 2 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.geo !== undefined) {
                b.write(this.geo.write());
            }
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            if (this.address !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.address));
            }
            if (this.provider !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.provider));
            }
            if (this.venueId !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.venueId));
            }
            if (this.venueType !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.venueType));
            }
            if (this.replyMarkup !== undefined) {
                b.write(this.replyMarkup.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.BotInlineMessageMediaVenue = BotInlineMessageMediaVenue;
    class BotInlineMessageMediaContact extends index_js_1.TLObject {
        phoneNumber;
        firstName;
        lastName;
        vcard;
        replyMarkup;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'BotInlineMessageMediaContact';
            this.constructorId = 0x18d1cdc2;
            this.subclassOfId = 0xc4910f88;
            this._slots = ['phoneNumber', 'firstName', 'lastName', 'vcard', 'replyMarkup'];
            this.phoneNumber = params.phoneNumber;
            this.firstName = params.firstName;
            this.lastName = params.lastName;
            this.vcard = params.vcard;
            this.replyMarkup = params.replyMarkup;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let phoneNumber = await index_js_1.Primitive.String.read(_data);
            let firstName = await index_js_1.Primitive.String.read(_data);
            let lastName = await index_js_1.Primitive.String.read(_data);
            let vcard = await index_js_1.Primitive.String.read(_data);
            let replyMarkup = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.BotInlineMessageMediaContact({
                phoneNumber: phoneNumber,
                firstName: firstName,
                lastName: lastName,
                vcard: vcard,
                replyMarkup: replyMarkup,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.replyMarkup !== undefined ? 1 << 2 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.phoneNumber !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.phoneNumber));
            }
            if (this.firstName !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.firstName));
            }
            if (this.lastName !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.lastName));
            }
            if (this.vcard !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.vcard));
            }
            if (this.replyMarkup !== undefined) {
                b.write(this.replyMarkup.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.BotInlineMessageMediaContact = BotInlineMessageMediaContact;
    class BotInlineMessageMediaInvoice extends index_js_1.TLObject {
        shippingAddressRequested;
        test;
        title;
        description;
        photo;
        currency;
        totalAmount;
        replyMarkup;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'BotInlineMessageMediaInvoice';
            this.constructorId = 0x354a9b09;
            this.subclassOfId = 0xc4910f88;
            this._slots = [
                'shippingAddressRequested',
                'test',
                'title',
                'description',
                'photo',
                'currency',
                'totalAmount',
                'replyMarkup',
            ];
            this.shippingAddressRequested = params.shippingAddressRequested;
            this.test = params.test;
            this.title = params.title;
            this.description = params.description;
            this.photo = params.photo;
            this.currency = params.currency;
            this.totalAmount = params.totalAmount;
            this.replyMarkup = params.replyMarkup;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let shippingAddressRequested = flags & (1 << 1) ? true : false;
            let test = flags & (1 << 3) ? true : false;
            let title = await index_js_1.Primitive.String.read(_data);
            let description = await index_js_1.Primitive.String.read(_data);
            let photo = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
            let currency = await index_js_1.Primitive.String.read(_data);
            let totalAmount = await index_js_1.Primitive.Long.read(_data);
            let replyMarkup = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.BotInlineMessageMediaInvoice({
                shippingAddressRequested: shippingAddressRequested,
                test: test,
                title: title,
                description: description,
                photo: photo,
                currency: currency,
                totalAmount: totalAmount,
                replyMarkup: replyMarkup,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.shippingAddressRequested ? 1 << 1 : 0;
            flags |= this.test ? 1 << 3 : 0;
            flags |= this.photo !== undefined ? 1 << 0 : 0;
            flags |= this.replyMarkup !== undefined ? 1 << 2 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            if (this.description !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.description));
            }
            if (this.photo !== undefined) {
                b.write(this.photo.write());
            }
            if (this.currency !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.currency));
            }
            if (this.totalAmount !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.totalAmount));
            }
            if (this.replyMarkup !== undefined) {
                b.write(this.replyMarkup.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.BotInlineMessageMediaInvoice = BotInlineMessageMediaInvoice;
    class BotInlineMessageMediaWebPage extends index_js_1.TLObject {
        invertMedia;
        forceLargeMedia;
        forceSmallMedia;
        manual;
        safe;
        message;
        entities;
        url;
        replyMarkup;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'BotInlineMessageMediaWebPage';
            this.constructorId = 0x809ad9a6;
            this.subclassOfId = 0xc4910f88;
            this._slots = [
                'invertMedia',
                'forceLargeMedia',
                'forceSmallMedia',
                'manual',
                'safe',
                'message',
                'entities',
                'url',
                'replyMarkup',
            ];
            this.invertMedia = params.invertMedia;
            this.forceLargeMedia = params.forceLargeMedia;
            this.forceSmallMedia = params.forceSmallMedia;
            this.manual = params.manual;
            this.safe = params.safe;
            this.message = params.message;
            this.entities = params.entities;
            this.url = params.url;
            this.replyMarkup = params.replyMarkup;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let invertMedia = flags & (1 << 3) ? true : false;
            let forceLargeMedia = flags & (1 << 4) ? true : false;
            let forceSmallMedia = flags & (1 << 5) ? true : false;
            let manual = flags & (1 << 7) ? true : false;
            let safe = flags & (1 << 8) ? true : false;
            let message = await index_js_1.Primitive.String.read(_data);
            let entities = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : [];
            let url = await index_js_1.Primitive.String.read(_data);
            let replyMarkup = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.BotInlineMessageMediaWebPage({
                invertMedia: invertMedia,
                forceLargeMedia: forceLargeMedia,
                forceSmallMedia: forceSmallMedia,
                manual: manual,
                safe: safe,
                message: message,
                entities: entities,
                url: url,
                replyMarkup: replyMarkup,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.invertMedia ? 1 << 3 : 0;
            flags |= this.forceLargeMedia ? 1 << 4 : 0;
            flags |= this.forceSmallMedia ? 1 << 5 : 0;
            flags |= this.manual ? 1 << 7 : 0;
            flags |= this.safe ? 1 << 8 : 0;
            flags |= this.entities ? 1 << 1 : 0;
            flags |= this.replyMarkup !== undefined ? 1 << 2 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.message !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.message));
            }
            if (this.entities) {
                b.write(index_js_1.Primitive.Vector.write(this.entities));
            }
            if (this.url !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.url));
            }
            if (this.replyMarkup !== undefined) {
                b.write(this.replyMarkup.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.BotInlineMessageMediaWebPage = BotInlineMessageMediaWebPage;
    class BotInlineResult extends index_js_1.TLObject {
        id;
        type;
        title;
        description;
        url;
        thumb;
        content;
        sendMessage;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'BotInlineResult';
            this.constructorId = 0x11965f3a;
            this.subclassOfId = 0x3832b3d5;
            this._slots = [
                'id',
                'type',
                'title',
                'description',
                'url',
                'thumb',
                'content',
                'sendMessage',
            ];
            this.id = params.id;
            this.type = params.type;
            this.title = params.title;
            this.description = params.description;
            this.url = params.url;
            this.thumb = params.thumb;
            this.content = params.content;
            this.sendMessage = params.sendMessage;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let id = await index_js_1.Primitive.String.read(_data);
            let type = await index_js_1.Primitive.String.read(_data);
            let title = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let description = flags & (1 << 2) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let url = flags & (1 << 3) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let thumb = flags & (1 << 4) ? await index_js_1.TLObject.read(_data) : undefined;
            let content = flags & (1 << 5) ? await index_js_1.TLObject.read(_data) : undefined;
            let sendMessage = await index_js_1.TLObject.read(_data);
            return new Raw.BotInlineResult({
                id: id,
                type: type,
                title: title,
                description: description,
                url: url,
                thumb: thumb,
                content: content,
                sendMessage: sendMessage,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.title !== undefined ? 1 << 1 : 0;
            flags |= this.description !== undefined ? 1 << 2 : 0;
            flags |= this.url !== undefined ? 1 << 3 : 0;
            flags |= this.thumb !== undefined ? 1 << 4 : 0;
            flags |= this.content !== undefined ? 1 << 5 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.id));
            }
            if (this.type !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.type));
            }
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            if (this.description !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.description));
            }
            if (this.url !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.url));
            }
            if (this.thumb !== undefined) {
                b.write(this.thumb.write());
            }
            if (this.content !== undefined) {
                b.write(this.content.write());
            }
            if (this.sendMessage !== undefined) {
                b.write(this.sendMessage.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.BotInlineResult = BotInlineResult;
    class BotInlineMediaResult extends index_js_1.TLObject {
        id;
        type;
        photo;
        document;
        title;
        description;
        sendMessage;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'BotInlineMediaResult';
            this.constructorId = 0x17db940b;
            this.subclassOfId = 0x3832b3d5;
            this._slots = ['id', 'type', 'photo', 'document', 'title', 'description', 'sendMessage'];
            this.id = params.id;
            this.type = params.type;
            this.photo = params.photo;
            this.document = params.document;
            this.title = params.title;
            this.description = params.description;
            this.sendMessage = params.sendMessage;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let id = await index_js_1.Primitive.String.read(_data);
            let type = await index_js_1.Primitive.String.read(_data);
            let photo = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
            let document = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : undefined;
            let title = flags & (1 << 2) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let description = flags & (1 << 3) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let sendMessage = await index_js_1.TLObject.read(_data);
            return new Raw.BotInlineMediaResult({
                id: id,
                type: type,
                photo: photo,
                document: document,
                title: title,
                description: description,
                sendMessage: sendMessage,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.photo !== undefined ? 1 << 0 : 0;
            flags |= this.document !== undefined ? 1 << 1 : 0;
            flags |= this.title !== undefined ? 1 << 2 : 0;
            flags |= this.description !== undefined ? 1 << 3 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.id));
            }
            if (this.type !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.type));
            }
            if (this.photo !== undefined) {
                b.write(this.photo.write());
            }
            if (this.document !== undefined) {
                b.write(this.document.write());
            }
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            if (this.description !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.description));
            }
            if (this.sendMessage !== undefined) {
                b.write(this.sendMessage.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.BotInlineMediaResult = BotInlineMediaResult;
    class ExportedMessageLink extends index_js_1.TLObject {
        link;
        html;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ExportedMessageLink';
            this.constructorId = 0x5dab1af4;
            this.subclassOfId = 0xdee644cc;
            this._slots = ['link', 'html'];
            this.link = params.link;
            this.html = params.html;
        }
        static async read(_data, ..._args) {
            let link = await index_js_1.Primitive.String.read(_data);
            let html = await index_js_1.Primitive.String.read(_data);
            return new Raw.ExportedMessageLink({ link: link, html: html });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.link !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.link));
            }
            if (this.html !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.html));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ExportedMessageLink = ExportedMessageLink;
    class MessageFwdHeader extends index_js_1.TLObject {
        imported;
        savedOut;
        fromId;
        fromName;
        date;
        channelPost;
        postAuthor;
        savedFromPeer;
        savedFromMsgId;
        savedFromId;
        savedFromName;
        savedDate;
        psaType;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageFwdHeader';
            this.constructorId = 0x4e4df4bb;
            this.subclassOfId = 0x7a286804;
            this._slots = [
                'imported',
                'savedOut',
                'fromId',
                'fromName',
                'date',
                'channelPost',
                'postAuthor',
                'savedFromPeer',
                'savedFromMsgId',
                'savedFromId',
                'savedFromName',
                'savedDate',
                'psaType',
            ];
            this.imported = params.imported;
            this.savedOut = params.savedOut;
            this.fromId = params.fromId;
            this.fromName = params.fromName;
            this.date = params.date;
            this.channelPost = params.channelPost;
            this.postAuthor = params.postAuthor;
            this.savedFromPeer = params.savedFromPeer;
            this.savedFromMsgId = params.savedFromMsgId;
            this.savedFromId = params.savedFromId;
            this.savedFromName = params.savedFromName;
            this.savedDate = params.savedDate;
            this.psaType = params.psaType;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let imported = flags & (1 << 7) ? true : false;
            let savedOut = flags & (1 << 11) ? true : false;
            let fromId = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
            let fromName = flags & (1 << 5) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let date = await index_js_1.Primitive.Int.read(_data);
            let channelPost = flags & (1 << 2) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let postAuthor = flags & (1 << 3) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let savedFromPeer = flags & (1 << 4) ? await index_js_1.TLObject.read(_data) : undefined;
            let savedFromMsgId = flags & (1 << 4) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let savedFromId = flags & (1 << 8) ? await index_js_1.TLObject.read(_data) : undefined;
            let savedFromName = flags & (1 << 9) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let savedDate = flags & (1 << 10) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let psaType = flags & (1 << 6) ? await index_js_1.Primitive.String.read(_data) : undefined;
            return new Raw.MessageFwdHeader({
                imported: imported,
                savedOut: savedOut,
                fromId: fromId,
                fromName: fromName,
                date: date,
                channelPost: channelPost,
                postAuthor: postAuthor,
                savedFromPeer: savedFromPeer,
                savedFromMsgId: savedFromMsgId,
                savedFromId: savedFromId,
                savedFromName: savedFromName,
                savedDate: savedDate,
                psaType: psaType,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.imported ? 1 << 7 : 0;
            flags |= this.savedOut ? 1 << 11 : 0;
            flags |= this.fromId !== undefined ? 1 << 0 : 0;
            flags |= this.fromName !== undefined ? 1 << 5 : 0;
            flags |= this.channelPost !== undefined ? 1 << 2 : 0;
            flags |= this.postAuthor !== undefined ? 1 << 3 : 0;
            flags |= this.savedFromPeer !== undefined ? 1 << 4 : 0;
            flags |= this.savedFromMsgId !== undefined ? 1 << 4 : 0;
            flags |= this.savedFromId !== undefined ? 1 << 8 : 0;
            flags |= this.savedFromName !== undefined ? 1 << 9 : 0;
            flags |= this.savedDate !== undefined ? 1 << 10 : 0;
            flags |= this.psaType !== undefined ? 1 << 6 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.fromId !== undefined) {
                b.write(this.fromId.write());
            }
            if (this.fromName !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.fromName));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.channelPost !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.channelPost));
            }
            if (this.postAuthor !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.postAuthor));
            }
            if (this.savedFromPeer !== undefined) {
                b.write(this.savedFromPeer.write());
            }
            if (this.savedFromMsgId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.savedFromMsgId));
            }
            if (this.savedFromId !== undefined) {
                b.write(this.savedFromId.write());
            }
            if (this.savedFromName !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.savedFromName));
            }
            if (this.savedDate !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.savedDate));
            }
            if (this.psaType !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.psaType));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageFwdHeader = MessageFwdHeader;
    class InputBotInlineMessageID extends index_js_1.TLObject {
        dcId;
        id;
        accessHash;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputBotInlineMessageID';
            this.constructorId = 0x890c3d89;
            this.subclassOfId = 0x2dcd6300;
            this._slots = ['dcId', 'id', 'accessHash'];
            this.dcId = params.dcId;
            this.id = params.id;
            this.accessHash = params.accessHash;
        }
        static async read(_data, ..._args) {
            let dcId = await index_js_1.Primitive.Int.read(_data);
            let id = await index_js_1.Primitive.Long.read(_data);
            let accessHash = await index_js_1.Primitive.Long.read(_data);
            return new Raw.InputBotInlineMessageID({ dcId: dcId, id: id, accessHash: accessHash });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.dcId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.dcId));
            }
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.accessHash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.accessHash));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputBotInlineMessageID = InputBotInlineMessageID;
    class InputBotInlineMessageID64 extends index_js_1.TLObject {
        dcId;
        ownerId;
        id;
        accessHash;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputBotInlineMessageID64';
            this.constructorId = 0xb6d915d7;
            this.subclassOfId = 0x2dcd6300;
            this._slots = ['dcId', 'ownerId', 'id', 'accessHash'];
            this.dcId = params.dcId;
            this.ownerId = params.ownerId;
            this.id = params.id;
            this.accessHash = params.accessHash;
        }
        static async read(_data, ..._args) {
            let dcId = await index_js_1.Primitive.Int.read(_data);
            let ownerId = await index_js_1.Primitive.Long.read(_data);
            let id = await index_js_1.Primitive.Int.read(_data);
            let accessHash = await index_js_1.Primitive.Long.read(_data);
            return new Raw.InputBotInlineMessageID64({
                dcId: dcId,
                ownerId: ownerId,
                id: id,
                accessHash: accessHash,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.dcId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.dcId));
            }
            if (this.ownerId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.ownerId));
            }
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.id));
            }
            if (this.accessHash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.accessHash));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputBotInlineMessageID64 = InputBotInlineMessageID64;
    class InlineBotSwitchPM extends index_js_1.TLObject {
        text;
        startParam;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InlineBotSwitchPM';
            this.constructorId = 0x3c20629f;
            this.subclassOfId = 0x82b1f73b;
            this._slots = ['text', 'startParam'];
            this.text = params.text;
            this.startParam = params.startParam;
        }
        static async read(_data, ..._args) {
            let text = await index_js_1.Primitive.String.read(_data);
            let startParam = await index_js_1.Primitive.String.read(_data);
            return new Raw.InlineBotSwitchPM({ text: text, startParam: startParam });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.text !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.text));
            }
            if (this.startParam !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.startParam));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InlineBotSwitchPM = InlineBotSwitchPM;
    class TopPeer extends index_js_1.TLObject {
        peer;
        rating;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'TopPeer';
            this.constructorId = 0xedcdc05b;
            this.subclassOfId = 0x6916c601;
            this._slots = ['peer', 'rating'];
            this.peer = params.peer;
            this.rating = params.rating;
        }
        static async read(_data, ..._args) {
            let peer = await index_js_1.TLObject.read(_data);
            let rating = await index_js_1.Primitive.Double.read(_data);
            return new Raw.TopPeer({ peer: peer, rating: rating });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.rating !== undefined) {
                b.write(index_js_1.Primitive.Double.write(this.rating));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.TopPeer = TopPeer;
    class TopPeerCategoryBotsPM extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'TopPeerCategoryBotsPM';
            this.constructorId = 0xab661b5b;
            this.subclassOfId = 0xddf02502;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.TopPeerCategoryBotsPM();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.TopPeerCategoryBotsPM = TopPeerCategoryBotsPM;
    class TopPeerCategoryBotsInline extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'TopPeerCategoryBotsInline';
            this.constructorId = 0x148677e2;
            this.subclassOfId = 0xddf02502;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.TopPeerCategoryBotsInline();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.TopPeerCategoryBotsInline = TopPeerCategoryBotsInline;
    class TopPeerCategoryCorrespondents extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'TopPeerCategoryCorrespondents';
            this.constructorId = 0x637b7ed;
            this.subclassOfId = 0xddf02502;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.TopPeerCategoryCorrespondents();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.TopPeerCategoryCorrespondents = TopPeerCategoryCorrespondents;
    class TopPeerCategoryGroups extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'TopPeerCategoryGroups';
            this.constructorId = 0xbd17a14a;
            this.subclassOfId = 0xddf02502;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.TopPeerCategoryGroups();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.TopPeerCategoryGroups = TopPeerCategoryGroups;
    class TopPeerCategoryChannels extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'TopPeerCategoryChannels';
            this.constructorId = 0x161d9628;
            this.subclassOfId = 0xddf02502;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.TopPeerCategoryChannels();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.TopPeerCategoryChannels = TopPeerCategoryChannels;
    class TopPeerCategoryPhoneCalls extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'TopPeerCategoryPhoneCalls';
            this.constructorId = 0x1e76a78c;
            this.subclassOfId = 0xddf02502;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.TopPeerCategoryPhoneCalls();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.TopPeerCategoryPhoneCalls = TopPeerCategoryPhoneCalls;
    class TopPeerCategoryForwardUsers extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'TopPeerCategoryForwardUsers';
            this.constructorId = 0xa8406ca9;
            this.subclassOfId = 0xddf02502;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.TopPeerCategoryForwardUsers();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.TopPeerCategoryForwardUsers = TopPeerCategoryForwardUsers;
    class TopPeerCategoryForwardChats extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'TopPeerCategoryForwardChats';
            this.constructorId = 0xfbeec0f0;
            this.subclassOfId = 0xddf02502;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.TopPeerCategoryForwardChats();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.TopPeerCategoryForwardChats = TopPeerCategoryForwardChats;
    class TopPeerCategoryPeers extends index_js_1.TLObject {
        category;
        count;
        peers;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'TopPeerCategoryPeers';
            this.constructorId = 0xfb834291;
            this.subclassOfId = 0x4aec930;
            this._slots = ['category', 'count', 'peers'];
            this.category = params.category;
            this.count = params.count;
            this.peers = params.peers;
        }
        static async read(_data, ..._args) {
            let category = await index_js_1.TLObject.read(_data);
            let count = await index_js_1.Primitive.Int.read(_data);
            let peers = await index_js_1.TLObject.read(_data);
            return new Raw.TopPeerCategoryPeers({ category: category, count: count, peers: peers });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.category !== undefined) {
                b.write(this.category.write());
            }
            if (this.count !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.count));
            }
            if (this.peers) {
                b.write(index_js_1.Primitive.Vector.write(this.peers));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.TopPeerCategoryPeers = TopPeerCategoryPeers;
    class DraftMessageEmpty extends index_js_1.TLObject {
        date;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DraftMessageEmpty';
            this.constructorId = 0x1b0c841a;
            this.subclassOfId = 0x33d47f45;
            this._slots = ['date'];
            this.date = params.date;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let date = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            return new Raw.DraftMessageEmpty({ date: date });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.date !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DraftMessageEmpty = DraftMessageEmpty;
    class DraftMessage extends index_js_1.TLObject {
        noWebpage;
        invertMedia;
        replyTo;
        message;
        entities;
        media;
        date;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DraftMessage';
            this.constructorId = 0x3fccf7ef;
            this.subclassOfId = 0x33d47f45;
            this._slots = ['noWebpage', 'invertMedia', 'replyTo', 'message', 'entities', 'media', 'date'];
            this.noWebpage = params.noWebpage;
            this.invertMedia = params.invertMedia;
            this.replyTo = params.replyTo;
            this.message = params.message;
            this.entities = params.entities;
            this.media = params.media;
            this.date = params.date;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let noWebpage = flags & (1 << 1) ? true : false;
            let invertMedia = flags & (1 << 6) ? true : false;
            let replyTo = flags & (1 << 4) ? await index_js_1.TLObject.read(_data) : undefined;
            let message = await index_js_1.Primitive.String.read(_data);
            let entities = flags & (1 << 3) ? await index_js_1.TLObject.read(_data) : [];
            let media = flags & (1 << 5) ? await index_js_1.TLObject.read(_data) : undefined;
            let date = await index_js_1.Primitive.Int.read(_data);
            return new Raw.DraftMessage({
                noWebpage: noWebpage,
                invertMedia: invertMedia,
                replyTo: replyTo,
                message: message,
                entities: entities,
                media: media,
                date: date,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.noWebpage ? 1 << 1 : 0;
            flags |= this.invertMedia ? 1 << 6 : 0;
            flags |= this.replyTo !== undefined ? 1 << 4 : 0;
            flags |= this.entities ? 1 << 3 : 0;
            flags |= this.media !== undefined ? 1 << 5 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.replyTo !== undefined) {
                b.write(this.replyTo.write());
            }
            if (this.message !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.message));
            }
            if (this.entities) {
                b.write(index_js_1.Primitive.Vector.write(this.entities));
            }
            if (this.media !== undefined) {
                b.write(this.media.write());
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DraftMessage = DraftMessage;
    class StickerSetCovered extends index_js_1.TLObject {
        set;
        cover;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'StickerSetCovered';
            this.constructorId = 0x6410a5d2;
            this.subclassOfId = 0x7f86e4e5;
            this._slots = ['set', 'cover'];
            this.set = params.set;
            this.cover = params.cover;
        }
        static async read(_data, ..._args) {
            let set = await index_js_1.TLObject.read(_data);
            let cover = await index_js_1.TLObject.read(_data);
            return new Raw.StickerSetCovered({ set: set, cover: cover });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.set !== undefined) {
                b.write(this.set.write());
            }
            if (this.cover !== undefined) {
                b.write(this.cover.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.StickerSetCovered = StickerSetCovered;
    class StickerSetMultiCovered extends index_js_1.TLObject {
        set;
        covers;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'StickerSetMultiCovered';
            this.constructorId = 0x3407e51b;
            this.subclassOfId = 0x7f86e4e5;
            this._slots = ['set', 'covers'];
            this.set = params.set;
            this.covers = params.covers;
        }
        static async read(_data, ..._args) {
            let set = await index_js_1.TLObject.read(_data);
            let covers = await index_js_1.TLObject.read(_data);
            return new Raw.StickerSetMultiCovered({ set: set, covers: covers });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.set !== undefined) {
                b.write(this.set.write());
            }
            if (this.covers) {
                b.write(index_js_1.Primitive.Vector.write(this.covers));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.StickerSetMultiCovered = StickerSetMultiCovered;
    class StickerSetFullCovered extends index_js_1.TLObject {
        set;
        packs;
        keywords;
        documents;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'StickerSetFullCovered';
            this.constructorId = 0x40d13c0e;
            this.subclassOfId = 0x7f86e4e5;
            this._slots = ['set', 'packs', 'keywords', 'documents'];
            this.set = params.set;
            this.packs = params.packs;
            this.keywords = params.keywords;
            this.documents = params.documents;
        }
        static async read(_data, ..._args) {
            let set = await index_js_1.TLObject.read(_data);
            let packs = await index_js_1.TLObject.read(_data);
            let keywords = await index_js_1.TLObject.read(_data);
            let documents = await index_js_1.TLObject.read(_data);
            return new Raw.StickerSetFullCovered({
                set: set,
                packs: packs,
                keywords: keywords,
                documents: documents,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.set !== undefined) {
                b.write(this.set.write());
            }
            if (this.packs) {
                b.write(index_js_1.Primitive.Vector.write(this.packs));
            }
            if (this.keywords) {
                b.write(index_js_1.Primitive.Vector.write(this.keywords));
            }
            if (this.documents) {
                b.write(index_js_1.Primitive.Vector.write(this.documents));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.StickerSetFullCovered = StickerSetFullCovered;
    class StickerSetNoCovered extends index_js_1.TLObject {
        set;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'StickerSetNoCovered';
            this.constructorId = 0x77b15d1c;
            this.subclassOfId = 0x7f86e4e5;
            this._slots = ['set'];
            this.set = params.set;
        }
        static async read(_data, ..._args) {
            let set = await index_js_1.TLObject.read(_data);
            return new Raw.StickerSetNoCovered({ set: set });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.set !== undefined) {
                b.write(this.set.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.StickerSetNoCovered = StickerSetNoCovered;
    class MaskCoords extends index_js_1.TLObject {
        n;
        x;
        y;
        zoom;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MaskCoords';
            this.constructorId = 0xaed6dbb2;
            this.subclassOfId = 0x6bbb2fd;
            this._slots = ['n', 'x', 'y', 'zoom'];
            this.n = params.n;
            this.x = params.x;
            this.y = params.y;
            this.zoom = params.zoom;
        }
        static async read(_data, ..._args) {
            let n = await index_js_1.Primitive.Int.read(_data);
            let x = await index_js_1.Primitive.Double.read(_data);
            let y = await index_js_1.Primitive.Double.read(_data);
            let zoom = await index_js_1.Primitive.Double.read(_data);
            return new Raw.MaskCoords({ n: n, x: x, y: y, zoom: zoom });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.n !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.n));
            }
            if (this.x !== undefined) {
                b.write(index_js_1.Primitive.Double.write(this.x));
            }
            if (this.y !== undefined) {
                b.write(index_js_1.Primitive.Double.write(this.y));
            }
            if (this.zoom !== undefined) {
                b.write(index_js_1.Primitive.Double.write(this.zoom));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MaskCoords = MaskCoords;
    class InputStickeredMediaPhoto extends index_js_1.TLObject {
        id;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputStickeredMediaPhoto';
            this.constructorId = 0x4a992157;
            this.subclassOfId = 0x5146d99e;
            this._slots = ['id'];
            this.id = params.id;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.TLObject.read(_data);
            return new Raw.InputStickeredMediaPhoto({ id: id });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(this.id.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputStickeredMediaPhoto = InputStickeredMediaPhoto;
    class InputStickeredMediaDocument extends index_js_1.TLObject {
        id;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputStickeredMediaDocument';
            this.constructorId = 0x438865b;
            this.subclassOfId = 0x5146d99e;
            this._slots = ['id'];
            this.id = params.id;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.TLObject.read(_data);
            return new Raw.InputStickeredMediaDocument({ id: id });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(this.id.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputStickeredMediaDocument = InputStickeredMediaDocument;
    class Game extends index_js_1.TLObject {
        id;
        accessHash;
        shortName;
        title;
        description;
        photo;
        document;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'Game';
            this.constructorId = 0xbdf9653b;
            this.subclassOfId = 0x83199eb2;
            this._slots = ['id', 'accessHash', 'shortName', 'title', 'description', 'photo', 'document'];
            this.id = params.id;
            this.accessHash = params.accessHash;
            this.shortName = params.shortName;
            this.title = params.title;
            this.description = params.description;
            this.photo = params.photo;
            this.document = params.document;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let id = await index_js_1.Primitive.Long.read(_data);
            let accessHash = await index_js_1.Primitive.Long.read(_data);
            let shortName = await index_js_1.Primitive.String.read(_data);
            let title = await index_js_1.Primitive.String.read(_data);
            let description = await index_js_1.Primitive.String.read(_data);
            let photo = await index_js_1.TLObject.read(_data);
            let document = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.Game({
                id: id,
                accessHash: accessHash,
                shortName: shortName,
                title: title,
                description: description,
                photo: photo,
                document: document,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.document !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.accessHash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.accessHash));
            }
            if (this.shortName !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.shortName));
            }
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            if (this.description !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.description));
            }
            if (this.photo !== undefined) {
                b.write(this.photo.write());
            }
            if (this.document !== undefined) {
                b.write(this.document.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.Game = Game;
    class InputGameID extends index_js_1.TLObject {
        id;
        accessHash;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputGameID';
            this.constructorId = 0x32c3e77;
            this.subclassOfId = 0x48d15883;
            this._slots = ['id', 'accessHash'];
            this.id = params.id;
            this.accessHash = params.accessHash;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.Long.read(_data);
            let accessHash = await index_js_1.Primitive.Long.read(_data);
            return new Raw.InputGameID({ id: id, accessHash: accessHash });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.accessHash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.accessHash));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputGameID = InputGameID;
    class InputGameShortName extends index_js_1.TLObject {
        botId;
        shortName;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputGameShortName';
            this.constructorId = 0xc331e80a;
            this.subclassOfId = 0x48d15883;
            this._slots = ['botId', 'shortName'];
            this.botId = params.botId;
            this.shortName = params.shortName;
        }
        static async read(_data, ..._args) {
            let botId = await index_js_1.TLObject.read(_data);
            let shortName = await index_js_1.Primitive.String.read(_data);
            return new Raw.InputGameShortName({ botId: botId, shortName: shortName });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.botId !== undefined) {
                b.write(this.botId.write());
            }
            if (this.shortName !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.shortName));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputGameShortName = InputGameShortName;
    class HighScore extends index_js_1.TLObject {
        pos;
        userId;
        score;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'HighScore';
            this.constructorId = 0x73a379eb;
            this.subclassOfId = 0xd32b1e35;
            this._slots = ['pos', 'userId', 'score'];
            this.pos = params.pos;
            this.userId = params.userId;
            this.score = params.score;
        }
        static async read(_data, ..._args) {
            let pos = await index_js_1.Primitive.Int.read(_data);
            let userId = await index_js_1.Primitive.Long.read(_data);
            let score = await index_js_1.Primitive.Int.read(_data);
            return new Raw.HighScore({ pos: pos, userId: userId, score: score });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.pos !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.pos));
            }
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            if (this.score !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.score));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.HighScore = HighScore;
    class TextEmpty extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'TextEmpty';
            this.constructorId = 0xdc3d824f;
            this.subclassOfId = 0xf1d0b479;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.TextEmpty();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.TextEmpty = TextEmpty;
    class TextPlain extends index_js_1.TLObject {
        text;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'TextPlain';
            this.constructorId = 0x744694e0;
            this.subclassOfId = 0xf1d0b479;
            this._slots = ['text'];
            this.text = params.text;
        }
        static async read(_data, ..._args) {
            let text = await index_js_1.Primitive.String.read(_data);
            return new Raw.TextPlain({ text: text });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.text !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.text));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.TextPlain = TextPlain;
    class TextBold extends index_js_1.TLObject {
        text;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'TextBold';
            this.constructorId = 0x6724abc4;
            this.subclassOfId = 0xf1d0b479;
            this._slots = ['text'];
            this.text = params.text;
        }
        static async read(_data, ..._args) {
            let text = await index_js_1.TLObject.read(_data);
            return new Raw.TextBold({ text: text });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.text !== undefined) {
                b.write(this.text.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.TextBold = TextBold;
    class TextItalic extends index_js_1.TLObject {
        text;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'TextItalic';
            this.constructorId = 0xd912a59c;
            this.subclassOfId = 0xf1d0b479;
            this._slots = ['text'];
            this.text = params.text;
        }
        static async read(_data, ..._args) {
            let text = await index_js_1.TLObject.read(_data);
            return new Raw.TextItalic({ text: text });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.text !== undefined) {
                b.write(this.text.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.TextItalic = TextItalic;
    class TextUnderline extends index_js_1.TLObject {
        text;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'TextUnderline';
            this.constructorId = 0xc12622c4;
            this.subclassOfId = 0xf1d0b479;
            this._slots = ['text'];
            this.text = params.text;
        }
        static async read(_data, ..._args) {
            let text = await index_js_1.TLObject.read(_data);
            return new Raw.TextUnderline({ text: text });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.text !== undefined) {
                b.write(this.text.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.TextUnderline = TextUnderline;
    class TextStrike extends index_js_1.TLObject {
        text;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'TextStrike';
            this.constructorId = 0x9bf8bb95;
            this.subclassOfId = 0xf1d0b479;
            this._slots = ['text'];
            this.text = params.text;
        }
        static async read(_data, ..._args) {
            let text = await index_js_1.TLObject.read(_data);
            return new Raw.TextStrike({ text: text });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.text !== undefined) {
                b.write(this.text.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.TextStrike = TextStrike;
    class TextFixed extends index_js_1.TLObject {
        text;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'TextFixed';
            this.constructorId = 0x6c3f19b9;
            this.subclassOfId = 0xf1d0b479;
            this._slots = ['text'];
            this.text = params.text;
        }
        static async read(_data, ..._args) {
            let text = await index_js_1.TLObject.read(_data);
            return new Raw.TextFixed({ text: text });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.text !== undefined) {
                b.write(this.text.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.TextFixed = TextFixed;
    class TextUrl extends index_js_1.TLObject {
        text;
        url;
        webpageId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'TextUrl';
            this.constructorId = 0x3c2884c1;
            this.subclassOfId = 0xf1d0b479;
            this._slots = ['text', 'url', 'webpageId'];
            this.text = params.text;
            this.url = params.url;
            this.webpageId = params.webpageId;
        }
        static async read(_data, ..._args) {
            let text = await index_js_1.TLObject.read(_data);
            let url = await index_js_1.Primitive.String.read(_data);
            let webpageId = await index_js_1.Primitive.Long.read(_data);
            return new Raw.TextUrl({ text: text, url: url, webpageId: webpageId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.text !== undefined) {
                b.write(this.text.write());
            }
            if (this.url !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.url));
            }
            if (this.webpageId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.webpageId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.TextUrl = TextUrl;
    class TextEmail extends index_js_1.TLObject {
        text;
        email;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'TextEmail';
            this.constructorId = 0xde5a0dd6;
            this.subclassOfId = 0xf1d0b479;
            this._slots = ['text', 'email'];
            this.text = params.text;
            this.email = params.email;
        }
        static async read(_data, ..._args) {
            let text = await index_js_1.TLObject.read(_data);
            let email = await index_js_1.Primitive.String.read(_data);
            return new Raw.TextEmail({ text: text, email: email });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.text !== undefined) {
                b.write(this.text.write());
            }
            if (this.email !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.email));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.TextEmail = TextEmail;
    class TextConcat extends index_js_1.TLObject {
        texts;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'TextConcat';
            this.constructorId = 0x7e6260d7;
            this.subclassOfId = 0xf1d0b479;
            this._slots = ['texts'];
            this.texts = params.texts;
        }
        static async read(_data, ..._args) {
            let texts = await index_js_1.TLObject.read(_data);
            return new Raw.TextConcat({ texts: texts });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.texts) {
                b.write(index_js_1.Primitive.Vector.write(this.texts));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.TextConcat = TextConcat;
    class TextSubscript extends index_js_1.TLObject {
        text;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'TextSubscript';
            this.constructorId = 0xed6a8504;
            this.subclassOfId = 0xf1d0b479;
            this._slots = ['text'];
            this.text = params.text;
        }
        static async read(_data, ..._args) {
            let text = await index_js_1.TLObject.read(_data);
            return new Raw.TextSubscript({ text: text });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.text !== undefined) {
                b.write(this.text.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.TextSubscript = TextSubscript;
    class TextSuperscript extends index_js_1.TLObject {
        text;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'TextSuperscript';
            this.constructorId = 0xc7fb5e01;
            this.subclassOfId = 0xf1d0b479;
            this._slots = ['text'];
            this.text = params.text;
        }
        static async read(_data, ..._args) {
            let text = await index_js_1.TLObject.read(_data);
            return new Raw.TextSuperscript({ text: text });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.text !== undefined) {
                b.write(this.text.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.TextSuperscript = TextSuperscript;
    class TextMarked extends index_js_1.TLObject {
        text;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'TextMarked';
            this.constructorId = 0x34b8621;
            this.subclassOfId = 0xf1d0b479;
            this._slots = ['text'];
            this.text = params.text;
        }
        static async read(_data, ..._args) {
            let text = await index_js_1.TLObject.read(_data);
            return new Raw.TextMarked({ text: text });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.text !== undefined) {
                b.write(this.text.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.TextMarked = TextMarked;
    class TextPhone extends index_js_1.TLObject {
        text;
        phone;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'TextPhone';
            this.constructorId = 0x1ccb966a;
            this.subclassOfId = 0xf1d0b479;
            this._slots = ['text', 'phone'];
            this.text = params.text;
            this.phone = params.phone;
        }
        static async read(_data, ..._args) {
            let text = await index_js_1.TLObject.read(_data);
            let phone = await index_js_1.Primitive.String.read(_data);
            return new Raw.TextPhone({ text: text, phone: phone });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.text !== undefined) {
                b.write(this.text.write());
            }
            if (this.phone !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.phone));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.TextPhone = TextPhone;
    class TextImage extends index_js_1.TLObject {
        documentId;
        w;
        h;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'TextImage';
            this.constructorId = 0x81ccf4f;
            this.subclassOfId = 0xf1d0b479;
            this._slots = ['documentId', 'w', 'h'];
            this.documentId = params.documentId;
            this.w = params.w;
            this.h = params.h;
        }
        static async read(_data, ..._args) {
            let documentId = await index_js_1.Primitive.Long.read(_data);
            let w = await index_js_1.Primitive.Int.read(_data);
            let h = await index_js_1.Primitive.Int.read(_data);
            return new Raw.TextImage({ documentId: documentId, w: w, h: h });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.documentId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.documentId));
            }
            if (this.w !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.w));
            }
            if (this.h !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.h));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.TextImage = TextImage;
    class TextAnchor extends index_js_1.TLObject {
        text;
        name;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'TextAnchor';
            this.constructorId = 0x35553762;
            this.subclassOfId = 0xf1d0b479;
            this._slots = ['text', 'name'];
            this.text = params.text;
            this.name = params.name;
        }
        static async read(_data, ..._args) {
            let text = await index_js_1.TLObject.read(_data);
            let name = await index_js_1.Primitive.String.read(_data);
            return new Raw.TextAnchor({ text: text, name: name });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.text !== undefined) {
                b.write(this.text.write());
            }
            if (this.name !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.name));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.TextAnchor = TextAnchor;
    class PageBlockUnsupported extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'PageBlockUnsupported';
            this.constructorId = 0x13567e8a;
            this.subclassOfId = 0x1aca5644;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.PageBlockUnsupported();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PageBlockUnsupported = PageBlockUnsupported;
    class PageBlockTitle extends index_js_1.TLObject {
        text;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PageBlockTitle';
            this.constructorId = 0x70abc3fd;
            this.subclassOfId = 0x1aca5644;
            this._slots = ['text'];
            this.text = params.text;
        }
        static async read(_data, ..._args) {
            let text = await index_js_1.TLObject.read(_data);
            return new Raw.PageBlockTitle({ text: text });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.text !== undefined) {
                b.write(this.text.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PageBlockTitle = PageBlockTitle;
    class PageBlockSubtitle extends index_js_1.TLObject {
        text;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PageBlockSubtitle';
            this.constructorId = 0x8ffa9a1f;
            this.subclassOfId = 0x1aca5644;
            this._slots = ['text'];
            this.text = params.text;
        }
        static async read(_data, ..._args) {
            let text = await index_js_1.TLObject.read(_data);
            return new Raw.PageBlockSubtitle({ text: text });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.text !== undefined) {
                b.write(this.text.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PageBlockSubtitle = PageBlockSubtitle;
    class PageBlockAuthorDate extends index_js_1.TLObject {
        author;
        publishedDate;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PageBlockAuthorDate';
            this.constructorId = 0xbaafe5e0;
            this.subclassOfId = 0x1aca5644;
            this._slots = ['author', 'publishedDate'];
            this.author = params.author;
            this.publishedDate = params.publishedDate;
        }
        static async read(_data, ..._args) {
            let author = await index_js_1.TLObject.read(_data);
            let publishedDate = await index_js_1.Primitive.Int.read(_data);
            return new Raw.PageBlockAuthorDate({ author: author, publishedDate: publishedDate });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.author !== undefined) {
                b.write(this.author.write());
            }
            if (this.publishedDate !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.publishedDate));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PageBlockAuthorDate = PageBlockAuthorDate;
    class PageBlockHeader extends index_js_1.TLObject {
        text;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PageBlockHeader';
            this.constructorId = 0xbfd064ec;
            this.subclassOfId = 0x1aca5644;
            this._slots = ['text'];
            this.text = params.text;
        }
        static async read(_data, ..._args) {
            let text = await index_js_1.TLObject.read(_data);
            return new Raw.PageBlockHeader({ text: text });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.text !== undefined) {
                b.write(this.text.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PageBlockHeader = PageBlockHeader;
    class PageBlockSubheader extends index_js_1.TLObject {
        text;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PageBlockSubheader';
            this.constructorId = 0xf12bb6e1;
            this.subclassOfId = 0x1aca5644;
            this._slots = ['text'];
            this.text = params.text;
        }
        static async read(_data, ..._args) {
            let text = await index_js_1.TLObject.read(_data);
            return new Raw.PageBlockSubheader({ text: text });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.text !== undefined) {
                b.write(this.text.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PageBlockSubheader = PageBlockSubheader;
    class PageBlockParagraph extends index_js_1.TLObject {
        text;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PageBlockParagraph';
            this.constructorId = 0x467a0766;
            this.subclassOfId = 0x1aca5644;
            this._slots = ['text'];
            this.text = params.text;
        }
        static async read(_data, ..._args) {
            let text = await index_js_1.TLObject.read(_data);
            return new Raw.PageBlockParagraph({ text: text });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.text !== undefined) {
                b.write(this.text.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PageBlockParagraph = PageBlockParagraph;
    class PageBlockPreformatted extends index_js_1.TLObject {
        text;
        language;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PageBlockPreformatted';
            this.constructorId = 0xc070d93e;
            this.subclassOfId = 0x1aca5644;
            this._slots = ['text', 'language'];
            this.text = params.text;
            this.language = params.language;
        }
        static async read(_data, ..._args) {
            let text = await index_js_1.TLObject.read(_data);
            let language = await index_js_1.Primitive.String.read(_data);
            return new Raw.PageBlockPreformatted({ text: text, language: language });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.text !== undefined) {
                b.write(this.text.write());
            }
            if (this.language !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.language));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PageBlockPreformatted = PageBlockPreformatted;
    class PageBlockFooter extends index_js_1.TLObject {
        text;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PageBlockFooter';
            this.constructorId = 0x48870999;
            this.subclassOfId = 0x1aca5644;
            this._slots = ['text'];
            this.text = params.text;
        }
        static async read(_data, ..._args) {
            let text = await index_js_1.TLObject.read(_data);
            return new Raw.PageBlockFooter({ text: text });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.text !== undefined) {
                b.write(this.text.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PageBlockFooter = PageBlockFooter;
    class PageBlockDivider extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'PageBlockDivider';
            this.constructorId = 0xdb20b188;
            this.subclassOfId = 0x1aca5644;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.PageBlockDivider();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PageBlockDivider = PageBlockDivider;
    class PageBlockAnchor extends index_js_1.TLObject {
        name;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PageBlockAnchor';
            this.constructorId = 0xce0d37b0;
            this.subclassOfId = 0x1aca5644;
            this._slots = ['name'];
            this.name = params.name;
        }
        static async read(_data, ..._args) {
            let name = await index_js_1.Primitive.String.read(_data);
            return new Raw.PageBlockAnchor({ name: name });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.name !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.name));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PageBlockAnchor = PageBlockAnchor;
    class PageBlockList extends index_js_1.TLObject {
        items;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PageBlockList';
            this.constructorId = 0xe4e88011;
            this.subclassOfId = 0x1aca5644;
            this._slots = ['items'];
            this.items = params.items;
        }
        static async read(_data, ..._args) {
            let items = await index_js_1.TLObject.read(_data);
            return new Raw.PageBlockList({ items: items });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.items) {
                b.write(index_js_1.Primitive.Vector.write(this.items));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PageBlockList = PageBlockList;
    class PageBlockBlockquote extends index_js_1.TLObject {
        text;
        caption;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PageBlockBlockquote';
            this.constructorId = 0x263d7c26;
            this.subclassOfId = 0x1aca5644;
            this._slots = ['text', 'caption'];
            this.text = params.text;
            this.caption = params.caption;
        }
        static async read(_data, ..._args) {
            let text = await index_js_1.TLObject.read(_data);
            let caption = await index_js_1.TLObject.read(_data);
            return new Raw.PageBlockBlockquote({ text: text, caption: caption });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.text !== undefined) {
                b.write(this.text.write());
            }
            if (this.caption !== undefined) {
                b.write(this.caption.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PageBlockBlockquote = PageBlockBlockquote;
    class PageBlockPullquote extends index_js_1.TLObject {
        text;
        caption;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PageBlockPullquote';
            this.constructorId = 0x4f4456d3;
            this.subclassOfId = 0x1aca5644;
            this._slots = ['text', 'caption'];
            this.text = params.text;
            this.caption = params.caption;
        }
        static async read(_data, ..._args) {
            let text = await index_js_1.TLObject.read(_data);
            let caption = await index_js_1.TLObject.read(_data);
            return new Raw.PageBlockPullquote({ text: text, caption: caption });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.text !== undefined) {
                b.write(this.text.write());
            }
            if (this.caption !== undefined) {
                b.write(this.caption.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PageBlockPullquote = PageBlockPullquote;
    class PageBlockPhoto extends index_js_1.TLObject {
        photoId;
        caption;
        url;
        webpageId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PageBlockPhoto';
            this.constructorId = 0x1759c560;
            this.subclassOfId = 0x1aca5644;
            this._slots = ['photoId', 'caption', 'url', 'webpageId'];
            this.photoId = params.photoId;
            this.caption = params.caption;
            this.url = params.url;
            this.webpageId = params.webpageId;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let photoId = await index_js_1.Primitive.Long.read(_data);
            let caption = await index_js_1.TLObject.read(_data);
            let url = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let webpageId = flags & (1 << 0) ? await index_js_1.Primitive.Long.read(_data) : undefined;
            return new Raw.PageBlockPhoto({
                photoId: photoId,
                caption: caption,
                url: url,
                webpageId: webpageId,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.url !== undefined ? 1 << 0 : 0;
            flags |= this.webpageId !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.photoId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.photoId));
            }
            if (this.caption !== undefined) {
                b.write(this.caption.write());
            }
            if (this.url !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.url));
            }
            if (this.webpageId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.webpageId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PageBlockPhoto = PageBlockPhoto;
    class PageBlockVideo extends index_js_1.TLObject {
        autoplay;
        loop;
        videoId;
        caption;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PageBlockVideo';
            this.constructorId = 0x7c8fe7b6;
            this.subclassOfId = 0x1aca5644;
            this._slots = ['autoplay', 'loop', 'videoId', 'caption'];
            this.autoplay = params.autoplay;
            this.loop = params.loop;
            this.videoId = params.videoId;
            this.caption = params.caption;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let autoplay = flags & (1 << 0) ? true : false;
            let loop = flags & (1 << 1) ? true : false;
            let videoId = await index_js_1.Primitive.Long.read(_data);
            let caption = await index_js_1.TLObject.read(_data);
            return new Raw.PageBlockVideo({
                autoplay: autoplay,
                loop: loop,
                videoId: videoId,
                caption: caption,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.autoplay ? 1 << 0 : 0;
            flags |= this.loop ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.videoId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.videoId));
            }
            if (this.caption !== undefined) {
                b.write(this.caption.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PageBlockVideo = PageBlockVideo;
    class PageBlockCover extends index_js_1.TLObject {
        cover;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PageBlockCover';
            this.constructorId = 0x39f23300;
            this.subclassOfId = 0x1aca5644;
            this._slots = ['cover'];
            this.cover = params.cover;
        }
        static async read(_data, ..._args) {
            let cover = await index_js_1.TLObject.read(_data);
            return new Raw.PageBlockCover({ cover: cover });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.cover !== undefined) {
                b.write(this.cover.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PageBlockCover = PageBlockCover;
    class PageBlockEmbed extends index_js_1.TLObject {
        fullWidth;
        allowScrolling;
        url;
        html;
        posterPhotoId;
        w;
        h;
        caption;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PageBlockEmbed';
            this.constructorId = 0xa8718dc5;
            this.subclassOfId = 0x1aca5644;
            this._slots = [
                'fullWidth',
                'allowScrolling',
                'url',
                'html',
                'posterPhotoId',
                'w',
                'h',
                'caption',
            ];
            this.fullWidth = params.fullWidth;
            this.allowScrolling = params.allowScrolling;
            this.url = params.url;
            this.html = params.html;
            this.posterPhotoId = params.posterPhotoId;
            this.w = params.w;
            this.h = params.h;
            this.caption = params.caption;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let fullWidth = flags & (1 << 0) ? true : false;
            let allowScrolling = flags & (1 << 3) ? true : false;
            let url = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let html = flags & (1 << 2) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let posterPhotoId = flags & (1 << 4) ? await index_js_1.Primitive.Long.read(_data) : undefined;
            let w = flags & (1 << 5) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let h = flags & (1 << 5) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let caption = await index_js_1.TLObject.read(_data);
            return new Raw.PageBlockEmbed({
                fullWidth: fullWidth,
                allowScrolling: allowScrolling,
                url: url,
                html: html,
                posterPhotoId: posterPhotoId,
                w: w,
                h: h,
                caption: caption,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.fullWidth ? 1 << 0 : 0;
            flags |= this.allowScrolling ? 1 << 3 : 0;
            flags |= this.url !== undefined ? 1 << 1 : 0;
            flags |= this.html !== undefined ? 1 << 2 : 0;
            flags |= this.posterPhotoId !== undefined ? 1 << 4 : 0;
            flags |= this.w !== undefined ? 1 << 5 : 0;
            flags |= this.h !== undefined ? 1 << 5 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.url !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.url));
            }
            if (this.html !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.html));
            }
            if (this.posterPhotoId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.posterPhotoId));
            }
            if (this.w !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.w));
            }
            if (this.h !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.h));
            }
            if (this.caption !== undefined) {
                b.write(this.caption.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PageBlockEmbed = PageBlockEmbed;
    class PageBlockEmbedPost extends index_js_1.TLObject {
        url;
        webpageId;
        authorPhotoId;
        author;
        date;
        blocks;
        caption;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PageBlockEmbedPost';
            this.constructorId = 0xf259a80b;
            this.subclassOfId = 0x1aca5644;
            this._slots = ['url', 'webpageId', 'authorPhotoId', 'author', 'date', 'blocks', 'caption'];
            this.url = params.url;
            this.webpageId = params.webpageId;
            this.authorPhotoId = params.authorPhotoId;
            this.author = params.author;
            this.date = params.date;
            this.blocks = params.blocks;
            this.caption = params.caption;
        }
        static async read(_data, ..._args) {
            let url = await index_js_1.Primitive.String.read(_data);
            let webpageId = await index_js_1.Primitive.Long.read(_data);
            let authorPhotoId = await index_js_1.Primitive.Long.read(_data);
            let author = await index_js_1.Primitive.String.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            let blocks = await index_js_1.TLObject.read(_data);
            let caption = await index_js_1.TLObject.read(_data);
            return new Raw.PageBlockEmbedPost({
                url: url,
                webpageId: webpageId,
                authorPhotoId: authorPhotoId,
                author: author,
                date: date,
                blocks: blocks,
                caption: caption,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.url !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.url));
            }
            if (this.webpageId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.webpageId));
            }
            if (this.authorPhotoId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.authorPhotoId));
            }
            if (this.author !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.author));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.blocks) {
                b.write(index_js_1.Primitive.Vector.write(this.blocks));
            }
            if (this.caption !== undefined) {
                b.write(this.caption.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PageBlockEmbedPost = PageBlockEmbedPost;
    class PageBlockCollage extends index_js_1.TLObject {
        items;
        caption;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PageBlockCollage';
            this.constructorId = 0x65a0fa4d;
            this.subclassOfId = 0x1aca5644;
            this._slots = ['items', 'caption'];
            this.items = params.items;
            this.caption = params.caption;
        }
        static async read(_data, ..._args) {
            let items = await index_js_1.TLObject.read(_data);
            let caption = await index_js_1.TLObject.read(_data);
            return new Raw.PageBlockCollage({ items: items, caption: caption });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.items) {
                b.write(index_js_1.Primitive.Vector.write(this.items));
            }
            if (this.caption !== undefined) {
                b.write(this.caption.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PageBlockCollage = PageBlockCollage;
    class PageBlockSlideshow extends index_js_1.TLObject {
        items;
        caption;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PageBlockSlideshow';
            this.constructorId = 0x31f9590;
            this.subclassOfId = 0x1aca5644;
            this._slots = ['items', 'caption'];
            this.items = params.items;
            this.caption = params.caption;
        }
        static async read(_data, ..._args) {
            let items = await index_js_1.TLObject.read(_data);
            let caption = await index_js_1.TLObject.read(_data);
            return new Raw.PageBlockSlideshow({ items: items, caption: caption });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.items) {
                b.write(index_js_1.Primitive.Vector.write(this.items));
            }
            if (this.caption !== undefined) {
                b.write(this.caption.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PageBlockSlideshow = PageBlockSlideshow;
    class PageBlockChannel extends index_js_1.TLObject {
        channel;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PageBlockChannel';
            this.constructorId = 0xef1751b5;
            this.subclassOfId = 0x1aca5644;
            this._slots = ['channel'];
            this.channel = params.channel;
        }
        static async read(_data, ..._args) {
            let channel = await index_js_1.TLObject.read(_data);
            return new Raw.PageBlockChannel({ channel: channel });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.channel !== undefined) {
                b.write(this.channel.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PageBlockChannel = PageBlockChannel;
    class PageBlockAudio extends index_js_1.TLObject {
        audioId;
        caption;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PageBlockAudio';
            this.constructorId = 0x804361ea;
            this.subclassOfId = 0x1aca5644;
            this._slots = ['audioId', 'caption'];
            this.audioId = params.audioId;
            this.caption = params.caption;
        }
        static async read(_data, ..._args) {
            let audioId = await index_js_1.Primitive.Long.read(_data);
            let caption = await index_js_1.TLObject.read(_data);
            return new Raw.PageBlockAudio({ audioId: audioId, caption: caption });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.audioId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.audioId));
            }
            if (this.caption !== undefined) {
                b.write(this.caption.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PageBlockAudio = PageBlockAudio;
    class PageBlockKicker extends index_js_1.TLObject {
        text;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PageBlockKicker';
            this.constructorId = 0x1e148390;
            this.subclassOfId = 0x1aca5644;
            this._slots = ['text'];
            this.text = params.text;
        }
        static async read(_data, ..._args) {
            let text = await index_js_1.TLObject.read(_data);
            return new Raw.PageBlockKicker({ text: text });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.text !== undefined) {
                b.write(this.text.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PageBlockKicker = PageBlockKicker;
    class PageBlockTable extends index_js_1.TLObject {
        bordered;
        striped;
        title;
        rows;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PageBlockTable';
            this.constructorId = 0xbf4dea82;
            this.subclassOfId = 0x1aca5644;
            this._slots = ['bordered', 'striped', 'title', 'rows'];
            this.bordered = params.bordered;
            this.striped = params.striped;
            this.title = params.title;
            this.rows = params.rows;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let bordered = flags & (1 << 0) ? true : false;
            let striped = flags & (1 << 1) ? true : false;
            let title = await index_js_1.TLObject.read(_data);
            let rows = await index_js_1.TLObject.read(_data);
            return new Raw.PageBlockTable({
                bordered: bordered,
                striped: striped,
                title: title,
                rows: rows,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.bordered ? 1 << 0 : 0;
            flags |= this.striped ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.title !== undefined) {
                b.write(this.title.write());
            }
            if (this.rows) {
                b.write(index_js_1.Primitive.Vector.write(this.rows));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PageBlockTable = PageBlockTable;
    class PageBlockOrderedList extends index_js_1.TLObject {
        items;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PageBlockOrderedList';
            this.constructorId = 0x9a8ae1e1;
            this.subclassOfId = 0x1aca5644;
            this._slots = ['items'];
            this.items = params.items;
        }
        static async read(_data, ..._args) {
            let items = await index_js_1.TLObject.read(_data);
            return new Raw.PageBlockOrderedList({ items: items });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.items) {
                b.write(index_js_1.Primitive.Vector.write(this.items));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PageBlockOrderedList = PageBlockOrderedList;
    class PageBlockDetails extends index_js_1.TLObject {
        open;
        blocks;
        title;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PageBlockDetails';
            this.constructorId = 0x76768bed;
            this.subclassOfId = 0x1aca5644;
            this._slots = ['open', 'blocks', 'title'];
            this.open = params.open;
            this.blocks = params.blocks;
            this.title = params.title;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let open = flags & (1 << 0) ? true : false;
            let blocks = await index_js_1.TLObject.read(_data);
            let title = await index_js_1.TLObject.read(_data);
            return new Raw.PageBlockDetails({ open: open, blocks: blocks, title: title });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.open ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.blocks) {
                b.write(index_js_1.Primitive.Vector.write(this.blocks));
            }
            if (this.title !== undefined) {
                b.write(this.title.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PageBlockDetails = PageBlockDetails;
    class PageBlockRelatedArticles extends index_js_1.TLObject {
        title;
        articles;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PageBlockRelatedArticles';
            this.constructorId = 0x16115a96;
            this.subclassOfId = 0x1aca5644;
            this._slots = ['title', 'articles'];
            this.title = params.title;
            this.articles = params.articles;
        }
        static async read(_data, ..._args) {
            let title = await index_js_1.TLObject.read(_data);
            let articles = await index_js_1.TLObject.read(_data);
            return new Raw.PageBlockRelatedArticles({ title: title, articles: articles });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.title !== undefined) {
                b.write(this.title.write());
            }
            if (this.articles) {
                b.write(index_js_1.Primitive.Vector.write(this.articles));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PageBlockRelatedArticles = PageBlockRelatedArticles;
    class PageBlockMap extends index_js_1.TLObject {
        geo;
        zoom;
        w;
        h;
        caption;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PageBlockMap';
            this.constructorId = 0xa44f3ef6;
            this.subclassOfId = 0x1aca5644;
            this._slots = ['geo', 'zoom', 'w', 'h', 'caption'];
            this.geo = params.geo;
            this.zoom = params.zoom;
            this.w = params.w;
            this.h = params.h;
            this.caption = params.caption;
        }
        static async read(_data, ..._args) {
            let geo = await index_js_1.TLObject.read(_data);
            let zoom = await index_js_1.Primitive.Int.read(_data);
            let w = await index_js_1.Primitive.Int.read(_data);
            let h = await index_js_1.Primitive.Int.read(_data);
            let caption = await index_js_1.TLObject.read(_data);
            return new Raw.PageBlockMap({ geo: geo, zoom: zoom, w: w, h: h, caption: caption });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.geo !== undefined) {
                b.write(this.geo.write());
            }
            if (this.zoom !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.zoom));
            }
            if (this.w !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.w));
            }
            if (this.h !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.h));
            }
            if (this.caption !== undefined) {
                b.write(this.caption.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PageBlockMap = PageBlockMap;
    class PhoneCallDiscardReasonMissed extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'PhoneCallDiscardReasonMissed';
            this.constructorId = 0x85e42301;
            this.subclassOfId = 0xd89bad3d;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.PhoneCallDiscardReasonMissed();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PhoneCallDiscardReasonMissed = PhoneCallDiscardReasonMissed;
    class PhoneCallDiscardReasonDisconnect extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'PhoneCallDiscardReasonDisconnect';
            this.constructorId = 0xe095c1a0;
            this.subclassOfId = 0xd89bad3d;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.PhoneCallDiscardReasonDisconnect();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PhoneCallDiscardReasonDisconnect = PhoneCallDiscardReasonDisconnect;
    class PhoneCallDiscardReasonHangup extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'PhoneCallDiscardReasonHangup';
            this.constructorId = 0x57adc690;
            this.subclassOfId = 0xd89bad3d;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.PhoneCallDiscardReasonHangup();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PhoneCallDiscardReasonHangup = PhoneCallDiscardReasonHangup;
    class PhoneCallDiscardReasonBusy extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'PhoneCallDiscardReasonBusy';
            this.constructorId = 0xfaf7e8c9;
            this.subclassOfId = 0xd89bad3d;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.PhoneCallDiscardReasonBusy();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PhoneCallDiscardReasonBusy = PhoneCallDiscardReasonBusy;
    class DataJSON extends index_js_1.TLObject {
        data;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DataJSON';
            this.constructorId = 0x7d748d04;
            this.subclassOfId = 0xad0352e8;
            this._slots = ['data'];
            this.data = params.data;
        }
        static async read(_data, ..._args) {
            let data = await index_js_1.Primitive.String.read(_data);
            return new Raw.DataJSON({ data: data });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.data !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.data));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DataJSON = DataJSON;
    class LabeledPrice extends index_js_1.TLObject {
        label;
        amount;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'LabeledPrice';
            this.constructorId = 0xcb296bf8;
            this.subclassOfId = 0x1c84047a;
            this._slots = ['label', 'amount'];
            this.label = params.label;
            this.amount = params.amount;
        }
        static async read(_data, ..._args) {
            let label = await index_js_1.Primitive.String.read(_data);
            let amount = await index_js_1.Primitive.Long.read(_data);
            return new Raw.LabeledPrice({ label: label, amount: amount });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.label !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.label));
            }
            if (this.amount !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.amount));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.LabeledPrice = LabeledPrice;
    class Invoice extends index_js_1.TLObject {
        test;
        nameRequested;
        phoneRequested;
        emailRequested;
        shippingAddressRequested;
        flexible;
        phoneToProvider;
        emailToProvider;
        recurring;
        currency;
        prices;
        maxTipAmount;
        suggestedTipAmounts;
        termsUrl;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'Invoice';
            this.constructorId = 0x5db95a15;
            this.subclassOfId = 0x5fd82ed8;
            this._slots = [
                'test',
                'nameRequested',
                'phoneRequested',
                'emailRequested',
                'shippingAddressRequested',
                'flexible',
                'phoneToProvider',
                'emailToProvider',
                'recurring',
                'currency',
                'prices',
                'maxTipAmount',
                'suggestedTipAmounts',
                'termsUrl',
            ];
            this.test = params.test;
            this.nameRequested = params.nameRequested;
            this.phoneRequested = params.phoneRequested;
            this.emailRequested = params.emailRequested;
            this.shippingAddressRequested = params.shippingAddressRequested;
            this.flexible = params.flexible;
            this.phoneToProvider = params.phoneToProvider;
            this.emailToProvider = params.emailToProvider;
            this.recurring = params.recurring;
            this.currency = params.currency;
            this.prices = params.prices;
            this.maxTipAmount = params.maxTipAmount;
            this.suggestedTipAmounts = params.suggestedTipAmounts;
            this.termsUrl = params.termsUrl;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let test = flags & (1 << 0) ? true : false;
            let nameRequested = flags & (1 << 1) ? true : false;
            let phoneRequested = flags & (1 << 2) ? true : false;
            let emailRequested = flags & (1 << 3) ? true : false;
            let shippingAddressRequested = flags & (1 << 4) ? true : false;
            let flexible = flags & (1 << 5) ? true : false;
            let phoneToProvider = flags & (1 << 6) ? true : false;
            let emailToProvider = flags & (1 << 7) ? true : false;
            let recurring = flags & (1 << 9) ? true : false;
            let currency = await index_js_1.Primitive.String.read(_data);
            let prices = await index_js_1.TLObject.read(_data);
            let maxTipAmount = flags & (1 << 8) ? await index_js_1.Primitive.Long.read(_data) : undefined;
            let suggestedTipAmounts = flags & (1 << 8) ? await index_js_1.TLObject.read(_data, index_js_1.Primitive.Long) : [];
            let termsUrl = flags & (1 << 10) ? await index_js_1.Primitive.String.read(_data) : undefined;
            return new Raw.Invoice({
                test: test,
                nameRequested: nameRequested,
                phoneRequested: phoneRequested,
                emailRequested: emailRequested,
                shippingAddressRequested: shippingAddressRequested,
                flexible: flexible,
                phoneToProvider: phoneToProvider,
                emailToProvider: emailToProvider,
                recurring: recurring,
                currency: currency,
                prices: prices,
                maxTipAmount: maxTipAmount,
                suggestedTipAmounts: suggestedTipAmounts,
                termsUrl: termsUrl,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.test ? 1 << 0 : 0;
            flags |= this.nameRequested ? 1 << 1 : 0;
            flags |= this.phoneRequested ? 1 << 2 : 0;
            flags |= this.emailRequested ? 1 << 3 : 0;
            flags |= this.shippingAddressRequested ? 1 << 4 : 0;
            flags |= this.flexible ? 1 << 5 : 0;
            flags |= this.phoneToProvider ? 1 << 6 : 0;
            flags |= this.emailToProvider ? 1 << 7 : 0;
            flags |= this.recurring ? 1 << 9 : 0;
            flags |= this.maxTipAmount !== undefined ? 1 << 8 : 0;
            flags |= this.suggestedTipAmounts ? 1 << 8 : 0;
            flags |= this.termsUrl !== undefined ? 1 << 10 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.currency !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.currency));
            }
            if (this.prices) {
                b.write(index_js_1.Primitive.Vector.write(this.prices));
            }
            if (this.maxTipAmount !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.maxTipAmount));
            }
            if (this.suggestedTipAmounts) {
                b.write(index_js_1.Primitive.Vector.write(this.suggestedTipAmounts, index_js_1.Primitive.Long));
            }
            if (this.termsUrl !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.termsUrl));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.Invoice = Invoice;
    class PaymentCharge extends index_js_1.TLObject {
        id;
        providerChargeId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PaymentCharge';
            this.constructorId = 0xea02c27e;
            this.subclassOfId = 0x3cc830d9;
            this._slots = ['id', 'providerChargeId'];
            this.id = params.id;
            this.providerChargeId = params.providerChargeId;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.String.read(_data);
            let providerChargeId = await index_js_1.Primitive.String.read(_data);
            return new Raw.PaymentCharge({ id: id, providerChargeId: providerChargeId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.id));
            }
            if (this.providerChargeId !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.providerChargeId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PaymentCharge = PaymentCharge;
    class PostAddress extends index_js_1.TLObject {
        streetLine1;
        streetLine2;
        city;
        state;
        countryIso2;
        postCode;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PostAddress';
            this.constructorId = 0x1e8caaeb;
            this.subclassOfId = 0x8d7eda2c;
            this._slots = ['streetLine1', 'streetLine2', 'city', 'state', 'countryIso2', 'postCode'];
            this.streetLine1 = params.streetLine1;
            this.streetLine2 = params.streetLine2;
            this.city = params.city;
            this.state = params.state;
            this.countryIso2 = params.countryIso2;
            this.postCode = params.postCode;
        }
        static async read(_data, ..._args) {
            let streetLine1 = await index_js_1.Primitive.String.read(_data);
            let streetLine2 = await index_js_1.Primitive.String.read(_data);
            let city = await index_js_1.Primitive.String.read(_data);
            let state = await index_js_1.Primitive.String.read(_data);
            let countryIso2 = await index_js_1.Primitive.String.read(_data);
            let postCode = await index_js_1.Primitive.String.read(_data);
            return new Raw.PostAddress({
                streetLine1: streetLine1,
                streetLine2: streetLine2,
                city: city,
                state: state,
                countryIso2: countryIso2,
                postCode: postCode,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.streetLine1 !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.streetLine1));
            }
            if (this.streetLine2 !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.streetLine2));
            }
            if (this.city !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.city));
            }
            if (this.state !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.state));
            }
            if (this.countryIso2 !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.countryIso2));
            }
            if (this.postCode !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.postCode));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PostAddress = PostAddress;
    class PaymentRequestedInfo extends index_js_1.TLObject {
        name;
        phone;
        email;
        shippingAddress;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PaymentRequestedInfo';
            this.constructorId = 0x909c3f94;
            this.subclassOfId = 0x8db03146;
            this._slots = ['name', 'phone', 'email', 'shippingAddress'];
            this.name = params.name;
            this.phone = params.phone;
            this.email = params.email;
            this.shippingAddress = params.shippingAddress;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let name = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let phone = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let email = flags & (1 << 2) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let shippingAddress = flags & (1 << 3) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.PaymentRequestedInfo({
                name: name,
                phone: phone,
                email: email,
                shippingAddress: shippingAddress,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.name !== undefined ? 1 << 0 : 0;
            flags |= this.phone !== undefined ? 1 << 1 : 0;
            flags |= this.email !== undefined ? 1 << 2 : 0;
            flags |= this.shippingAddress !== undefined ? 1 << 3 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.name !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.name));
            }
            if (this.phone !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.phone));
            }
            if (this.email !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.email));
            }
            if (this.shippingAddress !== undefined) {
                b.write(this.shippingAddress.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PaymentRequestedInfo = PaymentRequestedInfo;
    class PaymentSavedCredentialsCard extends index_js_1.TLObject {
        id;
        title;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PaymentSavedCredentialsCard';
            this.constructorId = 0xcdc27a1f;
            this.subclassOfId = 0xb3627ee3;
            this._slots = ['id', 'title'];
            this.id = params.id;
            this.title = params.title;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.String.read(_data);
            let title = await index_js_1.Primitive.String.read(_data);
            return new Raw.PaymentSavedCredentialsCard({ id: id, title: title });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.id));
            }
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PaymentSavedCredentialsCard = PaymentSavedCredentialsCard;
    class WebDocument extends index_js_1.TLObject {
        url;
        accessHash;
        size;
        mimeType;
        attributes;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'WebDocument';
            this.constructorId = 0x1c570ed1;
            this.subclassOfId = 0x3b642814;
            this._slots = ['url', 'accessHash', 'size', 'mimeType', 'attributes'];
            this.url = params.url;
            this.accessHash = params.accessHash;
            this.size = params.size;
            this.mimeType = params.mimeType;
            this.attributes = params.attributes;
        }
        static async read(_data, ..._args) {
            let url = await index_js_1.Primitive.String.read(_data);
            let accessHash = await index_js_1.Primitive.Long.read(_data);
            let size = await index_js_1.Primitive.Int.read(_data);
            let mimeType = await index_js_1.Primitive.String.read(_data);
            let attributes = await index_js_1.TLObject.read(_data);
            return new Raw.WebDocument({
                url: url,
                accessHash: accessHash,
                size: size,
                mimeType: mimeType,
                attributes: attributes,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.url !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.url));
            }
            if (this.accessHash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.accessHash));
            }
            if (this.size !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.size));
            }
            if (this.mimeType !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.mimeType));
            }
            if (this.attributes) {
                b.write(index_js_1.Primitive.Vector.write(this.attributes));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.WebDocument = WebDocument;
    class WebDocumentNoProxy extends index_js_1.TLObject {
        url;
        size;
        mimeType;
        attributes;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'WebDocumentNoProxy';
            this.constructorId = 0xf9c8bcc6;
            this.subclassOfId = 0x3b642814;
            this._slots = ['url', 'size', 'mimeType', 'attributes'];
            this.url = params.url;
            this.size = params.size;
            this.mimeType = params.mimeType;
            this.attributes = params.attributes;
        }
        static async read(_data, ..._args) {
            let url = await index_js_1.Primitive.String.read(_data);
            let size = await index_js_1.Primitive.Int.read(_data);
            let mimeType = await index_js_1.Primitive.String.read(_data);
            let attributes = await index_js_1.TLObject.read(_data);
            return new Raw.WebDocumentNoProxy({
                url: url,
                size: size,
                mimeType: mimeType,
                attributes: attributes,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.url !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.url));
            }
            if (this.size !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.size));
            }
            if (this.mimeType !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.mimeType));
            }
            if (this.attributes) {
                b.write(index_js_1.Primitive.Vector.write(this.attributes));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.WebDocumentNoProxy = WebDocumentNoProxy;
    class InputWebDocument extends index_js_1.TLObject {
        url;
        size;
        mimeType;
        attributes;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputWebDocument';
            this.constructorId = 0x9bed434d;
            this.subclassOfId = 0x8ae8b146;
            this._slots = ['url', 'size', 'mimeType', 'attributes'];
            this.url = params.url;
            this.size = params.size;
            this.mimeType = params.mimeType;
            this.attributes = params.attributes;
        }
        static async read(_data, ..._args) {
            let url = await index_js_1.Primitive.String.read(_data);
            let size = await index_js_1.Primitive.Int.read(_data);
            let mimeType = await index_js_1.Primitive.String.read(_data);
            let attributes = await index_js_1.TLObject.read(_data);
            return new Raw.InputWebDocument({
                url: url,
                size: size,
                mimeType: mimeType,
                attributes: attributes,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.url !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.url));
            }
            if (this.size !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.size));
            }
            if (this.mimeType !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.mimeType));
            }
            if (this.attributes) {
                b.write(index_js_1.Primitive.Vector.write(this.attributes));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputWebDocument = InputWebDocument;
    class InputWebFileLocation extends index_js_1.TLObject {
        url;
        accessHash;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputWebFileLocation';
            this.constructorId = 0xc239d686;
            this.subclassOfId = 0xf72ed8d9;
            this._slots = ['url', 'accessHash'];
            this.url = params.url;
            this.accessHash = params.accessHash;
        }
        static async read(_data, ..._args) {
            let url = await index_js_1.Primitive.String.read(_data);
            let accessHash = await index_js_1.Primitive.Long.read(_data);
            return new Raw.InputWebFileLocation({ url: url, accessHash: accessHash });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.url !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.url));
            }
            if (this.accessHash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.accessHash));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputWebFileLocation = InputWebFileLocation;
    class InputWebFileGeoPointLocation extends index_js_1.TLObject {
        geoPoint;
        accessHash;
        w;
        h;
        zoom;
        scale;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputWebFileGeoPointLocation';
            this.constructorId = 0x9f2221c9;
            this.subclassOfId = 0xf72ed8d9;
            this._slots = ['geoPoint', 'accessHash', 'w', 'h', 'zoom', 'scale'];
            this.geoPoint = params.geoPoint;
            this.accessHash = params.accessHash;
            this.w = params.w;
            this.h = params.h;
            this.zoom = params.zoom;
            this.scale = params.scale;
        }
        static async read(_data, ..._args) {
            let geoPoint = await index_js_1.TLObject.read(_data);
            let accessHash = await index_js_1.Primitive.Long.read(_data);
            let w = await index_js_1.Primitive.Int.read(_data);
            let h = await index_js_1.Primitive.Int.read(_data);
            let zoom = await index_js_1.Primitive.Int.read(_data);
            let scale = await index_js_1.Primitive.Int.read(_data);
            return new Raw.InputWebFileGeoPointLocation({
                geoPoint: geoPoint,
                accessHash: accessHash,
                w: w,
                h: h,
                zoom: zoom,
                scale: scale,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.geoPoint !== undefined) {
                b.write(this.geoPoint.write());
            }
            if (this.accessHash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.accessHash));
            }
            if (this.w !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.w));
            }
            if (this.h !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.h));
            }
            if (this.zoom !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.zoom));
            }
            if (this.scale !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.scale));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputWebFileGeoPointLocation = InputWebFileGeoPointLocation;
    class InputWebFileAudioAlbumThumbLocation extends index_js_1.TLObject {
        small;
        document;
        title;
        performer;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputWebFileAudioAlbumThumbLocation';
            this.constructorId = 0xf46fe924;
            this.subclassOfId = 0xf72ed8d9;
            this._slots = ['small', 'document', 'title', 'performer'];
            this.small = params.small;
            this.document = params.document;
            this.title = params.title;
            this.performer = params.performer;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let small = flags & (1 << 2) ? true : false;
            let document = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
            let title = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let performer = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
            return new Raw.InputWebFileAudioAlbumThumbLocation({
                small: small,
                document: document,
                title: title,
                performer: performer,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.small ? 1 << 2 : 0;
            flags |= this.document !== undefined ? 1 << 0 : 0;
            flags |= this.title !== undefined ? 1 << 1 : 0;
            flags |= this.performer !== undefined ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.document !== undefined) {
                b.write(this.document.write());
            }
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            if (this.performer !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.performer));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputWebFileAudioAlbumThumbLocation = InputWebFileAudioAlbumThumbLocation;
    class InputPaymentCredentialsSaved extends index_js_1.TLObject {
        id;
        tmpPassword;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputPaymentCredentialsSaved';
            this.constructorId = 0xc10eb2cf;
            this.subclassOfId = 0x2899a53d;
            this._slots = ['id', 'tmpPassword'];
            this.id = params.id;
            this.tmpPassword = params.tmpPassword;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.String.read(_data);
            let tmpPassword = await index_js_1.Primitive.Bytes.read(_data);
            return new Raw.InputPaymentCredentialsSaved({ id: id, tmpPassword: tmpPassword });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.id));
            }
            if (this.tmpPassword !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.tmpPassword));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputPaymentCredentialsSaved = InputPaymentCredentialsSaved;
    class InputPaymentCredentials extends index_js_1.TLObject {
        save;
        data;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputPaymentCredentials';
            this.constructorId = 0x3417d728;
            this.subclassOfId = 0x2899a53d;
            this._slots = ['save', 'data'];
            this.save = params.save;
            this.data = params.data;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let save = flags & (1 << 0) ? true : false;
            let data = await index_js_1.TLObject.read(_data);
            return new Raw.InputPaymentCredentials({ save: save, data: data });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.save ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.data !== undefined) {
                b.write(this.data.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputPaymentCredentials = InputPaymentCredentials;
    class InputPaymentCredentialsApplePay extends index_js_1.TLObject {
        paymentData;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputPaymentCredentialsApplePay';
            this.constructorId = 0xaa1c39f;
            this.subclassOfId = 0x2899a53d;
            this._slots = ['paymentData'];
            this.paymentData = params.paymentData;
        }
        static async read(_data, ..._args) {
            let paymentData = await index_js_1.TLObject.read(_data);
            return new Raw.InputPaymentCredentialsApplePay({ paymentData: paymentData });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.paymentData !== undefined) {
                b.write(this.paymentData.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputPaymentCredentialsApplePay = InputPaymentCredentialsApplePay;
    class InputPaymentCredentialsGooglePay extends index_js_1.TLObject {
        paymentToken;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputPaymentCredentialsGooglePay';
            this.constructorId = 0x8ac32801;
            this.subclassOfId = 0x2899a53d;
            this._slots = ['paymentToken'];
            this.paymentToken = params.paymentToken;
        }
        static async read(_data, ..._args) {
            let paymentToken = await index_js_1.TLObject.read(_data);
            return new Raw.InputPaymentCredentialsGooglePay({ paymentToken: paymentToken });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.paymentToken !== undefined) {
                b.write(this.paymentToken.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputPaymentCredentialsGooglePay = InputPaymentCredentialsGooglePay;
    class ShippingOption extends index_js_1.TLObject {
        id;
        title;
        prices;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ShippingOption';
            this.constructorId = 0xb6213cdf;
            this.subclassOfId = 0xf4e94c78;
            this._slots = ['id', 'title', 'prices'];
            this.id = params.id;
            this.title = params.title;
            this.prices = params.prices;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.String.read(_data);
            let title = await index_js_1.Primitive.String.read(_data);
            let prices = await index_js_1.TLObject.read(_data);
            return new Raw.ShippingOption({ id: id, title: title, prices: prices });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.id));
            }
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            if (this.prices) {
                b.write(index_js_1.Primitive.Vector.write(this.prices));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ShippingOption = ShippingOption;
    class InputStickerSetItem extends index_js_1.TLObject {
        document;
        emoji;
        maskCoords;
        keywords;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputStickerSetItem';
            this.constructorId = 0x32da9e9c;
            this.subclassOfId = 0xae59f075;
            this._slots = ['document', 'emoji', 'maskCoords', 'keywords'];
            this.document = params.document;
            this.emoji = params.emoji;
            this.maskCoords = params.maskCoords;
            this.keywords = params.keywords;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let document = await index_js_1.TLObject.read(_data);
            let emoji = await index_js_1.Primitive.String.read(_data);
            let maskCoords = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
            let keywords = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
            return new Raw.InputStickerSetItem({
                document: document,
                emoji: emoji,
                maskCoords: maskCoords,
                keywords: keywords,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.maskCoords !== undefined ? 1 << 0 : 0;
            flags |= this.keywords !== undefined ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.document !== undefined) {
                b.write(this.document.write());
            }
            if (this.emoji !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.emoji));
            }
            if (this.maskCoords !== undefined) {
                b.write(this.maskCoords.write());
            }
            if (this.keywords !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.keywords));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputStickerSetItem = InputStickerSetItem;
    class InputPhoneCall extends index_js_1.TLObject {
        id;
        accessHash;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputPhoneCall';
            this.constructorId = 0x1e36fded;
            this.subclassOfId = 0xbcaaf240;
            this._slots = ['id', 'accessHash'];
            this.id = params.id;
            this.accessHash = params.accessHash;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.Long.read(_data);
            let accessHash = await index_js_1.Primitive.Long.read(_data);
            return new Raw.InputPhoneCall({ id: id, accessHash: accessHash });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.accessHash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.accessHash));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputPhoneCall = InputPhoneCall;
    class PhoneCallEmpty extends index_js_1.TLObject {
        id;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PhoneCallEmpty';
            this.constructorId = 0x5366c915;
            this.subclassOfId = 0xc47f1bd1;
            this._slots = ['id'];
            this.id = params.id;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.Long.read(_data);
            return new Raw.PhoneCallEmpty({ id: id });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PhoneCallEmpty = PhoneCallEmpty;
    class PhoneCallWaiting extends index_js_1.TLObject {
        video;
        id;
        accessHash;
        date;
        adminId;
        participantId;
        protocol;
        receiveDate;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PhoneCallWaiting';
            this.constructorId = 0xc5226f17;
            this.subclassOfId = 0xc47f1bd1;
            this._slots = [
                'video',
                'id',
                'accessHash',
                'date',
                'adminId',
                'participantId',
                'protocol',
                'receiveDate',
            ];
            this.video = params.video;
            this.id = params.id;
            this.accessHash = params.accessHash;
            this.date = params.date;
            this.adminId = params.adminId;
            this.participantId = params.participantId;
            this.protocol = params.protocol;
            this.receiveDate = params.receiveDate;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let video = flags & (1 << 6) ? true : false;
            let id = await index_js_1.Primitive.Long.read(_data);
            let accessHash = await index_js_1.Primitive.Long.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            let adminId = await index_js_1.Primitive.Long.read(_data);
            let participantId = await index_js_1.Primitive.Long.read(_data);
            let protocol = await index_js_1.TLObject.read(_data);
            let receiveDate = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            return new Raw.PhoneCallWaiting({
                video: video,
                id: id,
                accessHash: accessHash,
                date: date,
                adminId: adminId,
                participantId: participantId,
                protocol: protocol,
                receiveDate: receiveDate,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.video ? 1 << 6 : 0;
            flags |= this.receiveDate !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.accessHash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.accessHash));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.adminId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.adminId));
            }
            if (this.participantId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.participantId));
            }
            if (this.protocol !== undefined) {
                b.write(this.protocol.write());
            }
            if (this.receiveDate !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.receiveDate));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PhoneCallWaiting = PhoneCallWaiting;
    class PhoneCallRequested extends index_js_1.TLObject {
        video;
        id;
        accessHash;
        date;
        adminId;
        participantId;
        gAHash;
        protocol;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PhoneCallRequested';
            this.constructorId = 0x14b0ed0c;
            this.subclassOfId = 0xc47f1bd1;
            this._slots = [
                'video',
                'id',
                'accessHash',
                'date',
                'adminId',
                'participantId',
                'gAHash',
                'protocol',
            ];
            this.video = params.video;
            this.id = params.id;
            this.accessHash = params.accessHash;
            this.date = params.date;
            this.adminId = params.adminId;
            this.participantId = params.participantId;
            this.gAHash = params.gAHash;
            this.protocol = params.protocol;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let video = flags & (1 << 6) ? true : false;
            let id = await index_js_1.Primitive.Long.read(_data);
            let accessHash = await index_js_1.Primitive.Long.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            let adminId = await index_js_1.Primitive.Long.read(_data);
            let participantId = await index_js_1.Primitive.Long.read(_data);
            let gAHash = await index_js_1.Primitive.Bytes.read(_data);
            let protocol = await index_js_1.TLObject.read(_data);
            return new Raw.PhoneCallRequested({
                video: video,
                id: id,
                accessHash: accessHash,
                date: date,
                adminId: adminId,
                participantId: participantId,
                gAHash: gAHash,
                protocol: protocol,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.video ? 1 << 6 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.accessHash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.accessHash));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.adminId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.adminId));
            }
            if (this.participantId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.participantId));
            }
            if (this.gAHash !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.gAHash));
            }
            if (this.protocol !== undefined) {
                b.write(this.protocol.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PhoneCallRequested = PhoneCallRequested;
    class PhoneCallAccepted extends index_js_1.TLObject {
        video;
        id;
        accessHash;
        date;
        adminId;
        participantId;
        gB;
        protocol;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PhoneCallAccepted';
            this.constructorId = 0x3660c311;
            this.subclassOfId = 0xc47f1bd1;
            this._slots = [
                'video',
                'id',
                'accessHash',
                'date',
                'adminId',
                'participantId',
                'gB',
                'protocol',
            ];
            this.video = params.video;
            this.id = params.id;
            this.accessHash = params.accessHash;
            this.date = params.date;
            this.adminId = params.adminId;
            this.participantId = params.participantId;
            this.gB = params.gB;
            this.protocol = params.protocol;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let video = flags & (1 << 6) ? true : false;
            let id = await index_js_1.Primitive.Long.read(_data);
            let accessHash = await index_js_1.Primitive.Long.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            let adminId = await index_js_1.Primitive.Long.read(_data);
            let participantId = await index_js_1.Primitive.Long.read(_data);
            let gB = await index_js_1.Primitive.Bytes.read(_data);
            let protocol = await index_js_1.TLObject.read(_data);
            return new Raw.PhoneCallAccepted({
                video: video,
                id: id,
                accessHash: accessHash,
                date: date,
                adminId: adminId,
                participantId: participantId,
                gB: gB,
                protocol: protocol,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.video ? 1 << 6 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.accessHash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.accessHash));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.adminId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.adminId));
            }
            if (this.participantId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.participantId));
            }
            if (this.gB !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.gB));
            }
            if (this.protocol !== undefined) {
                b.write(this.protocol.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PhoneCallAccepted = PhoneCallAccepted;
    class PhoneCall extends index_js_1.TLObject {
        p2pAllowed;
        video;
        id;
        accessHash;
        date;
        adminId;
        participantId;
        gAOrB;
        keyFingerprint;
        protocol;
        connections;
        startDate;
        customParameters;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PhoneCall';
            this.constructorId = 0x30535af5;
            this.subclassOfId = 0xc47f1bd1;
            this._slots = [
                'p2pAllowed',
                'video',
                'id',
                'accessHash',
                'date',
                'adminId',
                'participantId',
                'gAOrB',
                'keyFingerprint',
                'protocol',
                'connections',
                'startDate',
                'customParameters',
            ];
            this.p2pAllowed = params.p2pAllowed;
            this.video = params.video;
            this.id = params.id;
            this.accessHash = params.accessHash;
            this.date = params.date;
            this.adminId = params.adminId;
            this.participantId = params.participantId;
            this.gAOrB = params.gAOrB;
            this.keyFingerprint = params.keyFingerprint;
            this.protocol = params.protocol;
            this.connections = params.connections;
            this.startDate = params.startDate;
            this.customParameters = params.customParameters;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let p2pAllowed = flags & (1 << 5) ? true : false;
            let video = flags & (1 << 6) ? true : false;
            let id = await index_js_1.Primitive.Long.read(_data);
            let accessHash = await index_js_1.Primitive.Long.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            let adminId = await index_js_1.Primitive.Long.read(_data);
            let participantId = await index_js_1.Primitive.Long.read(_data);
            let gAOrB = await index_js_1.Primitive.Bytes.read(_data);
            let keyFingerprint = await index_js_1.Primitive.Long.read(_data);
            let protocol = await index_js_1.TLObject.read(_data);
            let connections = await index_js_1.TLObject.read(_data);
            let startDate = await index_js_1.Primitive.Int.read(_data);
            let customParameters = flags & (1 << 7) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.PhoneCall({
                p2pAllowed: p2pAllowed,
                video: video,
                id: id,
                accessHash: accessHash,
                date: date,
                adminId: adminId,
                participantId: participantId,
                gAOrB: gAOrB,
                keyFingerprint: keyFingerprint,
                protocol: protocol,
                connections: connections,
                startDate: startDate,
                customParameters: customParameters,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.p2pAllowed ? 1 << 5 : 0;
            flags |= this.video ? 1 << 6 : 0;
            flags |= this.customParameters !== undefined ? 1 << 7 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.accessHash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.accessHash));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.adminId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.adminId));
            }
            if (this.participantId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.participantId));
            }
            if (this.gAOrB !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.gAOrB));
            }
            if (this.keyFingerprint !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.keyFingerprint));
            }
            if (this.protocol !== undefined) {
                b.write(this.protocol.write());
            }
            if (this.connections) {
                b.write(index_js_1.Primitive.Vector.write(this.connections));
            }
            if (this.startDate !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.startDate));
            }
            if (this.customParameters !== undefined) {
                b.write(this.customParameters.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PhoneCall = PhoneCall;
    class PhoneCallDiscarded extends index_js_1.TLObject {
        needRating;
        needDebug;
        video;
        id;
        reason;
        duration;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PhoneCallDiscarded';
            this.constructorId = 0x50ca4de1;
            this.subclassOfId = 0xc47f1bd1;
            this._slots = ['needRating', 'needDebug', 'video', 'id', 'reason', 'duration'];
            this.needRating = params.needRating;
            this.needDebug = params.needDebug;
            this.video = params.video;
            this.id = params.id;
            this.reason = params.reason;
            this.duration = params.duration;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let needRating = flags & (1 << 2) ? true : false;
            let needDebug = flags & (1 << 3) ? true : false;
            let video = flags & (1 << 6) ? true : false;
            let id = await index_js_1.Primitive.Long.read(_data);
            let reason = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
            let duration = flags & (1 << 1) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            return new Raw.PhoneCallDiscarded({
                needRating: needRating,
                needDebug: needDebug,
                video: video,
                id: id,
                reason: reason,
                duration: duration,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.needRating ? 1 << 2 : 0;
            flags |= this.needDebug ? 1 << 3 : 0;
            flags |= this.video ? 1 << 6 : 0;
            flags |= this.reason !== undefined ? 1 << 0 : 0;
            flags |= this.duration !== undefined ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.reason !== undefined) {
                b.write(this.reason.write());
            }
            if (this.duration !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.duration));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PhoneCallDiscarded = PhoneCallDiscarded;
    class PhoneConnection extends index_js_1.TLObject {
        tcp;
        id;
        ip;
        ipv6;
        port;
        peerTag;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PhoneConnection';
            this.constructorId = 0x9cc123c7;
            this.subclassOfId = 0xaa8de40d;
            this._slots = ['tcp', 'id', 'ip', 'ipv6', 'port', 'peerTag'];
            this.tcp = params.tcp;
            this.id = params.id;
            this.ip = params.ip;
            this.ipv6 = params.ipv6;
            this.port = params.port;
            this.peerTag = params.peerTag;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let tcp = flags & (1 << 0) ? true : false;
            let id = await index_js_1.Primitive.Long.read(_data);
            let ip = await index_js_1.Primitive.String.read(_data);
            let ipv6 = await index_js_1.Primitive.String.read(_data);
            let port = await index_js_1.Primitive.Int.read(_data);
            let peerTag = await index_js_1.Primitive.Bytes.read(_data);
            return new Raw.PhoneConnection({
                tcp: tcp,
                id: id,
                ip: ip,
                ipv6: ipv6,
                port: port,
                peerTag: peerTag,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.tcp ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.ip !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.ip));
            }
            if (this.ipv6 !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.ipv6));
            }
            if (this.port !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.port));
            }
            if (this.peerTag !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.peerTag));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PhoneConnection = PhoneConnection;
    class PhoneConnectionWebrtc extends index_js_1.TLObject {
        turn;
        stun;
        id;
        ip;
        ipv6;
        port;
        username;
        password;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PhoneConnectionWebrtc';
            this.constructorId = 0x635fe375;
            this.subclassOfId = 0xaa8de40d;
            this._slots = ['turn', 'stun', 'id', 'ip', 'ipv6', 'port', 'username', 'password'];
            this.turn = params.turn;
            this.stun = params.stun;
            this.id = params.id;
            this.ip = params.ip;
            this.ipv6 = params.ipv6;
            this.port = params.port;
            this.username = params.username;
            this.password = params.password;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let turn = flags & (1 << 0) ? true : false;
            let stun = flags & (1 << 1) ? true : false;
            let id = await index_js_1.Primitive.Long.read(_data);
            let ip = await index_js_1.Primitive.String.read(_data);
            let ipv6 = await index_js_1.Primitive.String.read(_data);
            let port = await index_js_1.Primitive.Int.read(_data);
            let username = await index_js_1.Primitive.String.read(_data);
            let password = await index_js_1.Primitive.String.read(_data);
            return new Raw.PhoneConnectionWebrtc({
                turn: turn,
                stun: stun,
                id: id,
                ip: ip,
                ipv6: ipv6,
                port: port,
                username: username,
                password: password,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.turn ? 1 << 0 : 0;
            flags |= this.stun ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.ip !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.ip));
            }
            if (this.ipv6 !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.ipv6));
            }
            if (this.port !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.port));
            }
            if (this.username !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.username));
            }
            if (this.password !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.password));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PhoneConnectionWebrtc = PhoneConnectionWebrtc;
    class PhoneCallProtocol extends index_js_1.TLObject {
        udpP2p;
        udpReflector;
        minLayer;
        maxLayer;
        libraryVersions;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PhoneCallProtocol';
            this.constructorId = 0xfc878fc8;
            this.subclassOfId = 0x783991a3;
            this._slots = ['udpP2p', 'udpReflector', 'minLayer', 'maxLayer', 'libraryVersions'];
            this.udpP2p = params.udpP2p;
            this.udpReflector = params.udpReflector;
            this.minLayer = params.minLayer;
            this.maxLayer = params.maxLayer;
            this.libraryVersions = params.libraryVersions;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let udpP2p = flags & (1 << 0) ? true : false;
            let udpReflector = flags & (1 << 1) ? true : false;
            let minLayer = await index_js_1.Primitive.Int.read(_data);
            let maxLayer = await index_js_1.Primitive.Int.read(_data);
            let libraryVersions = await index_js_1.TLObject.read(_data, index_js_1.Primitive.String);
            return new Raw.PhoneCallProtocol({
                udpP2p: udpP2p,
                udpReflector: udpReflector,
                minLayer: minLayer,
                maxLayer: maxLayer,
                libraryVersions: libraryVersions,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.udpP2p ? 1 << 0 : 0;
            flags |= this.udpReflector ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.minLayer !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.minLayer));
            }
            if (this.maxLayer !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.maxLayer));
            }
            if (this.libraryVersions) {
                b.write(index_js_1.Primitive.Vector.write(this.libraryVersions, index_js_1.Primitive.String));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PhoneCallProtocol = PhoneCallProtocol;
    class CdnPublicKey extends index_js_1.TLObject {
        dcId;
        publicKey;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'CdnPublicKey';
            this.constructorId = 0xc982eaba;
            this.subclassOfId = 0x16db47f3;
            this._slots = ['dcId', 'publicKey'];
            this.dcId = params.dcId;
            this.publicKey = params.publicKey;
        }
        static async read(_data, ..._args) {
            let dcId = await index_js_1.Primitive.Int.read(_data);
            let publicKey = await index_js_1.Primitive.String.read(_data);
            return new Raw.CdnPublicKey({ dcId: dcId, publicKey: publicKey });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.dcId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.dcId));
            }
            if (this.publicKey !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.publicKey));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.CdnPublicKey = CdnPublicKey;
    class CdnConfig extends index_js_1.TLObject {
        publicKeys;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'CdnConfig';
            this.constructorId = 0x5725e40a;
            this.subclassOfId = 0xecda397c;
            this._slots = ['publicKeys'];
            this.publicKeys = params.publicKeys;
        }
        static async read(_data, ..._args) {
            let publicKeys = await index_js_1.TLObject.read(_data);
            return new Raw.CdnConfig({ publicKeys: publicKeys });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.publicKeys) {
                b.write(index_js_1.Primitive.Vector.write(this.publicKeys));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.CdnConfig = CdnConfig;
    class LangPackString extends index_js_1.TLObject {
        key;
        value;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'LangPackString';
            this.constructorId = 0xcad181f6;
            this.subclassOfId = 0xdc179ab9;
            this._slots = ['key', 'value'];
            this.key = params.key;
            this.value = params.value;
        }
        static async read(_data, ..._args) {
            let key = await index_js_1.Primitive.String.read(_data);
            let value = await index_js_1.Primitive.String.read(_data);
            return new Raw.LangPackString({ key: key, value: value });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.key !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.key));
            }
            if (this.value !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.value));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.LangPackString = LangPackString;
    class LangPackStringPluralized extends index_js_1.TLObject {
        key;
        zeroValue;
        oneValue;
        twoValue;
        fewValue;
        manyValue;
        otherValue;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'LangPackStringPluralized';
            this.constructorId = 0x6c47ac9f;
            this.subclassOfId = 0xdc179ab9;
            this._slots = [
                'key',
                'zeroValue',
                'oneValue',
                'twoValue',
                'fewValue',
                'manyValue',
                'otherValue',
            ];
            this.key = params.key;
            this.zeroValue = params.zeroValue;
            this.oneValue = params.oneValue;
            this.twoValue = params.twoValue;
            this.fewValue = params.fewValue;
            this.manyValue = params.manyValue;
            this.otherValue = params.otherValue;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let key = await index_js_1.Primitive.String.read(_data);
            let zeroValue = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let oneValue = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let twoValue = flags & (1 << 2) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let fewValue = flags & (1 << 3) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let manyValue = flags & (1 << 4) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let otherValue = await index_js_1.Primitive.String.read(_data);
            return new Raw.LangPackStringPluralized({
                key: key,
                zeroValue: zeroValue,
                oneValue: oneValue,
                twoValue: twoValue,
                fewValue: fewValue,
                manyValue: manyValue,
                otherValue: otherValue,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.zeroValue !== undefined ? 1 << 0 : 0;
            flags |= this.oneValue !== undefined ? 1 << 1 : 0;
            flags |= this.twoValue !== undefined ? 1 << 2 : 0;
            flags |= this.fewValue !== undefined ? 1 << 3 : 0;
            flags |= this.manyValue !== undefined ? 1 << 4 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.key !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.key));
            }
            if (this.zeroValue !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.zeroValue));
            }
            if (this.oneValue !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.oneValue));
            }
            if (this.twoValue !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.twoValue));
            }
            if (this.fewValue !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.fewValue));
            }
            if (this.manyValue !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.manyValue));
            }
            if (this.otherValue !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.otherValue));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.LangPackStringPluralized = LangPackStringPluralized;
    class LangPackStringDeleted extends index_js_1.TLObject {
        key;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'LangPackStringDeleted';
            this.constructorId = 0x2979eeb2;
            this.subclassOfId = 0xdc179ab9;
            this._slots = ['key'];
            this.key = params.key;
        }
        static async read(_data, ..._args) {
            let key = await index_js_1.Primitive.String.read(_data);
            return new Raw.LangPackStringDeleted({ key: key });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.key !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.key));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.LangPackStringDeleted = LangPackStringDeleted;
    class LangPackDifference extends index_js_1.TLObject {
        langCode;
        fromVersion;
        version;
        strings;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'LangPackDifference';
            this.constructorId = 0xf385c1f6;
            this.subclassOfId = 0x52662d55;
            this._slots = ['langCode', 'fromVersion', 'version', 'strings'];
            this.langCode = params.langCode;
            this.fromVersion = params.fromVersion;
            this.version = params.version;
            this.strings = params.strings;
        }
        static async read(_data, ..._args) {
            let langCode = await index_js_1.Primitive.String.read(_data);
            let fromVersion = await index_js_1.Primitive.Int.read(_data);
            let version = await index_js_1.Primitive.Int.read(_data);
            let strings = await index_js_1.TLObject.read(_data);
            return new Raw.LangPackDifference({
                langCode: langCode,
                fromVersion: fromVersion,
                version: version,
                strings: strings,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.langCode !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.langCode));
            }
            if (this.fromVersion !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.fromVersion));
            }
            if (this.version !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.version));
            }
            if (this.strings) {
                b.write(index_js_1.Primitive.Vector.write(this.strings));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.LangPackDifference = LangPackDifference;
    class LangPackLanguage extends index_js_1.TLObject {
        official;
        rtl;
        beta;
        name;
        nativeName;
        langCode;
        baseLangCode;
        pluralCode;
        stringsCount;
        translatedCount;
        translationsUrl;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'LangPackLanguage';
            this.constructorId = 0xeeca5ce3;
            this.subclassOfId = 0xabac89b7;
            this._slots = [
                'official',
                'rtl',
                'beta',
                'name',
                'nativeName',
                'langCode',
                'baseLangCode',
                'pluralCode',
                'stringsCount',
                'translatedCount',
                'translationsUrl',
            ];
            this.official = params.official;
            this.rtl = params.rtl;
            this.beta = params.beta;
            this.name = params.name;
            this.nativeName = params.nativeName;
            this.langCode = params.langCode;
            this.baseLangCode = params.baseLangCode;
            this.pluralCode = params.pluralCode;
            this.stringsCount = params.stringsCount;
            this.translatedCount = params.translatedCount;
            this.translationsUrl = params.translationsUrl;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let official = flags & (1 << 0) ? true : false;
            let rtl = flags & (1 << 2) ? true : false;
            let beta = flags & (1 << 3) ? true : false;
            let name = await index_js_1.Primitive.String.read(_data);
            let nativeName = await index_js_1.Primitive.String.read(_data);
            let langCode = await index_js_1.Primitive.String.read(_data);
            let baseLangCode = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let pluralCode = await index_js_1.Primitive.String.read(_data);
            let stringsCount = await index_js_1.Primitive.Int.read(_data);
            let translatedCount = await index_js_1.Primitive.Int.read(_data);
            let translationsUrl = await index_js_1.Primitive.String.read(_data);
            return new Raw.LangPackLanguage({
                official: official,
                rtl: rtl,
                beta: beta,
                name: name,
                nativeName: nativeName,
                langCode: langCode,
                baseLangCode: baseLangCode,
                pluralCode: pluralCode,
                stringsCount: stringsCount,
                translatedCount: translatedCount,
                translationsUrl: translationsUrl,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.official ? 1 << 0 : 0;
            flags |= this.rtl ? 1 << 2 : 0;
            flags |= this.beta ? 1 << 3 : 0;
            flags |= this.baseLangCode !== undefined ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.name !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.name));
            }
            if (this.nativeName !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.nativeName));
            }
            if (this.langCode !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.langCode));
            }
            if (this.baseLangCode !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.baseLangCode));
            }
            if (this.pluralCode !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.pluralCode));
            }
            if (this.stringsCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.stringsCount));
            }
            if (this.translatedCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.translatedCount));
            }
            if (this.translationsUrl !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.translationsUrl));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.LangPackLanguage = LangPackLanguage;
    class ChannelAdminLogEventActionChangeTitle extends index_js_1.TLObject {
        prevValue;
        newValue;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelAdminLogEventActionChangeTitle';
            this.constructorId = 0xe6dfb825;
            this.subclassOfId = 0xb2b987f3;
            this._slots = ['prevValue', 'newValue'];
            this.prevValue = params.prevValue;
            this.newValue = params.newValue;
        }
        static async read(_data, ..._args) {
            let prevValue = await index_js_1.Primitive.String.read(_data);
            let newValue = await index_js_1.Primitive.String.read(_data);
            return new Raw.ChannelAdminLogEventActionChangeTitle({
                prevValue: prevValue,
                newValue: newValue,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.prevValue !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.prevValue));
            }
            if (this.newValue !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.newValue));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelAdminLogEventActionChangeTitle = ChannelAdminLogEventActionChangeTitle;
    class ChannelAdminLogEventActionChangeAbout extends index_js_1.TLObject {
        prevValue;
        newValue;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelAdminLogEventActionChangeAbout';
            this.constructorId = 0x55188a2e;
            this.subclassOfId = 0xb2b987f3;
            this._slots = ['prevValue', 'newValue'];
            this.prevValue = params.prevValue;
            this.newValue = params.newValue;
        }
        static async read(_data, ..._args) {
            let prevValue = await index_js_1.Primitive.String.read(_data);
            let newValue = await index_js_1.Primitive.String.read(_data);
            return new Raw.ChannelAdminLogEventActionChangeAbout({
                prevValue: prevValue,
                newValue: newValue,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.prevValue !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.prevValue));
            }
            if (this.newValue !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.newValue));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelAdminLogEventActionChangeAbout = ChannelAdminLogEventActionChangeAbout;
    class ChannelAdminLogEventActionChangeUsername extends index_js_1.TLObject {
        prevValue;
        newValue;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelAdminLogEventActionChangeUsername';
            this.constructorId = 0x6a4afc38;
            this.subclassOfId = 0xb2b987f3;
            this._slots = ['prevValue', 'newValue'];
            this.prevValue = params.prevValue;
            this.newValue = params.newValue;
        }
        static async read(_data, ..._args) {
            let prevValue = await index_js_1.Primitive.String.read(_data);
            let newValue = await index_js_1.Primitive.String.read(_data);
            return new Raw.ChannelAdminLogEventActionChangeUsername({
                prevValue: prevValue,
                newValue: newValue,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.prevValue !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.prevValue));
            }
            if (this.newValue !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.newValue));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelAdminLogEventActionChangeUsername = ChannelAdminLogEventActionChangeUsername;
    class ChannelAdminLogEventActionChangePhoto extends index_js_1.TLObject {
        prevPhoto;
        newPhoto;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelAdminLogEventActionChangePhoto';
            this.constructorId = 0x434bd2af;
            this.subclassOfId = 0xb2b987f3;
            this._slots = ['prevPhoto', 'newPhoto'];
            this.prevPhoto = params.prevPhoto;
            this.newPhoto = params.newPhoto;
        }
        static async read(_data, ..._args) {
            let prevPhoto = await index_js_1.TLObject.read(_data);
            let newPhoto = await index_js_1.TLObject.read(_data);
            return new Raw.ChannelAdminLogEventActionChangePhoto({
                prevPhoto: prevPhoto,
                newPhoto: newPhoto,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.prevPhoto !== undefined) {
                b.write(this.prevPhoto.write());
            }
            if (this.newPhoto !== undefined) {
                b.write(this.newPhoto.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelAdminLogEventActionChangePhoto = ChannelAdminLogEventActionChangePhoto;
    class ChannelAdminLogEventActionToggleInvites extends index_js_1.TLObject {
        newValue;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelAdminLogEventActionToggleInvites';
            this.constructorId = 0x1b7907ae;
            this.subclassOfId = 0xb2b987f3;
            this._slots = ['newValue'];
            this.newValue = params.newValue;
        }
        static async read(_data, ..._args) {
            let newValue = await index_js_1.Primitive.Bool.read(_data);
            return new Raw.ChannelAdminLogEventActionToggleInvites({ newValue: newValue });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.newValue !== undefined) {
                b.write(index_js_1.Primitive.Bool.write(this.newValue));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelAdminLogEventActionToggleInvites = ChannelAdminLogEventActionToggleInvites;
    class ChannelAdminLogEventActionToggleSignatures extends index_js_1.TLObject {
        newValue;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelAdminLogEventActionToggleSignatures';
            this.constructorId = 0x26ae0971;
            this.subclassOfId = 0xb2b987f3;
            this._slots = ['newValue'];
            this.newValue = params.newValue;
        }
        static async read(_data, ..._args) {
            let newValue = await index_js_1.Primitive.Bool.read(_data);
            return new Raw.ChannelAdminLogEventActionToggleSignatures({ newValue: newValue });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.newValue !== undefined) {
                b.write(index_js_1.Primitive.Bool.write(this.newValue));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelAdminLogEventActionToggleSignatures = ChannelAdminLogEventActionToggleSignatures;
    class ChannelAdminLogEventActionUpdatePinned extends index_js_1.TLObject {
        message;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelAdminLogEventActionUpdatePinned';
            this.constructorId = 0xe9e82c18;
            this.subclassOfId = 0xb2b987f3;
            this._slots = ['message'];
            this.message = params.message;
        }
        static async read(_data, ..._args) {
            let message = await index_js_1.TLObject.read(_data);
            return new Raw.ChannelAdminLogEventActionUpdatePinned({ message: message });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.message !== undefined) {
                b.write(this.message.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelAdminLogEventActionUpdatePinned = ChannelAdminLogEventActionUpdatePinned;
    class ChannelAdminLogEventActionEditMessage extends index_js_1.TLObject {
        prevMessage;
        newMessage;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelAdminLogEventActionEditMessage';
            this.constructorId = 0x709b2405;
            this.subclassOfId = 0xb2b987f3;
            this._slots = ['prevMessage', 'newMessage'];
            this.prevMessage = params.prevMessage;
            this.newMessage = params.newMessage;
        }
        static async read(_data, ..._args) {
            let prevMessage = await index_js_1.TLObject.read(_data);
            let newMessage = await index_js_1.TLObject.read(_data);
            return new Raw.ChannelAdminLogEventActionEditMessage({
                prevMessage: prevMessage,
                newMessage: newMessage,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.prevMessage !== undefined) {
                b.write(this.prevMessage.write());
            }
            if (this.newMessage !== undefined) {
                b.write(this.newMessage.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelAdminLogEventActionEditMessage = ChannelAdminLogEventActionEditMessage;
    class ChannelAdminLogEventActionDeleteMessage extends index_js_1.TLObject {
        message;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelAdminLogEventActionDeleteMessage';
            this.constructorId = 0x42e047bb;
            this.subclassOfId = 0xb2b987f3;
            this._slots = ['message'];
            this.message = params.message;
        }
        static async read(_data, ..._args) {
            let message = await index_js_1.TLObject.read(_data);
            return new Raw.ChannelAdminLogEventActionDeleteMessage({ message: message });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.message !== undefined) {
                b.write(this.message.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelAdminLogEventActionDeleteMessage = ChannelAdminLogEventActionDeleteMessage;
    class ChannelAdminLogEventActionParticipantJoin extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'ChannelAdminLogEventActionParticipantJoin';
            this.constructorId = 0x183040d3;
            this.subclassOfId = 0xb2b987f3;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.ChannelAdminLogEventActionParticipantJoin();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelAdminLogEventActionParticipantJoin = ChannelAdminLogEventActionParticipantJoin;
    class ChannelAdminLogEventActionParticipantLeave extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'ChannelAdminLogEventActionParticipantLeave';
            this.constructorId = 0xf89777f2;
            this.subclassOfId = 0xb2b987f3;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.ChannelAdminLogEventActionParticipantLeave();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelAdminLogEventActionParticipantLeave = ChannelAdminLogEventActionParticipantLeave;
    class ChannelAdminLogEventActionParticipantInvite extends index_js_1.TLObject {
        participant;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelAdminLogEventActionParticipantInvite';
            this.constructorId = 0xe31c34d8;
            this.subclassOfId = 0xb2b987f3;
            this._slots = ['participant'];
            this.participant = params.participant;
        }
        static async read(_data, ..._args) {
            let participant = await index_js_1.TLObject.read(_data);
            return new Raw.ChannelAdminLogEventActionParticipantInvite({ participant: participant });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.participant !== undefined) {
                b.write(this.participant.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelAdminLogEventActionParticipantInvite = ChannelAdminLogEventActionParticipantInvite;
    class ChannelAdminLogEventActionParticipantToggleBan extends index_js_1.TLObject {
        prevParticipant;
        newParticipant;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelAdminLogEventActionParticipantToggleBan';
            this.constructorId = 0xe6d83d7e;
            this.subclassOfId = 0xb2b987f3;
            this._slots = ['prevParticipant', 'newParticipant'];
            this.prevParticipant = params.prevParticipant;
            this.newParticipant = params.newParticipant;
        }
        static async read(_data, ..._args) {
            let prevParticipant = await index_js_1.TLObject.read(_data);
            let newParticipant = await index_js_1.TLObject.read(_data);
            return new Raw.ChannelAdminLogEventActionParticipantToggleBan({
                prevParticipant: prevParticipant,
                newParticipant: newParticipant,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.prevParticipant !== undefined) {
                b.write(this.prevParticipant.write());
            }
            if (this.newParticipant !== undefined) {
                b.write(this.newParticipant.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelAdminLogEventActionParticipantToggleBan = ChannelAdminLogEventActionParticipantToggleBan;
    class ChannelAdminLogEventActionParticipantToggleAdmin extends index_js_1.TLObject {
        prevParticipant;
        newParticipant;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelAdminLogEventActionParticipantToggleAdmin';
            this.constructorId = 0xd5676710;
            this.subclassOfId = 0xb2b987f3;
            this._slots = ['prevParticipant', 'newParticipant'];
            this.prevParticipant = params.prevParticipant;
            this.newParticipant = params.newParticipant;
        }
        static async read(_data, ..._args) {
            let prevParticipant = await index_js_1.TLObject.read(_data);
            let newParticipant = await index_js_1.TLObject.read(_data);
            return new Raw.ChannelAdminLogEventActionParticipantToggleAdmin({
                prevParticipant: prevParticipant,
                newParticipant: newParticipant,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.prevParticipant !== undefined) {
                b.write(this.prevParticipant.write());
            }
            if (this.newParticipant !== undefined) {
                b.write(this.newParticipant.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelAdminLogEventActionParticipantToggleAdmin = ChannelAdminLogEventActionParticipantToggleAdmin;
    class ChannelAdminLogEventActionChangeStickerSet extends index_js_1.TLObject {
        prevStickerset;
        newStickerset;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelAdminLogEventActionChangeStickerSet';
            this.constructorId = 0xb1c3caa7;
            this.subclassOfId = 0xb2b987f3;
            this._slots = ['prevStickerset', 'newStickerset'];
            this.prevStickerset = params.prevStickerset;
            this.newStickerset = params.newStickerset;
        }
        static async read(_data, ..._args) {
            let prevStickerset = await index_js_1.TLObject.read(_data);
            let newStickerset = await index_js_1.TLObject.read(_data);
            return new Raw.ChannelAdminLogEventActionChangeStickerSet({
                prevStickerset: prevStickerset,
                newStickerset: newStickerset,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.prevStickerset !== undefined) {
                b.write(this.prevStickerset.write());
            }
            if (this.newStickerset !== undefined) {
                b.write(this.newStickerset.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelAdminLogEventActionChangeStickerSet = ChannelAdminLogEventActionChangeStickerSet;
    class ChannelAdminLogEventActionTogglePreHistoryHidden extends index_js_1.TLObject {
        newValue;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelAdminLogEventActionTogglePreHistoryHidden';
            this.constructorId = 0x5f5c95f1;
            this.subclassOfId = 0xb2b987f3;
            this._slots = ['newValue'];
            this.newValue = params.newValue;
        }
        static async read(_data, ..._args) {
            let newValue = await index_js_1.Primitive.Bool.read(_data);
            return new Raw.ChannelAdminLogEventActionTogglePreHistoryHidden({ newValue: newValue });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.newValue !== undefined) {
                b.write(index_js_1.Primitive.Bool.write(this.newValue));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelAdminLogEventActionTogglePreHistoryHidden = ChannelAdminLogEventActionTogglePreHistoryHidden;
    class ChannelAdminLogEventActionDefaultBannedRights extends index_js_1.TLObject {
        prevBannedRights;
        newBannedRights;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelAdminLogEventActionDefaultBannedRights';
            this.constructorId = 0x2df5fc0a;
            this.subclassOfId = 0xb2b987f3;
            this._slots = ['prevBannedRights', 'newBannedRights'];
            this.prevBannedRights = params.prevBannedRights;
            this.newBannedRights = params.newBannedRights;
        }
        static async read(_data, ..._args) {
            let prevBannedRights = await index_js_1.TLObject.read(_data);
            let newBannedRights = await index_js_1.TLObject.read(_data);
            return new Raw.ChannelAdminLogEventActionDefaultBannedRights({
                prevBannedRights: prevBannedRights,
                newBannedRights: newBannedRights,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.prevBannedRights !== undefined) {
                b.write(this.prevBannedRights.write());
            }
            if (this.newBannedRights !== undefined) {
                b.write(this.newBannedRights.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelAdminLogEventActionDefaultBannedRights = ChannelAdminLogEventActionDefaultBannedRights;
    class ChannelAdminLogEventActionStopPoll extends index_js_1.TLObject {
        message;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelAdminLogEventActionStopPoll';
            this.constructorId = 0x8f079643;
            this.subclassOfId = 0xb2b987f3;
            this._slots = ['message'];
            this.message = params.message;
        }
        static async read(_data, ..._args) {
            let message = await index_js_1.TLObject.read(_data);
            return new Raw.ChannelAdminLogEventActionStopPoll({ message: message });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.message !== undefined) {
                b.write(this.message.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelAdminLogEventActionStopPoll = ChannelAdminLogEventActionStopPoll;
    class ChannelAdminLogEventActionChangeLinkedChat extends index_js_1.TLObject {
        prevValue;
        newValue;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelAdminLogEventActionChangeLinkedChat';
            this.constructorId = 0x50c7ac8;
            this.subclassOfId = 0xb2b987f3;
            this._slots = ['prevValue', 'newValue'];
            this.prevValue = params.prevValue;
            this.newValue = params.newValue;
        }
        static async read(_data, ..._args) {
            let prevValue = await index_js_1.Primitive.Long.read(_data);
            let newValue = await index_js_1.Primitive.Long.read(_data);
            return new Raw.ChannelAdminLogEventActionChangeLinkedChat({
                prevValue: prevValue,
                newValue: newValue,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.prevValue !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.prevValue));
            }
            if (this.newValue !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.newValue));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelAdminLogEventActionChangeLinkedChat = ChannelAdminLogEventActionChangeLinkedChat;
    class ChannelAdminLogEventActionChangeLocation extends index_js_1.TLObject {
        prevValue;
        newValue;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelAdminLogEventActionChangeLocation';
            this.constructorId = 0xe6b76ae;
            this.subclassOfId = 0xb2b987f3;
            this._slots = ['prevValue', 'newValue'];
            this.prevValue = params.prevValue;
            this.newValue = params.newValue;
        }
        static async read(_data, ..._args) {
            let prevValue = await index_js_1.TLObject.read(_data);
            let newValue = await index_js_1.TLObject.read(_data);
            return new Raw.ChannelAdminLogEventActionChangeLocation({
                prevValue: prevValue,
                newValue: newValue,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.prevValue !== undefined) {
                b.write(this.prevValue.write());
            }
            if (this.newValue !== undefined) {
                b.write(this.newValue.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelAdminLogEventActionChangeLocation = ChannelAdminLogEventActionChangeLocation;
    class ChannelAdminLogEventActionToggleSlowMode extends index_js_1.TLObject {
        prevValue;
        newValue;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelAdminLogEventActionToggleSlowMode';
            this.constructorId = 0x53909779;
            this.subclassOfId = 0xb2b987f3;
            this._slots = ['prevValue', 'newValue'];
            this.prevValue = params.prevValue;
            this.newValue = params.newValue;
        }
        static async read(_data, ..._args) {
            let prevValue = await index_js_1.Primitive.Int.read(_data);
            let newValue = await index_js_1.Primitive.Int.read(_data);
            return new Raw.ChannelAdminLogEventActionToggleSlowMode({
                prevValue: prevValue,
                newValue: newValue,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.prevValue !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.prevValue));
            }
            if (this.newValue !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.newValue));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelAdminLogEventActionToggleSlowMode = ChannelAdminLogEventActionToggleSlowMode;
    class ChannelAdminLogEventActionStartGroupCall extends index_js_1.TLObject {
        call;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelAdminLogEventActionStartGroupCall';
            this.constructorId = 0x23209745;
            this.subclassOfId = 0xb2b987f3;
            this._slots = ['call'];
            this.call = params.call;
        }
        static async read(_data, ..._args) {
            let call = await index_js_1.TLObject.read(_data);
            return new Raw.ChannelAdminLogEventActionStartGroupCall({ call: call });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.call !== undefined) {
                b.write(this.call.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelAdminLogEventActionStartGroupCall = ChannelAdminLogEventActionStartGroupCall;
    class ChannelAdminLogEventActionDiscardGroupCall extends index_js_1.TLObject {
        call;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelAdminLogEventActionDiscardGroupCall';
            this.constructorId = 0xdb9f9140;
            this.subclassOfId = 0xb2b987f3;
            this._slots = ['call'];
            this.call = params.call;
        }
        static async read(_data, ..._args) {
            let call = await index_js_1.TLObject.read(_data);
            return new Raw.ChannelAdminLogEventActionDiscardGroupCall({ call: call });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.call !== undefined) {
                b.write(this.call.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelAdminLogEventActionDiscardGroupCall = ChannelAdminLogEventActionDiscardGroupCall;
    class ChannelAdminLogEventActionParticipantMute extends index_js_1.TLObject {
        participant;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelAdminLogEventActionParticipantMute';
            this.constructorId = 0xf92424d2;
            this.subclassOfId = 0xb2b987f3;
            this._slots = ['participant'];
            this.participant = params.participant;
        }
        static async read(_data, ..._args) {
            let participant = await index_js_1.TLObject.read(_data);
            return new Raw.ChannelAdminLogEventActionParticipantMute({ participant: participant });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.participant !== undefined) {
                b.write(this.participant.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelAdminLogEventActionParticipantMute = ChannelAdminLogEventActionParticipantMute;
    class ChannelAdminLogEventActionParticipantUnmute extends index_js_1.TLObject {
        participant;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelAdminLogEventActionParticipantUnmute';
            this.constructorId = 0xe64429c0;
            this.subclassOfId = 0xb2b987f3;
            this._slots = ['participant'];
            this.participant = params.participant;
        }
        static async read(_data, ..._args) {
            let participant = await index_js_1.TLObject.read(_data);
            return new Raw.ChannelAdminLogEventActionParticipantUnmute({ participant: participant });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.participant !== undefined) {
                b.write(this.participant.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelAdminLogEventActionParticipantUnmute = ChannelAdminLogEventActionParticipantUnmute;
    class ChannelAdminLogEventActionToggleGroupCallSetting extends index_js_1.TLObject {
        joinMuted;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelAdminLogEventActionToggleGroupCallSetting';
            this.constructorId = 0x56d6a247;
            this.subclassOfId = 0xb2b987f3;
            this._slots = ['joinMuted'];
            this.joinMuted = params.joinMuted;
        }
        static async read(_data, ..._args) {
            let joinMuted = await index_js_1.Primitive.Bool.read(_data);
            return new Raw.ChannelAdminLogEventActionToggleGroupCallSetting({ joinMuted: joinMuted });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.joinMuted !== undefined) {
                b.write(index_js_1.Primitive.Bool.write(this.joinMuted));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelAdminLogEventActionToggleGroupCallSetting = ChannelAdminLogEventActionToggleGroupCallSetting;
    class ChannelAdminLogEventActionParticipantJoinByInvite extends index_js_1.TLObject {
        viaChatlist;
        invite;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelAdminLogEventActionParticipantJoinByInvite';
            this.constructorId = 0xfe9fc158;
            this.subclassOfId = 0xb2b987f3;
            this._slots = ['viaChatlist', 'invite'];
            this.viaChatlist = params.viaChatlist;
            this.invite = params.invite;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let viaChatlist = flags & (1 << 0) ? true : false;
            let invite = await index_js_1.TLObject.read(_data);
            return new Raw.ChannelAdminLogEventActionParticipantJoinByInvite({
                viaChatlist: viaChatlist,
                invite: invite,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.viaChatlist ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.invite !== undefined) {
                b.write(this.invite.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelAdminLogEventActionParticipantJoinByInvite = ChannelAdminLogEventActionParticipantJoinByInvite;
    class ChannelAdminLogEventActionExportedInviteDelete extends index_js_1.TLObject {
        invite;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelAdminLogEventActionExportedInviteDelete';
            this.constructorId = 0x5a50fca4;
            this.subclassOfId = 0xb2b987f3;
            this._slots = ['invite'];
            this.invite = params.invite;
        }
        static async read(_data, ..._args) {
            let invite = await index_js_1.TLObject.read(_data);
            return new Raw.ChannelAdminLogEventActionExportedInviteDelete({ invite: invite });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.invite !== undefined) {
                b.write(this.invite.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelAdminLogEventActionExportedInviteDelete = ChannelAdminLogEventActionExportedInviteDelete;
    class ChannelAdminLogEventActionExportedInviteRevoke extends index_js_1.TLObject {
        invite;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelAdminLogEventActionExportedInviteRevoke';
            this.constructorId = 0x410a134e;
            this.subclassOfId = 0xb2b987f3;
            this._slots = ['invite'];
            this.invite = params.invite;
        }
        static async read(_data, ..._args) {
            let invite = await index_js_1.TLObject.read(_data);
            return new Raw.ChannelAdminLogEventActionExportedInviteRevoke({ invite: invite });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.invite !== undefined) {
                b.write(this.invite.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelAdminLogEventActionExportedInviteRevoke = ChannelAdminLogEventActionExportedInviteRevoke;
    class ChannelAdminLogEventActionExportedInviteEdit extends index_js_1.TLObject {
        prevInvite;
        newInvite;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelAdminLogEventActionExportedInviteEdit';
            this.constructorId = 0xe90ebb59;
            this.subclassOfId = 0xb2b987f3;
            this._slots = ['prevInvite', 'newInvite'];
            this.prevInvite = params.prevInvite;
            this.newInvite = params.newInvite;
        }
        static async read(_data, ..._args) {
            let prevInvite = await index_js_1.TLObject.read(_data);
            let newInvite = await index_js_1.TLObject.read(_data);
            return new Raw.ChannelAdminLogEventActionExportedInviteEdit({
                prevInvite: prevInvite,
                newInvite: newInvite,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.prevInvite !== undefined) {
                b.write(this.prevInvite.write());
            }
            if (this.newInvite !== undefined) {
                b.write(this.newInvite.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelAdminLogEventActionExportedInviteEdit = ChannelAdminLogEventActionExportedInviteEdit;
    class ChannelAdminLogEventActionParticipantVolume extends index_js_1.TLObject {
        participant;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelAdminLogEventActionParticipantVolume';
            this.constructorId = 0x3e7f6847;
            this.subclassOfId = 0xb2b987f3;
            this._slots = ['participant'];
            this.participant = params.participant;
        }
        static async read(_data, ..._args) {
            let participant = await index_js_1.TLObject.read(_data);
            return new Raw.ChannelAdminLogEventActionParticipantVolume({ participant: participant });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.participant !== undefined) {
                b.write(this.participant.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelAdminLogEventActionParticipantVolume = ChannelAdminLogEventActionParticipantVolume;
    class ChannelAdminLogEventActionChangeHistoryTTL extends index_js_1.TLObject {
        prevValue;
        newValue;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelAdminLogEventActionChangeHistoryTTL';
            this.constructorId = 0x6e941a38;
            this.subclassOfId = 0xb2b987f3;
            this._slots = ['prevValue', 'newValue'];
            this.prevValue = params.prevValue;
            this.newValue = params.newValue;
        }
        static async read(_data, ..._args) {
            let prevValue = await index_js_1.Primitive.Int.read(_data);
            let newValue = await index_js_1.Primitive.Int.read(_data);
            return new Raw.ChannelAdminLogEventActionChangeHistoryTTL({
                prevValue: prevValue,
                newValue: newValue,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.prevValue !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.prevValue));
            }
            if (this.newValue !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.newValue));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelAdminLogEventActionChangeHistoryTTL = ChannelAdminLogEventActionChangeHistoryTTL;
    class ChannelAdminLogEventActionParticipantJoinByRequest extends index_js_1.TLObject {
        invite;
        approvedBy;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelAdminLogEventActionParticipantJoinByRequest';
            this.constructorId = 0xafb6144a;
            this.subclassOfId = 0xb2b987f3;
            this._slots = ['invite', 'approvedBy'];
            this.invite = params.invite;
            this.approvedBy = params.approvedBy;
        }
        static async read(_data, ..._args) {
            let invite = await index_js_1.TLObject.read(_data);
            let approvedBy = await index_js_1.Primitive.Long.read(_data);
            return new Raw.ChannelAdminLogEventActionParticipantJoinByRequest({
                invite: invite,
                approvedBy: approvedBy,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.invite !== undefined) {
                b.write(this.invite.write());
            }
            if (this.approvedBy !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.approvedBy));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelAdminLogEventActionParticipantJoinByRequest = ChannelAdminLogEventActionParticipantJoinByRequest;
    class ChannelAdminLogEventActionToggleNoForwards extends index_js_1.TLObject {
        newValue;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelAdminLogEventActionToggleNoForwards';
            this.constructorId = 0xcb2ac766;
            this.subclassOfId = 0xb2b987f3;
            this._slots = ['newValue'];
            this.newValue = params.newValue;
        }
        static async read(_data, ..._args) {
            let newValue = await index_js_1.Primitive.Bool.read(_data);
            return new Raw.ChannelAdminLogEventActionToggleNoForwards({ newValue: newValue });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.newValue !== undefined) {
                b.write(index_js_1.Primitive.Bool.write(this.newValue));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelAdminLogEventActionToggleNoForwards = ChannelAdminLogEventActionToggleNoForwards;
    class ChannelAdminLogEventActionSendMessage extends index_js_1.TLObject {
        message;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelAdminLogEventActionSendMessage';
            this.constructorId = 0x278f2868;
            this.subclassOfId = 0xb2b987f3;
            this._slots = ['message'];
            this.message = params.message;
        }
        static async read(_data, ..._args) {
            let message = await index_js_1.TLObject.read(_data);
            return new Raw.ChannelAdminLogEventActionSendMessage({ message: message });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.message !== undefined) {
                b.write(this.message.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelAdminLogEventActionSendMessage = ChannelAdminLogEventActionSendMessage;
    class ChannelAdminLogEventActionChangeAvailableReactions extends index_js_1.TLObject {
        prevValue;
        newValue;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelAdminLogEventActionChangeAvailableReactions';
            this.constructorId = 0xbe4e0ef8;
            this.subclassOfId = 0xb2b987f3;
            this._slots = ['prevValue', 'newValue'];
            this.prevValue = params.prevValue;
            this.newValue = params.newValue;
        }
        static async read(_data, ..._args) {
            let prevValue = await index_js_1.TLObject.read(_data);
            let newValue = await index_js_1.TLObject.read(_data);
            return new Raw.ChannelAdminLogEventActionChangeAvailableReactions({
                prevValue: prevValue,
                newValue: newValue,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.prevValue !== undefined) {
                b.write(this.prevValue.write());
            }
            if (this.newValue !== undefined) {
                b.write(this.newValue.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelAdminLogEventActionChangeAvailableReactions = ChannelAdminLogEventActionChangeAvailableReactions;
    class ChannelAdminLogEventActionChangeUsernames extends index_js_1.TLObject {
        prevValue;
        newValue;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelAdminLogEventActionChangeUsernames';
            this.constructorId = 0xf04fb3a9;
            this.subclassOfId = 0xb2b987f3;
            this._slots = ['prevValue', 'newValue'];
            this.prevValue = params.prevValue;
            this.newValue = params.newValue;
        }
        static async read(_data, ..._args) {
            let prevValue = await index_js_1.TLObject.read(_data, index_js_1.Primitive.String);
            let newValue = await index_js_1.TLObject.read(_data, index_js_1.Primitive.String);
            return new Raw.ChannelAdminLogEventActionChangeUsernames({
                prevValue: prevValue,
                newValue: newValue,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.prevValue) {
                b.write(index_js_1.Primitive.Vector.write(this.prevValue, index_js_1.Primitive.String));
            }
            if (this.newValue) {
                b.write(index_js_1.Primitive.Vector.write(this.newValue, index_js_1.Primitive.String));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelAdminLogEventActionChangeUsernames = ChannelAdminLogEventActionChangeUsernames;
    class ChannelAdminLogEventActionToggleForum extends index_js_1.TLObject {
        newValue;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelAdminLogEventActionToggleForum';
            this.constructorId = 0x2cc6383;
            this.subclassOfId = 0xb2b987f3;
            this._slots = ['newValue'];
            this.newValue = params.newValue;
        }
        static async read(_data, ..._args) {
            let newValue = await index_js_1.Primitive.Bool.read(_data);
            return new Raw.ChannelAdminLogEventActionToggleForum({ newValue: newValue });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.newValue !== undefined) {
                b.write(index_js_1.Primitive.Bool.write(this.newValue));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelAdminLogEventActionToggleForum = ChannelAdminLogEventActionToggleForum;
    class ChannelAdminLogEventActionCreateTopic extends index_js_1.TLObject {
        topic;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelAdminLogEventActionCreateTopic';
            this.constructorId = 0x58707d28;
            this.subclassOfId = 0xb2b987f3;
            this._slots = ['topic'];
            this.topic = params.topic;
        }
        static async read(_data, ..._args) {
            let topic = await index_js_1.TLObject.read(_data);
            return new Raw.ChannelAdminLogEventActionCreateTopic({ topic: topic });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.topic !== undefined) {
                b.write(this.topic.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelAdminLogEventActionCreateTopic = ChannelAdminLogEventActionCreateTopic;
    class ChannelAdminLogEventActionEditTopic extends index_js_1.TLObject {
        prevTopic;
        newTopic;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelAdminLogEventActionEditTopic';
            this.constructorId = 0xf06fe208;
            this.subclassOfId = 0xb2b987f3;
            this._slots = ['prevTopic', 'newTopic'];
            this.prevTopic = params.prevTopic;
            this.newTopic = params.newTopic;
        }
        static async read(_data, ..._args) {
            let prevTopic = await index_js_1.TLObject.read(_data);
            let newTopic = await index_js_1.TLObject.read(_data);
            return new Raw.ChannelAdminLogEventActionEditTopic({
                prevTopic: prevTopic,
                newTopic: newTopic,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.prevTopic !== undefined) {
                b.write(this.prevTopic.write());
            }
            if (this.newTopic !== undefined) {
                b.write(this.newTopic.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelAdminLogEventActionEditTopic = ChannelAdminLogEventActionEditTopic;
    class ChannelAdminLogEventActionDeleteTopic extends index_js_1.TLObject {
        topic;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelAdminLogEventActionDeleteTopic';
            this.constructorId = 0xae168909;
            this.subclassOfId = 0xb2b987f3;
            this._slots = ['topic'];
            this.topic = params.topic;
        }
        static async read(_data, ..._args) {
            let topic = await index_js_1.TLObject.read(_data);
            return new Raw.ChannelAdminLogEventActionDeleteTopic({ topic: topic });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.topic !== undefined) {
                b.write(this.topic.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelAdminLogEventActionDeleteTopic = ChannelAdminLogEventActionDeleteTopic;
    class ChannelAdminLogEventActionPinTopic extends index_js_1.TLObject {
        prevTopic;
        newTopic;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelAdminLogEventActionPinTopic';
            this.constructorId = 0x5d8d353b;
            this.subclassOfId = 0xb2b987f3;
            this._slots = ['prevTopic', 'newTopic'];
            this.prevTopic = params.prevTopic;
            this.newTopic = params.newTopic;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let prevTopic = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
            let newTopic = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.ChannelAdminLogEventActionPinTopic({
                prevTopic: prevTopic,
                newTopic: newTopic,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.prevTopic !== undefined ? 1 << 0 : 0;
            flags |= this.newTopic !== undefined ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.prevTopic !== undefined) {
                b.write(this.prevTopic.write());
            }
            if (this.newTopic !== undefined) {
                b.write(this.newTopic.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelAdminLogEventActionPinTopic = ChannelAdminLogEventActionPinTopic;
    class ChannelAdminLogEventActionToggleAntiSpam extends index_js_1.TLObject {
        newValue;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelAdminLogEventActionToggleAntiSpam';
            this.constructorId = 0x64f36dfc;
            this.subclassOfId = 0xb2b987f3;
            this._slots = ['newValue'];
            this.newValue = params.newValue;
        }
        static async read(_data, ..._args) {
            let newValue = await index_js_1.Primitive.Bool.read(_data);
            return new Raw.ChannelAdminLogEventActionToggleAntiSpam({ newValue: newValue });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.newValue !== undefined) {
                b.write(index_js_1.Primitive.Bool.write(this.newValue));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelAdminLogEventActionToggleAntiSpam = ChannelAdminLogEventActionToggleAntiSpam;
    class ChannelAdminLogEventActionChangePeerColor extends index_js_1.TLObject {
        prevValue;
        newValue;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelAdminLogEventActionChangePeerColor';
            this.constructorId = 0x5796e780;
            this.subclassOfId = 0xb2b987f3;
            this._slots = ['prevValue', 'newValue'];
            this.prevValue = params.prevValue;
            this.newValue = params.newValue;
        }
        static async read(_data, ..._args) {
            let prevValue = await index_js_1.TLObject.read(_data);
            let newValue = await index_js_1.TLObject.read(_data);
            return new Raw.ChannelAdminLogEventActionChangePeerColor({
                prevValue: prevValue,
                newValue: newValue,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.prevValue !== undefined) {
                b.write(this.prevValue.write());
            }
            if (this.newValue !== undefined) {
                b.write(this.newValue.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelAdminLogEventActionChangePeerColor = ChannelAdminLogEventActionChangePeerColor;
    class ChannelAdminLogEventActionChangeProfilePeerColor extends index_js_1.TLObject {
        prevValue;
        newValue;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelAdminLogEventActionChangeProfilePeerColor';
            this.constructorId = 0x5e477b25;
            this.subclassOfId = 0xb2b987f3;
            this._slots = ['prevValue', 'newValue'];
            this.prevValue = params.prevValue;
            this.newValue = params.newValue;
        }
        static async read(_data, ..._args) {
            let prevValue = await index_js_1.TLObject.read(_data);
            let newValue = await index_js_1.TLObject.read(_data);
            return new Raw.ChannelAdminLogEventActionChangeProfilePeerColor({
                prevValue: prevValue,
                newValue: newValue,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.prevValue !== undefined) {
                b.write(this.prevValue.write());
            }
            if (this.newValue !== undefined) {
                b.write(this.newValue.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelAdminLogEventActionChangeProfilePeerColor = ChannelAdminLogEventActionChangeProfilePeerColor;
    class ChannelAdminLogEventActionChangeWallpaper extends index_js_1.TLObject {
        prevValue;
        newValue;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelAdminLogEventActionChangeWallpaper';
            this.constructorId = 0x31bb5d52;
            this.subclassOfId = 0xb2b987f3;
            this._slots = ['prevValue', 'newValue'];
            this.prevValue = params.prevValue;
            this.newValue = params.newValue;
        }
        static async read(_data, ..._args) {
            let prevValue = await index_js_1.TLObject.read(_data);
            let newValue = await index_js_1.TLObject.read(_data);
            return new Raw.ChannelAdminLogEventActionChangeWallpaper({
                prevValue: prevValue,
                newValue: newValue,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.prevValue !== undefined) {
                b.write(this.prevValue.write());
            }
            if (this.newValue !== undefined) {
                b.write(this.newValue.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelAdminLogEventActionChangeWallpaper = ChannelAdminLogEventActionChangeWallpaper;
    class ChannelAdminLogEventActionChangeEmojiStatus extends index_js_1.TLObject {
        prevValue;
        newValue;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelAdminLogEventActionChangeEmojiStatus';
            this.constructorId = 0x3ea9feb1;
            this.subclassOfId = 0xb2b987f3;
            this._slots = ['prevValue', 'newValue'];
            this.prevValue = params.prevValue;
            this.newValue = params.newValue;
        }
        static async read(_data, ..._args) {
            let prevValue = await index_js_1.TLObject.read(_data);
            let newValue = await index_js_1.TLObject.read(_data);
            return new Raw.ChannelAdminLogEventActionChangeEmojiStatus({
                prevValue: prevValue,
                newValue: newValue,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.prevValue !== undefined) {
                b.write(this.prevValue.write());
            }
            if (this.newValue !== undefined) {
                b.write(this.newValue.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelAdminLogEventActionChangeEmojiStatus = ChannelAdminLogEventActionChangeEmojiStatus;
    class ChannelAdminLogEventActionChangeEmojiStickerSet extends index_js_1.TLObject {
        prevStickerset;
        newStickerset;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelAdminLogEventActionChangeEmojiStickerSet';
            this.constructorId = 0x46d840ab;
            this.subclassOfId = 0xb2b987f3;
            this._slots = ['prevStickerset', 'newStickerset'];
            this.prevStickerset = params.prevStickerset;
            this.newStickerset = params.newStickerset;
        }
        static async read(_data, ..._args) {
            let prevStickerset = await index_js_1.TLObject.read(_data);
            let newStickerset = await index_js_1.TLObject.read(_data);
            return new Raw.ChannelAdminLogEventActionChangeEmojiStickerSet({
                prevStickerset: prevStickerset,
                newStickerset: newStickerset,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.prevStickerset !== undefined) {
                b.write(this.prevStickerset.write());
            }
            if (this.newStickerset !== undefined) {
                b.write(this.newStickerset.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelAdminLogEventActionChangeEmojiStickerSet = ChannelAdminLogEventActionChangeEmojiStickerSet;
    class ChannelAdminLogEvent extends index_js_1.TLObject {
        id;
        date;
        userId;
        action;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelAdminLogEvent';
            this.constructorId = 0x1fad68cd;
            this.subclassOfId = 0x408f0999;
            this._slots = ['id', 'date', 'userId', 'action'];
            this.id = params.id;
            this.date = params.date;
            this.userId = params.userId;
            this.action = params.action;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.Long.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            let userId = await index_js_1.Primitive.Long.read(_data);
            let action = await index_js_1.TLObject.read(_data);
            return new Raw.ChannelAdminLogEvent({ id: id, date: date, userId: userId, action: action });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            if (this.action !== undefined) {
                b.write(this.action.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelAdminLogEvent = ChannelAdminLogEvent;
    class ChannelAdminLogEventsFilter extends index_js_1.TLObject {
        join;
        leave;
        invite;
        ban;
        unban;
        kick;
        unkick;
        promote;
        demote;
        info;
        settings;
        pinned;
        edit;
        delete;
        groupCall;
        invites;
        send;
        forums;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelAdminLogEventsFilter';
            this.constructorId = 0xea107ae4;
            this.subclassOfId = 0x7cbbf319;
            this._slots = [
                'join',
                'leave',
                'invite',
                'ban',
                'unban',
                'kick',
                'unkick',
                'promote',
                'demote',
                'info',
                'settings',
                'pinned',
                'edit',
                'delete',
                'groupCall',
                'invites',
                'send',
                'forums',
            ];
            this.join = params.join;
            this.leave = params.leave;
            this.invite = params.invite;
            this.ban = params.ban;
            this.unban = params.unban;
            this.kick = params.kick;
            this.unkick = params.unkick;
            this.promote = params.promote;
            this.demote = params.demote;
            this.info = params.info;
            this.settings = params.settings;
            this.pinned = params.pinned;
            this.edit = params.edit;
            this.delete = params.delete;
            this.groupCall = params.groupCall;
            this.invites = params.invites;
            this.send = params.send;
            this.forums = params.forums;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let join = flags & (1 << 0) ? true : false;
            let leave = flags & (1 << 1) ? true : false;
            let invite = flags & (1 << 2) ? true : false;
            let ban = flags & (1 << 3) ? true : false;
            let unban = flags & (1 << 4) ? true : false;
            let kick = flags & (1 << 5) ? true : false;
            let unkick = flags & (1 << 6) ? true : false;
            let promote = flags & (1 << 7) ? true : false;
            let demote = flags & (1 << 8) ? true : false;
            let info = flags & (1 << 9) ? true : false;
            let settings = flags & (1 << 10) ? true : false;
            let pinned = flags & (1 << 11) ? true : false;
            let edit = flags & (1 << 12) ? true : false;
            let _delete = flags & (1 << 13) ? true : false;
            let groupCall = flags & (1 << 14) ? true : false;
            let invites = flags & (1 << 15) ? true : false;
            let send = flags & (1 << 16) ? true : false;
            let forums = flags & (1 << 17) ? true : false;
            return new Raw.ChannelAdminLogEventsFilter({
                join: join,
                leave: leave,
                invite: invite,
                ban: ban,
                unban: unban,
                kick: kick,
                unkick: unkick,
                promote: promote,
                demote: demote,
                info: info,
                settings: settings,
                pinned: pinned,
                edit: edit,
                delete: _delete,
                groupCall: groupCall,
                invites: invites,
                send: send,
                forums: forums,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.join ? 1 << 0 : 0;
            flags |= this.leave ? 1 << 1 : 0;
            flags |= this.invite ? 1 << 2 : 0;
            flags |= this.ban ? 1 << 3 : 0;
            flags |= this.unban ? 1 << 4 : 0;
            flags |= this.kick ? 1 << 5 : 0;
            flags |= this.unkick ? 1 << 6 : 0;
            flags |= this.promote ? 1 << 7 : 0;
            flags |= this.demote ? 1 << 8 : 0;
            flags |= this.info ? 1 << 9 : 0;
            flags |= this.settings ? 1 << 10 : 0;
            flags |= this.pinned ? 1 << 11 : 0;
            flags |= this.edit ? 1 << 12 : 0;
            flags |= this.delete ? 1 << 13 : 0;
            flags |= this.groupCall ? 1 << 14 : 0;
            flags |= this.invites ? 1 << 15 : 0;
            flags |= this.send ? 1 << 16 : 0;
            flags |= this.forums ? 1 << 17 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelAdminLogEventsFilter = ChannelAdminLogEventsFilter;
    class PopularContact extends index_js_1.TLObject {
        clientId;
        importers;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PopularContact';
            this.constructorId = 0x5ce14175;
            this.subclassOfId = 0x409255a;
            this._slots = ['clientId', 'importers'];
            this.clientId = params.clientId;
            this.importers = params.importers;
        }
        static async read(_data, ..._args) {
            let clientId = await index_js_1.Primitive.Long.read(_data);
            let importers = await index_js_1.Primitive.Int.read(_data);
            return new Raw.PopularContact({ clientId: clientId, importers: importers });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.clientId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.clientId));
            }
            if (this.importers !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.importers));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PopularContact = PopularContact;
    class RecentMeUrlUnknown extends index_js_1.TLObject {
        url;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'RecentMeUrlUnknown';
            this.constructorId = 0x46e1d13d;
            this.subclassOfId = 0x55a53079;
            this._slots = ['url'];
            this.url = params.url;
        }
        static async read(_data, ..._args) {
            let url = await index_js_1.Primitive.String.read(_data);
            return new Raw.RecentMeUrlUnknown({ url: url });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.url !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.url));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.RecentMeUrlUnknown = RecentMeUrlUnknown;
    class RecentMeUrlUser extends index_js_1.TLObject {
        url;
        userId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'RecentMeUrlUser';
            this.constructorId = 0xb92c09e2;
            this.subclassOfId = 0x55a53079;
            this._slots = ['url', 'userId'];
            this.url = params.url;
            this.userId = params.userId;
        }
        static async read(_data, ..._args) {
            let url = await index_js_1.Primitive.String.read(_data);
            let userId = await index_js_1.Primitive.Long.read(_data);
            return new Raw.RecentMeUrlUser({ url: url, userId: userId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.url !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.url));
            }
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.RecentMeUrlUser = RecentMeUrlUser;
    class RecentMeUrlChat extends index_js_1.TLObject {
        url;
        chatId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'RecentMeUrlChat';
            this.constructorId = 0xb2da71d2;
            this.subclassOfId = 0x55a53079;
            this._slots = ['url', 'chatId'];
            this.url = params.url;
            this.chatId = params.chatId;
        }
        static async read(_data, ..._args) {
            let url = await index_js_1.Primitive.String.read(_data);
            let chatId = await index_js_1.Primitive.Long.read(_data);
            return new Raw.RecentMeUrlChat({ url: url, chatId: chatId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.url !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.url));
            }
            if (this.chatId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.chatId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.RecentMeUrlChat = RecentMeUrlChat;
    class RecentMeUrlChatInvite extends index_js_1.TLObject {
        url;
        chatInvite;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'RecentMeUrlChatInvite';
            this.constructorId = 0xeb49081d;
            this.subclassOfId = 0x55a53079;
            this._slots = ['url', 'chatInvite'];
            this.url = params.url;
            this.chatInvite = params.chatInvite;
        }
        static async read(_data, ..._args) {
            let url = await index_js_1.Primitive.String.read(_data);
            let chatInvite = await index_js_1.TLObject.read(_data);
            return new Raw.RecentMeUrlChatInvite({ url: url, chatInvite: chatInvite });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.url !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.url));
            }
            if (this.chatInvite !== undefined) {
                b.write(this.chatInvite.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.RecentMeUrlChatInvite = RecentMeUrlChatInvite;
    class RecentMeUrlStickerSet extends index_js_1.TLObject {
        url;
        set;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'RecentMeUrlStickerSet';
            this.constructorId = 0xbc0a57dc;
            this.subclassOfId = 0x55a53079;
            this._slots = ['url', 'set'];
            this.url = params.url;
            this.set = params.set;
        }
        static async read(_data, ..._args) {
            let url = await index_js_1.Primitive.String.read(_data);
            let set = await index_js_1.TLObject.read(_data);
            return new Raw.RecentMeUrlStickerSet({ url: url, set: set });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.url !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.url));
            }
            if (this.set !== undefined) {
                b.write(this.set.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.RecentMeUrlStickerSet = RecentMeUrlStickerSet;
    class InputSingleMedia extends index_js_1.TLObject {
        media;
        randomId;
        message;
        entities;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputSingleMedia';
            this.constructorId = 0x1cc6e91f;
            this.subclassOfId = 0x21ca8ed8;
            this._slots = ['media', 'randomId', 'message', 'entities'];
            this.media = params.media;
            this.randomId = params.randomId;
            this.message = params.message;
            this.entities = params.entities;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let media = await index_js_1.TLObject.read(_data);
            let randomId = await index_js_1.Primitive.Long.read(_data);
            let message = await index_js_1.Primitive.String.read(_data);
            let entities = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : [];
            return new Raw.InputSingleMedia({
                media: media,
                randomId: randomId,
                message: message,
                entities: entities,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.entities ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.media !== undefined) {
                b.write(this.media.write());
            }
            if (this.randomId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.randomId));
            }
            if (this.message !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.message));
            }
            if (this.entities) {
                b.write(index_js_1.Primitive.Vector.write(this.entities));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputSingleMedia = InputSingleMedia;
    class WebAuthorization extends index_js_1.TLObject {
        hash;
        botId;
        domain;
        browser;
        platform;
        dateCreated;
        dateActive;
        ip;
        region;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'WebAuthorization';
            this.constructorId = 0xa6f8f452;
            this.subclassOfId = 0x3764d30;
            this._slots = [
                'hash',
                'botId',
                'domain',
                'browser',
                'platform',
                'dateCreated',
                'dateActive',
                'ip',
                'region',
            ];
            this.hash = params.hash;
            this.botId = params.botId;
            this.domain = params.domain;
            this.browser = params.browser;
            this.platform = params.platform;
            this.dateCreated = params.dateCreated;
            this.dateActive = params.dateActive;
            this.ip = params.ip;
            this.region = params.region;
        }
        static async read(_data, ..._args) {
            let hash = await index_js_1.Primitive.Long.read(_data);
            let botId = await index_js_1.Primitive.Long.read(_data);
            let domain = await index_js_1.Primitive.String.read(_data);
            let browser = await index_js_1.Primitive.String.read(_data);
            let platform = await index_js_1.Primitive.String.read(_data);
            let dateCreated = await index_js_1.Primitive.Int.read(_data);
            let dateActive = await index_js_1.Primitive.Int.read(_data);
            let ip = await index_js_1.Primitive.String.read(_data);
            let region = await index_js_1.Primitive.String.read(_data);
            return new Raw.WebAuthorization({
                hash: hash,
                botId: botId,
                domain: domain,
                browser: browser,
                platform: platform,
                dateCreated: dateCreated,
                dateActive: dateActive,
                ip: ip,
                region: region,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.hash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.hash));
            }
            if (this.botId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.botId));
            }
            if (this.domain !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.domain));
            }
            if (this.browser !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.browser));
            }
            if (this.platform !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.platform));
            }
            if (this.dateCreated !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.dateCreated));
            }
            if (this.dateActive !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.dateActive));
            }
            if (this.ip !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.ip));
            }
            if (this.region !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.region));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.WebAuthorization = WebAuthorization;
    class InputMessageID extends index_js_1.TLObject {
        id;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputMessageID';
            this.constructorId = 0xa676a322;
            this.subclassOfId = 0x54b6bcc5;
            this._slots = ['id'];
            this.id = params.id;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.Int.read(_data);
            return new Raw.InputMessageID({ id: id });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.id));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputMessageID = InputMessageID;
    class InputMessageReplyTo extends index_js_1.TLObject {
        id;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputMessageReplyTo';
            this.constructorId = 0xbad88395;
            this.subclassOfId = 0x54b6bcc5;
            this._slots = ['id'];
            this.id = params.id;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.Int.read(_data);
            return new Raw.InputMessageReplyTo({ id: id });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.id));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputMessageReplyTo = InputMessageReplyTo;
    class InputMessagePinned extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputMessagePinned';
            this.constructorId = 0x86872538;
            this.subclassOfId = 0x54b6bcc5;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputMessagePinned();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputMessagePinned = InputMessagePinned;
    class InputMessageCallbackQuery extends index_js_1.TLObject {
        id;
        queryId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputMessageCallbackQuery';
            this.constructorId = 0xacfa1a7e;
            this.subclassOfId = 0x54b6bcc5;
            this._slots = ['id', 'queryId'];
            this.id = params.id;
            this.queryId = params.queryId;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.Int.read(_data);
            let queryId = await index_js_1.Primitive.Long.read(_data);
            return new Raw.InputMessageCallbackQuery({ id: id, queryId: queryId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.id));
            }
            if (this.queryId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.queryId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputMessageCallbackQuery = InputMessageCallbackQuery;
    class InputDialogPeer extends index_js_1.TLObject {
        peer;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputDialogPeer';
            this.constructorId = 0xfcaafeb7;
            this.subclassOfId = 0xa21c9795;
            this._slots = ['peer'];
            this.peer = params.peer;
        }
        static async read(_data, ..._args) {
            let peer = await index_js_1.TLObject.read(_data);
            return new Raw.InputDialogPeer({ peer: peer });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputDialogPeer = InputDialogPeer;
    class InputDialogPeerFolder extends index_js_1.TLObject {
        folderId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputDialogPeerFolder';
            this.constructorId = 0x64600527;
            this.subclassOfId = 0xa21c9795;
            this._slots = ['folderId'];
            this.folderId = params.folderId;
        }
        static async read(_data, ..._args) {
            let folderId = await index_js_1.Primitive.Int.read(_data);
            return new Raw.InputDialogPeerFolder({ folderId: folderId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.folderId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.folderId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputDialogPeerFolder = InputDialogPeerFolder;
    class DialogPeer extends index_js_1.TLObject {
        peer;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DialogPeer';
            this.constructorId = 0xe56dbf05;
            this.subclassOfId = 0x256ce1ae;
            this._slots = ['peer'];
            this.peer = params.peer;
        }
        static async read(_data, ..._args) {
            let peer = await index_js_1.TLObject.read(_data);
            return new Raw.DialogPeer({ peer: peer });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DialogPeer = DialogPeer;
    class DialogPeerFolder extends index_js_1.TLObject {
        folderId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DialogPeerFolder';
            this.constructorId = 0x514519e2;
            this.subclassOfId = 0x256ce1ae;
            this._slots = ['folderId'];
            this.folderId = params.folderId;
        }
        static async read(_data, ..._args) {
            let folderId = await index_js_1.Primitive.Int.read(_data);
            return new Raw.DialogPeerFolder({ folderId: folderId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.folderId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.folderId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DialogPeerFolder = DialogPeerFolder;
    class FileHash extends index_js_1.TLObject {
        offset;
        limit;
        hash;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'FileHash';
            this.constructorId = 0xf39b035c;
            this.subclassOfId = 0xead438b3;
            this._slots = ['offset', 'limit', 'hash'];
            this.offset = params.offset;
            this.limit = params.limit;
            this.hash = params.hash;
        }
        static async read(_data, ..._args) {
            let offset = await index_js_1.Primitive.Long.read(_data);
            let limit = await index_js_1.Primitive.Int.read(_data);
            let hash = await index_js_1.Primitive.Bytes.read(_data);
            return new Raw.FileHash({ offset: offset, limit: limit, hash: hash });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.offset !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.offset));
            }
            if (this.limit !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.limit));
            }
            if (this.hash !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.hash));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.FileHash = FileHash;
    class InputClientProxy extends index_js_1.TLObject {
        address;
        port;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputClientProxy';
            this.constructorId = 0x75588b3f;
            this.subclassOfId = 0x91a4346;
            this._slots = ['address', 'port'];
            this.address = params.address;
            this.port = params.port;
        }
        static async read(_data, ..._args) {
            let address = await index_js_1.Primitive.String.read(_data);
            let port = await index_js_1.Primitive.Int.read(_data);
            return new Raw.InputClientProxy({ address: address, port: port });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.address !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.address));
            }
            if (this.port !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.port));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputClientProxy = InputClientProxy;
    class InputSecureFileUploaded extends index_js_1.TLObject {
        id;
        parts;
        md5Checksum;
        fileHash;
        secret;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputSecureFileUploaded';
            this.constructorId = 0x3334b0f0;
            this.subclassOfId = 0xdac8adfc;
            this._slots = ['id', 'parts', 'md5Checksum', 'fileHash', 'secret'];
            this.id = params.id;
            this.parts = params.parts;
            this.md5Checksum = params.md5Checksum;
            this.fileHash = params.fileHash;
            this.secret = params.secret;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.Long.read(_data);
            let parts = await index_js_1.Primitive.Int.read(_data);
            let md5Checksum = await index_js_1.Primitive.String.read(_data);
            let fileHash = await index_js_1.Primitive.Bytes.read(_data);
            let secret = await index_js_1.Primitive.Bytes.read(_data);
            return new Raw.InputSecureFileUploaded({
                id: id,
                parts: parts,
                md5Checksum: md5Checksum,
                fileHash: fileHash,
                secret: secret,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.parts !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.parts));
            }
            if (this.md5Checksum !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.md5Checksum));
            }
            if (this.fileHash !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.fileHash));
            }
            if (this.secret !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.secret));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputSecureFileUploaded = InputSecureFileUploaded;
    class InputSecureFile extends index_js_1.TLObject {
        id;
        accessHash;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputSecureFile';
            this.constructorId = 0x5367e5be;
            this.subclassOfId = 0xdac8adfc;
            this._slots = ['id', 'accessHash'];
            this.id = params.id;
            this.accessHash = params.accessHash;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.Long.read(_data);
            let accessHash = await index_js_1.Primitive.Long.read(_data);
            return new Raw.InputSecureFile({ id: id, accessHash: accessHash });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.accessHash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.accessHash));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputSecureFile = InputSecureFile;
    class SecureFileEmpty extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'SecureFileEmpty';
            this.constructorId = 0x64199744;
            this.subclassOfId = 0x5db8dbc7;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.SecureFileEmpty();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SecureFileEmpty = SecureFileEmpty;
    class SecureFile extends index_js_1.TLObject {
        id;
        accessHash;
        size;
        dcId;
        date;
        fileHash;
        secret;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'SecureFile';
            this.constructorId = 0x7d09c27e;
            this.subclassOfId = 0x5db8dbc7;
            this._slots = ['id', 'accessHash', 'size', 'dcId', 'date', 'fileHash', 'secret'];
            this.id = params.id;
            this.accessHash = params.accessHash;
            this.size = params.size;
            this.dcId = params.dcId;
            this.date = params.date;
            this.fileHash = params.fileHash;
            this.secret = params.secret;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.Long.read(_data);
            let accessHash = await index_js_1.Primitive.Long.read(_data);
            let size = await index_js_1.Primitive.Long.read(_data);
            let dcId = await index_js_1.Primitive.Int.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            let fileHash = await index_js_1.Primitive.Bytes.read(_data);
            let secret = await index_js_1.Primitive.Bytes.read(_data);
            return new Raw.SecureFile({
                id: id,
                accessHash: accessHash,
                size: size,
                dcId: dcId,
                date: date,
                fileHash: fileHash,
                secret: secret,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.accessHash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.accessHash));
            }
            if (this.size !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.size));
            }
            if (this.dcId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.dcId));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.fileHash !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.fileHash));
            }
            if (this.secret !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.secret));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SecureFile = SecureFile;
    class SecureData extends index_js_1.TLObject {
        data;
        dataHash;
        secret;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'SecureData';
            this.constructorId = 0x8aeabec3;
            this.subclassOfId = 0x7cd41eb4;
            this._slots = ['data', 'dataHash', 'secret'];
            this.data = params.data;
            this.dataHash = params.dataHash;
            this.secret = params.secret;
        }
        static async read(_data, ..._args) {
            let data = await index_js_1.Primitive.Bytes.read(_data);
            let dataHash = await index_js_1.Primitive.Bytes.read(_data);
            let secret = await index_js_1.Primitive.Bytes.read(_data);
            return new Raw.SecureData({ data: data, dataHash: dataHash, secret: secret });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.data !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.data));
            }
            if (this.dataHash !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.dataHash));
            }
            if (this.secret !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.secret));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SecureData = SecureData;
    class SecurePlainPhone extends index_js_1.TLObject {
        phone;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'SecurePlainPhone';
            this.constructorId = 0x7d6099dd;
            this.subclassOfId = 0x23b2afb6;
            this._slots = ['phone'];
            this.phone = params.phone;
        }
        static async read(_data, ..._args) {
            let phone = await index_js_1.Primitive.String.read(_data);
            return new Raw.SecurePlainPhone({ phone: phone });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.phone !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.phone));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SecurePlainPhone = SecurePlainPhone;
    class SecurePlainEmail extends index_js_1.TLObject {
        email;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'SecurePlainEmail';
            this.constructorId = 0x21ec5a5f;
            this.subclassOfId = 0x23b2afb6;
            this._slots = ['email'];
            this.email = params.email;
        }
        static async read(_data, ..._args) {
            let email = await index_js_1.Primitive.String.read(_data);
            return new Raw.SecurePlainEmail({ email: email });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.email !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.email));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SecurePlainEmail = SecurePlainEmail;
    class SecureValueTypePersonalDetails extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'SecureValueTypePersonalDetails';
            this.constructorId = 0x9d2a81e3;
            this.subclassOfId = 0x8893f596;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.SecureValueTypePersonalDetails();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SecureValueTypePersonalDetails = SecureValueTypePersonalDetails;
    class SecureValueTypePassport extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'SecureValueTypePassport';
            this.constructorId = 0x3dac6a00;
            this.subclassOfId = 0x8893f596;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.SecureValueTypePassport();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SecureValueTypePassport = SecureValueTypePassport;
    class SecureValueTypeDriverLicense extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'SecureValueTypeDriverLicense';
            this.constructorId = 0x6e425c4;
            this.subclassOfId = 0x8893f596;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.SecureValueTypeDriverLicense();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SecureValueTypeDriverLicense = SecureValueTypeDriverLicense;
    class SecureValueTypeIdentityCard extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'SecureValueTypeIdentityCard';
            this.constructorId = 0xa0d0744b;
            this.subclassOfId = 0x8893f596;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.SecureValueTypeIdentityCard();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SecureValueTypeIdentityCard = SecureValueTypeIdentityCard;
    class SecureValueTypeInternalPassport extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'SecureValueTypeInternalPassport';
            this.constructorId = 0x99a48f23;
            this.subclassOfId = 0x8893f596;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.SecureValueTypeInternalPassport();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SecureValueTypeInternalPassport = SecureValueTypeInternalPassport;
    class SecureValueTypeAddress extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'SecureValueTypeAddress';
            this.constructorId = 0xcbe31e26;
            this.subclassOfId = 0x8893f596;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.SecureValueTypeAddress();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SecureValueTypeAddress = SecureValueTypeAddress;
    class SecureValueTypeUtilityBill extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'SecureValueTypeUtilityBill';
            this.constructorId = 0xfc36954e;
            this.subclassOfId = 0x8893f596;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.SecureValueTypeUtilityBill();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SecureValueTypeUtilityBill = SecureValueTypeUtilityBill;
    class SecureValueTypeBankStatement extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'SecureValueTypeBankStatement';
            this.constructorId = 0x89137c0d;
            this.subclassOfId = 0x8893f596;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.SecureValueTypeBankStatement();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SecureValueTypeBankStatement = SecureValueTypeBankStatement;
    class SecureValueTypeRentalAgreement extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'SecureValueTypeRentalAgreement';
            this.constructorId = 0x8b883488;
            this.subclassOfId = 0x8893f596;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.SecureValueTypeRentalAgreement();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SecureValueTypeRentalAgreement = SecureValueTypeRentalAgreement;
    class SecureValueTypePassportRegistration extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'SecureValueTypePassportRegistration';
            this.constructorId = 0x99e3806a;
            this.subclassOfId = 0x8893f596;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.SecureValueTypePassportRegistration();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SecureValueTypePassportRegistration = SecureValueTypePassportRegistration;
    class SecureValueTypeTemporaryRegistration extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'SecureValueTypeTemporaryRegistration';
            this.constructorId = 0xea02ec33;
            this.subclassOfId = 0x8893f596;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.SecureValueTypeTemporaryRegistration();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SecureValueTypeTemporaryRegistration = SecureValueTypeTemporaryRegistration;
    class SecureValueTypePhone extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'SecureValueTypePhone';
            this.constructorId = 0xb320aadb;
            this.subclassOfId = 0x8893f596;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.SecureValueTypePhone();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SecureValueTypePhone = SecureValueTypePhone;
    class SecureValueTypeEmail extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'SecureValueTypeEmail';
            this.constructorId = 0x8e3ca7ee;
            this.subclassOfId = 0x8893f596;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.SecureValueTypeEmail();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SecureValueTypeEmail = SecureValueTypeEmail;
    class SecureValue extends index_js_1.TLObject {
        type;
        data;
        frontSide;
        reverseSide;
        selfie;
        translation;
        files;
        plainData;
        hash;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'SecureValue';
            this.constructorId = 0x187fa0ca;
            this.subclassOfId = 0x51138ae;
            this._slots = [
                'type',
                'data',
                'frontSide',
                'reverseSide',
                'selfie',
                'translation',
                'files',
                'plainData',
                'hash',
            ];
            this.type = params.type;
            this.data = params.data;
            this.frontSide = params.frontSide;
            this.reverseSide = params.reverseSide;
            this.selfie = params.selfie;
            this.translation = params.translation;
            this.files = params.files;
            this.plainData = params.plainData;
            this.hash = params.hash;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let type = await index_js_1.TLObject.read(_data);
            let data = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
            let frontSide = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : undefined;
            let reverseSide = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
            let selfie = flags & (1 << 3) ? await index_js_1.TLObject.read(_data) : undefined;
            let translation = flags & (1 << 6) ? await index_js_1.TLObject.read(_data) : [];
            let files = flags & (1 << 4) ? await index_js_1.TLObject.read(_data) : [];
            let plainData = flags & (1 << 5) ? await index_js_1.TLObject.read(_data) : undefined;
            let hash = await index_js_1.Primitive.Bytes.read(_data);
            return new Raw.SecureValue({
                type: type,
                data: data,
                frontSide: frontSide,
                reverseSide: reverseSide,
                selfie: selfie,
                translation: translation,
                files: files,
                plainData: plainData,
                hash: hash,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.data !== undefined ? 1 << 0 : 0;
            flags |= this.frontSide !== undefined ? 1 << 1 : 0;
            flags |= this.reverseSide !== undefined ? 1 << 2 : 0;
            flags |= this.selfie !== undefined ? 1 << 3 : 0;
            flags |= this.translation ? 1 << 6 : 0;
            flags |= this.files ? 1 << 4 : 0;
            flags |= this.plainData !== undefined ? 1 << 5 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.type !== undefined) {
                b.write(this.type.write());
            }
            if (this.data !== undefined) {
                b.write(this.data.write());
            }
            if (this.frontSide !== undefined) {
                b.write(this.frontSide.write());
            }
            if (this.reverseSide !== undefined) {
                b.write(this.reverseSide.write());
            }
            if (this.selfie !== undefined) {
                b.write(this.selfie.write());
            }
            if (this.translation) {
                b.write(index_js_1.Primitive.Vector.write(this.translation));
            }
            if (this.files) {
                b.write(index_js_1.Primitive.Vector.write(this.files));
            }
            if (this.plainData !== undefined) {
                b.write(this.plainData.write());
            }
            if (this.hash !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.hash));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SecureValue = SecureValue;
    class InputSecureValue extends index_js_1.TLObject {
        type;
        data;
        frontSide;
        reverseSide;
        selfie;
        translation;
        files;
        plainData;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputSecureValue';
            this.constructorId = 0xdb21d0a7;
            this.subclassOfId = 0xb49da1fc;
            this._slots = [
                'type',
                'data',
                'frontSide',
                'reverseSide',
                'selfie',
                'translation',
                'files',
                'plainData',
            ];
            this.type = params.type;
            this.data = params.data;
            this.frontSide = params.frontSide;
            this.reverseSide = params.reverseSide;
            this.selfie = params.selfie;
            this.translation = params.translation;
            this.files = params.files;
            this.plainData = params.plainData;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let type = await index_js_1.TLObject.read(_data);
            let data = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
            let frontSide = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : undefined;
            let reverseSide = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
            let selfie = flags & (1 << 3) ? await index_js_1.TLObject.read(_data) : undefined;
            let translation = flags & (1 << 6) ? await index_js_1.TLObject.read(_data) : [];
            let files = flags & (1 << 4) ? await index_js_1.TLObject.read(_data) : [];
            let plainData = flags & (1 << 5) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.InputSecureValue({
                type: type,
                data: data,
                frontSide: frontSide,
                reverseSide: reverseSide,
                selfie: selfie,
                translation: translation,
                files: files,
                plainData: plainData,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.data !== undefined ? 1 << 0 : 0;
            flags |= this.frontSide !== undefined ? 1 << 1 : 0;
            flags |= this.reverseSide !== undefined ? 1 << 2 : 0;
            flags |= this.selfie !== undefined ? 1 << 3 : 0;
            flags |= this.translation ? 1 << 6 : 0;
            flags |= this.files ? 1 << 4 : 0;
            flags |= this.plainData !== undefined ? 1 << 5 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.type !== undefined) {
                b.write(this.type.write());
            }
            if (this.data !== undefined) {
                b.write(this.data.write());
            }
            if (this.frontSide !== undefined) {
                b.write(this.frontSide.write());
            }
            if (this.reverseSide !== undefined) {
                b.write(this.reverseSide.write());
            }
            if (this.selfie !== undefined) {
                b.write(this.selfie.write());
            }
            if (this.translation) {
                b.write(index_js_1.Primitive.Vector.write(this.translation));
            }
            if (this.files) {
                b.write(index_js_1.Primitive.Vector.write(this.files));
            }
            if (this.plainData !== undefined) {
                b.write(this.plainData.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputSecureValue = InputSecureValue;
    class SecureValueHash extends index_js_1.TLObject {
        type;
        hash;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'SecureValueHash';
            this.constructorId = 0xed1ecdb0;
            this.subclassOfId = 0xd5f5c007;
            this._slots = ['type', 'hash'];
            this.type = params.type;
            this.hash = params.hash;
        }
        static async read(_data, ..._args) {
            let type = await index_js_1.TLObject.read(_data);
            let hash = await index_js_1.Primitive.Bytes.read(_data);
            return new Raw.SecureValueHash({ type: type, hash: hash });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.type !== undefined) {
                b.write(this.type.write());
            }
            if (this.hash !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.hash));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SecureValueHash = SecureValueHash;
    class SecureValueErrorData extends index_js_1.TLObject {
        type;
        dataHash;
        field;
        text;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'SecureValueErrorData';
            this.constructorId = 0xe8a40bd9;
            this.subclassOfId = 0x6075fce;
            this._slots = ['type', 'dataHash', 'field', 'text'];
            this.type = params.type;
            this.dataHash = params.dataHash;
            this.field = params.field;
            this.text = params.text;
        }
        static async read(_data, ..._args) {
            let type = await index_js_1.TLObject.read(_data);
            let dataHash = await index_js_1.Primitive.Bytes.read(_data);
            let field = await index_js_1.Primitive.String.read(_data);
            let text = await index_js_1.Primitive.String.read(_data);
            return new Raw.SecureValueErrorData({
                type: type,
                dataHash: dataHash,
                field: field,
                text: text,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.type !== undefined) {
                b.write(this.type.write());
            }
            if (this.dataHash !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.dataHash));
            }
            if (this.field !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.field));
            }
            if (this.text !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.text));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SecureValueErrorData = SecureValueErrorData;
    class SecureValueErrorFrontSide extends index_js_1.TLObject {
        type;
        fileHash;
        text;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'SecureValueErrorFrontSide';
            this.constructorId = 0xbe3dfa;
            this.subclassOfId = 0x6075fce;
            this._slots = ['type', 'fileHash', 'text'];
            this.type = params.type;
            this.fileHash = params.fileHash;
            this.text = params.text;
        }
        static async read(_data, ..._args) {
            let type = await index_js_1.TLObject.read(_data);
            let fileHash = await index_js_1.Primitive.Bytes.read(_data);
            let text = await index_js_1.Primitive.String.read(_data);
            return new Raw.SecureValueErrorFrontSide({ type: type, fileHash: fileHash, text: text });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.type !== undefined) {
                b.write(this.type.write());
            }
            if (this.fileHash !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.fileHash));
            }
            if (this.text !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.text));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SecureValueErrorFrontSide = SecureValueErrorFrontSide;
    class SecureValueErrorReverseSide extends index_js_1.TLObject {
        type;
        fileHash;
        text;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'SecureValueErrorReverseSide';
            this.constructorId = 0x868a2aa5;
            this.subclassOfId = 0x6075fce;
            this._slots = ['type', 'fileHash', 'text'];
            this.type = params.type;
            this.fileHash = params.fileHash;
            this.text = params.text;
        }
        static async read(_data, ..._args) {
            let type = await index_js_1.TLObject.read(_data);
            let fileHash = await index_js_1.Primitive.Bytes.read(_data);
            let text = await index_js_1.Primitive.String.read(_data);
            return new Raw.SecureValueErrorReverseSide({ type: type, fileHash: fileHash, text: text });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.type !== undefined) {
                b.write(this.type.write());
            }
            if (this.fileHash !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.fileHash));
            }
            if (this.text !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.text));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SecureValueErrorReverseSide = SecureValueErrorReverseSide;
    class SecureValueErrorSelfie extends index_js_1.TLObject {
        type;
        fileHash;
        text;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'SecureValueErrorSelfie';
            this.constructorId = 0xe537ced6;
            this.subclassOfId = 0x6075fce;
            this._slots = ['type', 'fileHash', 'text'];
            this.type = params.type;
            this.fileHash = params.fileHash;
            this.text = params.text;
        }
        static async read(_data, ..._args) {
            let type = await index_js_1.TLObject.read(_data);
            let fileHash = await index_js_1.Primitive.Bytes.read(_data);
            let text = await index_js_1.Primitive.String.read(_data);
            return new Raw.SecureValueErrorSelfie({ type: type, fileHash: fileHash, text: text });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.type !== undefined) {
                b.write(this.type.write());
            }
            if (this.fileHash !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.fileHash));
            }
            if (this.text !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.text));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SecureValueErrorSelfie = SecureValueErrorSelfie;
    class SecureValueErrorFile extends index_js_1.TLObject {
        type;
        fileHash;
        text;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'SecureValueErrorFile';
            this.constructorId = 0x7a700873;
            this.subclassOfId = 0x6075fce;
            this._slots = ['type', 'fileHash', 'text'];
            this.type = params.type;
            this.fileHash = params.fileHash;
            this.text = params.text;
        }
        static async read(_data, ..._args) {
            let type = await index_js_1.TLObject.read(_data);
            let fileHash = await index_js_1.Primitive.Bytes.read(_data);
            let text = await index_js_1.Primitive.String.read(_data);
            return new Raw.SecureValueErrorFile({ type: type, fileHash: fileHash, text: text });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.type !== undefined) {
                b.write(this.type.write());
            }
            if (this.fileHash !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.fileHash));
            }
            if (this.text !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.text));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SecureValueErrorFile = SecureValueErrorFile;
    class SecureValueErrorFiles extends index_js_1.TLObject {
        type;
        fileHash;
        text;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'SecureValueErrorFiles';
            this.constructorId = 0x666220e9;
            this.subclassOfId = 0x6075fce;
            this._slots = ['type', 'fileHash', 'text'];
            this.type = params.type;
            this.fileHash = params.fileHash;
            this.text = params.text;
        }
        static async read(_data, ..._args) {
            let type = await index_js_1.TLObject.read(_data);
            let fileHash = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Bytes);
            let text = await index_js_1.Primitive.String.read(_data);
            return new Raw.SecureValueErrorFiles({ type: type, fileHash: fileHash, text: text });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.type !== undefined) {
                b.write(this.type.write());
            }
            if (this.fileHash) {
                b.write(index_js_1.Primitive.Vector.write(this.fileHash, index_js_1.Primitive.Bytes));
            }
            if (this.text !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.text));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SecureValueErrorFiles = SecureValueErrorFiles;
    class SecureValueError extends index_js_1.TLObject {
        type;
        hash;
        text;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'SecureValueError';
            this.constructorId = 0x869d758f;
            this.subclassOfId = 0x6075fce;
            this._slots = ['type', 'hash', 'text'];
            this.type = params.type;
            this.hash = params.hash;
            this.text = params.text;
        }
        static async read(_data, ..._args) {
            let type = await index_js_1.TLObject.read(_data);
            let hash = await index_js_1.Primitive.Bytes.read(_data);
            let text = await index_js_1.Primitive.String.read(_data);
            return new Raw.SecureValueError({ type: type, hash: hash, text: text });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.type !== undefined) {
                b.write(this.type.write());
            }
            if (this.hash !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.hash));
            }
            if (this.text !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.text));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SecureValueError = SecureValueError;
    class SecureValueErrorTranslationFile extends index_js_1.TLObject {
        type;
        fileHash;
        text;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'SecureValueErrorTranslationFile';
            this.constructorId = 0xa1144770;
            this.subclassOfId = 0x6075fce;
            this._slots = ['type', 'fileHash', 'text'];
            this.type = params.type;
            this.fileHash = params.fileHash;
            this.text = params.text;
        }
        static async read(_data, ..._args) {
            let type = await index_js_1.TLObject.read(_data);
            let fileHash = await index_js_1.Primitive.Bytes.read(_data);
            let text = await index_js_1.Primitive.String.read(_data);
            return new Raw.SecureValueErrorTranslationFile({
                type: type,
                fileHash: fileHash,
                text: text,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.type !== undefined) {
                b.write(this.type.write());
            }
            if (this.fileHash !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.fileHash));
            }
            if (this.text !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.text));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SecureValueErrorTranslationFile = SecureValueErrorTranslationFile;
    class SecureValueErrorTranslationFiles extends index_js_1.TLObject {
        type;
        fileHash;
        text;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'SecureValueErrorTranslationFiles';
            this.constructorId = 0x34636dd8;
            this.subclassOfId = 0x6075fce;
            this._slots = ['type', 'fileHash', 'text'];
            this.type = params.type;
            this.fileHash = params.fileHash;
            this.text = params.text;
        }
        static async read(_data, ..._args) {
            let type = await index_js_1.TLObject.read(_data);
            let fileHash = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Bytes);
            let text = await index_js_1.Primitive.String.read(_data);
            return new Raw.SecureValueErrorTranslationFiles({
                type: type,
                fileHash: fileHash,
                text: text,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.type !== undefined) {
                b.write(this.type.write());
            }
            if (this.fileHash) {
                b.write(index_js_1.Primitive.Vector.write(this.fileHash, index_js_1.Primitive.Bytes));
            }
            if (this.text !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.text));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SecureValueErrorTranslationFiles = SecureValueErrorTranslationFiles;
    class SecureCredentialsEncrypted extends index_js_1.TLObject {
        data;
        hash;
        secret;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'SecureCredentialsEncrypted';
            this.constructorId = 0x33f0ea47;
            this.subclassOfId = 0x94dc7633;
            this._slots = ['data', 'hash', 'secret'];
            this.data = params.data;
            this.hash = params.hash;
            this.secret = params.secret;
        }
        static async read(_data, ..._args) {
            let data = await index_js_1.Primitive.Bytes.read(_data);
            let hash = await index_js_1.Primitive.Bytes.read(_data);
            let secret = await index_js_1.Primitive.Bytes.read(_data);
            return new Raw.SecureCredentialsEncrypted({ data: data, hash: hash, secret: secret });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.data !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.data));
            }
            if (this.hash !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.hash));
            }
            if (this.secret !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.secret));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SecureCredentialsEncrypted = SecureCredentialsEncrypted;
    class SavedPhoneContact extends index_js_1.TLObject {
        phone;
        firstName;
        lastName;
        date;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'SavedPhoneContact';
            this.constructorId = 0x1142bd56;
            this.subclassOfId = 0x6db98c4;
            this._slots = ['phone', 'firstName', 'lastName', 'date'];
            this.phone = params.phone;
            this.firstName = params.firstName;
            this.lastName = params.lastName;
            this.date = params.date;
        }
        static async read(_data, ..._args) {
            let phone = await index_js_1.Primitive.String.read(_data);
            let firstName = await index_js_1.Primitive.String.read(_data);
            let lastName = await index_js_1.Primitive.String.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            return new Raw.SavedPhoneContact({
                phone: phone,
                firstName: firstName,
                lastName: lastName,
                date: date,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.phone !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.phone));
            }
            if (this.firstName !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.firstName));
            }
            if (this.lastName !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.lastName));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SavedPhoneContact = SavedPhoneContact;
    class PasswordKdfAlgoUnknown extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'PasswordKdfAlgoUnknown';
            this.constructorId = 0xd45ab096;
            this.subclassOfId = 0x37bcf5cc;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.PasswordKdfAlgoUnknown();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PasswordKdfAlgoUnknown = PasswordKdfAlgoUnknown;
    class PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow extends index_js_1.TLObject {
        salt1;
        salt2;
        g;
        p;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow';
            this.constructorId = 0x3a912d4a;
            this.subclassOfId = 0x37bcf5cc;
            this._slots = ['salt1', 'salt2', 'g', 'p'];
            this.salt1 = params.salt1;
            this.salt2 = params.salt2;
            this.g = params.g;
            this.p = params.p;
        }
        static async read(_data, ..._args) {
            let salt1 = await index_js_1.Primitive.Bytes.read(_data);
            let salt2 = await index_js_1.Primitive.Bytes.read(_data);
            let g = await index_js_1.Primitive.Int.read(_data);
            let p = await index_js_1.Primitive.Bytes.read(_data);
            return new Raw.PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow({
                salt1: salt1,
                salt2: salt2,
                g: g,
                p: p,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.salt1 !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.salt1));
            }
            if (this.salt2 !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.salt2));
            }
            if (this.g !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.g));
            }
            if (this.p !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.p));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow = PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow;
    class SecurePasswordKdfAlgoUnknown extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'SecurePasswordKdfAlgoUnknown';
            this.constructorId = 0x4a8537;
            this.subclassOfId = 0x77262943;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.SecurePasswordKdfAlgoUnknown();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SecurePasswordKdfAlgoUnknown = SecurePasswordKdfAlgoUnknown;
    class SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000 extends index_js_1.TLObject {
        salt;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000';
            this.constructorId = 0xbbf2dda0;
            this.subclassOfId = 0x77262943;
            this._slots = ['salt'];
            this.salt = params.salt;
        }
        static async read(_data, ..._args) {
            let salt = await index_js_1.Primitive.Bytes.read(_data);
            return new Raw.SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000({ salt: salt });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.salt !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.salt));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000 = SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000;
    class SecurePasswordKdfAlgoSHA512 extends index_js_1.TLObject {
        salt;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'SecurePasswordKdfAlgoSHA512';
            this.constructorId = 0x86471d92;
            this.subclassOfId = 0x77262943;
            this._slots = ['salt'];
            this.salt = params.salt;
        }
        static async read(_data, ..._args) {
            let salt = await index_js_1.Primitive.Bytes.read(_data);
            return new Raw.SecurePasswordKdfAlgoSHA512({ salt: salt });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.salt !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.salt));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SecurePasswordKdfAlgoSHA512 = SecurePasswordKdfAlgoSHA512;
    class SecureSecretSettings extends index_js_1.TLObject {
        secureAlgo;
        secureSecret;
        secureSecretId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'SecureSecretSettings';
            this.constructorId = 0x1527bcac;
            this.subclassOfId = 0xc6c802fb;
            this._slots = ['secureAlgo', 'secureSecret', 'secureSecretId'];
            this.secureAlgo = params.secureAlgo;
            this.secureSecret = params.secureSecret;
            this.secureSecretId = params.secureSecretId;
        }
        static async read(_data, ..._args) {
            let secureAlgo = await index_js_1.TLObject.read(_data);
            let secureSecret = await index_js_1.Primitive.Bytes.read(_data);
            let secureSecretId = await index_js_1.Primitive.Long.read(_data);
            return new Raw.SecureSecretSettings({
                secureAlgo: secureAlgo,
                secureSecret: secureSecret,
                secureSecretId: secureSecretId,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.secureAlgo !== undefined) {
                b.write(this.secureAlgo.write());
            }
            if (this.secureSecret !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.secureSecret));
            }
            if (this.secureSecretId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.secureSecretId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SecureSecretSettings = SecureSecretSettings;
    class InputCheckPasswordEmpty extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InputCheckPasswordEmpty';
            this.constructorId = 0x9880f658;
            this.subclassOfId = 0xd41af560;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InputCheckPasswordEmpty();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputCheckPasswordEmpty = InputCheckPasswordEmpty;
    class InputCheckPasswordSRP extends index_js_1.TLObject {
        srpId;
        a;
        m1;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputCheckPasswordSRP';
            this.constructorId = 0xd27ff082;
            this.subclassOfId = 0xd41af560;
            this._slots = ['srpId', 'a', 'm1'];
            this.srpId = params.srpId;
            this.a = params.a;
            this.m1 = params.m1;
        }
        static async read(_data, ..._args) {
            let srpId = await index_js_1.Primitive.Long.read(_data);
            let a = await index_js_1.Primitive.Bytes.read(_data);
            let m1 = await index_js_1.Primitive.Bytes.read(_data);
            return new Raw.InputCheckPasswordSRP({ srpId: srpId, a: a, m1: m1 });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.srpId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.srpId));
            }
            if (this.a !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.a));
            }
            if (this.m1 !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.m1));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputCheckPasswordSRP = InputCheckPasswordSRP;
    class SecureRequiredType extends index_js_1.TLObject {
        nativeNames;
        selfieRequired;
        translationRequired;
        type;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'SecureRequiredType';
            this.constructorId = 0x829d99da;
            this.subclassOfId = 0x7c7b420a;
            this._slots = ['nativeNames', 'selfieRequired', 'translationRequired', 'type'];
            this.nativeNames = params.nativeNames;
            this.selfieRequired = params.selfieRequired;
            this.translationRequired = params.translationRequired;
            this.type = params.type;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let nativeNames = flags & (1 << 0) ? true : false;
            let selfieRequired = flags & (1 << 1) ? true : false;
            let translationRequired = flags & (1 << 2) ? true : false;
            let type = await index_js_1.TLObject.read(_data);
            return new Raw.SecureRequiredType({
                nativeNames: nativeNames,
                selfieRequired: selfieRequired,
                translationRequired: translationRequired,
                type: type,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.nativeNames ? 1 << 0 : 0;
            flags |= this.selfieRequired ? 1 << 1 : 0;
            flags |= this.translationRequired ? 1 << 2 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.type !== undefined) {
                b.write(this.type.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SecureRequiredType = SecureRequiredType;
    class SecureRequiredTypeOneOf extends index_js_1.TLObject {
        types;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'SecureRequiredTypeOneOf';
            this.constructorId = 0x27477b4;
            this.subclassOfId = 0x7c7b420a;
            this._slots = ['types'];
            this.types = params.types;
        }
        static async read(_data, ..._args) {
            let types = await index_js_1.TLObject.read(_data);
            return new Raw.SecureRequiredTypeOneOf({ types: types });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.types) {
                b.write(index_js_1.Primitive.Vector.write(this.types));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SecureRequiredTypeOneOf = SecureRequiredTypeOneOf;
    class InputAppEvent extends index_js_1.TLObject {
        time;
        type;
        peer;
        data;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputAppEvent';
            this.constructorId = 0x1d1b1245;
            this.subclassOfId = 0x89322106;
            this._slots = ['time', 'type', 'peer', 'data'];
            this.time = params.time;
            this.type = params.type;
            this.peer = params.peer;
            this.data = params.data;
        }
        static async read(_data, ..._args) {
            let time = await index_js_1.Primitive.Double.read(_data);
            let type = await index_js_1.Primitive.String.read(_data);
            let peer = await index_js_1.Primitive.Long.read(_data);
            let data = await index_js_1.TLObject.read(_data);
            return new Raw.InputAppEvent({ time: time, type: type, peer: peer, data: data });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.time !== undefined) {
                b.write(index_js_1.Primitive.Double.write(this.time));
            }
            if (this.type !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.type));
            }
            if (this.peer !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.peer));
            }
            if (this.data !== undefined) {
                b.write(this.data.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputAppEvent = InputAppEvent;
    class JsonObjectValue extends index_js_1.TLObject {
        key;
        value;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'JsonObjectValue';
            this.constructorId = 0xc0de1bd9;
            this.subclassOfId = 0x937fceb9;
            this._slots = ['key', 'value'];
            this.key = params.key;
            this.value = params.value;
        }
        static async read(_data, ..._args) {
            let key = await index_js_1.Primitive.String.read(_data);
            let value = await index_js_1.TLObject.read(_data);
            return new Raw.JsonObjectValue({ key: key, value: value });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.key !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.key));
            }
            if (this.value !== undefined) {
                b.write(this.value.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.JsonObjectValue = JsonObjectValue;
    class JsonNull extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'JsonNull';
            this.constructorId = 0x3f6d7b68;
            this.subclassOfId = 0xeb9987b3;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.JsonNull();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.JsonNull = JsonNull;
    class JsonBool extends index_js_1.TLObject {
        value;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'JsonBool';
            this.constructorId = 0xc7345e6a;
            this.subclassOfId = 0xeb9987b3;
            this._slots = ['value'];
            this.value = params.value;
        }
        static async read(_data, ..._args) {
            let value = await index_js_1.Primitive.Bool.read(_data);
            return new Raw.JsonBool({ value: value });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.value !== undefined) {
                b.write(index_js_1.Primitive.Bool.write(this.value));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.JsonBool = JsonBool;
    class JsonNumber extends index_js_1.TLObject {
        value;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'JsonNumber';
            this.constructorId = 0x2be0dfa4;
            this.subclassOfId = 0xeb9987b3;
            this._slots = ['value'];
            this.value = params.value;
        }
        static async read(_data, ..._args) {
            let value = await index_js_1.Primitive.Double.read(_data);
            return new Raw.JsonNumber({ value: value });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.value !== undefined) {
                b.write(index_js_1.Primitive.Double.write(this.value));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.JsonNumber = JsonNumber;
    class JsonString extends index_js_1.TLObject {
        value;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'JsonString';
            this.constructorId = 0xb71e767a;
            this.subclassOfId = 0xeb9987b3;
            this._slots = ['value'];
            this.value = params.value;
        }
        static async read(_data, ..._args) {
            let value = await index_js_1.Primitive.String.read(_data);
            return new Raw.JsonString({ value: value });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.value !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.value));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.JsonString = JsonString;
    class JsonArray extends index_js_1.TLObject {
        value;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'JsonArray';
            this.constructorId = 0xf7444763;
            this.subclassOfId = 0xeb9987b3;
            this._slots = ['value'];
            this.value = params.value;
        }
        static async read(_data, ..._args) {
            let value = await index_js_1.TLObject.read(_data);
            return new Raw.JsonArray({ value: value });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.value) {
                b.write(index_js_1.Primitive.Vector.write(this.value));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.JsonArray = JsonArray;
    class JsonObject extends index_js_1.TLObject {
        value;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'JsonObject';
            this.constructorId = 0x99c1d49d;
            this.subclassOfId = 0xeb9987b3;
            this._slots = ['value'];
            this.value = params.value;
        }
        static async read(_data, ..._args) {
            let value = await index_js_1.TLObject.read(_data);
            return new Raw.JsonObject({ value: value });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.value) {
                b.write(index_js_1.Primitive.Vector.write(this.value));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.JsonObject = JsonObject;
    class PageTableCell extends index_js_1.TLObject {
        header;
        alignCenter;
        alignRight;
        valignMiddle;
        valignBottom;
        text;
        colspan;
        rowspan;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PageTableCell';
            this.constructorId = 0x34566b6a;
            this.subclassOfId = 0xb0eb3054;
            this._slots = [
                'header',
                'alignCenter',
                'alignRight',
                'valignMiddle',
                'valignBottom',
                'text',
                'colspan',
                'rowspan',
            ];
            this.header = params.header;
            this.alignCenter = params.alignCenter;
            this.alignRight = params.alignRight;
            this.valignMiddle = params.valignMiddle;
            this.valignBottom = params.valignBottom;
            this.text = params.text;
            this.colspan = params.colspan;
            this.rowspan = params.rowspan;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let header = flags & (1 << 0) ? true : false;
            let alignCenter = flags & (1 << 3) ? true : false;
            let alignRight = flags & (1 << 4) ? true : false;
            let valignMiddle = flags & (1 << 5) ? true : false;
            let valignBottom = flags & (1 << 6) ? true : false;
            let text = flags & (1 << 7) ? await index_js_1.TLObject.read(_data) : undefined;
            let colspan = flags & (1 << 1) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let rowspan = flags & (1 << 2) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            return new Raw.PageTableCell({
                header: header,
                alignCenter: alignCenter,
                alignRight: alignRight,
                valignMiddle: valignMiddle,
                valignBottom: valignBottom,
                text: text,
                colspan: colspan,
                rowspan: rowspan,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.header ? 1 << 0 : 0;
            flags |= this.alignCenter ? 1 << 3 : 0;
            flags |= this.alignRight ? 1 << 4 : 0;
            flags |= this.valignMiddle ? 1 << 5 : 0;
            flags |= this.valignBottom ? 1 << 6 : 0;
            flags |= this.text !== undefined ? 1 << 7 : 0;
            flags |= this.colspan !== undefined ? 1 << 1 : 0;
            flags |= this.rowspan !== undefined ? 1 << 2 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.text !== undefined) {
                b.write(this.text.write());
            }
            if (this.colspan !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.colspan));
            }
            if (this.rowspan !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.rowspan));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PageTableCell = PageTableCell;
    class PageTableRow extends index_js_1.TLObject {
        cells;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PageTableRow';
            this.constructorId = 0xe0c0c5e5;
            this.subclassOfId = 0x59acee11;
            this._slots = ['cells'];
            this.cells = params.cells;
        }
        static async read(_data, ..._args) {
            let cells = await index_js_1.TLObject.read(_data);
            return new Raw.PageTableRow({ cells: cells });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.cells) {
                b.write(index_js_1.Primitive.Vector.write(this.cells));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PageTableRow = PageTableRow;
    class PageCaption extends index_js_1.TLObject {
        text;
        credit;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PageCaption';
            this.constructorId = 0x6f747657;
            this.subclassOfId = 0x29b8eeb3;
            this._slots = ['text', 'credit'];
            this.text = params.text;
            this.credit = params.credit;
        }
        static async read(_data, ..._args) {
            let text = await index_js_1.TLObject.read(_data);
            let credit = await index_js_1.TLObject.read(_data);
            return new Raw.PageCaption({ text: text, credit: credit });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.text !== undefined) {
                b.write(this.text.write());
            }
            if (this.credit !== undefined) {
                b.write(this.credit.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PageCaption = PageCaption;
    class PageListItemText extends index_js_1.TLObject {
        text;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PageListItemText';
            this.constructorId = 0xb92fb6cd;
            this.subclassOfId = 0x8caebcb1;
            this._slots = ['text'];
            this.text = params.text;
        }
        static async read(_data, ..._args) {
            let text = await index_js_1.TLObject.read(_data);
            return new Raw.PageListItemText({ text: text });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.text !== undefined) {
                b.write(this.text.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PageListItemText = PageListItemText;
    class PageListItemBlocks extends index_js_1.TLObject {
        blocks;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PageListItemBlocks';
            this.constructorId = 0x25e073fc;
            this.subclassOfId = 0x8caebcb1;
            this._slots = ['blocks'];
            this.blocks = params.blocks;
        }
        static async read(_data, ..._args) {
            let blocks = await index_js_1.TLObject.read(_data);
            return new Raw.PageListItemBlocks({ blocks: blocks });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.blocks) {
                b.write(index_js_1.Primitive.Vector.write(this.blocks));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PageListItemBlocks = PageListItemBlocks;
    class PageListOrderedItemText extends index_js_1.TLObject {
        num;
        text;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PageListOrderedItemText';
            this.constructorId = 0x5e068047;
            this.subclassOfId = 0xeeda0eb8;
            this._slots = ['num', 'text'];
            this.num = params.num;
            this.text = params.text;
        }
        static async read(_data, ..._args) {
            let num = await index_js_1.Primitive.String.read(_data);
            let text = await index_js_1.TLObject.read(_data);
            return new Raw.PageListOrderedItemText({ num: num, text: text });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.num !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.num));
            }
            if (this.text !== undefined) {
                b.write(this.text.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PageListOrderedItemText = PageListOrderedItemText;
    class PageListOrderedItemBlocks extends index_js_1.TLObject {
        num;
        blocks;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PageListOrderedItemBlocks';
            this.constructorId = 0x98dd8936;
            this.subclassOfId = 0xeeda0eb8;
            this._slots = ['num', 'blocks'];
            this.num = params.num;
            this.blocks = params.blocks;
        }
        static async read(_data, ..._args) {
            let num = await index_js_1.Primitive.String.read(_data);
            let blocks = await index_js_1.TLObject.read(_data);
            return new Raw.PageListOrderedItemBlocks({ num: num, blocks: blocks });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.num !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.num));
            }
            if (this.blocks) {
                b.write(index_js_1.Primitive.Vector.write(this.blocks));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PageListOrderedItemBlocks = PageListOrderedItemBlocks;
    class PageRelatedArticle extends index_js_1.TLObject {
        url;
        webpageId;
        title;
        description;
        photoId;
        author;
        publishedDate;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PageRelatedArticle';
            this.constructorId = 0xb390dc08;
            this.subclassOfId = 0x36d05822;
            this._slots = [
                'url',
                'webpageId',
                'title',
                'description',
                'photoId',
                'author',
                'publishedDate',
            ];
            this.url = params.url;
            this.webpageId = params.webpageId;
            this.title = params.title;
            this.description = params.description;
            this.photoId = params.photoId;
            this.author = params.author;
            this.publishedDate = params.publishedDate;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let url = await index_js_1.Primitive.String.read(_data);
            let webpageId = await index_js_1.Primitive.Long.read(_data);
            let title = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let description = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let photoId = flags & (1 << 2) ? await index_js_1.Primitive.Long.read(_data) : undefined;
            let author = flags & (1 << 3) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let publishedDate = flags & (1 << 4) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            return new Raw.PageRelatedArticle({
                url: url,
                webpageId: webpageId,
                title: title,
                description: description,
                photoId: photoId,
                author: author,
                publishedDate: publishedDate,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.title !== undefined ? 1 << 0 : 0;
            flags |= this.description !== undefined ? 1 << 1 : 0;
            flags |= this.photoId !== undefined ? 1 << 2 : 0;
            flags |= this.author !== undefined ? 1 << 3 : 0;
            flags |= this.publishedDate !== undefined ? 1 << 4 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.url !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.url));
            }
            if (this.webpageId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.webpageId));
            }
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            if (this.description !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.description));
            }
            if (this.photoId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.photoId));
            }
            if (this.author !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.author));
            }
            if (this.publishedDate !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.publishedDate));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PageRelatedArticle = PageRelatedArticle;
    class Page extends index_js_1.TLObject {
        part;
        rtl;
        v2;
        url;
        blocks;
        photos;
        documents;
        views;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'Page';
            this.constructorId = 0x98657f0d;
            this.subclassOfId = 0xb438191e;
            this._slots = ['part', 'rtl', 'v2', 'url', 'blocks', 'photos', 'documents', 'views'];
            this.part = params.part;
            this.rtl = params.rtl;
            this.v2 = params.v2;
            this.url = params.url;
            this.blocks = params.blocks;
            this.photos = params.photos;
            this.documents = params.documents;
            this.views = params.views;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let part = flags & (1 << 0) ? true : false;
            let rtl = flags & (1 << 1) ? true : false;
            let v2 = flags & (1 << 2) ? true : false;
            let url = await index_js_1.Primitive.String.read(_data);
            let blocks = await index_js_1.TLObject.read(_data);
            let photos = await index_js_1.TLObject.read(_data);
            let documents = await index_js_1.TLObject.read(_data);
            let views = flags & (1 << 3) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            return new Raw.Page({
                part: part,
                rtl: rtl,
                v2: v2,
                url: url,
                blocks: blocks,
                photos: photos,
                documents: documents,
                views: views,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.part ? 1 << 0 : 0;
            flags |= this.rtl ? 1 << 1 : 0;
            flags |= this.v2 ? 1 << 2 : 0;
            flags |= this.views !== undefined ? 1 << 3 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.url !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.url));
            }
            if (this.blocks) {
                b.write(index_js_1.Primitive.Vector.write(this.blocks));
            }
            if (this.photos) {
                b.write(index_js_1.Primitive.Vector.write(this.photos));
            }
            if (this.documents) {
                b.write(index_js_1.Primitive.Vector.write(this.documents));
            }
            if (this.views !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.views));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.Page = Page;
    class PollAnswer extends index_js_1.TLObject {
        text;
        option;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PollAnswer';
            this.constructorId = 0xff16e2ca;
            this.subclassOfId = 0x7ea5dd9e;
            this._slots = ['text', 'option'];
            this.text = params.text;
            this.option = params.option;
        }
        static async read(_data, ..._args) {
            let text = await index_js_1.TLObject.read(_data);
            let option = await index_js_1.Primitive.Bytes.read(_data);
            return new Raw.PollAnswer({ text: text, option: option });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.text !== undefined) {
                b.write(this.text.write());
            }
            if (this.option !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.option));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PollAnswer = PollAnswer;
    class Poll extends index_js_1.TLObject {
        id;
        closed;
        publicVoters;
        multipleChoice;
        quiz;
        question;
        answers;
        closePeriod;
        closeDate;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'Poll';
            this.constructorId = 0x58747131;
            this.subclassOfId = 0x248e557b;
            this._slots = [
                'id',
                'closed',
                'publicVoters',
                'multipleChoice',
                'quiz',
                'question',
                'answers',
                'closePeriod',
                'closeDate',
            ];
            this.id = params.id;
            this.closed = params.closed;
            this.publicVoters = params.publicVoters;
            this.multipleChoice = params.multipleChoice;
            this.quiz = params.quiz;
            this.question = params.question;
            this.answers = params.answers;
            this.closePeriod = params.closePeriod;
            this.closeDate = params.closeDate;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.Long.read(_data);
            let flags = await index_js_1.Primitive.Int.read(_data);
            let closed = flags & (1 << 0) ? true : false;
            let publicVoters = flags & (1 << 1) ? true : false;
            let multipleChoice = flags & (1 << 2) ? true : false;
            let quiz = flags & (1 << 3) ? true : false;
            let question = await index_js_1.TLObject.read(_data);
            let answers = await index_js_1.TLObject.read(_data);
            let closePeriod = flags & (1 << 4) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let closeDate = flags & (1 << 5) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            return new Raw.Poll({
                id: id,
                closed: closed,
                publicVoters: publicVoters,
                multipleChoice: multipleChoice,
                quiz: quiz,
                question: question,
                answers: answers,
                closePeriod: closePeriod,
                closeDate: closeDate,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            let flags = 0;
            flags |= this.closed ? 1 << 0 : 0;
            flags |= this.publicVoters ? 1 << 1 : 0;
            flags |= this.multipleChoice ? 1 << 2 : 0;
            flags |= this.quiz ? 1 << 3 : 0;
            flags |= this.closePeriod !== undefined ? 1 << 4 : 0;
            flags |= this.closeDate !== undefined ? 1 << 5 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.question !== undefined) {
                b.write(this.question.write());
            }
            if (this.answers) {
                b.write(index_js_1.Primitive.Vector.write(this.answers));
            }
            if (this.closePeriod !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.closePeriod));
            }
            if (this.closeDate !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.closeDate));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.Poll = Poll;
    class PollAnswerVoters extends index_js_1.TLObject {
        chosen;
        correct;
        option;
        voters;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PollAnswerVoters';
            this.constructorId = 0x3b6ddad2;
            this.subclassOfId = 0x7ce0cf91;
            this._slots = ['chosen', 'correct', 'option', 'voters'];
            this.chosen = params.chosen;
            this.correct = params.correct;
            this.option = params.option;
            this.voters = params.voters;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let chosen = flags & (1 << 0) ? true : false;
            let correct = flags & (1 << 1) ? true : false;
            let option = await index_js_1.Primitive.Bytes.read(_data);
            let voters = await index_js_1.Primitive.Int.read(_data);
            return new Raw.PollAnswerVoters({
                chosen: chosen,
                correct: correct,
                option: option,
                voters: voters,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.chosen ? 1 << 0 : 0;
            flags |= this.correct ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.option !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.option));
            }
            if (this.voters !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.voters));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PollAnswerVoters = PollAnswerVoters;
    class PollResults extends index_js_1.TLObject {
        min;
        results;
        totalVoters;
        recentVoters;
        solution;
        solutionEntities;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PollResults';
            this.constructorId = 0x7adf2420;
            this.subclassOfId = 0xc3b4f687;
            this._slots = [
                'min',
                'results',
                'totalVoters',
                'recentVoters',
                'solution',
                'solutionEntities',
            ];
            this.min = params.min;
            this.results = params.results;
            this.totalVoters = params.totalVoters;
            this.recentVoters = params.recentVoters;
            this.solution = params.solution;
            this.solutionEntities = params.solutionEntities;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let min = flags & (1 << 0) ? true : false;
            let results = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : [];
            let totalVoters = flags & (1 << 2) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let recentVoters = flags & (1 << 3) ? await index_js_1.TLObject.read(_data) : [];
            let solution = flags & (1 << 4) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let solutionEntities = flags & (1 << 4) ? await index_js_1.TLObject.read(_data) : [];
            return new Raw.PollResults({
                min: min,
                results: results,
                totalVoters: totalVoters,
                recentVoters: recentVoters,
                solution: solution,
                solutionEntities: solutionEntities,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.min ? 1 << 0 : 0;
            flags |= this.results ? 1 << 1 : 0;
            flags |= this.totalVoters !== undefined ? 1 << 2 : 0;
            flags |= this.recentVoters ? 1 << 3 : 0;
            flags |= this.solution !== undefined ? 1 << 4 : 0;
            flags |= this.solutionEntities ? 1 << 4 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.results) {
                b.write(index_js_1.Primitive.Vector.write(this.results));
            }
            if (this.totalVoters !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.totalVoters));
            }
            if (this.recentVoters) {
                b.write(index_js_1.Primitive.Vector.write(this.recentVoters));
            }
            if (this.solution !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.solution));
            }
            if (this.solutionEntities) {
                b.write(index_js_1.Primitive.Vector.write(this.solutionEntities));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PollResults = PollResults;
    class ChatOnlines extends index_js_1.TLObject {
        onlines;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChatOnlines';
            this.constructorId = 0xf041e250;
            this.subclassOfId = 0x8c81903a;
            this._slots = ['onlines'];
            this.onlines = params.onlines;
        }
        static async read(_data, ..._args) {
            let onlines = await index_js_1.Primitive.Int.read(_data);
            return new Raw.ChatOnlines({ onlines: onlines });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.onlines !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.onlines));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChatOnlines = ChatOnlines;
    class StatsURL extends index_js_1.TLObject {
        url;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'StatsURL';
            this.constructorId = 0x47a971e0;
            this.subclassOfId = 0x8d4c94c0;
            this._slots = ['url'];
            this.url = params.url;
        }
        static async read(_data, ..._args) {
            let url = await index_js_1.Primitive.String.read(_data);
            return new Raw.StatsURL({ url: url });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.url !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.url));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.StatsURL = StatsURL;
    class ChatAdminRights extends index_js_1.TLObject {
        changeInfo;
        postMessages;
        editMessages;
        deleteMessages;
        banUsers;
        inviteUsers;
        pinMessages;
        addAdmins;
        anonymous;
        manageCall;
        other;
        manageTopics;
        postStories;
        editStories;
        deleteStories;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChatAdminRights';
            this.constructorId = 0x5fb224d5;
            this.subclassOfId = 0x863dc7c4;
            this._slots = [
                'changeInfo',
                'postMessages',
                'editMessages',
                'deleteMessages',
                'banUsers',
                'inviteUsers',
                'pinMessages',
                'addAdmins',
                'anonymous',
                'manageCall',
                'other',
                'manageTopics',
                'postStories',
                'editStories',
                'deleteStories',
            ];
            this.changeInfo = params.changeInfo;
            this.postMessages = params.postMessages;
            this.editMessages = params.editMessages;
            this.deleteMessages = params.deleteMessages;
            this.banUsers = params.banUsers;
            this.inviteUsers = params.inviteUsers;
            this.pinMessages = params.pinMessages;
            this.addAdmins = params.addAdmins;
            this.anonymous = params.anonymous;
            this.manageCall = params.manageCall;
            this.other = params.other;
            this.manageTopics = params.manageTopics;
            this.postStories = params.postStories;
            this.editStories = params.editStories;
            this.deleteStories = params.deleteStories;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let changeInfo = flags & (1 << 0) ? true : false;
            let postMessages = flags & (1 << 1) ? true : false;
            let editMessages = flags & (1 << 2) ? true : false;
            let deleteMessages = flags & (1 << 3) ? true : false;
            let banUsers = flags & (1 << 4) ? true : false;
            let inviteUsers = flags & (1 << 5) ? true : false;
            let pinMessages = flags & (1 << 7) ? true : false;
            let addAdmins = flags & (1 << 9) ? true : false;
            let anonymous = flags & (1 << 10) ? true : false;
            let manageCall = flags & (1 << 11) ? true : false;
            let other = flags & (1 << 12) ? true : false;
            let manageTopics = flags & (1 << 13) ? true : false;
            let postStories = flags & (1 << 14) ? true : false;
            let editStories = flags & (1 << 15) ? true : false;
            let deleteStories = flags & (1 << 16) ? true : false;
            return new Raw.ChatAdminRights({
                changeInfo: changeInfo,
                postMessages: postMessages,
                editMessages: editMessages,
                deleteMessages: deleteMessages,
                banUsers: banUsers,
                inviteUsers: inviteUsers,
                pinMessages: pinMessages,
                addAdmins: addAdmins,
                anonymous: anonymous,
                manageCall: manageCall,
                other: other,
                manageTopics: manageTopics,
                postStories: postStories,
                editStories: editStories,
                deleteStories: deleteStories,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.changeInfo ? 1 << 0 : 0;
            flags |= this.postMessages ? 1 << 1 : 0;
            flags |= this.editMessages ? 1 << 2 : 0;
            flags |= this.deleteMessages ? 1 << 3 : 0;
            flags |= this.banUsers ? 1 << 4 : 0;
            flags |= this.inviteUsers ? 1 << 5 : 0;
            flags |= this.pinMessages ? 1 << 7 : 0;
            flags |= this.addAdmins ? 1 << 9 : 0;
            flags |= this.anonymous ? 1 << 10 : 0;
            flags |= this.manageCall ? 1 << 11 : 0;
            flags |= this.other ? 1 << 12 : 0;
            flags |= this.manageTopics ? 1 << 13 : 0;
            flags |= this.postStories ? 1 << 14 : 0;
            flags |= this.editStories ? 1 << 15 : 0;
            flags |= this.deleteStories ? 1 << 16 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChatAdminRights = ChatAdminRights;
    class ChatBannedRights extends index_js_1.TLObject {
        viewMessages;
        sendMessages;
        sendMedia;
        sendStickers;
        sendGifs;
        sendGames;
        sendInline;
        embedLinks;
        sendPolls;
        changeInfo;
        inviteUsers;
        pinMessages;
        manageTopics;
        sendPhotos;
        sendVideos;
        sendRoundvideos;
        sendAudios;
        sendVoices;
        sendDocs;
        sendPlain;
        untilDate;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChatBannedRights';
            this.constructorId = 0x9f120418;
            this.subclassOfId = 0x4b5445a9;
            this._slots = [
                'viewMessages',
                'sendMessages',
                'sendMedia',
                'sendStickers',
                'sendGifs',
                'sendGames',
                'sendInline',
                'embedLinks',
                'sendPolls',
                'changeInfo',
                'inviteUsers',
                'pinMessages',
                'manageTopics',
                'sendPhotos',
                'sendVideos',
                'sendRoundvideos',
                'sendAudios',
                'sendVoices',
                'sendDocs',
                'sendPlain',
                'untilDate',
            ];
            this.viewMessages = params.viewMessages;
            this.sendMessages = params.sendMessages;
            this.sendMedia = params.sendMedia;
            this.sendStickers = params.sendStickers;
            this.sendGifs = params.sendGifs;
            this.sendGames = params.sendGames;
            this.sendInline = params.sendInline;
            this.embedLinks = params.embedLinks;
            this.sendPolls = params.sendPolls;
            this.changeInfo = params.changeInfo;
            this.inviteUsers = params.inviteUsers;
            this.pinMessages = params.pinMessages;
            this.manageTopics = params.manageTopics;
            this.sendPhotos = params.sendPhotos;
            this.sendVideos = params.sendVideos;
            this.sendRoundvideos = params.sendRoundvideos;
            this.sendAudios = params.sendAudios;
            this.sendVoices = params.sendVoices;
            this.sendDocs = params.sendDocs;
            this.sendPlain = params.sendPlain;
            this.untilDate = params.untilDate;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let viewMessages = flags & (1 << 0) ? true : false;
            let sendMessages = flags & (1 << 1) ? true : false;
            let sendMedia = flags & (1 << 2) ? true : false;
            let sendStickers = flags & (1 << 3) ? true : false;
            let sendGifs = flags & (1 << 4) ? true : false;
            let sendGames = flags & (1 << 5) ? true : false;
            let sendInline = flags & (1 << 6) ? true : false;
            let embedLinks = flags & (1 << 7) ? true : false;
            let sendPolls = flags & (1 << 8) ? true : false;
            let changeInfo = flags & (1 << 10) ? true : false;
            let inviteUsers = flags & (1 << 15) ? true : false;
            let pinMessages = flags & (1 << 17) ? true : false;
            let manageTopics = flags & (1 << 18) ? true : false;
            let sendPhotos = flags & (1 << 19) ? true : false;
            let sendVideos = flags & (1 << 20) ? true : false;
            let sendRoundvideos = flags & (1 << 21) ? true : false;
            let sendAudios = flags & (1 << 22) ? true : false;
            let sendVoices = flags & (1 << 23) ? true : false;
            let sendDocs = flags & (1 << 24) ? true : false;
            let sendPlain = flags & (1 << 25) ? true : false;
            let untilDate = await index_js_1.Primitive.Int.read(_data);
            return new Raw.ChatBannedRights({
                viewMessages: viewMessages,
                sendMessages: sendMessages,
                sendMedia: sendMedia,
                sendStickers: sendStickers,
                sendGifs: sendGifs,
                sendGames: sendGames,
                sendInline: sendInline,
                embedLinks: embedLinks,
                sendPolls: sendPolls,
                changeInfo: changeInfo,
                inviteUsers: inviteUsers,
                pinMessages: pinMessages,
                manageTopics: manageTopics,
                sendPhotos: sendPhotos,
                sendVideos: sendVideos,
                sendRoundvideos: sendRoundvideos,
                sendAudios: sendAudios,
                sendVoices: sendVoices,
                sendDocs: sendDocs,
                sendPlain: sendPlain,
                untilDate: untilDate,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.viewMessages ? 1 << 0 : 0;
            flags |= this.sendMessages ? 1 << 1 : 0;
            flags |= this.sendMedia ? 1 << 2 : 0;
            flags |= this.sendStickers ? 1 << 3 : 0;
            flags |= this.sendGifs ? 1 << 4 : 0;
            flags |= this.sendGames ? 1 << 5 : 0;
            flags |= this.sendInline ? 1 << 6 : 0;
            flags |= this.embedLinks ? 1 << 7 : 0;
            flags |= this.sendPolls ? 1 << 8 : 0;
            flags |= this.changeInfo ? 1 << 10 : 0;
            flags |= this.inviteUsers ? 1 << 15 : 0;
            flags |= this.pinMessages ? 1 << 17 : 0;
            flags |= this.manageTopics ? 1 << 18 : 0;
            flags |= this.sendPhotos ? 1 << 19 : 0;
            flags |= this.sendVideos ? 1 << 20 : 0;
            flags |= this.sendRoundvideos ? 1 << 21 : 0;
            flags |= this.sendAudios ? 1 << 22 : 0;
            flags |= this.sendVoices ? 1 << 23 : 0;
            flags |= this.sendDocs ? 1 << 24 : 0;
            flags |= this.sendPlain ? 1 << 25 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.untilDate !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.untilDate));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChatBannedRights = ChatBannedRights;
    class InputWallPaper extends index_js_1.TLObject {
        id;
        accessHash;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputWallPaper';
            this.constructorId = 0xe630b979;
            this.subclassOfId = 0xee77201a;
            this._slots = ['id', 'accessHash'];
            this.id = params.id;
            this.accessHash = params.accessHash;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.Long.read(_data);
            let accessHash = await index_js_1.Primitive.Long.read(_data);
            return new Raw.InputWallPaper({ id: id, accessHash: accessHash });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.accessHash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.accessHash));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputWallPaper = InputWallPaper;
    class InputWallPaperSlug extends index_js_1.TLObject {
        slug;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputWallPaperSlug';
            this.constructorId = 0x72091c80;
            this.subclassOfId = 0xee77201a;
            this._slots = ['slug'];
            this.slug = params.slug;
        }
        static async read(_data, ..._args) {
            let slug = await index_js_1.Primitive.String.read(_data);
            return new Raw.InputWallPaperSlug({ slug: slug });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.slug !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.slug));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputWallPaperSlug = InputWallPaperSlug;
    class InputWallPaperNoFile extends index_js_1.TLObject {
        id;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputWallPaperNoFile';
            this.constructorId = 0x967a462e;
            this.subclassOfId = 0xee77201a;
            this._slots = ['id'];
            this.id = params.id;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.Long.read(_data);
            return new Raw.InputWallPaperNoFile({ id: id });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputWallPaperNoFile = InputWallPaperNoFile;
    class CodeSettings extends index_js_1.TLObject {
        allowFlashcall;
        currentNumber;
        allowAppHash;
        allowMissedCall;
        allowFirebase;
        unknownNumber;
        logoutTokens;
        token;
        appSandbox;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'CodeSettings';
            this.constructorId = 0xad253d78;
            this.subclassOfId = 0x48edbc8a;
            this._slots = [
                'allowFlashcall',
                'currentNumber',
                'allowAppHash',
                'allowMissedCall',
                'allowFirebase',
                'unknownNumber',
                'logoutTokens',
                'token',
                'appSandbox',
            ];
            this.allowFlashcall = params.allowFlashcall;
            this.currentNumber = params.currentNumber;
            this.allowAppHash = params.allowAppHash;
            this.allowMissedCall = params.allowMissedCall;
            this.allowFirebase = params.allowFirebase;
            this.unknownNumber = params.unknownNumber;
            this.logoutTokens = params.logoutTokens;
            this.token = params.token;
            this.appSandbox = params.appSandbox;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let allowFlashcall = flags & (1 << 0) ? true : false;
            let currentNumber = flags & (1 << 1) ? true : false;
            let allowAppHash = flags & (1 << 4) ? true : false;
            let allowMissedCall = flags & (1 << 5) ? true : false;
            let allowFirebase = flags & (1 << 7) ? true : false;
            let unknownNumber = flags & (1 << 9) ? true : false;
            let logoutTokens = flags & (1 << 6) ? await index_js_1.TLObject.read(_data, index_js_1.Primitive.Bytes) : [];
            let token = flags & (1 << 8) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let appSandbox = flags & (1 << 8) ? await index_js_1.Primitive.Bool.read(_data) : undefined;
            return new Raw.CodeSettings({
                allowFlashcall: allowFlashcall,
                currentNumber: currentNumber,
                allowAppHash: allowAppHash,
                allowMissedCall: allowMissedCall,
                allowFirebase: allowFirebase,
                unknownNumber: unknownNumber,
                logoutTokens: logoutTokens,
                token: token,
                appSandbox: appSandbox,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.allowFlashcall ? 1 << 0 : 0;
            flags |= this.currentNumber ? 1 << 1 : 0;
            flags |= this.allowAppHash ? 1 << 4 : 0;
            flags |= this.allowMissedCall ? 1 << 5 : 0;
            flags |= this.allowFirebase ? 1 << 7 : 0;
            flags |= this.unknownNumber ? 1 << 9 : 0;
            flags |= this.logoutTokens ? 1 << 6 : 0;
            flags |= this.token !== undefined ? 1 << 8 : 0;
            flags |= this.appSandbox !== undefined ? 1 << 8 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.logoutTokens) {
                b.write(index_js_1.Primitive.Vector.write(this.logoutTokens, index_js_1.Primitive.Bytes));
            }
            if (this.token !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.token));
            }
            if (this.appSandbox !== undefined) {
                b.write(index_js_1.Primitive.Bool.write(this.appSandbox));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.CodeSettings = CodeSettings;
    class WallPaperSettings extends index_js_1.TLObject {
        blur;
        motion;
        backgroundColor;
        secondBackgroundColor;
        thirdBackgroundColor;
        fourthBackgroundColor;
        intensity;
        rotation;
        emoticon;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'WallPaperSettings';
            this.constructorId = 0x372efcd0;
            this.subclassOfId = 0x4175e312;
            this._slots = [
                'blur',
                'motion',
                'backgroundColor',
                'secondBackgroundColor',
                'thirdBackgroundColor',
                'fourthBackgroundColor',
                'intensity',
                'rotation',
                'emoticon',
            ];
            this.blur = params.blur;
            this.motion = params.motion;
            this.backgroundColor = params.backgroundColor;
            this.secondBackgroundColor = params.secondBackgroundColor;
            this.thirdBackgroundColor = params.thirdBackgroundColor;
            this.fourthBackgroundColor = params.fourthBackgroundColor;
            this.intensity = params.intensity;
            this.rotation = params.rotation;
            this.emoticon = params.emoticon;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let blur = flags & (1 << 1) ? true : false;
            let motion = flags & (1 << 2) ? true : false;
            let backgroundColor = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let secondBackgroundColor = flags & (1 << 4) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let thirdBackgroundColor = flags & (1 << 5) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let fourthBackgroundColor = flags & (1 << 6) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let intensity = flags & (1 << 3) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let rotation = flags & (1 << 4) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let emoticon = flags & (1 << 7) ? await index_js_1.Primitive.String.read(_data) : undefined;
            return new Raw.WallPaperSettings({
                blur: blur,
                motion: motion,
                backgroundColor: backgroundColor,
                secondBackgroundColor: secondBackgroundColor,
                thirdBackgroundColor: thirdBackgroundColor,
                fourthBackgroundColor: fourthBackgroundColor,
                intensity: intensity,
                rotation: rotation,
                emoticon: emoticon,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.blur ? 1 << 1 : 0;
            flags |= this.motion ? 1 << 2 : 0;
            flags |= this.backgroundColor !== undefined ? 1 << 0 : 0;
            flags |= this.secondBackgroundColor !== undefined ? 1 << 4 : 0;
            flags |= this.thirdBackgroundColor !== undefined ? 1 << 5 : 0;
            flags |= this.fourthBackgroundColor !== undefined ? 1 << 6 : 0;
            flags |= this.intensity !== undefined ? 1 << 3 : 0;
            flags |= this.rotation !== undefined ? 1 << 4 : 0;
            flags |= this.emoticon !== undefined ? 1 << 7 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.backgroundColor !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.backgroundColor));
            }
            if (this.secondBackgroundColor !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.secondBackgroundColor));
            }
            if (this.thirdBackgroundColor !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.thirdBackgroundColor));
            }
            if (this.fourthBackgroundColor !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.fourthBackgroundColor));
            }
            if (this.intensity !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.intensity));
            }
            if (this.rotation !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.rotation));
            }
            if (this.emoticon !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.emoticon));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.WallPaperSettings = WallPaperSettings;
    class AutoDownloadSettings extends index_js_1.TLObject {
        disabled;
        videoPreloadLarge;
        audioPreloadNext;
        phonecallsLessData;
        storiesPreload;
        photoSizeMax;
        videoSizeMax;
        fileSizeMax;
        videoUploadMaxbitrate;
        smallQueueActiveOperationsMax;
        largeQueueActiveOperationsMax;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'AutoDownloadSettings';
            this.constructorId = 0xbaa57628;
            this.subclassOfId = 0x512819c7;
            this._slots = [
                'disabled',
                'videoPreloadLarge',
                'audioPreloadNext',
                'phonecallsLessData',
                'storiesPreload',
                'photoSizeMax',
                'videoSizeMax',
                'fileSizeMax',
                'videoUploadMaxbitrate',
                'smallQueueActiveOperationsMax',
                'largeQueueActiveOperationsMax',
            ];
            this.disabled = params.disabled;
            this.videoPreloadLarge = params.videoPreloadLarge;
            this.audioPreloadNext = params.audioPreloadNext;
            this.phonecallsLessData = params.phonecallsLessData;
            this.storiesPreload = params.storiesPreload;
            this.photoSizeMax = params.photoSizeMax;
            this.videoSizeMax = params.videoSizeMax;
            this.fileSizeMax = params.fileSizeMax;
            this.videoUploadMaxbitrate = params.videoUploadMaxbitrate;
            this.smallQueueActiveOperationsMax = params.smallQueueActiveOperationsMax;
            this.largeQueueActiveOperationsMax = params.largeQueueActiveOperationsMax;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let disabled = flags & (1 << 0) ? true : false;
            let videoPreloadLarge = flags & (1 << 1) ? true : false;
            let audioPreloadNext = flags & (1 << 2) ? true : false;
            let phonecallsLessData = flags & (1 << 3) ? true : false;
            let storiesPreload = flags & (1 << 4) ? true : false;
            let photoSizeMax = await index_js_1.Primitive.Int.read(_data);
            let videoSizeMax = await index_js_1.Primitive.Long.read(_data);
            let fileSizeMax = await index_js_1.Primitive.Long.read(_data);
            let videoUploadMaxbitrate = await index_js_1.Primitive.Int.read(_data);
            let smallQueueActiveOperationsMax = await index_js_1.Primitive.Int.read(_data);
            let largeQueueActiveOperationsMax = await index_js_1.Primitive.Int.read(_data);
            return new Raw.AutoDownloadSettings({
                disabled: disabled,
                videoPreloadLarge: videoPreloadLarge,
                audioPreloadNext: audioPreloadNext,
                phonecallsLessData: phonecallsLessData,
                storiesPreload: storiesPreload,
                photoSizeMax: photoSizeMax,
                videoSizeMax: videoSizeMax,
                fileSizeMax: fileSizeMax,
                videoUploadMaxbitrate: videoUploadMaxbitrate,
                smallQueueActiveOperationsMax: smallQueueActiveOperationsMax,
                largeQueueActiveOperationsMax: largeQueueActiveOperationsMax,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.disabled ? 1 << 0 : 0;
            flags |= this.videoPreloadLarge ? 1 << 1 : 0;
            flags |= this.audioPreloadNext ? 1 << 2 : 0;
            flags |= this.phonecallsLessData ? 1 << 3 : 0;
            flags |= this.storiesPreload ? 1 << 4 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.photoSizeMax !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.photoSizeMax));
            }
            if (this.videoSizeMax !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.videoSizeMax));
            }
            if (this.fileSizeMax !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.fileSizeMax));
            }
            if (this.videoUploadMaxbitrate !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.videoUploadMaxbitrate));
            }
            if (this.smallQueueActiveOperationsMax !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.smallQueueActiveOperationsMax));
            }
            if (this.largeQueueActiveOperationsMax !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.largeQueueActiveOperationsMax));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.AutoDownloadSettings = AutoDownloadSettings;
    class EmojiKeyword extends index_js_1.TLObject {
        keyword;
        emoticons;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'EmojiKeyword';
            this.constructorId = 0xd5b3b9f9;
            this.subclassOfId = 0x6612a53e;
            this._slots = ['keyword', 'emoticons'];
            this.keyword = params.keyword;
            this.emoticons = params.emoticons;
        }
        static async read(_data, ..._args) {
            let keyword = await index_js_1.Primitive.String.read(_data);
            let emoticons = await index_js_1.TLObject.read(_data, index_js_1.Primitive.String);
            return new Raw.EmojiKeyword({ keyword: keyword, emoticons: emoticons });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.keyword !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.keyword));
            }
            if (this.emoticons) {
                b.write(index_js_1.Primitive.Vector.write(this.emoticons, index_js_1.Primitive.String));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.EmojiKeyword = EmojiKeyword;
    class EmojiKeywordDeleted extends index_js_1.TLObject {
        keyword;
        emoticons;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'EmojiKeywordDeleted';
            this.constructorId = 0x236df622;
            this.subclassOfId = 0x6612a53e;
            this._slots = ['keyword', 'emoticons'];
            this.keyword = params.keyword;
            this.emoticons = params.emoticons;
        }
        static async read(_data, ..._args) {
            let keyword = await index_js_1.Primitive.String.read(_data);
            let emoticons = await index_js_1.TLObject.read(_data, index_js_1.Primitive.String);
            return new Raw.EmojiKeywordDeleted({ keyword: keyword, emoticons: emoticons });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.keyword !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.keyword));
            }
            if (this.emoticons) {
                b.write(index_js_1.Primitive.Vector.write(this.emoticons, index_js_1.Primitive.String));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.EmojiKeywordDeleted = EmojiKeywordDeleted;
    class EmojiKeywordsDifference extends index_js_1.TLObject {
        langCode;
        fromVersion;
        version;
        keywords;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'EmojiKeywordsDifference';
            this.constructorId = 0x5cc761bd;
            this.subclassOfId = 0xd279c672;
            this._slots = ['langCode', 'fromVersion', 'version', 'keywords'];
            this.langCode = params.langCode;
            this.fromVersion = params.fromVersion;
            this.version = params.version;
            this.keywords = params.keywords;
        }
        static async read(_data, ..._args) {
            let langCode = await index_js_1.Primitive.String.read(_data);
            let fromVersion = await index_js_1.Primitive.Int.read(_data);
            let version = await index_js_1.Primitive.Int.read(_data);
            let keywords = await index_js_1.TLObject.read(_data);
            return new Raw.EmojiKeywordsDifference({
                langCode: langCode,
                fromVersion: fromVersion,
                version: version,
                keywords: keywords,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.langCode !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.langCode));
            }
            if (this.fromVersion !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.fromVersion));
            }
            if (this.version !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.version));
            }
            if (this.keywords) {
                b.write(index_js_1.Primitive.Vector.write(this.keywords));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.EmojiKeywordsDifference = EmojiKeywordsDifference;
    class EmojiURL extends index_js_1.TLObject {
        url;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'EmojiURL';
            this.constructorId = 0xa575739d;
            this.subclassOfId = 0x1fa08a19;
            this._slots = ['url'];
            this.url = params.url;
        }
        static async read(_data, ..._args) {
            let url = await index_js_1.Primitive.String.read(_data);
            return new Raw.EmojiURL({ url: url });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.url !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.url));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.EmojiURL = EmojiURL;
    class EmojiLanguage extends index_js_1.TLObject {
        langCode;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'EmojiLanguage';
            this.constructorId = 0xb3fb5361;
            this.subclassOfId = 0xa48d04ee;
            this._slots = ['langCode'];
            this.langCode = params.langCode;
        }
        static async read(_data, ..._args) {
            let langCode = await index_js_1.Primitive.String.read(_data);
            return new Raw.EmojiLanguage({ langCode: langCode });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.langCode !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.langCode));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.EmojiLanguage = EmojiLanguage;
    class Folder extends index_js_1.TLObject {
        autofillNewBroadcasts;
        autofillPublicGroups;
        autofillNewCorrespondents;
        id;
        title;
        photo;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'Folder';
            this.constructorId = 0xff544e65;
            this.subclassOfId = 0xeb0e0cfb;
            this._slots = [
                'autofillNewBroadcasts',
                'autofillPublicGroups',
                'autofillNewCorrespondents',
                'id',
                'title',
                'photo',
            ];
            this.autofillNewBroadcasts = params.autofillNewBroadcasts;
            this.autofillPublicGroups = params.autofillPublicGroups;
            this.autofillNewCorrespondents = params.autofillNewCorrespondents;
            this.id = params.id;
            this.title = params.title;
            this.photo = params.photo;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let autofillNewBroadcasts = flags & (1 << 0) ? true : false;
            let autofillPublicGroups = flags & (1 << 1) ? true : false;
            let autofillNewCorrespondents = flags & (1 << 2) ? true : false;
            let id = await index_js_1.Primitive.Int.read(_data);
            let title = await index_js_1.Primitive.String.read(_data);
            let photo = flags & (1 << 3) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.Folder({
                autofillNewBroadcasts: autofillNewBroadcasts,
                autofillPublicGroups: autofillPublicGroups,
                autofillNewCorrespondents: autofillNewCorrespondents,
                id: id,
                title: title,
                photo: photo,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.autofillNewBroadcasts ? 1 << 0 : 0;
            flags |= this.autofillPublicGroups ? 1 << 1 : 0;
            flags |= this.autofillNewCorrespondents ? 1 << 2 : 0;
            flags |= this.photo !== undefined ? 1 << 3 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.id));
            }
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            if (this.photo !== undefined) {
                b.write(this.photo.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.Folder = Folder;
    class InputFolderPeer extends index_js_1.TLObject {
        peer;
        folderId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputFolderPeer';
            this.constructorId = 0xfbd2c296;
            this.subclassOfId = 0x74825e00;
            this._slots = ['peer', 'folderId'];
            this.peer = params.peer;
            this.folderId = params.folderId;
        }
        static async read(_data, ..._args) {
            let peer = await index_js_1.TLObject.read(_data);
            let folderId = await index_js_1.Primitive.Int.read(_data);
            return new Raw.InputFolderPeer({ peer: peer, folderId: folderId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.folderId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.folderId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputFolderPeer = InputFolderPeer;
    class FolderPeer extends index_js_1.TLObject {
        peer;
        folderId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'FolderPeer';
            this.constructorId = 0xe9baa668;
            this.subclassOfId = 0xf3f2283b;
            this._slots = ['peer', 'folderId'];
            this.peer = params.peer;
            this.folderId = params.folderId;
        }
        static async read(_data, ..._args) {
            let peer = await index_js_1.TLObject.read(_data);
            let folderId = await index_js_1.Primitive.Int.read(_data);
            return new Raw.FolderPeer({ peer: peer, folderId: folderId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.folderId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.folderId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.FolderPeer = FolderPeer;
    class UrlAuthResultRequest extends index_js_1.TLObject {
        requestWriteAccess;
        bot;
        domain;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UrlAuthResultRequest';
            this.constructorId = 0x92d33a0e;
            this.subclassOfId = 0x7765cb1e;
            this._slots = ['requestWriteAccess', 'bot', 'domain'];
            this.requestWriteAccess = params.requestWriteAccess;
            this.bot = params.bot;
            this.domain = params.domain;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let requestWriteAccess = flags & (1 << 0) ? true : false;
            let bot = await index_js_1.TLObject.read(_data);
            let domain = await index_js_1.Primitive.String.read(_data);
            return new Raw.UrlAuthResultRequest({
                requestWriteAccess: requestWriteAccess,
                bot: bot,
                domain: domain,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.requestWriteAccess ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.bot !== undefined) {
                b.write(this.bot.write());
            }
            if (this.domain !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.domain));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UrlAuthResultRequest = UrlAuthResultRequest;
    class UrlAuthResultAccepted extends index_js_1.TLObject {
        url;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'UrlAuthResultAccepted';
            this.constructorId = 0x8f8c0e4e;
            this.subclassOfId = 0x7765cb1e;
            this._slots = ['url'];
            this.url = params.url;
        }
        static async read(_data, ..._args) {
            let url = await index_js_1.Primitive.String.read(_data);
            return new Raw.UrlAuthResultAccepted({ url: url });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.url !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.url));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UrlAuthResultAccepted = UrlAuthResultAccepted;
    class UrlAuthResultDefault extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'UrlAuthResultDefault';
            this.constructorId = 0xa9d6db1f;
            this.subclassOfId = 0x7765cb1e;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.UrlAuthResultDefault();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.UrlAuthResultDefault = UrlAuthResultDefault;
    class ChannelLocationEmpty extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'ChannelLocationEmpty';
            this.constructorId = 0xbfb5ad8b;
            this.subclassOfId = 0xec260b7f;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.ChannelLocationEmpty();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelLocationEmpty = ChannelLocationEmpty;
    class ChannelLocation extends index_js_1.TLObject {
        geoPoint;
        address;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChannelLocation';
            this.constructorId = 0x209b82db;
            this.subclassOfId = 0xec260b7f;
            this._slots = ['geoPoint', 'address'];
            this.geoPoint = params.geoPoint;
            this.address = params.address;
        }
        static async read(_data, ..._args) {
            let geoPoint = await index_js_1.TLObject.read(_data);
            let address = await index_js_1.Primitive.String.read(_data);
            return new Raw.ChannelLocation({ geoPoint: geoPoint, address: address });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.geoPoint !== undefined) {
                b.write(this.geoPoint.write());
            }
            if (this.address !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.address));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChannelLocation = ChannelLocation;
    class PeerLocated extends index_js_1.TLObject {
        peer;
        expires;
        distance;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PeerLocated';
            this.constructorId = 0xca461b5d;
            this.subclassOfId = 0xfada34ac;
            this._slots = ['peer', 'expires', 'distance'];
            this.peer = params.peer;
            this.expires = params.expires;
            this.distance = params.distance;
        }
        static async read(_data, ..._args) {
            let peer = await index_js_1.TLObject.read(_data);
            let expires = await index_js_1.Primitive.Int.read(_data);
            let distance = await index_js_1.Primitive.Int.read(_data);
            return new Raw.PeerLocated({ peer: peer, expires: expires, distance: distance });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.expires !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.expires));
            }
            if (this.distance !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.distance));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PeerLocated = PeerLocated;
    class PeerSelfLocated extends index_js_1.TLObject {
        expires;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PeerSelfLocated';
            this.constructorId = 0xf8ec284b;
            this.subclassOfId = 0xfada34ac;
            this._slots = ['expires'];
            this.expires = params.expires;
        }
        static async read(_data, ..._args) {
            let expires = await index_js_1.Primitive.Int.read(_data);
            return new Raw.PeerSelfLocated({ expires: expires });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.expires !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.expires));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PeerSelfLocated = PeerSelfLocated;
    class RestrictionReason extends index_js_1.TLObject {
        platform;
        reason;
        text;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'RestrictionReason';
            this.constructorId = 0xd072acb4;
            this.subclassOfId = 0x6ad95ad;
            this._slots = ['platform', 'reason', 'text'];
            this.platform = params.platform;
            this.reason = params.reason;
            this.text = params.text;
        }
        static async read(_data, ..._args) {
            let platform = await index_js_1.Primitive.String.read(_data);
            let reason = await index_js_1.Primitive.String.read(_data);
            let text = await index_js_1.Primitive.String.read(_data);
            return new Raw.RestrictionReason({ platform: platform, reason: reason, text: text });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.platform !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.platform));
            }
            if (this.reason !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.reason));
            }
            if (this.text !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.text));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.RestrictionReason = RestrictionReason;
    class InputTheme extends index_js_1.TLObject {
        id;
        accessHash;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputTheme';
            this.constructorId = 0x3c5693e9;
            this.subclassOfId = 0x7a100f0;
            this._slots = ['id', 'accessHash'];
            this.id = params.id;
            this.accessHash = params.accessHash;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.Long.read(_data);
            let accessHash = await index_js_1.Primitive.Long.read(_data);
            return new Raw.InputTheme({ id: id, accessHash: accessHash });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.accessHash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.accessHash));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputTheme = InputTheme;
    class InputThemeSlug extends index_js_1.TLObject {
        slug;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputThemeSlug';
            this.constructorId = 0xf5890df1;
            this.subclassOfId = 0x7a100f0;
            this._slots = ['slug'];
            this.slug = params.slug;
        }
        static async read(_data, ..._args) {
            let slug = await index_js_1.Primitive.String.read(_data);
            return new Raw.InputThemeSlug({ slug: slug });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.slug !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.slug));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputThemeSlug = InputThemeSlug;
    class Theme extends index_js_1.TLObject {
        creator;
        default;
        forChat;
        id;
        accessHash;
        slug;
        title;
        document;
        settings;
        emoticon;
        installsCount;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'Theme';
            this.constructorId = 0xa00e67d6;
            this.subclassOfId = 0x56b4c80c;
            this._slots = [
                'creator',
                'default',
                'forChat',
                'id',
                'accessHash',
                'slug',
                'title',
                'document',
                'settings',
                'emoticon',
                'installsCount',
            ];
            this.creator = params.creator;
            this.default = params.default;
            this.forChat = params.forChat;
            this.id = params.id;
            this.accessHash = params.accessHash;
            this.slug = params.slug;
            this.title = params.title;
            this.document = params.document;
            this.settings = params.settings;
            this.emoticon = params.emoticon;
            this.installsCount = params.installsCount;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let creator = flags & (1 << 0) ? true : false;
            let _default = flags & (1 << 1) ? true : false;
            let forChat = flags & (1 << 5) ? true : false;
            let id = await index_js_1.Primitive.Long.read(_data);
            let accessHash = await index_js_1.Primitive.Long.read(_data);
            let slug = await index_js_1.Primitive.String.read(_data);
            let title = await index_js_1.Primitive.String.read(_data);
            let document = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
            let settings = flags & (1 << 3) ? await index_js_1.TLObject.read(_data) : [];
            let emoticon = flags & (1 << 6) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let installsCount = flags & (1 << 4) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            return new Raw.Theme({
                creator: creator,
                default: _default,
                forChat: forChat,
                id: id,
                accessHash: accessHash,
                slug: slug,
                title: title,
                document: document,
                settings: settings,
                emoticon: emoticon,
                installsCount: installsCount,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.creator ? 1 << 0 : 0;
            flags |= this.default ? 1 << 1 : 0;
            flags |= this.forChat ? 1 << 5 : 0;
            flags |= this.document !== undefined ? 1 << 2 : 0;
            flags |= this.settings ? 1 << 3 : 0;
            flags |= this.emoticon !== undefined ? 1 << 6 : 0;
            flags |= this.installsCount !== undefined ? 1 << 4 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.accessHash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.accessHash));
            }
            if (this.slug !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.slug));
            }
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            if (this.document !== undefined) {
                b.write(this.document.write());
            }
            if (this.settings) {
                b.write(index_js_1.Primitive.Vector.write(this.settings));
            }
            if (this.emoticon !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.emoticon));
            }
            if (this.installsCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.installsCount));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.Theme = Theme;
    class BaseThemeClassic extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'BaseThemeClassic';
            this.constructorId = 0xc3a12462;
            this.subclassOfId = 0x1f03f444;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.BaseThemeClassic();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.BaseThemeClassic = BaseThemeClassic;
    class BaseThemeDay extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'BaseThemeDay';
            this.constructorId = 0xfbd81688;
            this.subclassOfId = 0x1f03f444;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.BaseThemeDay();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.BaseThemeDay = BaseThemeDay;
    class BaseThemeNight extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'BaseThemeNight';
            this.constructorId = 0xb7b31ea8;
            this.subclassOfId = 0x1f03f444;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.BaseThemeNight();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.BaseThemeNight = BaseThemeNight;
    class BaseThemeTinted extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'BaseThemeTinted';
            this.constructorId = 0x6d5f77ee;
            this.subclassOfId = 0x1f03f444;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.BaseThemeTinted();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.BaseThemeTinted = BaseThemeTinted;
    class BaseThemeArctic extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'BaseThemeArctic';
            this.constructorId = 0x5b11125a;
            this.subclassOfId = 0x1f03f444;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.BaseThemeArctic();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.BaseThemeArctic = BaseThemeArctic;
    class InputThemeSettings extends index_js_1.TLObject {
        messageColorsAnimated;
        baseTheme;
        accentColor;
        outboxAccentColor;
        messageColors;
        wallpaper;
        wallpaperSettings;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputThemeSettings';
            this.constructorId = 0x8fde504f;
            this.subclassOfId = 0x8338c882;
            this._slots = [
                'messageColorsAnimated',
                'baseTheme',
                'accentColor',
                'outboxAccentColor',
                'messageColors',
                'wallpaper',
                'wallpaperSettings',
            ];
            this.messageColorsAnimated = params.messageColorsAnimated;
            this.baseTheme = params.baseTheme;
            this.accentColor = params.accentColor;
            this.outboxAccentColor = params.outboxAccentColor;
            this.messageColors = params.messageColors;
            this.wallpaper = params.wallpaper;
            this.wallpaperSettings = params.wallpaperSettings;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let messageColorsAnimated = flags & (1 << 2) ? true : false;
            let baseTheme = await index_js_1.TLObject.read(_data);
            let accentColor = await index_js_1.Primitive.Int.read(_data);
            let outboxAccentColor = flags & (1 << 3) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let messageColors = flags & (1 << 0) ? await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int) : [];
            let wallpaper = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : undefined;
            let wallpaperSettings = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.InputThemeSettings({
                messageColorsAnimated: messageColorsAnimated,
                baseTheme: baseTheme,
                accentColor: accentColor,
                outboxAccentColor: outboxAccentColor,
                messageColors: messageColors,
                wallpaper: wallpaper,
                wallpaperSettings: wallpaperSettings,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.messageColorsAnimated ? 1 << 2 : 0;
            flags |= this.outboxAccentColor !== undefined ? 1 << 3 : 0;
            flags |= this.messageColors ? 1 << 0 : 0;
            flags |= this.wallpaper !== undefined ? 1 << 1 : 0;
            flags |= this.wallpaperSettings !== undefined ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.baseTheme !== undefined) {
                b.write(this.baseTheme.write());
            }
            if (this.accentColor !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.accentColor));
            }
            if (this.outboxAccentColor !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.outboxAccentColor));
            }
            if (this.messageColors) {
                b.write(index_js_1.Primitive.Vector.write(this.messageColors, index_js_1.Primitive.Int));
            }
            if (this.wallpaper !== undefined) {
                b.write(this.wallpaper.write());
            }
            if (this.wallpaperSettings !== undefined) {
                b.write(this.wallpaperSettings.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputThemeSettings = InputThemeSettings;
    class ThemeSettings extends index_js_1.TLObject {
        messageColorsAnimated;
        baseTheme;
        accentColor;
        outboxAccentColor;
        messageColors;
        wallpaper;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ThemeSettings';
            this.constructorId = 0xfa58b6d4;
            this.subclassOfId = 0x82666d38;
            this._slots = [
                'messageColorsAnimated',
                'baseTheme',
                'accentColor',
                'outboxAccentColor',
                'messageColors',
                'wallpaper',
            ];
            this.messageColorsAnimated = params.messageColorsAnimated;
            this.baseTheme = params.baseTheme;
            this.accentColor = params.accentColor;
            this.outboxAccentColor = params.outboxAccentColor;
            this.messageColors = params.messageColors;
            this.wallpaper = params.wallpaper;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let messageColorsAnimated = flags & (1 << 2) ? true : false;
            let baseTheme = await index_js_1.TLObject.read(_data);
            let accentColor = await index_js_1.Primitive.Int.read(_data);
            let outboxAccentColor = flags & (1 << 3) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let messageColors = flags & (1 << 0) ? await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int) : [];
            let wallpaper = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.ThemeSettings({
                messageColorsAnimated: messageColorsAnimated,
                baseTheme: baseTheme,
                accentColor: accentColor,
                outboxAccentColor: outboxAccentColor,
                messageColors: messageColors,
                wallpaper: wallpaper,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.messageColorsAnimated ? 1 << 2 : 0;
            flags |= this.outboxAccentColor !== undefined ? 1 << 3 : 0;
            flags |= this.messageColors ? 1 << 0 : 0;
            flags |= this.wallpaper !== undefined ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.baseTheme !== undefined) {
                b.write(this.baseTheme.write());
            }
            if (this.accentColor !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.accentColor));
            }
            if (this.outboxAccentColor !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.outboxAccentColor));
            }
            if (this.messageColors) {
                b.write(index_js_1.Primitive.Vector.write(this.messageColors, index_js_1.Primitive.Int));
            }
            if (this.wallpaper !== undefined) {
                b.write(this.wallpaper.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ThemeSettings = ThemeSettings;
    class WebPageAttributeTheme extends index_js_1.TLObject {
        documents;
        settings;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'WebPageAttributeTheme';
            this.constructorId = 0x54b56617;
            this.subclassOfId = 0xafcfe9c7;
            this._slots = ['documents', 'settings'];
            this.documents = params.documents;
            this.settings = params.settings;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let documents = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : [];
            let settings = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.WebPageAttributeTheme({ documents: documents, settings: settings });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.documents ? 1 << 0 : 0;
            flags |= this.settings !== undefined ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.documents) {
                b.write(index_js_1.Primitive.Vector.write(this.documents));
            }
            if (this.settings !== undefined) {
                b.write(this.settings.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.WebPageAttributeTheme = WebPageAttributeTheme;
    class WebPageAttributeStory extends index_js_1.TLObject {
        peer;
        id;
        story;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'WebPageAttributeStory';
            this.constructorId = 0x2e94c3e7;
            this.subclassOfId = 0xafcfe9c7;
            this._slots = ['peer', 'id', 'story'];
            this.peer = params.peer;
            this.id = params.id;
            this.story = params.story;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let peer = await index_js_1.TLObject.read(_data);
            let id = await index_js_1.Primitive.Int.read(_data);
            let story = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.WebPageAttributeStory({ peer: peer, id: id, story: story });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.story !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.id));
            }
            if (this.story !== undefined) {
                b.write(this.story.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.WebPageAttributeStory = WebPageAttributeStory;
    class WebPageAttributeStickerSet extends index_js_1.TLObject {
        emojis;
        textColor;
        stickers;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'WebPageAttributeStickerSet';
            this.constructorId = 0x50cc03d3;
            this.subclassOfId = 0xafcfe9c7;
            this._slots = ['emojis', 'textColor', 'stickers'];
            this.emojis = params.emojis;
            this.textColor = params.textColor;
            this.stickers = params.stickers;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let emojis = flags & (1 << 0) ? true : false;
            let textColor = flags & (1 << 1) ? true : false;
            let stickers = await index_js_1.TLObject.read(_data);
            return new Raw.WebPageAttributeStickerSet({
                emojis: emojis,
                textColor: textColor,
                stickers: stickers,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.emojis ? 1 << 0 : 0;
            flags |= this.textColor ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.stickers) {
                b.write(index_js_1.Primitive.Vector.write(this.stickers));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.WebPageAttributeStickerSet = WebPageAttributeStickerSet;
    class BankCardOpenUrl extends index_js_1.TLObject {
        url;
        name;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'BankCardOpenUrl';
            this.constructorId = 0xf568028a;
            this.subclassOfId = 0xf2e2460e;
            this._slots = ['url', 'name'];
            this.url = params.url;
            this.name = params.name;
        }
        static async read(_data, ..._args) {
            let url = await index_js_1.Primitive.String.read(_data);
            let name = await index_js_1.Primitive.String.read(_data);
            return new Raw.BankCardOpenUrl({ url: url, name: name });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.url !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.url));
            }
            if (this.name !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.name));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.BankCardOpenUrl = BankCardOpenUrl;
    class DialogFilter extends index_js_1.TLObject {
        contacts;
        nonContacts;
        groups;
        broadcasts;
        bots;
        excludeMuted;
        excludeRead;
        excludeArchived;
        id;
        title;
        emoticon;
        color;
        pinnedPeers;
        includePeers;
        excludePeers;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DialogFilter';
            this.constructorId = 0x5fb5523b;
            this.subclassOfId = 0x692bc457;
            this._slots = [
                'contacts',
                'nonContacts',
                'groups',
                'broadcasts',
                'bots',
                'excludeMuted',
                'excludeRead',
                'excludeArchived',
                'id',
                'title',
                'emoticon',
                'color',
                'pinnedPeers',
                'includePeers',
                'excludePeers',
            ];
            this.contacts = params.contacts;
            this.nonContacts = params.nonContacts;
            this.groups = params.groups;
            this.broadcasts = params.broadcasts;
            this.bots = params.bots;
            this.excludeMuted = params.excludeMuted;
            this.excludeRead = params.excludeRead;
            this.excludeArchived = params.excludeArchived;
            this.id = params.id;
            this.title = params.title;
            this.emoticon = params.emoticon;
            this.color = params.color;
            this.pinnedPeers = params.pinnedPeers;
            this.includePeers = params.includePeers;
            this.excludePeers = params.excludePeers;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let contacts = flags & (1 << 0) ? true : false;
            let nonContacts = flags & (1 << 1) ? true : false;
            let groups = flags & (1 << 2) ? true : false;
            let broadcasts = flags & (1 << 3) ? true : false;
            let bots = flags & (1 << 4) ? true : false;
            let excludeMuted = flags & (1 << 11) ? true : false;
            let excludeRead = flags & (1 << 12) ? true : false;
            let excludeArchived = flags & (1 << 13) ? true : false;
            let id = await index_js_1.Primitive.Int.read(_data);
            let title = await index_js_1.Primitive.String.read(_data);
            let emoticon = flags & (1 << 25) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let color = flags & (1 << 27) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let pinnedPeers = await index_js_1.TLObject.read(_data);
            let includePeers = await index_js_1.TLObject.read(_data);
            let excludePeers = await index_js_1.TLObject.read(_data);
            return new Raw.DialogFilter({
                contacts: contacts,
                nonContacts: nonContacts,
                groups: groups,
                broadcasts: broadcasts,
                bots: bots,
                excludeMuted: excludeMuted,
                excludeRead: excludeRead,
                excludeArchived: excludeArchived,
                id: id,
                title: title,
                emoticon: emoticon,
                color: color,
                pinnedPeers: pinnedPeers,
                includePeers: includePeers,
                excludePeers: excludePeers,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.contacts ? 1 << 0 : 0;
            flags |= this.nonContacts ? 1 << 1 : 0;
            flags |= this.groups ? 1 << 2 : 0;
            flags |= this.broadcasts ? 1 << 3 : 0;
            flags |= this.bots ? 1 << 4 : 0;
            flags |= this.excludeMuted ? 1 << 11 : 0;
            flags |= this.excludeRead ? 1 << 12 : 0;
            flags |= this.excludeArchived ? 1 << 13 : 0;
            flags |= this.emoticon !== undefined ? 1 << 25 : 0;
            flags |= this.color !== undefined ? 1 << 27 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.id));
            }
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            if (this.emoticon !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.emoticon));
            }
            if (this.color !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.color));
            }
            if (this.pinnedPeers) {
                b.write(index_js_1.Primitive.Vector.write(this.pinnedPeers));
            }
            if (this.includePeers) {
                b.write(index_js_1.Primitive.Vector.write(this.includePeers));
            }
            if (this.excludePeers) {
                b.write(index_js_1.Primitive.Vector.write(this.excludePeers));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DialogFilter = DialogFilter;
    class DialogFilterDefault extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'DialogFilterDefault';
            this.constructorId = 0x363293ae;
            this.subclassOfId = 0x692bc457;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.DialogFilterDefault();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DialogFilterDefault = DialogFilterDefault;
    class DialogFilterChatlist extends index_js_1.TLObject {
        hasMyInvites;
        id;
        title;
        emoticon;
        color;
        pinnedPeers;
        includePeers;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DialogFilterChatlist';
            this.constructorId = 0x9fe28ea4;
            this.subclassOfId = 0x692bc457;
            this._slots = [
                'hasMyInvites',
                'id',
                'title',
                'emoticon',
                'color',
                'pinnedPeers',
                'includePeers',
            ];
            this.hasMyInvites = params.hasMyInvites;
            this.id = params.id;
            this.title = params.title;
            this.emoticon = params.emoticon;
            this.color = params.color;
            this.pinnedPeers = params.pinnedPeers;
            this.includePeers = params.includePeers;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let hasMyInvites = flags & (1 << 26) ? true : false;
            let id = await index_js_1.Primitive.Int.read(_data);
            let title = await index_js_1.Primitive.String.read(_data);
            let emoticon = flags & (1 << 25) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let color = flags & (1 << 27) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let pinnedPeers = await index_js_1.TLObject.read(_data);
            let includePeers = await index_js_1.TLObject.read(_data);
            return new Raw.DialogFilterChatlist({
                hasMyInvites: hasMyInvites,
                id: id,
                title: title,
                emoticon: emoticon,
                color: color,
                pinnedPeers: pinnedPeers,
                includePeers: includePeers,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.hasMyInvites ? 1 << 26 : 0;
            flags |= this.emoticon !== undefined ? 1 << 25 : 0;
            flags |= this.color !== undefined ? 1 << 27 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.id));
            }
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            if (this.emoticon !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.emoticon));
            }
            if (this.color !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.color));
            }
            if (this.pinnedPeers) {
                b.write(index_js_1.Primitive.Vector.write(this.pinnedPeers));
            }
            if (this.includePeers) {
                b.write(index_js_1.Primitive.Vector.write(this.includePeers));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DialogFilterChatlist = DialogFilterChatlist;
    class DialogFilterSuggested extends index_js_1.TLObject {
        filter;
        description;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DialogFilterSuggested';
            this.constructorId = 0x77744d4a;
            this.subclassOfId = 0x31ede086;
            this._slots = ['filter', 'description'];
            this.filter = params.filter;
            this.description = params.description;
        }
        static async read(_data, ..._args) {
            let filter = await index_js_1.TLObject.read(_data);
            let description = await index_js_1.Primitive.String.read(_data);
            return new Raw.DialogFilterSuggested({ filter: filter, description: description });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.filter !== undefined) {
                b.write(this.filter.write());
            }
            if (this.description !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.description));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DialogFilterSuggested = DialogFilterSuggested;
    class StatsDateRangeDays extends index_js_1.TLObject {
        minDate;
        maxDate;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'StatsDateRangeDays';
            this.constructorId = 0xb637edaf;
            this.subclassOfId = 0x81236245;
            this._slots = ['minDate', 'maxDate'];
            this.minDate = params.minDate;
            this.maxDate = params.maxDate;
        }
        static async read(_data, ..._args) {
            let minDate = await index_js_1.Primitive.Int.read(_data);
            let maxDate = await index_js_1.Primitive.Int.read(_data);
            return new Raw.StatsDateRangeDays({ minDate: minDate, maxDate: maxDate });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.minDate !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.minDate));
            }
            if (this.maxDate !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.maxDate));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.StatsDateRangeDays = StatsDateRangeDays;
    class StatsAbsValueAndPrev extends index_js_1.TLObject {
        current;
        previous;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'StatsAbsValueAndPrev';
            this.constructorId = 0xcb43acde;
            this.subclassOfId = 0x3ebe59af;
            this._slots = ['current', 'previous'];
            this.current = params.current;
            this.previous = params.previous;
        }
        static async read(_data, ..._args) {
            let current = await index_js_1.Primitive.Double.read(_data);
            let previous = await index_js_1.Primitive.Double.read(_data);
            return new Raw.StatsAbsValueAndPrev({ current: current, previous: previous });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.current !== undefined) {
                b.write(index_js_1.Primitive.Double.write(this.current));
            }
            if (this.previous !== undefined) {
                b.write(index_js_1.Primitive.Double.write(this.previous));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.StatsAbsValueAndPrev = StatsAbsValueAndPrev;
    class StatsPercentValue extends index_js_1.TLObject {
        part;
        total;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'StatsPercentValue';
            this.constructorId = 0xcbce2fe0;
            this.subclassOfId = 0x9702c51e;
            this._slots = ['part', 'total'];
            this.part = params.part;
            this.total = params.total;
        }
        static async read(_data, ..._args) {
            let part = await index_js_1.Primitive.Double.read(_data);
            let total = await index_js_1.Primitive.Double.read(_data);
            return new Raw.StatsPercentValue({ part: part, total: total });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.part !== undefined) {
                b.write(index_js_1.Primitive.Double.write(this.part));
            }
            if (this.total !== undefined) {
                b.write(index_js_1.Primitive.Double.write(this.total));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.StatsPercentValue = StatsPercentValue;
    class StatsGraphAsync extends index_js_1.TLObject {
        token;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'StatsGraphAsync';
            this.constructorId = 0x4a27eb2d;
            this.subclassOfId = 0x9b903153;
            this._slots = ['token'];
            this.token = params.token;
        }
        static async read(_data, ..._args) {
            let token = await index_js_1.Primitive.String.read(_data);
            return new Raw.StatsGraphAsync({ token: token });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.token !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.token));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.StatsGraphAsync = StatsGraphAsync;
    class StatsGraphError extends index_js_1.TLObject {
        error;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'StatsGraphError';
            this.constructorId = 0xbedc9822;
            this.subclassOfId = 0x9b903153;
            this._slots = ['error'];
            this.error = params.error;
        }
        static async read(_data, ..._args) {
            let error = await index_js_1.Primitive.String.read(_data);
            return new Raw.StatsGraphError({ error: error });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.error !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.error));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.StatsGraphError = StatsGraphError;
    class StatsGraph extends index_js_1.TLObject {
        json;
        zoomToken;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'StatsGraph';
            this.constructorId = 0x8ea464b6;
            this.subclassOfId = 0x9b903153;
            this._slots = ['json', 'zoomToken'];
            this.json = params.json;
            this.zoomToken = params.zoomToken;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let json = await index_js_1.TLObject.read(_data);
            let zoomToken = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
            return new Raw.StatsGraph({ json: json, zoomToken: zoomToken });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.zoomToken !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.json !== undefined) {
                b.write(this.json.write());
            }
            if (this.zoomToken !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.zoomToken));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.StatsGraph = StatsGraph;
    class VideoSize extends index_js_1.TLObject {
        type;
        w;
        h;
        size;
        videoStartTs;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'VideoSize';
            this.constructorId = 0xde33b094;
            this.subclassOfId = 0x62f1d509;
            this._slots = ['type', 'w', 'h', 'size', 'videoStartTs'];
            this.type = params.type;
            this.w = params.w;
            this.h = params.h;
            this.size = params.size;
            this.videoStartTs = params.videoStartTs;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let type = await index_js_1.Primitive.String.read(_data);
            let w = await index_js_1.Primitive.Int.read(_data);
            let h = await index_js_1.Primitive.Int.read(_data);
            let size = await index_js_1.Primitive.Int.read(_data);
            let videoStartTs = flags & (1 << 0) ? await index_js_1.Primitive.Double.read(_data) : undefined;
            return new Raw.VideoSize({ type: type, w: w, h: h, size: size, videoStartTs: videoStartTs });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.videoStartTs !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.type !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.type));
            }
            if (this.w !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.w));
            }
            if (this.h !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.h));
            }
            if (this.size !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.size));
            }
            if (this.videoStartTs !== undefined) {
                b.write(index_js_1.Primitive.Double.write(this.videoStartTs));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.VideoSize = VideoSize;
    class VideoSizeEmojiMarkup extends index_js_1.TLObject {
        emojiId;
        backgroundColors;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'VideoSizeEmojiMarkup';
            this.constructorId = 0xf85c413c;
            this.subclassOfId = 0x62f1d509;
            this._slots = ['emojiId', 'backgroundColors'];
            this.emojiId = params.emojiId;
            this.backgroundColors = params.backgroundColors;
        }
        static async read(_data, ..._args) {
            let emojiId = await index_js_1.Primitive.Long.read(_data);
            let backgroundColors = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int);
            return new Raw.VideoSizeEmojiMarkup({ emojiId: emojiId, backgroundColors: backgroundColors });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.emojiId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.emojiId));
            }
            if (this.backgroundColors) {
                b.write(index_js_1.Primitive.Vector.write(this.backgroundColors, index_js_1.Primitive.Int));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.VideoSizeEmojiMarkup = VideoSizeEmojiMarkup;
    class VideoSizeStickerMarkup extends index_js_1.TLObject {
        stickerset;
        stickerId;
        backgroundColors;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'VideoSizeStickerMarkup';
            this.constructorId = 0xda082fe;
            this.subclassOfId = 0x62f1d509;
            this._slots = ['stickerset', 'stickerId', 'backgroundColors'];
            this.stickerset = params.stickerset;
            this.stickerId = params.stickerId;
            this.backgroundColors = params.backgroundColors;
        }
        static async read(_data, ..._args) {
            let stickerset = await index_js_1.TLObject.read(_data);
            let stickerId = await index_js_1.Primitive.Long.read(_data);
            let backgroundColors = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int);
            return new Raw.VideoSizeStickerMarkup({
                stickerset: stickerset,
                stickerId: stickerId,
                backgroundColors: backgroundColors,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.stickerset !== undefined) {
                b.write(this.stickerset.write());
            }
            if (this.stickerId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.stickerId));
            }
            if (this.backgroundColors) {
                b.write(index_js_1.Primitive.Vector.write(this.backgroundColors, index_js_1.Primitive.Int));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.VideoSizeStickerMarkup = VideoSizeStickerMarkup;
    class StatsGroupTopPoster extends index_js_1.TLObject {
        userId;
        messages;
        avgChars;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'StatsGroupTopPoster';
            this.constructorId = 0x9d04af9b;
            this.subclassOfId = 0x81c5ce23;
            this._slots = ['userId', 'messages', 'avgChars'];
            this.userId = params.userId;
            this.messages = params.messages;
            this.avgChars = params.avgChars;
        }
        static async read(_data, ..._args) {
            let userId = await index_js_1.Primitive.Long.read(_data);
            let messages = await index_js_1.Primitive.Int.read(_data);
            let avgChars = await index_js_1.Primitive.Int.read(_data);
            return new Raw.StatsGroupTopPoster({
                userId: userId,
                messages: messages,
                avgChars: avgChars,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            if (this.messages !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.messages));
            }
            if (this.avgChars !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.avgChars));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.StatsGroupTopPoster = StatsGroupTopPoster;
    class StatsGroupTopAdmin extends index_js_1.TLObject {
        userId;
        deleted;
        kicked;
        banned;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'StatsGroupTopAdmin';
            this.constructorId = 0xd7584c87;
            this.subclassOfId = 0x80359c5d;
            this._slots = ['userId', 'deleted', 'kicked', 'banned'];
            this.userId = params.userId;
            this.deleted = params.deleted;
            this.kicked = params.kicked;
            this.banned = params.banned;
        }
        static async read(_data, ..._args) {
            let userId = await index_js_1.Primitive.Long.read(_data);
            let deleted = await index_js_1.Primitive.Int.read(_data);
            let kicked = await index_js_1.Primitive.Int.read(_data);
            let banned = await index_js_1.Primitive.Int.read(_data);
            return new Raw.StatsGroupTopAdmin({
                userId: userId,
                deleted: deleted,
                kicked: kicked,
                banned: banned,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            if (this.deleted !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.deleted));
            }
            if (this.kicked !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.kicked));
            }
            if (this.banned !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.banned));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.StatsGroupTopAdmin = StatsGroupTopAdmin;
    class StatsGroupTopInviter extends index_js_1.TLObject {
        userId;
        invitations;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'StatsGroupTopInviter';
            this.constructorId = 0x535f779d;
            this.subclassOfId = 0x85010c7a;
            this._slots = ['userId', 'invitations'];
            this.userId = params.userId;
            this.invitations = params.invitations;
        }
        static async read(_data, ..._args) {
            let userId = await index_js_1.Primitive.Long.read(_data);
            let invitations = await index_js_1.Primitive.Int.read(_data);
            return new Raw.StatsGroupTopInviter({ userId: userId, invitations: invitations });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            if (this.invitations !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.invitations));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.StatsGroupTopInviter = StatsGroupTopInviter;
    class GlobalPrivacySettings extends index_js_1.TLObject {
        archiveAndMuteNewNoncontactPeers;
        keepArchivedUnmuted;
        keepArchivedFolders;
        hideReadMarks;
        newNoncontactPeersRequirePremium;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'GlobalPrivacySettings';
            this.constructorId = 0x734c4ccb;
            this.subclassOfId = 0xc90e5770;
            this._slots = [
                'archiveAndMuteNewNoncontactPeers',
                'keepArchivedUnmuted',
                'keepArchivedFolders',
                'hideReadMarks',
                'newNoncontactPeersRequirePremium',
            ];
            this.archiveAndMuteNewNoncontactPeers = params.archiveAndMuteNewNoncontactPeers;
            this.keepArchivedUnmuted = params.keepArchivedUnmuted;
            this.keepArchivedFolders = params.keepArchivedFolders;
            this.hideReadMarks = params.hideReadMarks;
            this.newNoncontactPeersRequirePremium = params.newNoncontactPeersRequirePremium;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let archiveAndMuteNewNoncontactPeers = flags & (1 << 0) ? true : false;
            let keepArchivedUnmuted = flags & (1 << 1) ? true : false;
            let keepArchivedFolders = flags & (1 << 2) ? true : false;
            let hideReadMarks = flags & (1 << 3) ? true : false;
            let newNoncontactPeersRequirePremium = flags & (1 << 4) ? true : false;
            return new Raw.GlobalPrivacySettings({
                archiveAndMuteNewNoncontactPeers: archiveAndMuteNewNoncontactPeers,
                keepArchivedUnmuted: keepArchivedUnmuted,
                keepArchivedFolders: keepArchivedFolders,
                hideReadMarks: hideReadMarks,
                newNoncontactPeersRequirePremium: newNoncontactPeersRequirePremium,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.archiveAndMuteNewNoncontactPeers ? 1 << 0 : 0;
            flags |= this.keepArchivedUnmuted ? 1 << 1 : 0;
            flags |= this.keepArchivedFolders ? 1 << 2 : 0;
            flags |= this.hideReadMarks ? 1 << 3 : 0;
            flags |= this.newNoncontactPeersRequirePremium ? 1 << 4 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.GlobalPrivacySettings = GlobalPrivacySettings;
    class MessageViews extends index_js_1.TLObject {
        views;
        forwards;
        replies;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageViews';
            this.constructorId = 0x455b853d;
            this.subclassOfId = 0x3cb083b9;
            this._slots = ['views', 'forwards', 'replies'];
            this.views = params.views;
            this.forwards = params.forwards;
            this.replies = params.replies;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let views = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let forwards = flags & (1 << 1) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let replies = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.MessageViews({ views: views, forwards: forwards, replies: replies });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.views !== undefined ? 1 << 0 : 0;
            flags |= this.forwards !== undefined ? 1 << 1 : 0;
            flags |= this.replies !== undefined ? 1 << 2 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.views !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.views));
            }
            if (this.forwards !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.forwards));
            }
            if (this.replies !== undefined) {
                b.write(this.replies.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageViews = MessageViews;
    class MessageReplyHeader extends index_js_1.TLObject {
        replyToScheduled;
        forumTopic;
        quote;
        replyToMsgId;
        replyToPeerId;
        replyFrom;
        replyMedia;
        replyToTopId;
        quoteText;
        quoteEntities;
        quoteOffset;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageReplyHeader';
            this.constructorId = 0xafbc09db;
            this.subclassOfId = 0x5b4d9167;
            this._slots = [
                'replyToScheduled',
                'forumTopic',
                'quote',
                'replyToMsgId',
                'replyToPeerId',
                'replyFrom',
                'replyMedia',
                'replyToTopId',
                'quoteText',
                'quoteEntities',
                'quoteOffset',
            ];
            this.replyToScheduled = params.replyToScheduled;
            this.forumTopic = params.forumTopic;
            this.quote = params.quote;
            this.replyToMsgId = params.replyToMsgId;
            this.replyToPeerId = params.replyToPeerId;
            this.replyFrom = params.replyFrom;
            this.replyMedia = params.replyMedia;
            this.replyToTopId = params.replyToTopId;
            this.quoteText = params.quoteText;
            this.quoteEntities = params.quoteEntities;
            this.quoteOffset = params.quoteOffset;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let replyToScheduled = flags & (1 << 2) ? true : false;
            let forumTopic = flags & (1 << 3) ? true : false;
            let quote = flags & (1 << 9) ? true : false;
            let replyToMsgId = flags & (1 << 4) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let replyToPeerId = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
            let replyFrom = flags & (1 << 5) ? await index_js_1.TLObject.read(_data) : undefined;
            let replyMedia = flags & (1 << 8) ? await index_js_1.TLObject.read(_data) : undefined;
            let replyToTopId = flags & (1 << 1) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let quoteText = flags & (1 << 6) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let quoteEntities = flags & (1 << 7) ? await index_js_1.TLObject.read(_data) : [];
            let quoteOffset = flags & (1 << 10) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            return new Raw.MessageReplyHeader({
                replyToScheduled: replyToScheduled,
                forumTopic: forumTopic,
                quote: quote,
                replyToMsgId: replyToMsgId,
                replyToPeerId: replyToPeerId,
                replyFrom: replyFrom,
                replyMedia: replyMedia,
                replyToTopId: replyToTopId,
                quoteText: quoteText,
                quoteEntities: quoteEntities,
                quoteOffset: quoteOffset,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.replyToScheduled ? 1 << 2 : 0;
            flags |= this.forumTopic ? 1 << 3 : 0;
            flags |= this.quote ? 1 << 9 : 0;
            flags |= this.replyToMsgId !== undefined ? 1 << 4 : 0;
            flags |= this.replyToPeerId !== undefined ? 1 << 0 : 0;
            flags |= this.replyFrom !== undefined ? 1 << 5 : 0;
            flags |= this.replyMedia !== undefined ? 1 << 8 : 0;
            flags |= this.replyToTopId !== undefined ? 1 << 1 : 0;
            flags |= this.quoteText !== undefined ? 1 << 6 : 0;
            flags |= this.quoteEntities ? 1 << 7 : 0;
            flags |= this.quoteOffset !== undefined ? 1 << 10 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.replyToMsgId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.replyToMsgId));
            }
            if (this.replyToPeerId !== undefined) {
                b.write(this.replyToPeerId.write());
            }
            if (this.replyFrom !== undefined) {
                b.write(this.replyFrom.write());
            }
            if (this.replyMedia !== undefined) {
                b.write(this.replyMedia.write());
            }
            if (this.replyToTopId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.replyToTopId));
            }
            if (this.quoteText !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.quoteText));
            }
            if (this.quoteEntities) {
                b.write(index_js_1.Primitive.Vector.write(this.quoteEntities));
            }
            if (this.quoteOffset !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.quoteOffset));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageReplyHeader = MessageReplyHeader;
    class MessageReplyStoryHeader extends index_js_1.TLObject {
        peer;
        storyId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageReplyStoryHeader';
            this.constructorId = 0xe5af939;
            this.subclassOfId = 0x5b4d9167;
            this._slots = ['peer', 'storyId'];
            this.peer = params.peer;
            this.storyId = params.storyId;
        }
        static async read(_data, ..._args) {
            let peer = await index_js_1.TLObject.read(_data);
            let storyId = await index_js_1.Primitive.Int.read(_data);
            return new Raw.MessageReplyStoryHeader({ peer: peer, storyId: storyId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.storyId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.storyId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageReplyStoryHeader = MessageReplyStoryHeader;
    class MessageReplies extends index_js_1.TLObject {
        comments;
        replies;
        repliesPts;
        recentRepliers;
        channelId;
        maxId;
        readMaxId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageReplies';
            this.constructorId = 0x83d60fc2;
            this.subclassOfId = 0x6ccd5ce2;
            this._slots = [
                'comments',
                'replies',
                'repliesPts',
                'recentRepliers',
                'channelId',
                'maxId',
                'readMaxId',
            ];
            this.comments = params.comments;
            this.replies = params.replies;
            this.repliesPts = params.repliesPts;
            this.recentRepliers = params.recentRepliers;
            this.channelId = params.channelId;
            this.maxId = params.maxId;
            this.readMaxId = params.readMaxId;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let comments = flags & (1 << 0) ? true : false;
            let replies = await index_js_1.Primitive.Int.read(_data);
            let repliesPts = await index_js_1.Primitive.Int.read(_data);
            let recentRepliers = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : [];
            let channelId = flags & (1 << 0) ? await index_js_1.Primitive.Long.read(_data) : undefined;
            let maxId = flags & (1 << 2) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let readMaxId = flags & (1 << 3) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            return new Raw.MessageReplies({
                comments: comments,
                replies: replies,
                repliesPts: repliesPts,
                recentRepliers: recentRepliers,
                channelId: channelId,
                maxId: maxId,
                readMaxId: readMaxId,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.comments ? 1 << 0 : 0;
            flags |= this.recentRepliers ? 1 << 1 : 0;
            flags |= this.channelId !== undefined ? 1 << 0 : 0;
            flags |= this.maxId !== undefined ? 1 << 2 : 0;
            flags |= this.readMaxId !== undefined ? 1 << 3 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.replies !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.replies));
            }
            if (this.repliesPts !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.repliesPts));
            }
            if (this.recentRepliers) {
                b.write(index_js_1.Primitive.Vector.write(this.recentRepliers));
            }
            if (this.channelId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.channelId));
            }
            if (this.maxId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.maxId));
            }
            if (this.readMaxId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.readMaxId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageReplies = MessageReplies;
    class PeerBlocked extends index_js_1.TLObject {
        peerId;
        date;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PeerBlocked';
            this.constructorId = 0xe8fd8014;
            this.subclassOfId = 0x54f2fc98;
            this._slots = ['peerId', 'date'];
            this.peerId = params.peerId;
            this.date = params.date;
        }
        static async read(_data, ..._args) {
            let peerId = await index_js_1.TLObject.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            return new Raw.PeerBlocked({ peerId: peerId, date: date });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.peerId !== undefined) {
                b.write(this.peerId.write());
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PeerBlocked = PeerBlocked;
    class GroupCallDiscarded extends index_js_1.TLObject {
        id;
        accessHash;
        duration;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'GroupCallDiscarded';
            this.constructorId = 0x7780bcb4;
            this.subclassOfId = 0x20b4f320;
            this._slots = ['id', 'accessHash', 'duration'];
            this.id = params.id;
            this.accessHash = params.accessHash;
            this.duration = params.duration;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.Long.read(_data);
            let accessHash = await index_js_1.Primitive.Long.read(_data);
            let duration = await index_js_1.Primitive.Int.read(_data);
            return new Raw.GroupCallDiscarded({ id: id, accessHash: accessHash, duration: duration });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.accessHash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.accessHash));
            }
            if (this.duration !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.duration));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.GroupCallDiscarded = GroupCallDiscarded;
    class GroupCall extends index_js_1.TLObject {
        joinMuted;
        canChangeJoinMuted;
        joinDateAsc;
        scheduleStartSubscribed;
        canStartVideo;
        recordVideoActive;
        rtmpStream;
        listenersHidden;
        id;
        accessHash;
        participantsCount;
        title;
        streamDcId;
        recordStartDate;
        scheduleDate;
        unmutedVideoCount;
        unmutedVideoLimit;
        version;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'GroupCall';
            this.constructorId = 0xd597650c;
            this.subclassOfId = 0x20b4f320;
            this._slots = [
                'joinMuted',
                'canChangeJoinMuted',
                'joinDateAsc',
                'scheduleStartSubscribed',
                'canStartVideo',
                'recordVideoActive',
                'rtmpStream',
                'listenersHidden',
                'id',
                'accessHash',
                'participantsCount',
                'title',
                'streamDcId',
                'recordStartDate',
                'scheduleDate',
                'unmutedVideoCount',
                'unmutedVideoLimit',
                'version',
            ];
            this.joinMuted = params.joinMuted;
            this.canChangeJoinMuted = params.canChangeJoinMuted;
            this.joinDateAsc = params.joinDateAsc;
            this.scheduleStartSubscribed = params.scheduleStartSubscribed;
            this.canStartVideo = params.canStartVideo;
            this.recordVideoActive = params.recordVideoActive;
            this.rtmpStream = params.rtmpStream;
            this.listenersHidden = params.listenersHidden;
            this.id = params.id;
            this.accessHash = params.accessHash;
            this.participantsCount = params.participantsCount;
            this.title = params.title;
            this.streamDcId = params.streamDcId;
            this.recordStartDate = params.recordStartDate;
            this.scheduleDate = params.scheduleDate;
            this.unmutedVideoCount = params.unmutedVideoCount;
            this.unmutedVideoLimit = params.unmutedVideoLimit;
            this.version = params.version;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let joinMuted = flags & (1 << 1) ? true : false;
            let canChangeJoinMuted = flags & (1 << 2) ? true : false;
            let joinDateAsc = flags & (1 << 6) ? true : false;
            let scheduleStartSubscribed = flags & (1 << 8) ? true : false;
            let canStartVideo = flags & (1 << 9) ? true : false;
            let recordVideoActive = flags & (1 << 11) ? true : false;
            let rtmpStream = flags & (1 << 12) ? true : false;
            let listenersHidden = flags & (1 << 13) ? true : false;
            let id = await index_js_1.Primitive.Long.read(_data);
            let accessHash = await index_js_1.Primitive.Long.read(_data);
            let participantsCount = await index_js_1.Primitive.Int.read(_data);
            let title = flags & (1 << 3) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let streamDcId = flags & (1 << 4) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let recordStartDate = flags & (1 << 5) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let scheduleDate = flags & (1 << 7) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let unmutedVideoCount = flags & (1 << 10) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let unmutedVideoLimit = await index_js_1.Primitive.Int.read(_data);
            let version = await index_js_1.Primitive.Int.read(_data);
            return new Raw.GroupCall({
                joinMuted: joinMuted,
                canChangeJoinMuted: canChangeJoinMuted,
                joinDateAsc: joinDateAsc,
                scheduleStartSubscribed: scheduleStartSubscribed,
                canStartVideo: canStartVideo,
                recordVideoActive: recordVideoActive,
                rtmpStream: rtmpStream,
                listenersHidden: listenersHidden,
                id: id,
                accessHash: accessHash,
                participantsCount: participantsCount,
                title: title,
                streamDcId: streamDcId,
                recordStartDate: recordStartDate,
                scheduleDate: scheduleDate,
                unmutedVideoCount: unmutedVideoCount,
                unmutedVideoLimit: unmutedVideoLimit,
                version: version,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.joinMuted ? 1 << 1 : 0;
            flags |= this.canChangeJoinMuted ? 1 << 2 : 0;
            flags |= this.joinDateAsc ? 1 << 6 : 0;
            flags |= this.scheduleStartSubscribed ? 1 << 8 : 0;
            flags |= this.canStartVideo ? 1 << 9 : 0;
            flags |= this.recordVideoActive ? 1 << 11 : 0;
            flags |= this.rtmpStream ? 1 << 12 : 0;
            flags |= this.listenersHidden ? 1 << 13 : 0;
            flags |= this.title !== undefined ? 1 << 3 : 0;
            flags |= this.streamDcId !== undefined ? 1 << 4 : 0;
            flags |= this.recordStartDate !== undefined ? 1 << 5 : 0;
            flags |= this.scheduleDate !== undefined ? 1 << 7 : 0;
            flags |= this.unmutedVideoCount !== undefined ? 1 << 10 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.accessHash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.accessHash));
            }
            if (this.participantsCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.participantsCount));
            }
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            if (this.streamDcId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.streamDcId));
            }
            if (this.recordStartDate !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.recordStartDate));
            }
            if (this.scheduleDate !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.scheduleDate));
            }
            if (this.unmutedVideoCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.unmutedVideoCount));
            }
            if (this.unmutedVideoLimit !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.unmutedVideoLimit));
            }
            if (this.version !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.version));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.GroupCall = GroupCall;
    class InputGroupCall extends index_js_1.TLObject {
        id;
        accessHash;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputGroupCall';
            this.constructorId = 0xd8aa840f;
            this.subclassOfId = 0x58611ab1;
            this._slots = ['id', 'accessHash'];
            this.id = params.id;
            this.accessHash = params.accessHash;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.Long.read(_data);
            let accessHash = await index_js_1.Primitive.Long.read(_data);
            return new Raw.InputGroupCall({ id: id, accessHash: accessHash });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.accessHash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.accessHash));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputGroupCall = InputGroupCall;
    class GroupCallParticipant extends index_js_1.TLObject {
        muted;
        left;
        canSelfUnmute;
        justJoined;
        versioned;
        min;
        mutedByYou;
        volumeByAdmin;
        self;
        videoJoined;
        peer;
        date;
        activeDate;
        source;
        volume;
        about;
        raiseHandRating;
        video;
        presentation;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'GroupCallParticipant';
            this.constructorId = 0xeba636fe;
            this.subclassOfId = 0xc01aaf4c;
            this._slots = [
                'muted',
                'left',
                'canSelfUnmute',
                'justJoined',
                'versioned',
                'min',
                'mutedByYou',
                'volumeByAdmin',
                'self',
                'videoJoined',
                'peer',
                'date',
                'activeDate',
                'source',
                'volume',
                'about',
                'raiseHandRating',
                'video',
                'presentation',
            ];
            this.muted = params.muted;
            this.left = params.left;
            this.canSelfUnmute = params.canSelfUnmute;
            this.justJoined = params.justJoined;
            this.versioned = params.versioned;
            this.min = params.min;
            this.mutedByYou = params.mutedByYou;
            this.volumeByAdmin = params.volumeByAdmin;
            this.self = params.self;
            this.videoJoined = params.videoJoined;
            this.peer = params.peer;
            this.date = params.date;
            this.activeDate = params.activeDate;
            this.source = params.source;
            this.volume = params.volume;
            this.about = params.about;
            this.raiseHandRating = params.raiseHandRating;
            this.video = params.video;
            this.presentation = params.presentation;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let muted = flags & (1 << 0) ? true : false;
            let left = flags & (1 << 1) ? true : false;
            let canSelfUnmute = flags & (1 << 2) ? true : false;
            let justJoined = flags & (1 << 4) ? true : false;
            let versioned = flags & (1 << 5) ? true : false;
            let min = flags & (1 << 8) ? true : false;
            let mutedByYou = flags & (1 << 9) ? true : false;
            let volumeByAdmin = flags & (1 << 10) ? true : false;
            let self = flags & (1 << 12) ? true : false;
            let videoJoined = flags & (1 << 15) ? true : false;
            let peer = await index_js_1.TLObject.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            let activeDate = flags & (1 << 3) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let source = await index_js_1.Primitive.Int.read(_data);
            let volume = flags & (1 << 7) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let about = flags & (1 << 11) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let raiseHandRating = flags & (1 << 13) ? await index_js_1.Primitive.Long.read(_data) : undefined;
            let video = flags & (1 << 6) ? await index_js_1.TLObject.read(_data) : undefined;
            let presentation = flags & (1 << 14) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.GroupCallParticipant({
                muted: muted,
                left: left,
                canSelfUnmute: canSelfUnmute,
                justJoined: justJoined,
                versioned: versioned,
                min: min,
                mutedByYou: mutedByYou,
                volumeByAdmin: volumeByAdmin,
                self: self,
                videoJoined: videoJoined,
                peer: peer,
                date: date,
                activeDate: activeDate,
                source: source,
                volume: volume,
                about: about,
                raiseHandRating: raiseHandRating,
                video: video,
                presentation: presentation,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.muted ? 1 << 0 : 0;
            flags |= this.left ? 1 << 1 : 0;
            flags |= this.canSelfUnmute ? 1 << 2 : 0;
            flags |= this.justJoined ? 1 << 4 : 0;
            flags |= this.versioned ? 1 << 5 : 0;
            flags |= this.min ? 1 << 8 : 0;
            flags |= this.mutedByYou ? 1 << 9 : 0;
            flags |= this.volumeByAdmin ? 1 << 10 : 0;
            flags |= this.self ? 1 << 12 : 0;
            flags |= this.videoJoined ? 1 << 15 : 0;
            flags |= this.activeDate !== undefined ? 1 << 3 : 0;
            flags |= this.volume !== undefined ? 1 << 7 : 0;
            flags |= this.about !== undefined ? 1 << 11 : 0;
            flags |= this.raiseHandRating !== undefined ? 1 << 13 : 0;
            flags |= this.video !== undefined ? 1 << 6 : 0;
            flags |= this.presentation !== undefined ? 1 << 14 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.activeDate !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.activeDate));
            }
            if (this.source !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.source));
            }
            if (this.volume !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.volume));
            }
            if (this.about !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.about));
            }
            if (this.raiseHandRating !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.raiseHandRating));
            }
            if (this.video !== undefined) {
                b.write(this.video.write());
            }
            if (this.presentation !== undefined) {
                b.write(this.presentation.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.GroupCallParticipant = GroupCallParticipant;
    class InlineQueryPeerTypeSameBotPM extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InlineQueryPeerTypeSameBotPM';
            this.constructorId = 0x3081ed9d;
            this.subclassOfId = 0xafb0fa1f;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InlineQueryPeerTypeSameBotPM();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InlineQueryPeerTypeSameBotPM = InlineQueryPeerTypeSameBotPM;
    class InlineQueryPeerTypePM extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InlineQueryPeerTypePM';
            this.constructorId = 0x833c0fac;
            this.subclassOfId = 0xafb0fa1f;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InlineQueryPeerTypePM();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InlineQueryPeerTypePM = InlineQueryPeerTypePM;
    class InlineQueryPeerTypeChat extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InlineQueryPeerTypeChat';
            this.constructorId = 0xd766c50a;
            this.subclassOfId = 0xafb0fa1f;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InlineQueryPeerTypeChat();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InlineQueryPeerTypeChat = InlineQueryPeerTypeChat;
    class InlineQueryPeerTypeMegagroup extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InlineQueryPeerTypeMegagroup';
            this.constructorId = 0x5ec4be43;
            this.subclassOfId = 0xafb0fa1f;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InlineQueryPeerTypeMegagroup();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InlineQueryPeerTypeMegagroup = InlineQueryPeerTypeMegagroup;
    class InlineQueryPeerTypeBroadcast extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InlineQueryPeerTypeBroadcast';
            this.constructorId = 0x6334ee9a;
            this.subclassOfId = 0xafb0fa1f;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InlineQueryPeerTypeBroadcast();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InlineQueryPeerTypeBroadcast = InlineQueryPeerTypeBroadcast;
    class InlineQueryPeerTypeBotPM extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'InlineQueryPeerTypeBotPM';
            this.constructorId = 0xe3b2d0c;
            this.subclassOfId = 0xafb0fa1f;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.InlineQueryPeerTypeBotPM();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InlineQueryPeerTypeBotPM = InlineQueryPeerTypeBotPM;
    class ChatInviteImporter extends index_js_1.TLObject {
        requested;
        viaChatlist;
        userId;
        date;
        about;
        approvedBy;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChatInviteImporter';
            this.constructorId = 0x8c5adfd9;
            this.subclassOfId = 0x5312542e;
            this._slots = ['requested', 'viaChatlist', 'userId', 'date', 'about', 'approvedBy'];
            this.requested = params.requested;
            this.viaChatlist = params.viaChatlist;
            this.userId = params.userId;
            this.date = params.date;
            this.about = params.about;
            this.approvedBy = params.approvedBy;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let requested = flags & (1 << 0) ? true : false;
            let viaChatlist = flags & (1 << 3) ? true : false;
            let userId = await index_js_1.Primitive.Long.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            let about = flags & (1 << 2) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let approvedBy = flags & (1 << 1) ? await index_js_1.Primitive.Long.read(_data) : undefined;
            return new Raw.ChatInviteImporter({
                requested: requested,
                viaChatlist: viaChatlist,
                userId: userId,
                date: date,
                about: about,
                approvedBy: approvedBy,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.requested ? 1 << 0 : 0;
            flags |= this.viaChatlist ? 1 << 3 : 0;
            flags |= this.about !== undefined ? 1 << 2 : 0;
            flags |= this.approvedBy !== undefined ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.about !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.about));
            }
            if (this.approvedBy !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.approvedBy));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChatInviteImporter = ChatInviteImporter;
    class ChatAdminWithInvites extends index_js_1.TLObject {
        adminId;
        invitesCount;
        revokedInvitesCount;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChatAdminWithInvites';
            this.constructorId = 0xf2ecef23;
            this.subclassOfId = 0x5063f398;
            this._slots = ['adminId', 'invitesCount', 'revokedInvitesCount'];
            this.adminId = params.adminId;
            this.invitesCount = params.invitesCount;
            this.revokedInvitesCount = params.revokedInvitesCount;
        }
        static async read(_data, ..._args) {
            let adminId = await index_js_1.Primitive.Long.read(_data);
            let invitesCount = await index_js_1.Primitive.Int.read(_data);
            let revokedInvitesCount = await index_js_1.Primitive.Int.read(_data);
            return new Raw.ChatAdminWithInvites({
                adminId: adminId,
                invitesCount: invitesCount,
                revokedInvitesCount: revokedInvitesCount,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.adminId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.adminId));
            }
            if (this.invitesCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.invitesCount));
            }
            if (this.revokedInvitesCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.revokedInvitesCount));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChatAdminWithInvites = ChatAdminWithInvites;
    class GroupCallParticipantVideoSourceGroup extends index_js_1.TLObject {
        semantics;
        sources;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'GroupCallParticipantVideoSourceGroup';
            this.constructorId = 0xdcb118b7;
            this.subclassOfId = 0x3015f87c;
            this._slots = ['semantics', 'sources'];
            this.semantics = params.semantics;
            this.sources = params.sources;
        }
        static async read(_data, ..._args) {
            let semantics = await index_js_1.Primitive.String.read(_data);
            let sources = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int);
            return new Raw.GroupCallParticipantVideoSourceGroup({
                semantics: semantics,
                sources: sources,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.semantics !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.semantics));
            }
            if (this.sources) {
                b.write(index_js_1.Primitive.Vector.write(this.sources, index_js_1.Primitive.Int));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.GroupCallParticipantVideoSourceGroup = GroupCallParticipantVideoSourceGroup;
    class GroupCallParticipantVideo extends index_js_1.TLObject {
        paused;
        endpoint;
        sourceGroups;
        audioSource;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'GroupCallParticipantVideo';
            this.constructorId = 0x67753ac8;
            this.subclassOfId = 0xef46b8db;
            this._slots = ['paused', 'endpoint', 'sourceGroups', 'audioSource'];
            this.paused = params.paused;
            this.endpoint = params.endpoint;
            this.sourceGroups = params.sourceGroups;
            this.audioSource = params.audioSource;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let paused = flags & (1 << 0) ? true : false;
            let endpoint = await index_js_1.Primitive.String.read(_data);
            let sourceGroups = await index_js_1.TLObject.read(_data);
            let audioSource = flags & (1 << 1) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            return new Raw.GroupCallParticipantVideo({
                paused: paused,
                endpoint: endpoint,
                sourceGroups: sourceGroups,
                audioSource: audioSource,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.paused ? 1 << 0 : 0;
            flags |= this.audioSource !== undefined ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.endpoint !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.endpoint));
            }
            if (this.sourceGroups) {
                b.write(index_js_1.Primitive.Vector.write(this.sourceGroups));
            }
            if (this.audioSource !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.audioSource));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.GroupCallParticipantVideo = GroupCallParticipantVideo;
    class BotCommandScopeDefault extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'BotCommandScopeDefault';
            this.constructorId = 0x2f6cb2ab;
            this.subclassOfId = 0x4baf5d10;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.BotCommandScopeDefault();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.BotCommandScopeDefault = BotCommandScopeDefault;
    class BotCommandScopeUsers extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'BotCommandScopeUsers';
            this.constructorId = 0x3c4f04d8;
            this.subclassOfId = 0x4baf5d10;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.BotCommandScopeUsers();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.BotCommandScopeUsers = BotCommandScopeUsers;
    class BotCommandScopeChats extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'BotCommandScopeChats';
            this.constructorId = 0x6fe1a881;
            this.subclassOfId = 0x4baf5d10;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.BotCommandScopeChats();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.BotCommandScopeChats = BotCommandScopeChats;
    class BotCommandScopeChatAdmins extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'BotCommandScopeChatAdmins';
            this.constructorId = 0xb9aa606a;
            this.subclassOfId = 0x4baf5d10;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.BotCommandScopeChatAdmins();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.BotCommandScopeChatAdmins = BotCommandScopeChatAdmins;
    class BotCommandScopePeer extends index_js_1.TLObject {
        peer;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'BotCommandScopePeer';
            this.constructorId = 0xdb9d897d;
            this.subclassOfId = 0x4baf5d10;
            this._slots = ['peer'];
            this.peer = params.peer;
        }
        static async read(_data, ..._args) {
            let peer = await index_js_1.TLObject.read(_data);
            return new Raw.BotCommandScopePeer({ peer: peer });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.BotCommandScopePeer = BotCommandScopePeer;
    class BotCommandScopePeerAdmins extends index_js_1.TLObject {
        peer;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'BotCommandScopePeerAdmins';
            this.constructorId = 0x3fd863d1;
            this.subclassOfId = 0x4baf5d10;
            this._slots = ['peer'];
            this.peer = params.peer;
        }
        static async read(_data, ..._args) {
            let peer = await index_js_1.TLObject.read(_data);
            return new Raw.BotCommandScopePeerAdmins({ peer: peer });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.BotCommandScopePeerAdmins = BotCommandScopePeerAdmins;
    class BotCommandScopePeerUser extends index_js_1.TLObject {
        peer;
        userId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'BotCommandScopePeerUser';
            this.constructorId = 0xa1321f3;
            this.subclassOfId = 0x4baf5d10;
            this._slots = ['peer', 'userId'];
            this.peer = params.peer;
            this.userId = params.userId;
        }
        static async read(_data, ..._args) {
            let peer = await index_js_1.TLObject.read(_data);
            let userId = await index_js_1.TLObject.read(_data);
            return new Raw.BotCommandScopePeerUser({ peer: peer, userId: userId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.userId !== undefined) {
                b.write(this.userId.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.BotCommandScopePeerUser = BotCommandScopePeerUser;
    class SponsoredMessage extends index_js_1.TLObject {
        recommended;
        canReport;
        randomId;
        url;
        title;
        message;
        entities;
        photo;
        color;
        buttonText;
        sponsorInfo;
        additionalInfo;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'SponsoredMessage';
            this.constructorId = 0xbdedf566;
            this.subclassOfId = 0xe157d836;
            this._slots = [
                'recommended',
                'canReport',
                'randomId',
                'url',
                'title',
                'message',
                'entities',
                'photo',
                'color',
                'buttonText',
                'sponsorInfo',
                'additionalInfo',
            ];
            this.recommended = params.recommended;
            this.canReport = params.canReport;
            this.randomId = params.randomId;
            this.url = params.url;
            this.title = params.title;
            this.message = params.message;
            this.entities = params.entities;
            this.photo = params.photo;
            this.color = params.color;
            this.buttonText = params.buttonText;
            this.sponsorInfo = params.sponsorInfo;
            this.additionalInfo = params.additionalInfo;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let recommended = flags & (1 << 5) ? true : false;
            let canReport = flags & (1 << 12) ? true : false;
            let randomId = await index_js_1.Primitive.Bytes.read(_data);
            let url = await index_js_1.Primitive.String.read(_data);
            let title = await index_js_1.Primitive.String.read(_data);
            let message = await index_js_1.Primitive.String.read(_data);
            let entities = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : [];
            let photo = flags & (1 << 6) ? await index_js_1.TLObject.read(_data) : undefined;
            let color = flags & (1 << 13) ? await index_js_1.TLObject.read(_data) : undefined;
            let buttonText = await index_js_1.Primitive.String.read(_data);
            let sponsorInfo = flags & (1 << 7) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let additionalInfo = flags & (1 << 8) ? await index_js_1.Primitive.String.read(_data) : undefined;
            return new Raw.SponsoredMessage({
                recommended: recommended,
                canReport: canReport,
                randomId: randomId,
                url: url,
                title: title,
                message: message,
                entities: entities,
                photo: photo,
                color: color,
                buttonText: buttonText,
                sponsorInfo: sponsorInfo,
                additionalInfo: additionalInfo,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.recommended ? 1 << 5 : 0;
            flags |= this.canReport ? 1 << 12 : 0;
            flags |= this.entities ? 1 << 1 : 0;
            flags |= this.photo !== undefined ? 1 << 6 : 0;
            flags |= this.color !== undefined ? 1 << 13 : 0;
            flags |= this.sponsorInfo !== undefined ? 1 << 7 : 0;
            flags |= this.additionalInfo !== undefined ? 1 << 8 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.randomId !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.randomId));
            }
            if (this.url !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.url));
            }
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            if (this.message !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.message));
            }
            if (this.entities) {
                b.write(index_js_1.Primitive.Vector.write(this.entities));
            }
            if (this.photo !== undefined) {
                b.write(this.photo.write());
            }
            if (this.color !== undefined) {
                b.write(this.color.write());
            }
            if (this.buttonText !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.buttonText));
            }
            if (this.sponsorInfo !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.sponsorInfo));
            }
            if (this.additionalInfo !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.additionalInfo));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SponsoredMessage = SponsoredMessage;
    class SearchResultsCalendarPeriod extends index_js_1.TLObject {
        date;
        minMsgId;
        maxMsgId;
        count;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'SearchResultsCalendarPeriod';
            this.constructorId = 0xc9b0539f;
            this.subclassOfId = 0xe25cf8ff;
            this._slots = ['date', 'minMsgId', 'maxMsgId', 'count'];
            this.date = params.date;
            this.minMsgId = params.minMsgId;
            this.maxMsgId = params.maxMsgId;
            this.count = params.count;
        }
        static async read(_data, ..._args) {
            let date = await index_js_1.Primitive.Int.read(_data);
            let minMsgId = await index_js_1.Primitive.Int.read(_data);
            let maxMsgId = await index_js_1.Primitive.Int.read(_data);
            let count = await index_js_1.Primitive.Int.read(_data);
            return new Raw.SearchResultsCalendarPeriod({
                date: date,
                minMsgId: minMsgId,
                maxMsgId: maxMsgId,
                count: count,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.minMsgId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.minMsgId));
            }
            if (this.maxMsgId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.maxMsgId));
            }
            if (this.count !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.count));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SearchResultsCalendarPeriod = SearchResultsCalendarPeriod;
    class SearchResultPosition extends index_js_1.TLObject {
        msgId;
        date;
        offset;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'SearchResultPosition';
            this.constructorId = 0x7f648b67;
            this.subclassOfId = 0xb8e21614;
            this._slots = ['msgId', 'date', 'offset'];
            this.msgId = params.msgId;
            this.date = params.date;
            this.offset = params.offset;
        }
        static async read(_data, ..._args) {
            let msgId = await index_js_1.Primitive.Int.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            let offset = await index_js_1.Primitive.Int.read(_data);
            return new Raw.SearchResultPosition({ msgId: msgId, date: date, offset: offset });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.msgId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.msgId));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.offset !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.offset));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SearchResultPosition = SearchResultPosition;
    class ReactionCount extends index_js_1.TLObject {
        chosenOrder;
        reaction;
        count;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ReactionCount';
            this.constructorId = 0xa3d1cb80;
            this.subclassOfId = 0xd208ce3f;
            this._slots = ['chosenOrder', 'reaction', 'count'];
            this.chosenOrder = params.chosenOrder;
            this.reaction = params.reaction;
            this.count = params.count;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let chosenOrder = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let reaction = await index_js_1.TLObject.read(_data);
            let count = await index_js_1.Primitive.Int.read(_data);
            return new Raw.ReactionCount({ chosenOrder: chosenOrder, reaction: reaction, count: count });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.chosenOrder !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.chosenOrder !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.chosenOrder));
            }
            if (this.reaction !== undefined) {
                b.write(this.reaction.write());
            }
            if (this.count !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.count));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ReactionCount = ReactionCount;
    class MessageReactions extends index_js_1.TLObject {
        min;
        canSeeList;
        reactionsAsTags;
        results;
        recentReactions;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageReactions';
            this.constructorId = 0x4f2b9479;
            this.subclassOfId = 0x8a5b071c;
            this._slots = ['min', 'canSeeList', 'reactionsAsTags', 'results', 'recentReactions'];
            this.min = params.min;
            this.canSeeList = params.canSeeList;
            this.reactionsAsTags = params.reactionsAsTags;
            this.results = params.results;
            this.recentReactions = params.recentReactions;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let min = flags & (1 << 0) ? true : false;
            let canSeeList = flags & (1 << 2) ? true : false;
            let reactionsAsTags = flags & (1 << 3) ? true : false;
            let results = await index_js_1.TLObject.read(_data);
            let recentReactions = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : [];
            return new Raw.MessageReactions({
                min: min,
                canSeeList: canSeeList,
                reactionsAsTags: reactionsAsTags,
                results: results,
                recentReactions: recentReactions,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.min ? 1 << 0 : 0;
            flags |= this.canSeeList ? 1 << 2 : 0;
            flags |= this.reactionsAsTags ? 1 << 3 : 0;
            flags |= this.recentReactions ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.results) {
                b.write(index_js_1.Primitive.Vector.write(this.results));
            }
            if (this.recentReactions) {
                b.write(index_js_1.Primitive.Vector.write(this.recentReactions));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageReactions = MessageReactions;
    class AvailableReaction extends index_js_1.TLObject {
        inactive;
        premium;
        reaction;
        title;
        staticIcon;
        appearAnimation;
        selectAnimation;
        activateAnimation;
        effectAnimation;
        aroundAnimation;
        centerIcon;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'AvailableReaction';
            this.constructorId = 0xc077ec01;
            this.subclassOfId = 0x8c1c9d73;
            this._slots = [
                'inactive',
                'premium',
                'reaction',
                'title',
                'staticIcon',
                'appearAnimation',
                'selectAnimation',
                'activateAnimation',
                'effectAnimation',
                'aroundAnimation',
                'centerIcon',
            ];
            this.inactive = params.inactive;
            this.premium = params.premium;
            this.reaction = params.reaction;
            this.title = params.title;
            this.staticIcon = params.staticIcon;
            this.appearAnimation = params.appearAnimation;
            this.selectAnimation = params.selectAnimation;
            this.activateAnimation = params.activateAnimation;
            this.effectAnimation = params.effectAnimation;
            this.aroundAnimation = params.aroundAnimation;
            this.centerIcon = params.centerIcon;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let inactive = flags & (1 << 0) ? true : false;
            let premium = flags & (1 << 2) ? true : false;
            let reaction = await index_js_1.Primitive.String.read(_data);
            let title = await index_js_1.Primitive.String.read(_data);
            let staticIcon = await index_js_1.TLObject.read(_data);
            let appearAnimation = await index_js_1.TLObject.read(_data);
            let selectAnimation = await index_js_1.TLObject.read(_data);
            let activateAnimation = await index_js_1.TLObject.read(_data);
            let effectAnimation = await index_js_1.TLObject.read(_data);
            let aroundAnimation = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : undefined;
            let centerIcon = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.AvailableReaction({
                inactive: inactive,
                premium: premium,
                reaction: reaction,
                title: title,
                staticIcon: staticIcon,
                appearAnimation: appearAnimation,
                selectAnimation: selectAnimation,
                activateAnimation: activateAnimation,
                effectAnimation: effectAnimation,
                aroundAnimation: aroundAnimation,
                centerIcon: centerIcon,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.inactive ? 1 << 0 : 0;
            flags |= this.premium ? 1 << 2 : 0;
            flags |= this.aroundAnimation !== undefined ? 1 << 1 : 0;
            flags |= this.centerIcon !== undefined ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.reaction !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.reaction));
            }
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            if (this.staticIcon !== undefined) {
                b.write(this.staticIcon.write());
            }
            if (this.appearAnimation !== undefined) {
                b.write(this.appearAnimation.write());
            }
            if (this.selectAnimation !== undefined) {
                b.write(this.selectAnimation.write());
            }
            if (this.activateAnimation !== undefined) {
                b.write(this.activateAnimation.write());
            }
            if (this.effectAnimation !== undefined) {
                b.write(this.effectAnimation.write());
            }
            if (this.aroundAnimation !== undefined) {
                b.write(this.aroundAnimation.write());
            }
            if (this.centerIcon !== undefined) {
                b.write(this.centerIcon.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.AvailableReaction = AvailableReaction;
    class MessagePeerReaction extends index_js_1.TLObject {
        big;
        unread;
        my;
        peerId;
        date;
        reaction;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessagePeerReaction';
            this.constructorId = 0x8c79b63c;
            this.subclassOfId = 0xaf73a2a5;
            this._slots = ['big', 'unread', 'my', 'peerId', 'date', 'reaction'];
            this.big = params.big;
            this.unread = params.unread;
            this.my = params.my;
            this.peerId = params.peerId;
            this.date = params.date;
            this.reaction = params.reaction;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let big = flags & (1 << 0) ? true : false;
            let unread = flags & (1 << 1) ? true : false;
            let my = flags & (1 << 2) ? true : false;
            let peerId = await index_js_1.TLObject.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            let reaction = await index_js_1.TLObject.read(_data);
            return new Raw.MessagePeerReaction({
                big: big,
                unread: unread,
                my: my,
                peerId: peerId,
                date: date,
                reaction: reaction,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.big ? 1 << 0 : 0;
            flags |= this.unread ? 1 << 1 : 0;
            flags |= this.my ? 1 << 2 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.peerId !== undefined) {
                b.write(this.peerId.write());
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.reaction !== undefined) {
                b.write(this.reaction.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessagePeerReaction = MessagePeerReaction;
    class GroupCallStreamChannel extends index_js_1.TLObject {
        channel;
        scale;
        lastTimestampMs;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'GroupCallStreamChannel';
            this.constructorId = 0x80eb48af;
            this.subclassOfId = 0xdd44b258;
            this._slots = ['channel', 'scale', 'lastTimestampMs'];
            this.channel = params.channel;
            this.scale = params.scale;
            this.lastTimestampMs = params.lastTimestampMs;
        }
        static async read(_data, ..._args) {
            let channel = await index_js_1.Primitive.Int.read(_data);
            let scale = await index_js_1.Primitive.Int.read(_data);
            let lastTimestampMs = await index_js_1.Primitive.Long.read(_data);
            return new Raw.GroupCallStreamChannel({
                channel: channel,
                scale: scale,
                lastTimestampMs: lastTimestampMs,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.channel !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.channel));
            }
            if (this.scale !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.scale));
            }
            if (this.lastTimestampMs !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.lastTimestampMs));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.GroupCallStreamChannel = GroupCallStreamChannel;
    class AttachMenuBotIconColor extends index_js_1.TLObject {
        name;
        color;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'AttachMenuBotIconColor';
            this.constructorId = 0x4576f3f0;
            this.subclassOfId = 0xbea4cb6a;
            this._slots = ['name', 'color'];
            this.name = params.name;
            this.color = params.color;
        }
        static async read(_data, ..._args) {
            let name = await index_js_1.Primitive.String.read(_data);
            let color = await index_js_1.Primitive.Int.read(_data);
            return new Raw.AttachMenuBotIconColor({ name: name, color: color });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.name !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.name));
            }
            if (this.color !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.color));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.AttachMenuBotIconColor = AttachMenuBotIconColor;
    class AttachMenuBotIcon extends index_js_1.TLObject {
        name;
        icon;
        colors;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'AttachMenuBotIcon';
            this.constructorId = 0xb2a7386b;
            this.subclassOfId = 0x80484555;
            this._slots = ['name', 'icon', 'colors'];
            this.name = params.name;
            this.icon = params.icon;
            this.colors = params.colors;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let name = await index_js_1.Primitive.String.read(_data);
            let icon = await index_js_1.TLObject.read(_data);
            let colors = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : [];
            return new Raw.AttachMenuBotIcon({ name: name, icon: icon, colors: colors });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.colors ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.name !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.name));
            }
            if (this.icon !== undefined) {
                b.write(this.icon.write());
            }
            if (this.colors) {
                b.write(index_js_1.Primitive.Vector.write(this.colors));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.AttachMenuBotIcon = AttachMenuBotIcon;
    class AttachMenuBot extends index_js_1.TLObject {
        inactive;
        hasSettings;
        requestWriteAccess;
        showInAttachMenu;
        showInSideMenu;
        sideMenuDisclaimerNeeded;
        botId;
        shortName;
        peerTypes;
        icons;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'AttachMenuBot';
            this.constructorId = 0xd90d8dfe;
            this.subclassOfId = 0x9f087446;
            this._slots = [
                'inactive',
                'hasSettings',
                'requestWriteAccess',
                'showInAttachMenu',
                'showInSideMenu',
                'sideMenuDisclaimerNeeded',
                'botId',
                'shortName',
                'peerTypes',
                'icons',
            ];
            this.inactive = params.inactive;
            this.hasSettings = params.hasSettings;
            this.requestWriteAccess = params.requestWriteAccess;
            this.showInAttachMenu = params.showInAttachMenu;
            this.showInSideMenu = params.showInSideMenu;
            this.sideMenuDisclaimerNeeded = params.sideMenuDisclaimerNeeded;
            this.botId = params.botId;
            this.shortName = params.shortName;
            this.peerTypes = params.peerTypes;
            this.icons = params.icons;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let inactive = flags & (1 << 0) ? true : false;
            let hasSettings = flags & (1 << 1) ? true : false;
            let requestWriteAccess = flags & (1 << 2) ? true : false;
            let showInAttachMenu = flags & (1 << 3) ? true : false;
            let showInSideMenu = flags & (1 << 4) ? true : false;
            let sideMenuDisclaimerNeeded = flags & (1 << 5) ? true : false;
            let botId = await index_js_1.Primitive.Long.read(_data);
            let shortName = await index_js_1.Primitive.String.read(_data);
            let peerTypes = flags & (1 << 3) ? await index_js_1.TLObject.read(_data) : [];
            let icons = await index_js_1.TLObject.read(_data);
            return new Raw.AttachMenuBot({
                inactive: inactive,
                hasSettings: hasSettings,
                requestWriteAccess: requestWriteAccess,
                showInAttachMenu: showInAttachMenu,
                showInSideMenu: showInSideMenu,
                sideMenuDisclaimerNeeded: sideMenuDisclaimerNeeded,
                botId: botId,
                shortName: shortName,
                peerTypes: peerTypes,
                icons: icons,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.inactive ? 1 << 0 : 0;
            flags |= this.hasSettings ? 1 << 1 : 0;
            flags |= this.requestWriteAccess ? 1 << 2 : 0;
            flags |= this.showInAttachMenu ? 1 << 3 : 0;
            flags |= this.showInSideMenu ? 1 << 4 : 0;
            flags |= this.sideMenuDisclaimerNeeded ? 1 << 5 : 0;
            flags |= this.peerTypes ? 1 << 3 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.botId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.botId));
            }
            if (this.shortName !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.shortName));
            }
            if (this.peerTypes) {
                b.write(index_js_1.Primitive.Vector.write(this.peerTypes));
            }
            if (this.icons) {
                b.write(index_js_1.Primitive.Vector.write(this.icons));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.AttachMenuBot = AttachMenuBot;
    class AttachMenuBotsNotModified extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'AttachMenuBotsNotModified';
            this.constructorId = 0xf1d88a5c;
            this.subclassOfId = 0x842e23da;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.AttachMenuBotsNotModified();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.AttachMenuBotsNotModified = AttachMenuBotsNotModified;
    class AttachMenuBots extends index_js_1.TLObject {
        hash;
        bots;
        users;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'AttachMenuBots';
            this.constructorId = 0x3c4301c0;
            this.subclassOfId = 0x842e23da;
            this._slots = ['hash', 'bots', 'users'];
            this.hash = params.hash;
            this.bots = params.bots;
            this.users = params.users;
        }
        static async read(_data, ..._args) {
            let hash = await index_js_1.Primitive.Long.read(_data);
            let bots = await index_js_1.TLObject.read(_data);
            let users = await index_js_1.TLObject.read(_data);
            return new Raw.AttachMenuBots({ hash: hash, bots: bots, users: users });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.hash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.hash));
            }
            if (this.bots) {
                b.write(index_js_1.Primitive.Vector.write(this.bots));
            }
            if (this.users) {
                b.write(index_js_1.Primitive.Vector.write(this.users));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.AttachMenuBots = AttachMenuBots;
    class AttachMenuBotsBot extends index_js_1.TLObject {
        bot;
        users;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'AttachMenuBotsBot';
            this.constructorId = 0x93bf667f;
            this.subclassOfId = 0xdb33883d;
            this._slots = ['bot', 'users'];
            this.bot = params.bot;
            this.users = params.users;
        }
        static async read(_data, ..._args) {
            let bot = await index_js_1.TLObject.read(_data);
            let users = await index_js_1.TLObject.read(_data);
            return new Raw.AttachMenuBotsBot({ bot: bot, users: users });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.bot !== undefined) {
                b.write(this.bot.write());
            }
            if (this.users) {
                b.write(index_js_1.Primitive.Vector.write(this.users));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.AttachMenuBotsBot = AttachMenuBotsBot;
    class WebViewResultUrl extends index_js_1.TLObject {
        queryId;
        url;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'WebViewResultUrl';
            this.constructorId = 0xc14557c;
            this.subclassOfId = 0x93cea746;
            this._slots = ['queryId', 'url'];
            this.queryId = params.queryId;
            this.url = params.url;
        }
        static async read(_data, ..._args) {
            let queryId = await index_js_1.Primitive.Long.read(_data);
            let url = await index_js_1.Primitive.String.read(_data);
            return new Raw.WebViewResultUrl({ queryId: queryId, url: url });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.queryId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.queryId));
            }
            if (this.url !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.url));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.WebViewResultUrl = WebViewResultUrl;
    class SimpleWebViewResultUrl extends index_js_1.TLObject {
        url;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'SimpleWebViewResultUrl';
            this.constructorId = 0x882f76bb;
            this.subclassOfId = 0x15eee3db;
            this._slots = ['url'];
            this.url = params.url;
        }
        static async read(_data, ..._args) {
            let url = await index_js_1.Primitive.String.read(_data);
            return new Raw.SimpleWebViewResultUrl({ url: url });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.url !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.url));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SimpleWebViewResultUrl = SimpleWebViewResultUrl;
    class WebViewMessageSent extends index_js_1.TLObject {
        msgId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'WebViewMessageSent';
            this.constructorId = 0xc94511c;
            this.subclassOfId = 0x75e49312;
            this._slots = ['msgId'];
            this.msgId = params.msgId;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let msgId = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.WebViewMessageSent({ msgId: msgId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.msgId !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.msgId !== undefined) {
                b.write(this.msgId.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.WebViewMessageSent = WebViewMessageSent;
    class BotMenuButtonDefault extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'BotMenuButtonDefault';
            this.constructorId = 0x7533a588;
            this.subclassOfId = 0x4c71bd3c;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.BotMenuButtonDefault();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.BotMenuButtonDefault = BotMenuButtonDefault;
    class BotMenuButtonCommands extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'BotMenuButtonCommands';
            this.constructorId = 0x4258c205;
            this.subclassOfId = 0x4c71bd3c;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.BotMenuButtonCommands();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.BotMenuButtonCommands = BotMenuButtonCommands;
    class BotMenuButton extends index_js_1.TLObject {
        text;
        url;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'BotMenuButton';
            this.constructorId = 0xc7b57ce6;
            this.subclassOfId = 0x4c71bd3c;
            this._slots = ['text', 'url'];
            this.text = params.text;
            this.url = params.url;
        }
        static async read(_data, ..._args) {
            let text = await index_js_1.Primitive.String.read(_data);
            let url = await index_js_1.Primitive.String.read(_data);
            return new Raw.BotMenuButton({ text: text, url: url });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.text !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.text));
            }
            if (this.url !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.url));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.BotMenuButton = BotMenuButton;
    class NotificationSoundDefault extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'NotificationSoundDefault';
            this.constructorId = 0x97e8bebe;
            this.subclassOfId = 0xf2f5e55b;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.NotificationSoundDefault();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.NotificationSoundDefault = NotificationSoundDefault;
    class NotificationSoundNone extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'NotificationSoundNone';
            this.constructorId = 0x6f0c34df;
            this.subclassOfId = 0xf2f5e55b;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.NotificationSoundNone();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.NotificationSoundNone = NotificationSoundNone;
    class NotificationSoundLocal extends index_js_1.TLObject {
        title;
        data;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'NotificationSoundLocal';
            this.constructorId = 0x830b9ae4;
            this.subclassOfId = 0xf2f5e55b;
            this._slots = ['title', 'data'];
            this.title = params.title;
            this.data = params.data;
        }
        static async read(_data, ..._args) {
            let title = await index_js_1.Primitive.String.read(_data);
            let data = await index_js_1.Primitive.String.read(_data);
            return new Raw.NotificationSoundLocal({ title: title, data: data });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            if (this.data !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.data));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.NotificationSoundLocal = NotificationSoundLocal;
    class NotificationSoundRingtone extends index_js_1.TLObject {
        id;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'NotificationSoundRingtone';
            this.constructorId = 0xff6c8049;
            this.subclassOfId = 0xf2f5e55b;
            this._slots = ['id'];
            this.id = params.id;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.Long.read(_data);
            return new Raw.NotificationSoundRingtone({ id: id });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.NotificationSoundRingtone = NotificationSoundRingtone;
    class AttachMenuPeerTypeSameBotPM extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'AttachMenuPeerTypeSameBotPM';
            this.constructorId = 0x7d6be90e;
            this.subclassOfId = 0xd1d886d0;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.AttachMenuPeerTypeSameBotPM();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.AttachMenuPeerTypeSameBotPM = AttachMenuPeerTypeSameBotPM;
    class AttachMenuPeerTypeBotPM extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'AttachMenuPeerTypeBotPM';
            this.constructorId = 0xc32bfa1a;
            this.subclassOfId = 0xd1d886d0;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.AttachMenuPeerTypeBotPM();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.AttachMenuPeerTypeBotPM = AttachMenuPeerTypeBotPM;
    class AttachMenuPeerTypePM extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'AttachMenuPeerTypePM';
            this.constructorId = 0xf146d31f;
            this.subclassOfId = 0xd1d886d0;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.AttachMenuPeerTypePM();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.AttachMenuPeerTypePM = AttachMenuPeerTypePM;
    class AttachMenuPeerTypeChat extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'AttachMenuPeerTypeChat';
            this.constructorId = 0x509113f;
            this.subclassOfId = 0xd1d886d0;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.AttachMenuPeerTypeChat();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.AttachMenuPeerTypeChat = AttachMenuPeerTypeChat;
    class AttachMenuPeerTypeBroadcast extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'AttachMenuPeerTypeBroadcast';
            this.constructorId = 0x7bfbdefc;
            this.subclassOfId = 0xd1d886d0;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.AttachMenuPeerTypeBroadcast();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.AttachMenuPeerTypeBroadcast = AttachMenuPeerTypeBroadcast;
    class InputInvoiceMessage extends index_js_1.TLObject {
        peer;
        msgId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputInvoiceMessage';
            this.constructorId = 0xc5b56859;
            this.subclassOfId = 0x726e9bfe;
            this._slots = ['peer', 'msgId'];
            this.peer = params.peer;
            this.msgId = params.msgId;
        }
        static async read(_data, ..._args) {
            let peer = await index_js_1.TLObject.read(_data);
            let msgId = await index_js_1.Primitive.Int.read(_data);
            return new Raw.InputInvoiceMessage({ peer: peer, msgId: msgId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.msgId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.msgId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputInvoiceMessage = InputInvoiceMessage;
    class InputInvoiceSlug extends index_js_1.TLObject {
        slug;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputInvoiceSlug';
            this.constructorId = 0xc326caef;
            this.subclassOfId = 0x726e9bfe;
            this._slots = ['slug'];
            this.slug = params.slug;
        }
        static async read(_data, ..._args) {
            let slug = await index_js_1.Primitive.String.read(_data);
            return new Raw.InputInvoiceSlug({ slug: slug });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.slug !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.slug));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputInvoiceSlug = InputInvoiceSlug;
    class InputInvoicePremiumGiftCode extends index_js_1.TLObject {
        purpose;
        option;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputInvoicePremiumGiftCode';
            this.constructorId = 0x98986c0d;
            this.subclassOfId = 0x726e9bfe;
            this._slots = ['purpose', 'option'];
            this.purpose = params.purpose;
            this.option = params.option;
        }
        static async read(_data, ..._args) {
            let purpose = await index_js_1.TLObject.read(_data);
            let option = await index_js_1.TLObject.read(_data);
            return new Raw.InputInvoicePremiumGiftCode({ purpose: purpose, option: option });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.purpose !== undefined) {
                b.write(this.purpose.write());
            }
            if (this.option !== undefined) {
                b.write(this.option.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputInvoicePremiumGiftCode = InputInvoicePremiumGiftCode;
    class InputInvoiceStars extends index_js_1.TLObject {
        option;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputInvoiceStars';
            this.constructorId = 0x1da33ad8;
            this.subclassOfId = 0x726e9bfe;
            this._slots = ['option'];
            this.option = params.option;
        }
        static async read(_data, ..._args) {
            let option = await index_js_1.TLObject.read(_data);
            return new Raw.InputInvoiceStars({ option: option });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.option !== undefined) {
                b.write(this.option.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputInvoiceStars = InputInvoiceStars;
    class InputStorePaymentPremiumSubscription extends index_js_1.TLObject {
        restore;
        upgrade;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputStorePaymentPremiumSubscription';
            this.constructorId = 0xa6751e66;
            this.subclassOfId = 0xe7a4174d;
            this._slots = ['restore', 'upgrade'];
            this.restore = params.restore;
            this.upgrade = params.upgrade;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let restore = flags & (1 << 0) ? true : false;
            let upgrade = flags & (1 << 1) ? true : false;
            return new Raw.InputStorePaymentPremiumSubscription({ restore: restore, upgrade: upgrade });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.restore ? 1 << 0 : 0;
            flags |= this.upgrade ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputStorePaymentPremiumSubscription = InputStorePaymentPremiumSubscription;
    class InputStorePaymentGiftPremium extends index_js_1.TLObject {
        userId;
        currency;
        amount;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputStorePaymentGiftPremium';
            this.constructorId = 0x616f7fe8;
            this.subclassOfId = 0xe7a4174d;
            this._slots = ['userId', 'currency', 'amount'];
            this.userId = params.userId;
            this.currency = params.currency;
            this.amount = params.amount;
        }
        static async read(_data, ..._args) {
            let userId = await index_js_1.TLObject.read(_data);
            let currency = await index_js_1.Primitive.String.read(_data);
            let amount = await index_js_1.Primitive.Long.read(_data);
            return new Raw.InputStorePaymentGiftPremium({
                userId: userId,
                currency: currency,
                amount: amount,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.userId !== undefined) {
                b.write(this.userId.write());
            }
            if (this.currency !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.currency));
            }
            if (this.amount !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.amount));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputStorePaymentGiftPremium = InputStorePaymentGiftPremium;
    class InputStorePaymentPremiumGiftCode extends index_js_1.TLObject {
        users;
        boostPeer;
        currency;
        amount;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputStorePaymentPremiumGiftCode';
            this.constructorId = 0xa3805f3f;
            this.subclassOfId = 0xe7a4174d;
            this._slots = ['users', 'boostPeer', 'currency', 'amount'];
            this.users = params.users;
            this.boostPeer = params.boostPeer;
            this.currency = params.currency;
            this.amount = params.amount;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let users = await index_js_1.TLObject.read(_data);
            let boostPeer = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
            let currency = await index_js_1.Primitive.String.read(_data);
            let amount = await index_js_1.Primitive.Long.read(_data);
            return new Raw.InputStorePaymentPremiumGiftCode({
                users: users,
                boostPeer: boostPeer,
                currency: currency,
                amount: amount,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.boostPeer !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.users) {
                b.write(index_js_1.Primitive.Vector.write(this.users));
            }
            if (this.boostPeer !== undefined) {
                b.write(this.boostPeer.write());
            }
            if (this.currency !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.currency));
            }
            if (this.amount !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.amount));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputStorePaymentPremiumGiftCode = InputStorePaymentPremiumGiftCode;
    class InputStorePaymentPremiumGiveaway extends index_js_1.TLObject {
        onlyNewSubscribers;
        winnersAreVisible;
        boostPeer;
        additionalPeers;
        countriesIso2;
        prizeDescription;
        randomId;
        untilDate;
        currency;
        amount;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputStorePaymentPremiumGiveaway';
            this.constructorId = 0x160544ca;
            this.subclassOfId = 0xe7a4174d;
            this._slots = [
                'onlyNewSubscribers',
                'winnersAreVisible',
                'boostPeer',
                'additionalPeers',
                'countriesIso2',
                'prizeDescription',
                'randomId',
                'untilDate',
                'currency',
                'amount',
            ];
            this.onlyNewSubscribers = params.onlyNewSubscribers;
            this.winnersAreVisible = params.winnersAreVisible;
            this.boostPeer = params.boostPeer;
            this.additionalPeers = params.additionalPeers;
            this.countriesIso2 = params.countriesIso2;
            this.prizeDescription = params.prizeDescription;
            this.randomId = params.randomId;
            this.untilDate = params.untilDate;
            this.currency = params.currency;
            this.amount = params.amount;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let onlyNewSubscribers = flags & (1 << 0) ? true : false;
            let winnersAreVisible = flags & (1 << 3) ? true : false;
            let boostPeer = await index_js_1.TLObject.read(_data);
            let additionalPeers = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : [];
            let countriesIso2 = flags & (1 << 2) ? await index_js_1.TLObject.read(_data, index_js_1.Primitive.String) : [];
            let prizeDescription = flags & (1 << 4) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let randomId = await index_js_1.Primitive.Long.read(_data);
            let untilDate = await index_js_1.Primitive.Int.read(_data);
            let currency = await index_js_1.Primitive.String.read(_data);
            let amount = await index_js_1.Primitive.Long.read(_data);
            return new Raw.InputStorePaymentPremiumGiveaway({
                onlyNewSubscribers: onlyNewSubscribers,
                winnersAreVisible: winnersAreVisible,
                boostPeer: boostPeer,
                additionalPeers: additionalPeers,
                countriesIso2: countriesIso2,
                prizeDescription: prizeDescription,
                randomId: randomId,
                untilDate: untilDate,
                currency: currency,
                amount: amount,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.onlyNewSubscribers ? 1 << 0 : 0;
            flags |= this.winnersAreVisible ? 1 << 3 : 0;
            flags |= this.additionalPeers ? 1 << 1 : 0;
            flags |= this.countriesIso2 ? 1 << 2 : 0;
            flags |= this.prizeDescription !== undefined ? 1 << 4 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.boostPeer !== undefined) {
                b.write(this.boostPeer.write());
            }
            if (this.additionalPeers) {
                b.write(index_js_1.Primitive.Vector.write(this.additionalPeers));
            }
            if (this.countriesIso2) {
                b.write(index_js_1.Primitive.Vector.write(this.countriesIso2, index_js_1.Primitive.String));
            }
            if (this.prizeDescription !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.prizeDescription));
            }
            if (this.randomId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.randomId));
            }
            if (this.untilDate !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.untilDate));
            }
            if (this.currency !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.currency));
            }
            if (this.amount !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.amount));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputStorePaymentPremiumGiveaway = InputStorePaymentPremiumGiveaway;
    class InputStorePaymentStars extends index_js_1.TLObject {
        stars;
        currency;
        amount;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputStorePaymentStars';
            this.constructorId = 0x4f0ee8df;
            this.subclassOfId = 0xe7a4174d;
            this._slots = ['stars', 'currency', 'amount'];
            this.stars = params.stars;
            this.currency = params.currency;
            this.amount = params.amount;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let stars = await index_js_1.Primitive.Long.read(_data);
            let currency = await index_js_1.Primitive.String.read(_data);
            let amount = await index_js_1.Primitive.Long.read(_data);
            return new Raw.InputStorePaymentStars({ stars: stars, currency: currency, amount: amount });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.stars !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.stars));
            }
            if (this.currency !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.currency));
            }
            if (this.amount !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.amount));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputStorePaymentStars = InputStorePaymentStars;
    class PremiumGiftOption extends index_js_1.TLObject {
        months;
        currency;
        amount;
        botUrl;
        storeProduct;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PremiumGiftOption';
            this.constructorId = 0x74c34319;
            this.subclassOfId = 0x5182b03e;
            this._slots = ['months', 'currency', 'amount', 'botUrl', 'storeProduct'];
            this.months = params.months;
            this.currency = params.currency;
            this.amount = params.amount;
            this.botUrl = params.botUrl;
            this.storeProduct = params.storeProduct;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let months = await index_js_1.Primitive.Int.read(_data);
            let currency = await index_js_1.Primitive.String.read(_data);
            let amount = await index_js_1.Primitive.Long.read(_data);
            let botUrl = await index_js_1.Primitive.String.read(_data);
            let storeProduct = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
            return new Raw.PremiumGiftOption({
                months: months,
                currency: currency,
                amount: amount,
                botUrl: botUrl,
                storeProduct: storeProduct,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.storeProduct !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.months !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.months));
            }
            if (this.currency !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.currency));
            }
            if (this.amount !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.amount));
            }
            if (this.botUrl !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.botUrl));
            }
            if (this.storeProduct !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.storeProduct));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PremiumGiftOption = PremiumGiftOption;
    class PaymentFormMethod extends index_js_1.TLObject {
        url;
        title;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PaymentFormMethod';
            this.constructorId = 0x88f8f21b;
            this.subclassOfId = 0x3fc1c816;
            this._slots = ['url', 'title'];
            this.url = params.url;
            this.title = params.title;
        }
        static async read(_data, ..._args) {
            let url = await index_js_1.Primitive.String.read(_data);
            let title = await index_js_1.Primitive.String.read(_data);
            return new Raw.PaymentFormMethod({ url: url, title: title });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.url !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.url));
            }
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PaymentFormMethod = PaymentFormMethod;
    class EmojiStatusEmpty extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'EmojiStatusEmpty';
            this.constructorId = 0x2de11aae;
            this.subclassOfId = 0xf930b138;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.EmojiStatusEmpty();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.EmojiStatusEmpty = EmojiStatusEmpty;
    class EmojiStatus extends index_js_1.TLObject {
        documentId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'EmojiStatus';
            this.constructorId = 0x929b619d;
            this.subclassOfId = 0xf930b138;
            this._slots = ['documentId'];
            this.documentId = params.documentId;
        }
        static async read(_data, ..._args) {
            let documentId = await index_js_1.Primitive.Long.read(_data);
            return new Raw.EmojiStatus({ documentId: documentId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.documentId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.documentId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.EmojiStatus = EmojiStatus;
    class EmojiStatusUntil extends index_js_1.TLObject {
        documentId;
        until;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'EmojiStatusUntil';
            this.constructorId = 0xfa30a8c7;
            this.subclassOfId = 0xf930b138;
            this._slots = ['documentId', 'until'];
            this.documentId = params.documentId;
            this.until = params.until;
        }
        static async read(_data, ..._args) {
            let documentId = await index_js_1.Primitive.Long.read(_data);
            let until = await index_js_1.Primitive.Int.read(_data);
            return new Raw.EmojiStatusUntil({ documentId: documentId, until: until });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.documentId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.documentId));
            }
            if (this.until !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.until));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.EmojiStatusUntil = EmojiStatusUntil;
    class ReactionEmpty extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'ReactionEmpty';
            this.constructorId = 0x79f5d419;
            this.subclassOfId = 0x5da165a1;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.ReactionEmpty();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ReactionEmpty = ReactionEmpty;
    class ReactionEmoji extends index_js_1.TLObject {
        emoticon;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ReactionEmoji';
            this.constructorId = 0x1b2286b8;
            this.subclassOfId = 0x5da165a1;
            this._slots = ['emoticon'];
            this.emoticon = params.emoticon;
        }
        static async read(_data, ..._args) {
            let emoticon = await index_js_1.Primitive.String.read(_data);
            return new Raw.ReactionEmoji({ emoticon: emoticon });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.emoticon !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.emoticon));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ReactionEmoji = ReactionEmoji;
    class ReactionCustomEmoji extends index_js_1.TLObject {
        documentId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ReactionCustomEmoji';
            this.constructorId = 0x8935fc73;
            this.subclassOfId = 0x5da165a1;
            this._slots = ['documentId'];
            this.documentId = params.documentId;
        }
        static async read(_data, ..._args) {
            let documentId = await index_js_1.Primitive.Long.read(_data);
            return new Raw.ReactionCustomEmoji({ documentId: documentId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.documentId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.documentId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ReactionCustomEmoji = ReactionCustomEmoji;
    class ChatReactionsNone extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'ChatReactionsNone';
            this.constructorId = 0xeafc32bc;
            this.subclassOfId = 0x131e24b5;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.ChatReactionsNone();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChatReactionsNone = ChatReactionsNone;
    class ChatReactionsAll extends index_js_1.TLObject {
        allowCustom;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChatReactionsAll';
            this.constructorId = 0x52928bca;
            this.subclassOfId = 0x131e24b5;
            this._slots = ['allowCustom'];
            this.allowCustom = params.allowCustom;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let allowCustom = flags & (1 << 0) ? true : false;
            return new Raw.ChatReactionsAll({ allowCustom: allowCustom });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.allowCustom ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChatReactionsAll = ChatReactionsAll;
    class ChatReactionsSome extends index_js_1.TLObject {
        reactions;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ChatReactionsSome';
            this.constructorId = 0x661d4037;
            this.subclassOfId = 0x131e24b5;
            this._slots = ['reactions'];
            this.reactions = params.reactions;
        }
        static async read(_data, ..._args) {
            let reactions = await index_js_1.TLObject.read(_data);
            return new Raw.ChatReactionsSome({ reactions: reactions });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.reactions) {
                b.write(index_js_1.Primitive.Vector.write(this.reactions));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ChatReactionsSome = ChatReactionsSome;
    class EmailVerifyPurposeLoginSetup extends index_js_1.TLObject {
        phoneNumber;
        phoneCodeHash;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'EmailVerifyPurposeLoginSetup';
            this.constructorId = 0x4345be73;
            this.subclassOfId = 0xb9686ae8;
            this._slots = ['phoneNumber', 'phoneCodeHash'];
            this.phoneNumber = params.phoneNumber;
            this.phoneCodeHash = params.phoneCodeHash;
        }
        static async read(_data, ..._args) {
            let phoneNumber = await index_js_1.Primitive.String.read(_data);
            let phoneCodeHash = await index_js_1.Primitive.String.read(_data);
            return new Raw.EmailVerifyPurposeLoginSetup({
                phoneNumber: phoneNumber,
                phoneCodeHash: phoneCodeHash,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.phoneNumber !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.phoneNumber));
            }
            if (this.phoneCodeHash !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.phoneCodeHash));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.EmailVerifyPurposeLoginSetup = EmailVerifyPurposeLoginSetup;
    class EmailVerifyPurposeLoginChange extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'EmailVerifyPurposeLoginChange';
            this.constructorId = 0x527d22eb;
            this.subclassOfId = 0xb9686ae8;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.EmailVerifyPurposeLoginChange();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.EmailVerifyPurposeLoginChange = EmailVerifyPurposeLoginChange;
    class EmailVerifyPurposePassport extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'EmailVerifyPurposePassport';
            this.constructorId = 0xbbf51685;
            this.subclassOfId = 0xb9686ae8;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.EmailVerifyPurposePassport();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.EmailVerifyPurposePassport = EmailVerifyPurposePassport;
    class EmailVerificationCode extends index_js_1.TLObject {
        code;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'EmailVerificationCode';
            this.constructorId = 0x922e55a9;
            this.subclassOfId = 0x241ee240;
            this._slots = ['code'];
            this.code = params.code;
        }
        static async read(_data, ..._args) {
            let code = await index_js_1.Primitive.String.read(_data);
            return new Raw.EmailVerificationCode({ code: code });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.code !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.code));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.EmailVerificationCode = EmailVerificationCode;
    class EmailVerificationGoogle extends index_js_1.TLObject {
        token;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'EmailVerificationGoogle';
            this.constructorId = 0xdb909ec2;
            this.subclassOfId = 0x241ee240;
            this._slots = ['token'];
            this.token = params.token;
        }
        static async read(_data, ..._args) {
            let token = await index_js_1.Primitive.String.read(_data);
            return new Raw.EmailVerificationGoogle({ token: token });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.token !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.token));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.EmailVerificationGoogle = EmailVerificationGoogle;
    class EmailVerificationApple extends index_js_1.TLObject {
        token;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'EmailVerificationApple';
            this.constructorId = 0x96d074fd;
            this.subclassOfId = 0x241ee240;
            this._slots = ['token'];
            this.token = params.token;
        }
        static async read(_data, ..._args) {
            let token = await index_js_1.Primitive.String.read(_data);
            return new Raw.EmailVerificationApple({ token: token });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.token !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.token));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.EmailVerificationApple = EmailVerificationApple;
    class PremiumSubscriptionOption extends index_js_1.TLObject {
        current;
        canPurchaseUpgrade;
        transaction;
        months;
        currency;
        amount;
        botUrl;
        storeProduct;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PremiumSubscriptionOption';
            this.constructorId = 0x5f2d1df2;
            this.subclassOfId = 0x2e2dc73f;
            this._slots = [
                'current',
                'canPurchaseUpgrade',
                'transaction',
                'months',
                'currency',
                'amount',
                'botUrl',
                'storeProduct',
            ];
            this.current = params.current;
            this.canPurchaseUpgrade = params.canPurchaseUpgrade;
            this.transaction = params.transaction;
            this.months = params.months;
            this.currency = params.currency;
            this.amount = params.amount;
            this.botUrl = params.botUrl;
            this.storeProduct = params.storeProduct;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let current = flags & (1 << 1) ? true : false;
            let canPurchaseUpgrade = flags & (1 << 2) ? true : false;
            let transaction = flags & (1 << 3) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let months = await index_js_1.Primitive.Int.read(_data);
            let currency = await index_js_1.Primitive.String.read(_data);
            let amount = await index_js_1.Primitive.Long.read(_data);
            let botUrl = await index_js_1.Primitive.String.read(_data);
            let storeProduct = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
            return new Raw.PremiumSubscriptionOption({
                current: current,
                canPurchaseUpgrade: canPurchaseUpgrade,
                transaction: transaction,
                months: months,
                currency: currency,
                amount: amount,
                botUrl: botUrl,
                storeProduct: storeProduct,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.current ? 1 << 1 : 0;
            flags |= this.canPurchaseUpgrade ? 1 << 2 : 0;
            flags |= this.transaction !== undefined ? 1 << 3 : 0;
            flags |= this.storeProduct !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.transaction !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.transaction));
            }
            if (this.months !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.months));
            }
            if (this.currency !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.currency));
            }
            if (this.amount !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.amount));
            }
            if (this.botUrl !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.botUrl));
            }
            if (this.storeProduct !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.storeProduct));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PremiumSubscriptionOption = PremiumSubscriptionOption;
    class SendAsPeer extends index_js_1.TLObject {
        premiumRequired;
        peer;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'SendAsPeer';
            this.constructorId = 0xb81c7034;
            this.subclassOfId = 0x442381e4;
            this._slots = ['premiumRequired', 'peer'];
            this.premiumRequired = params.premiumRequired;
            this.peer = params.peer;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let premiumRequired = flags & (1 << 0) ? true : false;
            let peer = await index_js_1.TLObject.read(_data);
            return new Raw.SendAsPeer({ premiumRequired: premiumRequired, peer: peer });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.premiumRequired ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SendAsPeer = SendAsPeer;
    class MessageExtendedMediaPreview extends index_js_1.TLObject {
        w;
        h;
        thumb;
        videoDuration;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageExtendedMediaPreview';
            this.constructorId = 0xad628cc8;
            this.subclassOfId = 0x9727d95d;
            this._slots = ['w', 'h', 'thumb', 'videoDuration'];
            this.w = params.w;
            this.h = params.h;
            this.thumb = params.thumb;
            this.videoDuration = params.videoDuration;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let w = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let h = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let thumb = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : undefined;
            let videoDuration = flags & (1 << 2) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            return new Raw.MessageExtendedMediaPreview({
                w: w,
                h: h,
                thumb: thumb,
                videoDuration: videoDuration,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.w !== undefined ? 1 << 0 : 0;
            flags |= this.h !== undefined ? 1 << 0 : 0;
            flags |= this.thumb !== undefined ? 1 << 1 : 0;
            flags |= this.videoDuration !== undefined ? 1 << 2 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.w !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.w));
            }
            if (this.h !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.h));
            }
            if (this.thumb !== undefined) {
                b.write(this.thumb.write());
            }
            if (this.videoDuration !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.videoDuration));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageExtendedMediaPreview = MessageExtendedMediaPreview;
    class MessageExtendedMedia extends index_js_1.TLObject {
        media;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageExtendedMedia';
            this.constructorId = 0xee479c64;
            this.subclassOfId = 0x9727d95d;
            this._slots = ['media'];
            this.media = params.media;
        }
        static async read(_data, ..._args) {
            let media = await index_js_1.TLObject.read(_data);
            return new Raw.MessageExtendedMedia({ media: media });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.media !== undefined) {
                b.write(this.media.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageExtendedMedia = MessageExtendedMedia;
    class StickerKeyword extends index_js_1.TLObject {
        documentId;
        keyword;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'StickerKeyword';
            this.constructorId = 0xfcfeb29c;
            this.subclassOfId = 0x55951d6b;
            this._slots = ['documentId', 'keyword'];
            this.documentId = params.documentId;
            this.keyword = params.keyword;
        }
        static async read(_data, ..._args) {
            let documentId = await index_js_1.Primitive.Long.read(_data);
            let keyword = await index_js_1.TLObject.read(_data, index_js_1.Primitive.String);
            return new Raw.StickerKeyword({ documentId: documentId, keyword: keyword });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.documentId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.documentId));
            }
            if (this.keyword) {
                b.write(index_js_1.Primitive.Vector.write(this.keyword, index_js_1.Primitive.String));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.StickerKeyword = StickerKeyword;
    class Username extends index_js_1.TLObject {
        editable;
        active;
        username;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'Username';
            this.constructorId = 0xb4073647;
            this.subclassOfId = 0x1286421;
            this._slots = ['editable', 'active', 'username'];
            this.editable = params.editable;
            this.active = params.active;
            this.username = params.username;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let editable = flags & (1 << 0) ? true : false;
            let active = flags & (1 << 1) ? true : false;
            let username = await index_js_1.Primitive.String.read(_data);
            return new Raw.Username({ editable: editable, active: active, username: username });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.editable ? 1 << 0 : 0;
            flags |= this.active ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.username !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.username));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.Username = Username;
    class ForumTopicDeleted extends index_js_1.TLObject {
        id;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ForumTopicDeleted';
            this.constructorId = 0x23f109b;
            this.subclassOfId = 0x8d182203;
            this._slots = ['id'];
            this.id = params.id;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.Int.read(_data);
            return new Raw.ForumTopicDeleted({ id: id });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.id));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ForumTopicDeleted = ForumTopicDeleted;
    class ForumTopic extends index_js_1.TLObject {
        my;
        closed;
        pinned;
        short;
        hidden;
        id;
        date;
        title;
        iconColor;
        iconEmojiId;
        topMessage;
        readInboxMaxId;
        readOutboxMaxId;
        unreadCount;
        unreadMentionsCount;
        unreadReactionsCount;
        fromId;
        notifySettings;
        draft;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ForumTopic';
            this.constructorId = 0x71701da9;
            this.subclassOfId = 0x8d182203;
            this._slots = [
                'my',
                'closed',
                'pinned',
                'short',
                'hidden',
                'id',
                'date',
                'title',
                'iconColor',
                'iconEmojiId',
                'topMessage',
                'readInboxMaxId',
                'readOutboxMaxId',
                'unreadCount',
                'unreadMentionsCount',
                'unreadReactionsCount',
                'fromId',
                'notifySettings',
                'draft',
            ];
            this.my = params.my;
            this.closed = params.closed;
            this.pinned = params.pinned;
            this.short = params.short;
            this.hidden = params.hidden;
            this.id = params.id;
            this.date = params.date;
            this.title = params.title;
            this.iconColor = params.iconColor;
            this.iconEmojiId = params.iconEmojiId;
            this.topMessage = params.topMessage;
            this.readInboxMaxId = params.readInboxMaxId;
            this.readOutboxMaxId = params.readOutboxMaxId;
            this.unreadCount = params.unreadCount;
            this.unreadMentionsCount = params.unreadMentionsCount;
            this.unreadReactionsCount = params.unreadReactionsCount;
            this.fromId = params.fromId;
            this.notifySettings = params.notifySettings;
            this.draft = params.draft;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let my = flags & (1 << 1) ? true : false;
            let closed = flags & (1 << 2) ? true : false;
            let pinned = flags & (1 << 3) ? true : false;
            let short = flags & (1 << 5) ? true : false;
            let hidden = flags & (1 << 6) ? true : false;
            let id = await index_js_1.Primitive.Int.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            let title = await index_js_1.Primitive.String.read(_data);
            let iconColor = await index_js_1.Primitive.Int.read(_data);
            let iconEmojiId = flags & (1 << 0) ? await index_js_1.Primitive.Long.read(_data) : undefined;
            let topMessage = await index_js_1.Primitive.Int.read(_data);
            let readInboxMaxId = await index_js_1.Primitive.Int.read(_data);
            let readOutboxMaxId = await index_js_1.Primitive.Int.read(_data);
            let unreadCount = await index_js_1.Primitive.Int.read(_data);
            let unreadMentionsCount = await index_js_1.Primitive.Int.read(_data);
            let unreadReactionsCount = await index_js_1.Primitive.Int.read(_data);
            let fromId = await index_js_1.TLObject.read(_data);
            let notifySettings = await index_js_1.TLObject.read(_data);
            let draft = flags & (1 << 4) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.ForumTopic({
                my: my,
                closed: closed,
                pinned: pinned,
                short: short,
                hidden: hidden,
                id: id,
                date: date,
                title: title,
                iconColor: iconColor,
                iconEmojiId: iconEmojiId,
                topMessage: topMessage,
                readInboxMaxId: readInboxMaxId,
                readOutboxMaxId: readOutboxMaxId,
                unreadCount: unreadCount,
                unreadMentionsCount: unreadMentionsCount,
                unreadReactionsCount: unreadReactionsCount,
                fromId: fromId,
                notifySettings: notifySettings,
                draft: draft,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.my ? 1 << 1 : 0;
            flags |= this.closed ? 1 << 2 : 0;
            flags |= this.pinned ? 1 << 3 : 0;
            flags |= this.short ? 1 << 5 : 0;
            flags |= this.hidden ? 1 << 6 : 0;
            flags |= this.iconEmojiId !== undefined ? 1 << 0 : 0;
            flags |= this.draft !== undefined ? 1 << 4 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.id));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            if (this.iconColor !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.iconColor));
            }
            if (this.iconEmojiId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.iconEmojiId));
            }
            if (this.topMessage !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.topMessage));
            }
            if (this.readInboxMaxId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.readInboxMaxId));
            }
            if (this.readOutboxMaxId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.readOutboxMaxId));
            }
            if (this.unreadCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.unreadCount));
            }
            if (this.unreadMentionsCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.unreadMentionsCount));
            }
            if (this.unreadReactionsCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.unreadReactionsCount));
            }
            if (this.fromId !== undefined) {
                b.write(this.fromId.write());
            }
            if (this.notifySettings !== undefined) {
                b.write(this.notifySettings.write());
            }
            if (this.draft !== undefined) {
                b.write(this.draft.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ForumTopic = ForumTopic;
    class DefaultHistoryTTL extends index_js_1.TLObject {
        period;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DefaultHistoryTTL';
            this.constructorId = 0x43b46b20;
            this.subclassOfId = 0xf00d3367;
            this._slots = ['period'];
            this.period = params.period;
        }
        static async read(_data, ..._args) {
            let period = await index_js_1.Primitive.Int.read(_data);
            return new Raw.DefaultHistoryTTL({ period: period });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.period !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.period));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DefaultHistoryTTL = DefaultHistoryTTL;
    class ExportedContactToken extends index_js_1.TLObject {
        url;
        expires;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ExportedContactToken';
            this.constructorId = 0x41bf109b;
            this.subclassOfId = 0x86ddbed1;
            this._slots = ['url', 'expires'];
            this.url = params.url;
            this.expires = params.expires;
        }
        static async read(_data, ..._args) {
            let url = await index_js_1.Primitive.String.read(_data);
            let expires = await index_js_1.Primitive.Int.read(_data);
            return new Raw.ExportedContactToken({ url: url, expires: expires });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.url !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.url));
            }
            if (this.expires !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.expires));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ExportedContactToken = ExportedContactToken;
    class RequestPeerTypeUser extends index_js_1.TLObject {
        bot;
        premium;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'RequestPeerTypeUser';
            this.constructorId = 0x5f3b8a00;
            this.subclassOfId = 0xe9a0e814;
            this._slots = ['bot', 'premium'];
            this.bot = params.bot;
            this.premium = params.premium;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let bot = flags & (1 << 0) ? await index_js_1.Primitive.Bool.read(_data) : undefined;
            let premium = flags & (1 << 1) ? await index_js_1.Primitive.Bool.read(_data) : undefined;
            return new Raw.RequestPeerTypeUser({ bot: bot, premium: premium });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.bot !== undefined ? 1 << 0 : 0;
            flags |= this.premium !== undefined ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.bot !== undefined) {
                b.write(index_js_1.Primitive.Bool.write(this.bot));
            }
            if (this.premium !== undefined) {
                b.write(index_js_1.Primitive.Bool.write(this.premium));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.RequestPeerTypeUser = RequestPeerTypeUser;
    class RequestPeerTypeChat extends index_js_1.TLObject {
        creator;
        botParticipant;
        hasUsername;
        forum;
        userAdminRights;
        botAdminRights;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'RequestPeerTypeChat';
            this.constructorId = 0xc9f06e1b;
            this.subclassOfId = 0xe9a0e814;
            this._slots = [
                'creator',
                'botParticipant',
                'hasUsername',
                'forum',
                'userAdminRights',
                'botAdminRights',
            ];
            this.creator = params.creator;
            this.botParticipant = params.botParticipant;
            this.hasUsername = params.hasUsername;
            this.forum = params.forum;
            this.userAdminRights = params.userAdminRights;
            this.botAdminRights = params.botAdminRights;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let creator = flags & (1 << 0) ? true : false;
            let botParticipant = flags & (1 << 5) ? true : false;
            let hasUsername = flags & (1 << 3) ? await index_js_1.Primitive.Bool.read(_data) : undefined;
            let forum = flags & (1 << 4) ? await index_js_1.Primitive.Bool.read(_data) : undefined;
            let userAdminRights = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : undefined;
            let botAdminRights = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.RequestPeerTypeChat({
                creator: creator,
                botParticipant: botParticipant,
                hasUsername: hasUsername,
                forum: forum,
                userAdminRights: userAdminRights,
                botAdminRights: botAdminRights,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.creator ? 1 << 0 : 0;
            flags |= this.botParticipant ? 1 << 5 : 0;
            flags |= this.hasUsername !== undefined ? 1 << 3 : 0;
            flags |= this.forum !== undefined ? 1 << 4 : 0;
            flags |= this.userAdminRights !== undefined ? 1 << 1 : 0;
            flags |= this.botAdminRights !== undefined ? 1 << 2 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.hasUsername !== undefined) {
                b.write(index_js_1.Primitive.Bool.write(this.hasUsername));
            }
            if (this.forum !== undefined) {
                b.write(index_js_1.Primitive.Bool.write(this.forum));
            }
            if (this.userAdminRights !== undefined) {
                b.write(this.userAdminRights.write());
            }
            if (this.botAdminRights !== undefined) {
                b.write(this.botAdminRights.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.RequestPeerTypeChat = RequestPeerTypeChat;
    class RequestPeerTypeBroadcast extends index_js_1.TLObject {
        creator;
        hasUsername;
        userAdminRights;
        botAdminRights;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'RequestPeerTypeBroadcast';
            this.constructorId = 0x339bef6c;
            this.subclassOfId = 0xe9a0e814;
            this._slots = ['creator', 'hasUsername', 'userAdminRights', 'botAdminRights'];
            this.creator = params.creator;
            this.hasUsername = params.hasUsername;
            this.userAdminRights = params.userAdminRights;
            this.botAdminRights = params.botAdminRights;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let creator = flags & (1 << 0) ? true : false;
            let hasUsername = flags & (1 << 3) ? await index_js_1.Primitive.Bool.read(_data) : undefined;
            let userAdminRights = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : undefined;
            let botAdminRights = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.RequestPeerTypeBroadcast({
                creator: creator,
                hasUsername: hasUsername,
                userAdminRights: userAdminRights,
                botAdminRights: botAdminRights,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.creator ? 1 << 0 : 0;
            flags |= this.hasUsername !== undefined ? 1 << 3 : 0;
            flags |= this.userAdminRights !== undefined ? 1 << 1 : 0;
            flags |= this.botAdminRights !== undefined ? 1 << 2 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.hasUsername !== undefined) {
                b.write(index_js_1.Primitive.Bool.write(this.hasUsername));
            }
            if (this.userAdminRights !== undefined) {
                b.write(this.userAdminRights.write());
            }
            if (this.botAdminRights !== undefined) {
                b.write(this.botAdminRights.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.RequestPeerTypeBroadcast = RequestPeerTypeBroadcast;
    class EmojiListNotModified extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'EmojiListNotModified';
            this.constructorId = 0x481eadfa;
            this.subclassOfId = 0xbcef6aba;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.EmojiListNotModified();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.EmojiListNotModified = EmojiListNotModified;
    class EmojiList extends index_js_1.TLObject {
        hash;
        documentId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'EmojiList';
            this.constructorId = 0x7a1e11d1;
            this.subclassOfId = 0xbcef6aba;
            this._slots = ['hash', 'documentId'];
            this.hash = params.hash;
            this.documentId = params.documentId;
        }
        static async read(_data, ..._args) {
            let hash = await index_js_1.Primitive.Long.read(_data);
            let documentId = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Long);
            return new Raw.EmojiList({ hash: hash, documentId: documentId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.hash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.hash));
            }
            if (this.documentId) {
                b.write(index_js_1.Primitive.Vector.write(this.documentId, index_js_1.Primitive.Long));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.EmojiList = EmojiList;
    class EmojiGroup extends index_js_1.TLObject {
        title;
        iconEmojiId;
        emoticons;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'EmojiGroup';
            this.constructorId = 0x7a9abda9;
            this.subclassOfId = 0x55e0a193;
            this._slots = ['title', 'iconEmojiId', 'emoticons'];
            this.title = params.title;
            this.iconEmojiId = params.iconEmojiId;
            this.emoticons = params.emoticons;
        }
        static async read(_data, ..._args) {
            let title = await index_js_1.Primitive.String.read(_data);
            let iconEmojiId = await index_js_1.Primitive.Long.read(_data);
            let emoticons = await index_js_1.TLObject.read(_data, index_js_1.Primitive.String);
            return new Raw.EmojiGroup({ title: title, iconEmojiId: iconEmojiId, emoticons: emoticons });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            if (this.iconEmojiId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.iconEmojiId));
            }
            if (this.emoticons) {
                b.write(index_js_1.Primitive.Vector.write(this.emoticons, index_js_1.Primitive.String));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.EmojiGroup = EmojiGroup;
    class EmojiGroupGreeting extends index_js_1.TLObject {
        title;
        iconEmojiId;
        emoticons;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'EmojiGroupGreeting';
            this.constructorId = 0x80d26cc7;
            this.subclassOfId = 0x55e0a193;
            this._slots = ['title', 'iconEmojiId', 'emoticons'];
            this.title = params.title;
            this.iconEmojiId = params.iconEmojiId;
            this.emoticons = params.emoticons;
        }
        static async read(_data, ..._args) {
            let title = await index_js_1.Primitive.String.read(_data);
            let iconEmojiId = await index_js_1.Primitive.Long.read(_data);
            let emoticons = await index_js_1.TLObject.read(_data, index_js_1.Primitive.String);
            return new Raw.EmojiGroupGreeting({
                title: title,
                iconEmojiId: iconEmojiId,
                emoticons: emoticons,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            if (this.iconEmojiId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.iconEmojiId));
            }
            if (this.emoticons) {
                b.write(index_js_1.Primitive.Vector.write(this.emoticons, index_js_1.Primitive.String));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.EmojiGroupGreeting = EmojiGroupGreeting;
    class EmojiGroupPremium extends index_js_1.TLObject {
        title;
        iconEmojiId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'EmojiGroupPremium';
            this.constructorId = 0x93bcf34;
            this.subclassOfId = 0x55e0a193;
            this._slots = ['title', 'iconEmojiId'];
            this.title = params.title;
            this.iconEmojiId = params.iconEmojiId;
        }
        static async read(_data, ..._args) {
            let title = await index_js_1.Primitive.String.read(_data);
            let iconEmojiId = await index_js_1.Primitive.Long.read(_data);
            return new Raw.EmojiGroupPremium({ title: title, iconEmojiId: iconEmojiId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            if (this.iconEmojiId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.iconEmojiId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.EmojiGroupPremium = EmojiGroupPremium;
    class TextWithEntities extends index_js_1.TLObject {
        text;
        entities;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'TextWithEntities';
            this.constructorId = 0x751f3146;
            this.subclassOfId = 0x95ca4b05;
            this._slots = ['text', 'entities'];
            this.text = params.text;
            this.entities = params.entities;
        }
        static async read(_data, ..._args) {
            let text = await index_js_1.Primitive.String.read(_data);
            let entities = await index_js_1.TLObject.read(_data);
            return new Raw.TextWithEntities({ text: text, entities: entities });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.text !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.text));
            }
            if (this.entities) {
                b.write(index_js_1.Primitive.Vector.write(this.entities));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.TextWithEntities = TextWithEntities;
    class AutoSaveSettings extends index_js_1.TLObject {
        photos;
        videos;
        videoMaxSize;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'AutoSaveSettings';
            this.constructorId = 0xc84834ce;
            this.subclassOfId = 0xcd3b96e6;
            this._slots = ['photos', 'videos', 'videoMaxSize'];
            this.photos = params.photos;
            this.videos = params.videos;
            this.videoMaxSize = params.videoMaxSize;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let photos = flags & (1 << 0) ? true : false;
            let videos = flags & (1 << 1) ? true : false;
            let videoMaxSize = flags & (1 << 2) ? await index_js_1.Primitive.Long.read(_data) : undefined;
            return new Raw.AutoSaveSettings({
                photos: photos,
                videos: videos,
                videoMaxSize: videoMaxSize,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.photos ? 1 << 0 : 0;
            flags |= this.videos ? 1 << 1 : 0;
            flags |= this.videoMaxSize !== undefined ? 1 << 2 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.videoMaxSize !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.videoMaxSize));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.AutoSaveSettings = AutoSaveSettings;
    class AutoSaveException extends index_js_1.TLObject {
        peer;
        settings;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'AutoSaveException';
            this.constructorId = 0x81602d47;
            this.subclassOfId = 0xdd868129;
            this._slots = ['peer', 'settings'];
            this.peer = params.peer;
            this.settings = params.settings;
        }
        static async read(_data, ..._args) {
            let peer = await index_js_1.TLObject.read(_data);
            let settings = await index_js_1.TLObject.read(_data);
            return new Raw.AutoSaveException({ peer: peer, settings: settings });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.settings !== undefined) {
                b.write(this.settings.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.AutoSaveException = AutoSaveException;
    class InputBotAppID extends index_js_1.TLObject {
        id;
        accessHash;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputBotAppID';
            this.constructorId = 0xa920bd7a;
            this.subclassOfId = 0xb6559951;
            this._slots = ['id', 'accessHash'];
            this.id = params.id;
            this.accessHash = params.accessHash;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.Long.read(_data);
            let accessHash = await index_js_1.Primitive.Long.read(_data);
            return new Raw.InputBotAppID({ id: id, accessHash: accessHash });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.accessHash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.accessHash));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputBotAppID = InputBotAppID;
    class InputBotAppShortName extends index_js_1.TLObject {
        botId;
        shortName;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputBotAppShortName';
            this.constructorId = 0x908c0407;
            this.subclassOfId = 0xb6559951;
            this._slots = ['botId', 'shortName'];
            this.botId = params.botId;
            this.shortName = params.shortName;
        }
        static async read(_data, ..._args) {
            let botId = await index_js_1.TLObject.read(_data);
            let shortName = await index_js_1.Primitive.String.read(_data);
            return new Raw.InputBotAppShortName({ botId: botId, shortName: shortName });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.botId !== undefined) {
                b.write(this.botId.write());
            }
            if (this.shortName !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.shortName));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputBotAppShortName = InputBotAppShortName;
    class BotAppNotModified extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'BotAppNotModified';
            this.constructorId = 0x5da674b7;
            this.subclassOfId = 0x20f32ae;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.BotAppNotModified();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.BotAppNotModified = BotAppNotModified;
    class BotApp extends index_js_1.TLObject {
        id;
        accessHash;
        shortName;
        title;
        description;
        photo;
        document;
        hash;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'BotApp';
            this.constructorId = 0x95fcd1d6;
            this.subclassOfId = 0x20f32ae;
            this._slots = [
                'id',
                'accessHash',
                'shortName',
                'title',
                'description',
                'photo',
                'document',
                'hash',
            ];
            this.id = params.id;
            this.accessHash = params.accessHash;
            this.shortName = params.shortName;
            this.title = params.title;
            this.description = params.description;
            this.photo = params.photo;
            this.document = params.document;
            this.hash = params.hash;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let id = await index_js_1.Primitive.Long.read(_data);
            let accessHash = await index_js_1.Primitive.Long.read(_data);
            let shortName = await index_js_1.Primitive.String.read(_data);
            let title = await index_js_1.Primitive.String.read(_data);
            let description = await index_js_1.Primitive.String.read(_data);
            let photo = await index_js_1.TLObject.read(_data);
            let document = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
            let hash = await index_js_1.Primitive.Long.read(_data);
            return new Raw.BotApp({
                id: id,
                accessHash: accessHash,
                shortName: shortName,
                title: title,
                description: description,
                photo: photo,
                document: document,
                hash: hash,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.document !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.accessHash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.accessHash));
            }
            if (this.shortName !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.shortName));
            }
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            if (this.description !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.description));
            }
            if (this.photo !== undefined) {
                b.write(this.photo.write());
            }
            if (this.document !== undefined) {
                b.write(this.document.write());
            }
            if (this.hash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.hash));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.BotApp = BotApp;
    class AppWebViewResultUrl extends index_js_1.TLObject {
        url;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'AppWebViewResultUrl';
            this.constructorId = 0x3c1b4f0d;
            this.subclassOfId = 0x1c24a413;
            this._slots = ['url'];
            this.url = params.url;
        }
        static async read(_data, ..._args) {
            let url = await index_js_1.Primitive.String.read(_data);
            return new Raw.AppWebViewResultUrl({ url: url });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.url !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.url));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.AppWebViewResultUrl = AppWebViewResultUrl;
    class InlineBotWebView extends index_js_1.TLObject {
        text;
        url;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InlineBotWebView';
            this.constructorId = 0xb57295d5;
            this.subclassOfId = 0x6ce015ea;
            this._slots = ['text', 'url'];
            this.text = params.text;
            this.url = params.url;
        }
        static async read(_data, ..._args) {
            let text = await index_js_1.Primitive.String.read(_data);
            let url = await index_js_1.Primitive.String.read(_data);
            return new Raw.InlineBotWebView({ text: text, url: url });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.text !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.text));
            }
            if (this.url !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.url));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InlineBotWebView = InlineBotWebView;
    class ReadParticipantDate extends index_js_1.TLObject {
        userId;
        date;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ReadParticipantDate';
            this.constructorId = 0x4a4ff172;
            this.subclassOfId = 0xfd078ce2;
            this._slots = ['userId', 'date'];
            this.userId = params.userId;
            this.date = params.date;
        }
        static async read(_data, ..._args) {
            let userId = await index_js_1.Primitive.Long.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            return new Raw.ReadParticipantDate({ userId: userId, date: date });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ReadParticipantDate = ReadParticipantDate;
    class InputChatlistDialogFilter extends index_js_1.TLObject {
        filterId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputChatlistDialogFilter';
            this.constructorId = 0xf3e0da33;
            this.subclassOfId = 0x23f9659;
            this._slots = ['filterId'];
            this.filterId = params.filterId;
        }
        static async read(_data, ..._args) {
            let filterId = await index_js_1.Primitive.Int.read(_data);
            return new Raw.InputChatlistDialogFilter({ filterId: filterId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.filterId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.filterId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputChatlistDialogFilter = InputChatlistDialogFilter;
    class ExportedChatlistInvite extends index_js_1.TLObject {
        title;
        url;
        peers;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ExportedChatlistInvite';
            this.constructorId = 0xc5181ac;
            this.subclassOfId = 0x7711f8ff;
            this._slots = ['title', 'url', 'peers'];
            this.title = params.title;
            this.url = params.url;
            this.peers = params.peers;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let title = await index_js_1.Primitive.String.read(_data);
            let url = await index_js_1.Primitive.String.read(_data);
            let peers = await index_js_1.TLObject.read(_data);
            return new Raw.ExportedChatlistInvite({ title: title, url: url, peers: peers });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            if (this.url !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.url));
            }
            if (this.peers) {
                b.write(index_js_1.Primitive.Vector.write(this.peers));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ExportedChatlistInvite = ExportedChatlistInvite;
    class MessagePeerVote extends index_js_1.TLObject {
        peer;
        option;
        date;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessagePeerVote';
            this.constructorId = 0xb6cc2d5c;
            this.subclassOfId = 0x85c27202;
            this._slots = ['peer', 'option', 'date'];
            this.peer = params.peer;
            this.option = params.option;
            this.date = params.date;
        }
        static async read(_data, ..._args) {
            let peer = await index_js_1.TLObject.read(_data);
            let option = await index_js_1.Primitive.Bytes.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            return new Raw.MessagePeerVote({ peer: peer, option: option, date: date });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.option !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.option));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessagePeerVote = MessagePeerVote;
    class MessagePeerVoteInputOption extends index_js_1.TLObject {
        peer;
        date;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessagePeerVoteInputOption';
            this.constructorId = 0x74cda504;
            this.subclassOfId = 0x85c27202;
            this._slots = ['peer', 'date'];
            this.peer = params.peer;
            this.date = params.date;
        }
        static async read(_data, ..._args) {
            let peer = await index_js_1.TLObject.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            return new Raw.MessagePeerVoteInputOption({ peer: peer, date: date });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessagePeerVoteInputOption = MessagePeerVoteInputOption;
    class MessagePeerVoteMultiple extends index_js_1.TLObject {
        peer;
        options;
        date;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessagePeerVoteMultiple';
            this.constructorId = 0x4628f6e6;
            this.subclassOfId = 0x85c27202;
            this._slots = ['peer', 'options', 'date'];
            this.peer = params.peer;
            this.options = params.options;
            this.date = params.date;
        }
        static async read(_data, ..._args) {
            let peer = await index_js_1.TLObject.read(_data);
            let options = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Bytes);
            let date = await index_js_1.Primitive.Int.read(_data);
            return new Raw.MessagePeerVoteMultiple({ peer: peer, options: options, date: date });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.options) {
                b.write(index_js_1.Primitive.Vector.write(this.options, index_js_1.Primitive.Bytes));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessagePeerVoteMultiple = MessagePeerVoteMultiple;
    class StoryViews extends index_js_1.TLObject {
        hasViewers;
        viewsCount;
        forwardsCount;
        reactions;
        reactionsCount;
        recentViewers;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'StoryViews';
            this.constructorId = 0x8d595cd6;
            this.subclassOfId = 0x54e4ac66;
            this._slots = [
                'hasViewers',
                'viewsCount',
                'forwardsCount',
                'reactions',
                'reactionsCount',
                'recentViewers',
            ];
            this.hasViewers = params.hasViewers;
            this.viewsCount = params.viewsCount;
            this.forwardsCount = params.forwardsCount;
            this.reactions = params.reactions;
            this.reactionsCount = params.reactionsCount;
            this.recentViewers = params.recentViewers;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let hasViewers = flags & (1 << 1) ? true : false;
            let viewsCount = await index_js_1.Primitive.Int.read(_data);
            let forwardsCount = flags & (1 << 2) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let reactions = flags & (1 << 3) ? await index_js_1.TLObject.read(_data) : [];
            let reactionsCount = flags & (1 << 4) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let recentViewers = flags & (1 << 0) ? await index_js_1.TLObject.read(_data, index_js_1.Primitive.Long) : [];
            return new Raw.StoryViews({
                hasViewers: hasViewers,
                viewsCount: viewsCount,
                forwardsCount: forwardsCount,
                reactions: reactions,
                reactionsCount: reactionsCount,
                recentViewers: recentViewers,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.hasViewers ? 1 << 1 : 0;
            flags |= this.forwardsCount !== undefined ? 1 << 2 : 0;
            flags |= this.reactions ? 1 << 3 : 0;
            flags |= this.reactionsCount !== undefined ? 1 << 4 : 0;
            flags |= this.recentViewers ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.viewsCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.viewsCount));
            }
            if (this.forwardsCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.forwardsCount));
            }
            if (this.reactions) {
                b.write(index_js_1.Primitive.Vector.write(this.reactions));
            }
            if (this.reactionsCount !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.reactionsCount));
            }
            if (this.recentViewers) {
                b.write(index_js_1.Primitive.Vector.write(this.recentViewers, index_js_1.Primitive.Long));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.StoryViews = StoryViews;
    class StoryItemDeleted extends index_js_1.TLObject {
        id;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'StoryItemDeleted';
            this.constructorId = 0x51e6ee4f;
            this.subclassOfId = 0xd477b133;
            this._slots = ['id'];
            this.id = params.id;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.Int.read(_data);
            return new Raw.StoryItemDeleted({ id: id });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.id));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.StoryItemDeleted = StoryItemDeleted;
    class StoryItemSkipped extends index_js_1.TLObject {
        closeFriends;
        id;
        date;
        expireDate;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'StoryItemSkipped';
            this.constructorId = 0xffadc913;
            this.subclassOfId = 0xd477b133;
            this._slots = ['closeFriends', 'id', 'date', 'expireDate'];
            this.closeFriends = params.closeFriends;
            this.id = params.id;
            this.date = params.date;
            this.expireDate = params.expireDate;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let closeFriends = flags & (1 << 8) ? true : false;
            let id = await index_js_1.Primitive.Int.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            let expireDate = await index_js_1.Primitive.Int.read(_data);
            return new Raw.StoryItemSkipped({
                closeFriends: closeFriends,
                id: id,
                date: date,
                expireDate: expireDate,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.closeFriends ? 1 << 8 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.id));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.expireDate !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.expireDate));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.StoryItemSkipped = StoryItemSkipped;
    class StoryItem extends index_js_1.TLObject {
        pinned;
        public;
        closeFriends;
        min;
        noforwards;
        edited;
        contacts;
        selectedContacts;
        out;
        id;
        date;
        fromId;
        fwdFrom;
        expireDate;
        caption;
        entities;
        media;
        mediaAreas;
        privacy;
        views;
        sentReaction;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'StoryItem';
            this.constructorId = 0x79b26a24;
            this.subclassOfId = 0xd477b133;
            this._slots = [
                'pinned',
                'public',
                'closeFriends',
                'min',
                'noforwards',
                'edited',
                'contacts',
                'selectedContacts',
                'out',
                'id',
                'date',
                'fromId',
                'fwdFrom',
                'expireDate',
                'caption',
                'entities',
                'media',
                'mediaAreas',
                'privacy',
                'views',
                'sentReaction',
            ];
            this.pinned = params.pinned;
            this.public = params.public;
            this.closeFriends = params.closeFriends;
            this.min = params.min;
            this.noforwards = params.noforwards;
            this.edited = params.edited;
            this.contacts = params.contacts;
            this.selectedContacts = params.selectedContacts;
            this.out = params.out;
            this.id = params.id;
            this.date = params.date;
            this.fromId = params.fromId;
            this.fwdFrom = params.fwdFrom;
            this.expireDate = params.expireDate;
            this.caption = params.caption;
            this.entities = params.entities;
            this.media = params.media;
            this.mediaAreas = params.mediaAreas;
            this.privacy = params.privacy;
            this.views = params.views;
            this.sentReaction = params.sentReaction;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let pinned = flags & (1 << 5) ? true : false;
            let _public = flags & (1 << 7) ? true : false;
            let closeFriends = flags & (1 << 8) ? true : false;
            let min = flags & (1 << 9) ? true : false;
            let noforwards = flags & (1 << 10) ? true : false;
            let edited = flags & (1 << 11) ? true : false;
            let contacts = flags & (1 << 12) ? true : false;
            let selectedContacts = flags & (1 << 13) ? true : false;
            let out = flags & (1 << 16) ? true : false;
            let id = await index_js_1.Primitive.Int.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            let fromId = flags & (1 << 18) ? await index_js_1.TLObject.read(_data) : undefined;
            let fwdFrom = flags & (1 << 17) ? await index_js_1.TLObject.read(_data) : undefined;
            let expireDate = await index_js_1.Primitive.Int.read(_data);
            let caption = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let entities = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : [];
            let media = await index_js_1.TLObject.read(_data);
            let mediaAreas = flags & (1 << 14) ? await index_js_1.TLObject.read(_data) : [];
            let privacy = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : [];
            let views = flags & (1 << 3) ? await index_js_1.TLObject.read(_data) : undefined;
            let sentReaction = flags & (1 << 15) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.StoryItem({
                pinned: pinned,
                public: _public,
                closeFriends: closeFriends,
                min: min,
                noforwards: noforwards,
                edited: edited,
                contacts: contacts,
                selectedContacts: selectedContacts,
                out: out,
                id: id,
                date: date,
                fromId: fromId,
                fwdFrom: fwdFrom,
                expireDate: expireDate,
                caption: caption,
                entities: entities,
                media: media,
                mediaAreas: mediaAreas,
                privacy: privacy,
                views: views,
                sentReaction: sentReaction,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.pinned ? 1 << 5 : 0;
            flags |= this.public ? 1 << 7 : 0;
            flags |= this.closeFriends ? 1 << 8 : 0;
            flags |= this.min ? 1 << 9 : 0;
            flags |= this.noforwards ? 1 << 10 : 0;
            flags |= this.edited ? 1 << 11 : 0;
            flags |= this.contacts ? 1 << 12 : 0;
            flags |= this.selectedContacts ? 1 << 13 : 0;
            flags |= this.out ? 1 << 16 : 0;
            flags |= this.fromId !== undefined ? 1 << 18 : 0;
            flags |= this.fwdFrom !== undefined ? 1 << 17 : 0;
            flags |= this.caption !== undefined ? 1 << 0 : 0;
            flags |= this.entities ? 1 << 1 : 0;
            flags |= this.mediaAreas ? 1 << 14 : 0;
            flags |= this.privacy ? 1 << 2 : 0;
            flags |= this.views !== undefined ? 1 << 3 : 0;
            flags |= this.sentReaction !== undefined ? 1 << 15 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.id));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.fromId !== undefined) {
                b.write(this.fromId.write());
            }
            if (this.fwdFrom !== undefined) {
                b.write(this.fwdFrom.write());
            }
            if (this.expireDate !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.expireDate));
            }
            if (this.caption !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.caption));
            }
            if (this.entities) {
                b.write(index_js_1.Primitive.Vector.write(this.entities));
            }
            if (this.media !== undefined) {
                b.write(this.media.write());
            }
            if (this.mediaAreas) {
                b.write(index_js_1.Primitive.Vector.write(this.mediaAreas));
            }
            if (this.privacy) {
                b.write(index_js_1.Primitive.Vector.write(this.privacy));
            }
            if (this.views !== undefined) {
                b.write(this.views.write());
            }
            if (this.sentReaction !== undefined) {
                b.write(this.sentReaction.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.StoryItem = StoryItem;
    class StoryView extends index_js_1.TLObject {
        blocked;
        blockedMyStoriesFrom;
        userId;
        date;
        reaction;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'StoryView';
            this.constructorId = 0xb0bdeac5;
            this.subclassOfId = 0x35913fa3;
            this._slots = ['blocked', 'blockedMyStoriesFrom', 'userId', 'date', 'reaction'];
            this.blocked = params.blocked;
            this.blockedMyStoriesFrom = params.blockedMyStoriesFrom;
            this.userId = params.userId;
            this.date = params.date;
            this.reaction = params.reaction;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let blocked = flags & (1 << 0) ? true : false;
            let blockedMyStoriesFrom = flags & (1 << 1) ? true : false;
            let userId = await index_js_1.Primitive.Long.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            let reaction = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.StoryView({
                blocked: blocked,
                blockedMyStoriesFrom: blockedMyStoriesFrom,
                userId: userId,
                date: date,
                reaction: reaction,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.blocked ? 1 << 0 : 0;
            flags |= this.blockedMyStoriesFrom ? 1 << 1 : 0;
            flags |= this.reaction !== undefined ? 1 << 2 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.reaction !== undefined) {
                b.write(this.reaction.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.StoryView = StoryView;
    class StoryViewPublicForward extends index_js_1.TLObject {
        blocked;
        blockedMyStoriesFrom;
        message;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'StoryViewPublicForward';
            this.constructorId = 0x9083670b;
            this.subclassOfId = 0x35913fa3;
            this._slots = ['blocked', 'blockedMyStoriesFrom', 'message'];
            this.blocked = params.blocked;
            this.blockedMyStoriesFrom = params.blockedMyStoriesFrom;
            this.message = params.message;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let blocked = flags & (1 << 0) ? true : false;
            let blockedMyStoriesFrom = flags & (1 << 1) ? true : false;
            let message = await index_js_1.TLObject.read(_data);
            return new Raw.StoryViewPublicForward({
                blocked: blocked,
                blockedMyStoriesFrom: blockedMyStoriesFrom,
                message: message,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.blocked ? 1 << 0 : 0;
            flags |= this.blockedMyStoriesFrom ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.message !== undefined) {
                b.write(this.message.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.StoryViewPublicForward = StoryViewPublicForward;
    class StoryViewPublicRepost extends index_js_1.TLObject {
        blocked;
        blockedMyStoriesFrom;
        peerId;
        story;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'StoryViewPublicRepost';
            this.constructorId = 0xbd74cf49;
            this.subclassOfId = 0x35913fa3;
            this._slots = ['blocked', 'blockedMyStoriesFrom', 'peerId', 'story'];
            this.blocked = params.blocked;
            this.blockedMyStoriesFrom = params.blockedMyStoriesFrom;
            this.peerId = params.peerId;
            this.story = params.story;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let blocked = flags & (1 << 0) ? true : false;
            let blockedMyStoriesFrom = flags & (1 << 1) ? true : false;
            let peerId = await index_js_1.TLObject.read(_data);
            let story = await index_js_1.TLObject.read(_data);
            return new Raw.StoryViewPublicRepost({
                blocked: blocked,
                blockedMyStoriesFrom: blockedMyStoriesFrom,
                peerId: peerId,
                story: story,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.blocked ? 1 << 0 : 0;
            flags |= this.blockedMyStoriesFrom ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.peerId !== undefined) {
                b.write(this.peerId.write());
            }
            if (this.story !== undefined) {
                b.write(this.story.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.StoryViewPublicRepost = StoryViewPublicRepost;
    class InputReplyToMessage extends index_js_1.TLObject {
        replyToMsgId;
        topMsgId;
        replyToPeerId;
        quoteText;
        quoteEntities;
        quoteOffset;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputReplyToMessage';
            this.constructorId = 0x22c0f6d5;
            this.subclassOfId = 0x8c71131d;
            this._slots = [
                'replyToMsgId',
                'topMsgId',
                'replyToPeerId',
                'quoteText',
                'quoteEntities',
                'quoteOffset',
            ];
            this.replyToMsgId = params.replyToMsgId;
            this.topMsgId = params.topMsgId;
            this.replyToPeerId = params.replyToPeerId;
            this.quoteText = params.quoteText;
            this.quoteEntities = params.quoteEntities;
            this.quoteOffset = params.quoteOffset;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let replyToMsgId = await index_js_1.Primitive.Int.read(_data);
            let topMsgId = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let replyToPeerId = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : undefined;
            let quoteText = flags & (1 << 2) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let quoteEntities = flags & (1 << 3) ? await index_js_1.TLObject.read(_data) : [];
            let quoteOffset = flags & (1 << 4) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            return new Raw.InputReplyToMessage({
                replyToMsgId: replyToMsgId,
                topMsgId: topMsgId,
                replyToPeerId: replyToPeerId,
                quoteText: quoteText,
                quoteEntities: quoteEntities,
                quoteOffset: quoteOffset,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.topMsgId !== undefined ? 1 << 0 : 0;
            flags |= this.replyToPeerId !== undefined ? 1 << 1 : 0;
            flags |= this.quoteText !== undefined ? 1 << 2 : 0;
            flags |= this.quoteEntities ? 1 << 3 : 0;
            flags |= this.quoteOffset !== undefined ? 1 << 4 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.replyToMsgId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.replyToMsgId));
            }
            if (this.topMsgId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.topMsgId));
            }
            if (this.replyToPeerId !== undefined) {
                b.write(this.replyToPeerId.write());
            }
            if (this.quoteText !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.quoteText));
            }
            if (this.quoteEntities) {
                b.write(index_js_1.Primitive.Vector.write(this.quoteEntities));
            }
            if (this.quoteOffset !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.quoteOffset));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputReplyToMessage = InputReplyToMessage;
    class InputReplyToStory extends index_js_1.TLObject {
        peer;
        storyId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputReplyToStory';
            this.constructorId = 0x5881323a;
            this.subclassOfId = 0x8c71131d;
            this._slots = ['peer', 'storyId'];
            this.peer = params.peer;
            this.storyId = params.storyId;
        }
        static async read(_data, ..._args) {
            let peer = await index_js_1.TLObject.read(_data);
            let storyId = await index_js_1.Primitive.Int.read(_data);
            return new Raw.InputReplyToStory({ peer: peer, storyId: storyId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.storyId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.storyId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputReplyToStory = InputReplyToStory;
    class ExportedStoryLink extends index_js_1.TLObject {
        link;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ExportedStoryLink';
            this.constructorId = 0x3fc9053b;
            this.subclassOfId = 0xfc541a6;
            this._slots = ['link'];
            this.link = params.link;
        }
        static async read(_data, ..._args) {
            let link = await index_js_1.Primitive.String.read(_data);
            return new Raw.ExportedStoryLink({ link: link });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.link !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.link));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ExportedStoryLink = ExportedStoryLink;
    class StoriesStealthMode extends index_js_1.TLObject {
        activeUntilDate;
        cooldownUntilDate;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'StoriesStealthMode';
            this.constructorId = 0x712e27fd;
            this.subclassOfId = 0x2ed8401;
            this._slots = ['activeUntilDate', 'cooldownUntilDate'];
            this.activeUntilDate = params.activeUntilDate;
            this.cooldownUntilDate = params.cooldownUntilDate;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let activeUntilDate = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let cooldownUntilDate = flags & (1 << 1) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            return new Raw.StoriesStealthMode({
                activeUntilDate: activeUntilDate,
                cooldownUntilDate: cooldownUntilDate,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.activeUntilDate !== undefined ? 1 << 0 : 0;
            flags |= this.cooldownUntilDate !== undefined ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.activeUntilDate !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.activeUntilDate));
            }
            if (this.cooldownUntilDate !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.cooldownUntilDate));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.StoriesStealthMode = StoriesStealthMode;
    class MediaAreaCoordinates extends index_js_1.TLObject {
        x;
        y;
        w;
        h;
        rotation;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MediaAreaCoordinates';
            this.constructorId = 0x3d1ea4e;
            this.subclassOfId = 0x1d448c39;
            this._slots = ['x', 'y', 'w', 'h', 'rotation'];
            this.x = params.x;
            this.y = params.y;
            this.w = params.w;
            this.h = params.h;
            this.rotation = params.rotation;
        }
        static async read(_data, ..._args) {
            let x = await index_js_1.Primitive.Double.read(_data);
            let y = await index_js_1.Primitive.Double.read(_data);
            let w = await index_js_1.Primitive.Double.read(_data);
            let h = await index_js_1.Primitive.Double.read(_data);
            let rotation = await index_js_1.Primitive.Double.read(_data);
            return new Raw.MediaAreaCoordinates({ x: x, y: y, w: w, h: h, rotation: rotation });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.x !== undefined) {
                b.write(index_js_1.Primitive.Double.write(this.x));
            }
            if (this.y !== undefined) {
                b.write(index_js_1.Primitive.Double.write(this.y));
            }
            if (this.w !== undefined) {
                b.write(index_js_1.Primitive.Double.write(this.w));
            }
            if (this.h !== undefined) {
                b.write(index_js_1.Primitive.Double.write(this.h));
            }
            if (this.rotation !== undefined) {
                b.write(index_js_1.Primitive.Double.write(this.rotation));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MediaAreaCoordinates = MediaAreaCoordinates;
    class MediaAreaVenue extends index_js_1.TLObject {
        coordinates;
        geo;
        title;
        address;
        provider;
        venueId;
        venueType;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MediaAreaVenue';
            this.constructorId = 0xbe82db9c;
            this.subclassOfId = 0xf36d7bf2;
            this._slots = ['coordinates', 'geo', 'title', 'address', 'provider', 'venueId', 'venueType'];
            this.coordinates = params.coordinates;
            this.geo = params.geo;
            this.title = params.title;
            this.address = params.address;
            this.provider = params.provider;
            this.venueId = params.venueId;
            this.venueType = params.venueType;
        }
        static async read(_data, ..._args) {
            let coordinates = await index_js_1.TLObject.read(_data);
            let geo = await index_js_1.TLObject.read(_data);
            let title = await index_js_1.Primitive.String.read(_data);
            let address = await index_js_1.Primitive.String.read(_data);
            let provider = await index_js_1.Primitive.String.read(_data);
            let venueId = await index_js_1.Primitive.String.read(_data);
            let venueType = await index_js_1.Primitive.String.read(_data);
            return new Raw.MediaAreaVenue({
                coordinates: coordinates,
                geo: geo,
                title: title,
                address: address,
                provider: provider,
                venueId: venueId,
                venueType: venueType,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.coordinates !== undefined) {
                b.write(this.coordinates.write());
            }
            if (this.geo !== undefined) {
                b.write(this.geo.write());
            }
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            if (this.address !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.address));
            }
            if (this.provider !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.provider));
            }
            if (this.venueId !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.venueId));
            }
            if (this.venueType !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.venueType));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MediaAreaVenue = MediaAreaVenue;
    class InputMediaAreaVenue extends index_js_1.TLObject {
        coordinates;
        queryId;
        resultId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputMediaAreaVenue';
            this.constructorId = 0xb282217f;
            this.subclassOfId = 0xf36d7bf2;
            this._slots = ['coordinates', 'queryId', 'resultId'];
            this.coordinates = params.coordinates;
            this.queryId = params.queryId;
            this.resultId = params.resultId;
        }
        static async read(_data, ..._args) {
            let coordinates = await index_js_1.TLObject.read(_data);
            let queryId = await index_js_1.Primitive.Long.read(_data);
            let resultId = await index_js_1.Primitive.String.read(_data);
            return new Raw.InputMediaAreaVenue({
                coordinates: coordinates,
                queryId: queryId,
                resultId: resultId,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.coordinates !== undefined) {
                b.write(this.coordinates.write());
            }
            if (this.queryId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.queryId));
            }
            if (this.resultId !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.resultId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputMediaAreaVenue = InputMediaAreaVenue;
    class MediaAreaGeoPoint extends index_js_1.TLObject {
        coordinates;
        geo;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MediaAreaGeoPoint';
            this.constructorId = 0xdf8b3b22;
            this.subclassOfId = 0xf36d7bf2;
            this._slots = ['coordinates', 'geo'];
            this.coordinates = params.coordinates;
            this.geo = params.geo;
        }
        static async read(_data, ..._args) {
            let coordinates = await index_js_1.TLObject.read(_data);
            let geo = await index_js_1.TLObject.read(_data);
            return new Raw.MediaAreaGeoPoint({ coordinates: coordinates, geo: geo });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.coordinates !== undefined) {
                b.write(this.coordinates.write());
            }
            if (this.geo !== undefined) {
                b.write(this.geo.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MediaAreaGeoPoint = MediaAreaGeoPoint;
    class MediaAreaSuggestedReaction extends index_js_1.TLObject {
        dark;
        flipped;
        coordinates;
        reaction;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MediaAreaSuggestedReaction';
            this.constructorId = 0x14455871;
            this.subclassOfId = 0xf36d7bf2;
            this._slots = ['dark', 'flipped', 'coordinates', 'reaction'];
            this.dark = params.dark;
            this.flipped = params.flipped;
            this.coordinates = params.coordinates;
            this.reaction = params.reaction;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let dark = flags & (1 << 0) ? true : false;
            let flipped = flags & (1 << 1) ? true : false;
            let coordinates = await index_js_1.TLObject.read(_data);
            let reaction = await index_js_1.TLObject.read(_data);
            return new Raw.MediaAreaSuggestedReaction({
                dark: dark,
                flipped: flipped,
                coordinates: coordinates,
                reaction: reaction,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.dark ? 1 << 0 : 0;
            flags |= this.flipped ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.coordinates !== undefined) {
                b.write(this.coordinates.write());
            }
            if (this.reaction !== undefined) {
                b.write(this.reaction.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MediaAreaSuggestedReaction = MediaAreaSuggestedReaction;
    class MediaAreaChannelPost extends index_js_1.TLObject {
        coordinates;
        channelId;
        msgId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MediaAreaChannelPost';
            this.constructorId = 0x770416af;
            this.subclassOfId = 0xf36d7bf2;
            this._slots = ['coordinates', 'channelId', 'msgId'];
            this.coordinates = params.coordinates;
            this.channelId = params.channelId;
            this.msgId = params.msgId;
        }
        static async read(_data, ..._args) {
            let coordinates = await index_js_1.TLObject.read(_data);
            let channelId = await index_js_1.Primitive.Long.read(_data);
            let msgId = await index_js_1.Primitive.Int.read(_data);
            return new Raw.MediaAreaChannelPost({
                coordinates: coordinates,
                channelId: channelId,
                msgId: msgId,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.coordinates !== undefined) {
                b.write(this.coordinates.write());
            }
            if (this.channelId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.channelId));
            }
            if (this.msgId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.msgId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MediaAreaChannelPost = MediaAreaChannelPost;
    class InputMediaAreaChannelPost extends index_js_1.TLObject {
        coordinates;
        channel;
        msgId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputMediaAreaChannelPost';
            this.constructorId = 0x2271f2bf;
            this.subclassOfId = 0xf36d7bf2;
            this._slots = ['coordinates', 'channel', 'msgId'];
            this.coordinates = params.coordinates;
            this.channel = params.channel;
            this.msgId = params.msgId;
        }
        static async read(_data, ..._args) {
            let coordinates = await index_js_1.TLObject.read(_data);
            let channel = await index_js_1.TLObject.read(_data);
            let msgId = await index_js_1.Primitive.Int.read(_data);
            return new Raw.InputMediaAreaChannelPost({
                coordinates: coordinates,
                channel: channel,
                msgId: msgId,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.coordinates !== undefined) {
                b.write(this.coordinates.write());
            }
            if (this.channel !== undefined) {
                b.write(this.channel.write());
            }
            if (this.msgId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.msgId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputMediaAreaChannelPost = InputMediaAreaChannelPost;
    class PeerStories extends index_js_1.TLObject {
        peer;
        maxReadId;
        stories;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PeerStories';
            this.constructorId = 0x9a35e999;
            this.subclassOfId = 0x122c8a47;
            this._slots = ['peer', 'maxReadId', 'stories'];
            this.peer = params.peer;
            this.maxReadId = params.maxReadId;
            this.stories = params.stories;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let peer = await index_js_1.TLObject.read(_data);
            let maxReadId = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let stories = await index_js_1.TLObject.read(_data);
            return new Raw.PeerStories({ peer: peer, maxReadId: maxReadId, stories: stories });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.maxReadId !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.maxReadId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.maxReadId));
            }
            if (this.stories) {
                b.write(index_js_1.Primitive.Vector.write(this.stories));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PeerStories = PeerStories;
    class PremiumGiftCodeOption extends index_js_1.TLObject {
        users;
        months;
        storeProduct;
        storeQuantity;
        currency;
        amount;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PremiumGiftCodeOption';
            this.constructorId = 0x257e962b;
            this.subclassOfId = 0x21d3c2;
            this._slots = ['users', 'months', 'storeProduct', 'storeQuantity', 'currency', 'amount'];
            this.users = params.users;
            this.months = params.months;
            this.storeProduct = params.storeProduct;
            this.storeQuantity = params.storeQuantity;
            this.currency = params.currency;
            this.amount = params.amount;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let users = await index_js_1.Primitive.Int.read(_data);
            let months = await index_js_1.Primitive.Int.read(_data);
            let storeProduct = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let storeQuantity = flags & (1 << 1) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let currency = await index_js_1.Primitive.String.read(_data);
            let amount = await index_js_1.Primitive.Long.read(_data);
            return new Raw.PremiumGiftCodeOption({
                users: users,
                months: months,
                storeProduct: storeProduct,
                storeQuantity: storeQuantity,
                currency: currency,
                amount: amount,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.storeProduct !== undefined ? 1 << 0 : 0;
            flags |= this.storeQuantity !== undefined ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.users !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.users));
            }
            if (this.months !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.months));
            }
            if (this.storeProduct !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.storeProduct));
            }
            if (this.storeQuantity !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.storeQuantity));
            }
            if (this.currency !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.currency));
            }
            if (this.amount !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.amount));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PremiumGiftCodeOption = PremiumGiftCodeOption;
    class PrepaidGiveaway extends index_js_1.TLObject {
        id;
        months;
        quantity;
        date;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PrepaidGiveaway';
            this.constructorId = 0xb2539d54;
            this.subclassOfId = 0xee3e6780;
            this._slots = ['id', 'months', 'quantity', 'date'];
            this.id = params.id;
            this.months = params.months;
            this.quantity = params.quantity;
            this.date = params.date;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.Long.read(_data);
            let months = await index_js_1.Primitive.Int.read(_data);
            let quantity = await index_js_1.Primitive.Int.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            return new Raw.PrepaidGiveaway({ id: id, months: months, quantity: quantity, date: date });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.months !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.months));
            }
            if (this.quantity !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.quantity));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PrepaidGiveaway = PrepaidGiveaway;
    class Boost extends index_js_1.TLObject {
        gift;
        giveaway;
        unclaimed;
        id;
        userId;
        giveawayMsgId;
        date;
        expires;
        usedGiftSlug;
        multiplier;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'Boost';
            this.constructorId = 0x2a1c8c71;
            this.subclassOfId = 0x97a5086c;
            this._slots = [
                'gift',
                'giveaway',
                'unclaimed',
                'id',
                'userId',
                'giveawayMsgId',
                'date',
                'expires',
                'usedGiftSlug',
                'multiplier',
            ];
            this.gift = params.gift;
            this.giveaway = params.giveaway;
            this.unclaimed = params.unclaimed;
            this.id = params.id;
            this.userId = params.userId;
            this.giveawayMsgId = params.giveawayMsgId;
            this.date = params.date;
            this.expires = params.expires;
            this.usedGiftSlug = params.usedGiftSlug;
            this.multiplier = params.multiplier;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let gift = flags & (1 << 1) ? true : false;
            let giveaway = flags & (1 << 2) ? true : false;
            let unclaimed = flags & (1 << 3) ? true : false;
            let id = await index_js_1.Primitive.String.read(_data);
            let userId = flags & (1 << 0) ? await index_js_1.Primitive.Long.read(_data) : undefined;
            let giveawayMsgId = flags & (1 << 2) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let date = await index_js_1.Primitive.Int.read(_data);
            let expires = await index_js_1.Primitive.Int.read(_data);
            let usedGiftSlug = flags & (1 << 4) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let multiplier = flags & (1 << 5) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            return new Raw.Boost({
                gift: gift,
                giveaway: giveaway,
                unclaimed: unclaimed,
                id: id,
                userId: userId,
                giveawayMsgId: giveawayMsgId,
                date: date,
                expires: expires,
                usedGiftSlug: usedGiftSlug,
                multiplier: multiplier,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.gift ? 1 << 1 : 0;
            flags |= this.giveaway ? 1 << 2 : 0;
            flags |= this.unclaimed ? 1 << 3 : 0;
            flags |= this.userId !== undefined ? 1 << 0 : 0;
            flags |= this.giveawayMsgId !== undefined ? 1 << 2 : 0;
            flags |= this.usedGiftSlug !== undefined ? 1 << 4 : 0;
            flags |= this.multiplier !== undefined ? 1 << 5 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.id));
            }
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            if (this.giveawayMsgId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.giveawayMsgId));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.expires !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.expires));
            }
            if (this.usedGiftSlug !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.usedGiftSlug));
            }
            if (this.multiplier !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.multiplier));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.Boost = Boost;
    class MyBoost extends index_js_1.TLObject {
        slot;
        peer;
        date;
        expires;
        cooldownUntilDate;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MyBoost';
            this.constructorId = 0xc448415c;
            this.subclassOfId = 0xc51a68bf;
            this._slots = ['slot', 'peer', 'date', 'expires', 'cooldownUntilDate'];
            this.slot = params.slot;
            this.peer = params.peer;
            this.date = params.date;
            this.expires = params.expires;
            this.cooldownUntilDate = params.cooldownUntilDate;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let slot = await index_js_1.Primitive.Int.read(_data);
            let peer = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
            let date = await index_js_1.Primitive.Int.read(_data);
            let expires = await index_js_1.Primitive.Int.read(_data);
            let cooldownUntilDate = flags & (1 << 1) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            return new Raw.MyBoost({
                slot: slot,
                peer: peer,
                date: date,
                expires: expires,
                cooldownUntilDate: cooldownUntilDate,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.peer !== undefined ? 1 << 0 : 0;
            flags |= this.cooldownUntilDate !== undefined ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.slot !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.slot));
            }
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.expires !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.expires));
            }
            if (this.cooldownUntilDate !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.cooldownUntilDate));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MyBoost = MyBoost;
    class StoryFwdHeader extends index_js_1.TLObject {
        modified;
        from;
        fromName;
        storyId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'StoryFwdHeader';
            this.constructorId = 0xb826e150;
            this.subclassOfId = 0xaab0b12c;
            this._slots = ['modified', 'from', 'fromName', 'storyId'];
            this.modified = params.modified;
            this.from = params.from;
            this.fromName = params.fromName;
            this.storyId = params.storyId;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let modified = flags & (1 << 3) ? true : false;
            let from = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
            let fromName = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let storyId = flags & (1 << 2) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            return new Raw.StoryFwdHeader({
                modified: modified,
                from: from,
                fromName: fromName,
                storyId: storyId,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.modified ? 1 << 3 : 0;
            flags |= this.from !== undefined ? 1 << 0 : 0;
            flags |= this.fromName !== undefined ? 1 << 1 : 0;
            flags |= this.storyId !== undefined ? 1 << 2 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.from !== undefined) {
                b.write(this.from.write());
            }
            if (this.fromName !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.fromName));
            }
            if (this.storyId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.storyId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.StoryFwdHeader = StoryFwdHeader;
    class PostInteractionCountersMessage extends index_js_1.TLObject {
        msgId;
        views;
        forwards;
        reactions;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PostInteractionCountersMessage';
            this.constructorId = 0xe7058e7f;
            this.subclassOfId = 0x6e4a459b;
            this._slots = ['msgId', 'views', 'forwards', 'reactions'];
            this.msgId = params.msgId;
            this.views = params.views;
            this.forwards = params.forwards;
            this.reactions = params.reactions;
        }
        static async read(_data, ..._args) {
            let msgId = await index_js_1.Primitive.Int.read(_data);
            let views = await index_js_1.Primitive.Int.read(_data);
            let forwards = await index_js_1.Primitive.Int.read(_data);
            let reactions = await index_js_1.Primitive.Int.read(_data);
            return new Raw.PostInteractionCountersMessage({
                msgId: msgId,
                views: views,
                forwards: forwards,
                reactions: reactions,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.msgId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.msgId));
            }
            if (this.views !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.views));
            }
            if (this.forwards !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.forwards));
            }
            if (this.reactions !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.reactions));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PostInteractionCountersMessage = PostInteractionCountersMessage;
    class PostInteractionCountersStory extends index_js_1.TLObject {
        storyId;
        views;
        forwards;
        reactions;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PostInteractionCountersStory';
            this.constructorId = 0x8a480e27;
            this.subclassOfId = 0x6e4a459b;
            this._slots = ['storyId', 'views', 'forwards', 'reactions'];
            this.storyId = params.storyId;
            this.views = params.views;
            this.forwards = params.forwards;
            this.reactions = params.reactions;
        }
        static async read(_data, ..._args) {
            let storyId = await index_js_1.Primitive.Int.read(_data);
            let views = await index_js_1.Primitive.Int.read(_data);
            let forwards = await index_js_1.Primitive.Int.read(_data);
            let reactions = await index_js_1.Primitive.Int.read(_data);
            return new Raw.PostInteractionCountersStory({
                storyId: storyId,
                views: views,
                forwards: forwards,
                reactions: reactions,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.storyId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.storyId));
            }
            if (this.views !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.views));
            }
            if (this.forwards !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.forwards));
            }
            if (this.reactions !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.reactions));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PostInteractionCountersStory = PostInteractionCountersStory;
    class PublicForwardMessage extends index_js_1.TLObject {
        message;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PublicForwardMessage';
            this.constructorId = 0x1f2bf4a;
            this.subclassOfId = 0x629015d3;
            this._slots = ['message'];
            this.message = params.message;
        }
        static async read(_data, ..._args) {
            let message = await index_js_1.TLObject.read(_data);
            return new Raw.PublicForwardMessage({ message: message });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.message !== undefined) {
                b.write(this.message.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PublicForwardMessage = PublicForwardMessage;
    class PublicForwardStory extends index_js_1.TLObject {
        peer;
        story;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PublicForwardStory';
            this.constructorId = 0xedf3add0;
            this.subclassOfId = 0x629015d3;
            this._slots = ['peer', 'story'];
            this.peer = params.peer;
            this.story = params.story;
        }
        static async read(_data, ..._args) {
            let peer = await index_js_1.TLObject.read(_data);
            let story = await index_js_1.TLObject.read(_data);
            return new Raw.PublicForwardStory({ peer: peer, story: story });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.story !== undefined) {
                b.write(this.story.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PublicForwardStory = PublicForwardStory;
    class PeerColor extends index_js_1.TLObject {
        color;
        backgroundEmojiId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PeerColor';
            this.constructorId = 0xb54b5acf;
            this.subclassOfId = 0xf281a47f;
            this._slots = ['color', 'backgroundEmojiId'];
            this.color = params.color;
            this.backgroundEmojiId = params.backgroundEmojiId;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let color = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let backgroundEmojiId = flags & (1 << 1) ? await index_js_1.Primitive.Long.read(_data) : undefined;
            return new Raw.PeerColor({ color: color, backgroundEmojiId: backgroundEmojiId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.color !== undefined ? 1 << 0 : 0;
            flags |= this.backgroundEmojiId !== undefined ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.color !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.color));
            }
            if (this.backgroundEmojiId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.backgroundEmojiId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PeerColor = PeerColor;
    class StoryReaction extends index_js_1.TLObject {
        peerId;
        date;
        reaction;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'StoryReaction';
            this.constructorId = 0x6090d6d5;
            this.subclassOfId = 0xc96b5fab;
            this._slots = ['peerId', 'date', 'reaction'];
            this.peerId = params.peerId;
            this.date = params.date;
            this.reaction = params.reaction;
        }
        static async read(_data, ..._args) {
            let peerId = await index_js_1.TLObject.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            let reaction = await index_js_1.TLObject.read(_data);
            return new Raw.StoryReaction({ peerId: peerId, date: date, reaction: reaction });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.peerId !== undefined) {
                b.write(this.peerId.write());
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.reaction !== undefined) {
                b.write(this.reaction.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.StoryReaction = StoryReaction;
    class StoryReactionPublicForward extends index_js_1.TLObject {
        message;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'StoryReactionPublicForward';
            this.constructorId = 0xbbab2643;
            this.subclassOfId = 0xc96b5fab;
            this._slots = ['message'];
            this.message = params.message;
        }
        static async read(_data, ..._args) {
            let message = await index_js_1.TLObject.read(_data);
            return new Raw.StoryReactionPublicForward({ message: message });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.message !== undefined) {
                b.write(this.message.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.StoryReactionPublicForward = StoryReactionPublicForward;
    class StoryReactionPublicRepost extends index_js_1.TLObject {
        peerId;
        story;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'StoryReactionPublicRepost';
            this.constructorId = 0xcfcd0f13;
            this.subclassOfId = 0xc96b5fab;
            this._slots = ['peerId', 'story'];
            this.peerId = params.peerId;
            this.story = params.story;
        }
        static async read(_data, ..._args) {
            let peerId = await index_js_1.TLObject.read(_data);
            let story = await index_js_1.TLObject.read(_data);
            return new Raw.StoryReactionPublicRepost({ peerId: peerId, story: story });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.peerId !== undefined) {
                b.write(this.peerId.write());
            }
            if (this.story !== undefined) {
                b.write(this.story.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.StoryReactionPublicRepost = StoryReactionPublicRepost;
    class SavedDialog extends index_js_1.TLObject {
        pinned;
        peer;
        topMessage;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'SavedDialog';
            this.constructorId = 0xbd87cb6c;
            this.subclassOfId = 0x23ba6506;
            this._slots = ['pinned', 'peer', 'topMessage'];
            this.pinned = params.pinned;
            this.peer = params.peer;
            this.topMessage = params.topMessage;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let pinned = flags & (1 << 2) ? true : false;
            let peer = await index_js_1.TLObject.read(_data);
            let topMessage = await index_js_1.Primitive.Int.read(_data);
            return new Raw.SavedDialog({ pinned: pinned, peer: peer, topMessage: topMessage });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.pinned ? 1 << 2 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.topMessage !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.topMessage));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SavedDialog = SavedDialog;
    class SavedReactionTag extends index_js_1.TLObject {
        reaction;
        title;
        count;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'SavedReactionTag';
            this.constructorId = 0xcb6ff828;
            this.subclassOfId = 0xed681418;
            this._slots = ['reaction', 'title', 'count'];
            this.reaction = params.reaction;
            this.title = params.title;
            this.count = params.count;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let reaction = await index_js_1.TLObject.read(_data);
            let title = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let count = await index_js_1.Primitive.Int.read(_data);
            return new Raw.SavedReactionTag({ reaction: reaction, title: title, count: count });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.title !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.reaction !== undefined) {
                b.write(this.reaction.write());
            }
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            if (this.count !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.count));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SavedReactionTag = SavedReactionTag;
    class OutboxReadDate extends index_js_1.TLObject {
        date;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'OutboxReadDate';
            this.constructorId = 0x3bb842ac;
            this.subclassOfId = 0x6f5183c6;
            this._slots = ['date'];
            this.date = params.date;
        }
        static async read(_data, ..._args) {
            let date = await index_js_1.Primitive.Int.read(_data);
            return new Raw.OutboxReadDate({ date: date });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.OutboxReadDate = OutboxReadDate;
    class SmsJob extends index_js_1.TLObject {
        jobId;
        phoneNumber;
        text;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'SmsJob';
            this.constructorId = 0xe6a1eeb8;
            this.subclassOfId = 0x1f24187e;
            this._slots = ['jobId', 'phoneNumber', 'text'];
            this.jobId = params.jobId;
            this.phoneNumber = params.phoneNumber;
            this.text = params.text;
        }
        static async read(_data, ..._args) {
            let jobId = await index_js_1.Primitive.String.read(_data);
            let phoneNumber = await index_js_1.Primitive.String.read(_data);
            let text = await index_js_1.Primitive.String.read(_data);
            return new Raw.SmsJob({ jobId: jobId, phoneNumber: phoneNumber, text: text });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.jobId !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.jobId));
            }
            if (this.phoneNumber !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.phoneNumber));
            }
            if (this.text !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.text));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SmsJob = SmsJob;
    class BusinessWeeklyOpen extends index_js_1.TLObject {
        startMinute;
        endMinute;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'BusinessWeeklyOpen';
            this.constructorId = 0x120b1ab9;
            this.subclassOfId = 0x18402627;
            this._slots = ['startMinute', 'endMinute'];
            this.startMinute = params.startMinute;
            this.endMinute = params.endMinute;
        }
        static async read(_data, ..._args) {
            let startMinute = await index_js_1.Primitive.Int.read(_data);
            let endMinute = await index_js_1.Primitive.Int.read(_data);
            return new Raw.BusinessWeeklyOpen({ startMinute: startMinute, endMinute: endMinute });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.startMinute !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.startMinute));
            }
            if (this.endMinute !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.endMinute));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.BusinessWeeklyOpen = BusinessWeeklyOpen;
    class BusinessWorkHours extends index_js_1.TLObject {
        openNow;
        timezoneId;
        weeklyOpen;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'BusinessWorkHours';
            this.constructorId = 0x8c92b098;
            this.subclassOfId = 0x659fa805;
            this._slots = ['openNow', 'timezoneId', 'weeklyOpen'];
            this.openNow = params.openNow;
            this.timezoneId = params.timezoneId;
            this.weeklyOpen = params.weeklyOpen;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let openNow = flags & (1 << 0) ? true : false;
            let timezoneId = await index_js_1.Primitive.String.read(_data);
            let weeklyOpen = await index_js_1.TLObject.read(_data);
            return new Raw.BusinessWorkHours({
                openNow: openNow,
                timezoneId: timezoneId,
                weeklyOpen: weeklyOpen,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.openNow ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.timezoneId !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.timezoneId));
            }
            if (this.weeklyOpen) {
                b.write(index_js_1.Primitive.Vector.write(this.weeklyOpen));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.BusinessWorkHours = BusinessWorkHours;
    class BusinessLocation extends index_js_1.TLObject {
        geoPoint;
        address;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'BusinessLocation';
            this.constructorId = 0xac5c1af7;
            this.subclassOfId = 0x99accad0;
            this._slots = ['geoPoint', 'address'];
            this.geoPoint = params.geoPoint;
            this.address = params.address;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let geoPoint = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
            let address = await index_js_1.Primitive.String.read(_data);
            return new Raw.BusinessLocation({ geoPoint: geoPoint, address: address });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.geoPoint !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.geoPoint !== undefined) {
                b.write(this.geoPoint.write());
            }
            if (this.address !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.address));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.BusinessLocation = BusinessLocation;
    class InputBusinessRecipients extends index_js_1.TLObject {
        existingChats;
        newChats;
        contacts;
        nonContacts;
        excludeSelected;
        users;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputBusinessRecipients';
            this.constructorId = 0x6f8b32aa;
            this.subclassOfId = 0xd7ee53f;
            this._slots = [
                'existingChats',
                'newChats',
                'contacts',
                'nonContacts',
                'excludeSelected',
                'users',
            ];
            this.existingChats = params.existingChats;
            this.newChats = params.newChats;
            this.contacts = params.contacts;
            this.nonContacts = params.nonContacts;
            this.excludeSelected = params.excludeSelected;
            this.users = params.users;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let existingChats = flags & (1 << 0) ? true : false;
            let newChats = flags & (1 << 1) ? true : false;
            let contacts = flags & (1 << 2) ? true : false;
            let nonContacts = flags & (1 << 3) ? true : false;
            let excludeSelected = flags & (1 << 5) ? true : false;
            let users = flags & (1 << 4) ? await index_js_1.TLObject.read(_data) : [];
            return new Raw.InputBusinessRecipients({
                existingChats: existingChats,
                newChats: newChats,
                contacts: contacts,
                nonContacts: nonContacts,
                excludeSelected: excludeSelected,
                users: users,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.existingChats ? 1 << 0 : 0;
            flags |= this.newChats ? 1 << 1 : 0;
            flags |= this.contacts ? 1 << 2 : 0;
            flags |= this.nonContacts ? 1 << 3 : 0;
            flags |= this.excludeSelected ? 1 << 5 : 0;
            flags |= this.users ? 1 << 4 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.users) {
                b.write(index_js_1.Primitive.Vector.write(this.users));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputBusinessRecipients = InputBusinessRecipients;
    class BusinessRecipients extends index_js_1.TLObject {
        existingChats;
        newChats;
        contacts;
        nonContacts;
        excludeSelected;
        users;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'BusinessRecipients';
            this.constructorId = 0x21108ff7;
            this.subclassOfId = 0x52852e46;
            this._slots = [
                'existingChats',
                'newChats',
                'contacts',
                'nonContacts',
                'excludeSelected',
                'users',
            ];
            this.existingChats = params.existingChats;
            this.newChats = params.newChats;
            this.contacts = params.contacts;
            this.nonContacts = params.nonContacts;
            this.excludeSelected = params.excludeSelected;
            this.users = params.users;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let existingChats = flags & (1 << 0) ? true : false;
            let newChats = flags & (1 << 1) ? true : false;
            let contacts = flags & (1 << 2) ? true : false;
            let nonContacts = flags & (1 << 3) ? true : false;
            let excludeSelected = flags & (1 << 5) ? true : false;
            let users = flags & (1 << 4) ? await index_js_1.TLObject.read(_data, index_js_1.Primitive.Long) : [];
            return new Raw.BusinessRecipients({
                existingChats: existingChats,
                newChats: newChats,
                contacts: contacts,
                nonContacts: nonContacts,
                excludeSelected: excludeSelected,
                users: users,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.existingChats ? 1 << 0 : 0;
            flags |= this.newChats ? 1 << 1 : 0;
            flags |= this.contacts ? 1 << 2 : 0;
            flags |= this.nonContacts ? 1 << 3 : 0;
            flags |= this.excludeSelected ? 1 << 5 : 0;
            flags |= this.users ? 1 << 4 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.users) {
                b.write(index_js_1.Primitive.Vector.write(this.users, index_js_1.Primitive.Long));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.BusinessRecipients = BusinessRecipients;
    class BusinessAwayMessageScheduleAlways extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'BusinessAwayMessageScheduleAlways';
            this.constructorId = 0xc9b9e2b9;
            this.subclassOfId = 0x2818a05e;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.BusinessAwayMessageScheduleAlways();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.BusinessAwayMessageScheduleAlways = BusinessAwayMessageScheduleAlways;
    class BusinessAwayMessageScheduleOutsideWorkHours extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'BusinessAwayMessageScheduleOutsideWorkHours';
            this.constructorId = 0xc3f2f501;
            this.subclassOfId = 0x2818a05e;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.BusinessAwayMessageScheduleOutsideWorkHours();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.BusinessAwayMessageScheduleOutsideWorkHours = BusinessAwayMessageScheduleOutsideWorkHours;
    class BusinessAwayMessageScheduleCustom extends index_js_1.TLObject {
        startDate;
        endDate;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'BusinessAwayMessageScheduleCustom';
            this.constructorId = 0xcc4d9ecc;
            this.subclassOfId = 0x2818a05e;
            this._slots = ['startDate', 'endDate'];
            this.startDate = params.startDate;
            this.endDate = params.endDate;
        }
        static async read(_data, ..._args) {
            let startDate = await index_js_1.Primitive.Int.read(_data);
            let endDate = await index_js_1.Primitive.Int.read(_data);
            return new Raw.BusinessAwayMessageScheduleCustom({ startDate: startDate, endDate: endDate });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.startDate !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.startDate));
            }
            if (this.endDate !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.endDate));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.BusinessAwayMessageScheduleCustom = BusinessAwayMessageScheduleCustom;
    class InputBusinessGreetingMessage extends index_js_1.TLObject {
        shortcutId;
        recipients;
        noActivityDays;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputBusinessGreetingMessage';
            this.constructorId = 0x194cb3b;
            this.subclassOfId = 0x6278dcdd;
            this._slots = ['shortcutId', 'recipients', 'noActivityDays'];
            this.shortcutId = params.shortcutId;
            this.recipients = params.recipients;
            this.noActivityDays = params.noActivityDays;
        }
        static async read(_data, ..._args) {
            let shortcutId = await index_js_1.Primitive.Int.read(_data);
            let recipients = await index_js_1.TLObject.read(_data);
            let noActivityDays = await index_js_1.Primitive.Int.read(_data);
            return new Raw.InputBusinessGreetingMessage({
                shortcutId: shortcutId,
                recipients: recipients,
                noActivityDays: noActivityDays,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.shortcutId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.shortcutId));
            }
            if (this.recipients !== undefined) {
                b.write(this.recipients.write());
            }
            if (this.noActivityDays !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.noActivityDays));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputBusinessGreetingMessage = InputBusinessGreetingMessage;
    class BusinessGreetingMessage extends index_js_1.TLObject {
        shortcutId;
        recipients;
        noActivityDays;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'BusinessGreetingMessage';
            this.constructorId = 0xe519abab;
            this.subclassOfId = 0xb344eace;
            this._slots = ['shortcutId', 'recipients', 'noActivityDays'];
            this.shortcutId = params.shortcutId;
            this.recipients = params.recipients;
            this.noActivityDays = params.noActivityDays;
        }
        static async read(_data, ..._args) {
            let shortcutId = await index_js_1.Primitive.Int.read(_data);
            let recipients = await index_js_1.TLObject.read(_data);
            let noActivityDays = await index_js_1.Primitive.Int.read(_data);
            return new Raw.BusinessGreetingMessage({
                shortcutId: shortcutId,
                recipients: recipients,
                noActivityDays: noActivityDays,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.shortcutId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.shortcutId));
            }
            if (this.recipients !== undefined) {
                b.write(this.recipients.write());
            }
            if (this.noActivityDays !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.noActivityDays));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.BusinessGreetingMessage = BusinessGreetingMessage;
    class InputBusinessAwayMessage extends index_js_1.TLObject {
        offlineOnly;
        shortcutId;
        schedule;
        recipients;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputBusinessAwayMessage';
            this.constructorId = 0x832175e0;
            this.subclassOfId = 0xd8559c77;
            this._slots = ['offlineOnly', 'shortcutId', 'schedule', 'recipients'];
            this.offlineOnly = params.offlineOnly;
            this.shortcutId = params.shortcutId;
            this.schedule = params.schedule;
            this.recipients = params.recipients;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let offlineOnly = flags & (1 << 0) ? true : false;
            let shortcutId = await index_js_1.Primitive.Int.read(_data);
            let schedule = await index_js_1.TLObject.read(_data);
            let recipients = await index_js_1.TLObject.read(_data);
            return new Raw.InputBusinessAwayMessage({
                offlineOnly: offlineOnly,
                shortcutId: shortcutId,
                schedule: schedule,
                recipients: recipients,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.offlineOnly ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.shortcutId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.shortcutId));
            }
            if (this.schedule !== undefined) {
                b.write(this.schedule.write());
            }
            if (this.recipients !== undefined) {
                b.write(this.recipients.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputBusinessAwayMessage = InputBusinessAwayMessage;
    class BusinessAwayMessage extends index_js_1.TLObject {
        offlineOnly;
        shortcutId;
        schedule;
        recipients;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'BusinessAwayMessage';
            this.constructorId = 0xef156a5c;
            this.subclassOfId = 0xf1d3ae24;
            this._slots = ['offlineOnly', 'shortcutId', 'schedule', 'recipients'];
            this.offlineOnly = params.offlineOnly;
            this.shortcutId = params.shortcutId;
            this.schedule = params.schedule;
            this.recipients = params.recipients;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let offlineOnly = flags & (1 << 0) ? true : false;
            let shortcutId = await index_js_1.Primitive.Int.read(_data);
            let schedule = await index_js_1.TLObject.read(_data);
            let recipients = await index_js_1.TLObject.read(_data);
            return new Raw.BusinessAwayMessage({
                offlineOnly: offlineOnly,
                shortcutId: shortcutId,
                schedule: schedule,
                recipients: recipients,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.offlineOnly ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.shortcutId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.shortcutId));
            }
            if (this.schedule !== undefined) {
                b.write(this.schedule.write());
            }
            if (this.recipients !== undefined) {
                b.write(this.recipients.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.BusinessAwayMessage = BusinessAwayMessage;
    class Timezone extends index_js_1.TLObject {
        id;
        name;
        utcOffset;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'Timezone';
            this.constructorId = 0xff9289f5;
            this.subclassOfId = 0xce77d0c1;
            this._slots = ['id', 'name', 'utcOffset'];
            this.id = params.id;
            this.name = params.name;
            this.utcOffset = params.utcOffset;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.String.read(_data);
            let name = await index_js_1.Primitive.String.read(_data);
            let utcOffset = await index_js_1.Primitive.Int.read(_data);
            return new Raw.Timezone({ id: id, name: name, utcOffset: utcOffset });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.id));
            }
            if (this.name !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.name));
            }
            if (this.utcOffset !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.utcOffset));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.Timezone = Timezone;
    class QuickReply extends index_js_1.TLObject {
        shortcutId;
        shortcut;
        topMessage;
        count;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'QuickReply';
            this.constructorId = 0x697102b;
            this.subclassOfId = 0xe2ea0f12;
            this._slots = ['shortcutId', 'shortcut', 'topMessage', 'count'];
            this.shortcutId = params.shortcutId;
            this.shortcut = params.shortcut;
            this.topMessage = params.topMessage;
            this.count = params.count;
        }
        static async read(_data, ..._args) {
            let shortcutId = await index_js_1.Primitive.Int.read(_data);
            let shortcut = await index_js_1.Primitive.String.read(_data);
            let topMessage = await index_js_1.Primitive.Int.read(_data);
            let count = await index_js_1.Primitive.Int.read(_data);
            return new Raw.QuickReply({
                shortcutId: shortcutId,
                shortcut: shortcut,
                topMessage: topMessage,
                count: count,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.shortcutId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.shortcutId));
            }
            if (this.shortcut !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.shortcut));
            }
            if (this.topMessage !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.topMessage));
            }
            if (this.count !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.count));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.QuickReply = QuickReply;
    class InputQuickReplyShortcut extends index_js_1.TLObject {
        shortcut;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputQuickReplyShortcut';
            this.constructorId = 0x24596d41;
            this.subclassOfId = 0xa5687c57;
            this._slots = ['shortcut'];
            this.shortcut = params.shortcut;
        }
        static async read(_data, ..._args) {
            let shortcut = await index_js_1.Primitive.String.read(_data);
            return new Raw.InputQuickReplyShortcut({ shortcut: shortcut });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.shortcut !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.shortcut));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputQuickReplyShortcut = InputQuickReplyShortcut;
    class InputQuickReplyShortcutId extends index_js_1.TLObject {
        shortcutId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputQuickReplyShortcutId';
            this.constructorId = 0x1190cf1;
            this.subclassOfId = 0xa5687c57;
            this._slots = ['shortcutId'];
            this.shortcutId = params.shortcutId;
        }
        static async read(_data, ..._args) {
            let shortcutId = await index_js_1.Primitive.Int.read(_data);
            return new Raw.InputQuickReplyShortcutId({ shortcutId: shortcutId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.shortcutId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.shortcutId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputQuickReplyShortcutId = InputQuickReplyShortcutId;
    class ConnectedBot extends index_js_1.TLObject {
        canReply;
        botId;
        recipients;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ConnectedBot';
            this.constructorId = 0xbd068601;
            this.subclassOfId = 0x35e81b9e;
            this._slots = ['canReply', 'botId', 'recipients'];
            this.canReply = params.canReply;
            this.botId = params.botId;
            this.recipients = params.recipients;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let canReply = flags & (1 << 0) ? true : false;
            let botId = await index_js_1.Primitive.Long.read(_data);
            let recipients = await index_js_1.TLObject.read(_data);
            return new Raw.ConnectedBot({ canReply: canReply, botId: botId, recipients: recipients });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.canReply ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.botId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.botId));
            }
            if (this.recipients !== undefined) {
                b.write(this.recipients.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ConnectedBot = ConnectedBot;
    class Birthday extends index_js_1.TLObject {
        day;
        month;
        year;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'Birthday';
            this.constructorId = 0x6c8e1e06;
            this.subclassOfId = 0xbe7fd664;
            this._slots = ['day', 'month', 'year'];
            this.day = params.day;
            this.month = params.month;
            this.year = params.year;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let day = await index_js_1.Primitive.Int.read(_data);
            let month = await index_js_1.Primitive.Int.read(_data);
            let year = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            return new Raw.Birthday({ day: day, month: month, year: year });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.year !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.day !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.day));
            }
            if (this.month !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.month));
            }
            if (this.year !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.year));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.Birthday = Birthday;
    class BotBusinessConnection extends index_js_1.TLObject {
        canReply;
        disabled;
        connectionId;
        userId;
        dcId;
        date;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'BotBusinessConnection';
            this.constructorId = 0x896433b4;
            this.subclassOfId = 0x9b130546;
            this._slots = ['canReply', 'disabled', 'connectionId', 'userId', 'dcId', 'date'];
            this.canReply = params.canReply;
            this.disabled = params.disabled;
            this.connectionId = params.connectionId;
            this.userId = params.userId;
            this.dcId = params.dcId;
            this.date = params.date;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let canReply = flags & (1 << 0) ? true : false;
            let disabled = flags & (1 << 1) ? true : false;
            let connectionId = await index_js_1.Primitive.String.read(_data);
            let userId = await index_js_1.Primitive.Long.read(_data);
            let dcId = await index_js_1.Primitive.Int.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            return new Raw.BotBusinessConnection({
                canReply: canReply,
                disabled: disabled,
                connectionId: connectionId,
                userId: userId,
                dcId: dcId,
                date: date,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.canReply ? 1 << 0 : 0;
            flags |= this.disabled ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.connectionId !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.connectionId));
            }
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            if (this.dcId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.dcId));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.BotBusinessConnection = BotBusinessConnection;
    class InputBusinessIntro extends index_js_1.TLObject {
        title;
        description;
        sticker;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputBusinessIntro';
            this.constructorId = 0x9c469cd;
            this.subclassOfId = 0x645a767d;
            this._slots = ['title', 'description', 'sticker'];
            this.title = params.title;
            this.description = params.description;
            this.sticker = params.sticker;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let title = await index_js_1.Primitive.String.read(_data);
            let description = await index_js_1.Primitive.String.read(_data);
            let sticker = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.InputBusinessIntro({
                title: title,
                description: description,
                sticker: sticker,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.sticker !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            if (this.description !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.description));
            }
            if (this.sticker !== undefined) {
                b.write(this.sticker.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputBusinessIntro = InputBusinessIntro;
    class BusinessIntro extends index_js_1.TLObject {
        title;
        description;
        sticker;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'BusinessIntro';
            this.constructorId = 0x5a0a066d;
            this.subclassOfId = 0x6504d3c7;
            this._slots = ['title', 'description', 'sticker'];
            this.title = params.title;
            this.description = params.description;
            this.sticker = params.sticker;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let title = await index_js_1.Primitive.String.read(_data);
            let description = await index_js_1.Primitive.String.read(_data);
            let sticker = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.BusinessIntro({ title: title, description: description, sticker: sticker });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.sticker !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            if (this.description !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.description));
            }
            if (this.sticker !== undefined) {
                b.write(this.sticker.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.BusinessIntro = BusinessIntro;
    class InputCollectibleUsername extends index_js_1.TLObject {
        username;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputCollectibleUsername';
            this.constructorId = 0xe39460a9;
            this.subclassOfId = 0x2a0f81eb;
            this._slots = ['username'];
            this.username = params.username;
        }
        static async read(_data, ..._args) {
            let username = await index_js_1.Primitive.String.read(_data);
            return new Raw.InputCollectibleUsername({ username: username });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.username !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.username));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputCollectibleUsername = InputCollectibleUsername;
    class InputCollectiblePhone extends index_js_1.TLObject {
        phone;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputCollectiblePhone';
            this.constructorId = 0xa2e214a4;
            this.subclassOfId = 0x2a0f81eb;
            this._slots = ['phone'];
            this.phone = params.phone;
        }
        static async read(_data, ..._args) {
            let phone = await index_js_1.Primitive.String.read(_data);
            return new Raw.InputCollectiblePhone({ phone: phone });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.phone !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.phone));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputCollectiblePhone = InputCollectiblePhone;
    class InputBusinessBotRecipients extends index_js_1.TLObject {
        existingChats;
        newChats;
        contacts;
        nonContacts;
        excludeSelected;
        users;
        excludeUsers;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputBusinessBotRecipients';
            this.constructorId = 0xc4e5921e;
            this.subclassOfId = 0xa9d3f55b;
            this._slots = [
                'existingChats',
                'newChats',
                'contacts',
                'nonContacts',
                'excludeSelected',
                'users',
                'excludeUsers',
            ];
            this.existingChats = params.existingChats;
            this.newChats = params.newChats;
            this.contacts = params.contacts;
            this.nonContacts = params.nonContacts;
            this.excludeSelected = params.excludeSelected;
            this.users = params.users;
            this.excludeUsers = params.excludeUsers;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let existingChats = flags & (1 << 0) ? true : false;
            let newChats = flags & (1 << 1) ? true : false;
            let contacts = flags & (1 << 2) ? true : false;
            let nonContacts = flags & (1 << 3) ? true : false;
            let excludeSelected = flags & (1 << 5) ? true : false;
            let users = flags & (1 << 4) ? await index_js_1.TLObject.read(_data) : [];
            let excludeUsers = flags & (1 << 6) ? await index_js_1.TLObject.read(_data) : [];
            return new Raw.InputBusinessBotRecipients({
                existingChats: existingChats,
                newChats: newChats,
                contacts: contacts,
                nonContacts: nonContacts,
                excludeSelected: excludeSelected,
                users: users,
                excludeUsers: excludeUsers,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.existingChats ? 1 << 0 : 0;
            flags |= this.newChats ? 1 << 1 : 0;
            flags |= this.contacts ? 1 << 2 : 0;
            flags |= this.nonContacts ? 1 << 3 : 0;
            flags |= this.excludeSelected ? 1 << 5 : 0;
            flags |= this.users ? 1 << 4 : 0;
            flags |= this.excludeUsers ? 1 << 6 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.users) {
                b.write(index_js_1.Primitive.Vector.write(this.users));
            }
            if (this.excludeUsers) {
                b.write(index_js_1.Primitive.Vector.write(this.excludeUsers));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputBusinessBotRecipients = InputBusinessBotRecipients;
    class BusinessBotRecipients extends index_js_1.TLObject {
        existingChats;
        newChats;
        contacts;
        nonContacts;
        excludeSelected;
        users;
        excludeUsers;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'BusinessBotRecipients';
            this.constructorId = 0xb88cf373;
            this.subclassOfId = 0xf09283ca;
            this._slots = [
                'existingChats',
                'newChats',
                'contacts',
                'nonContacts',
                'excludeSelected',
                'users',
                'excludeUsers',
            ];
            this.existingChats = params.existingChats;
            this.newChats = params.newChats;
            this.contacts = params.contacts;
            this.nonContacts = params.nonContacts;
            this.excludeSelected = params.excludeSelected;
            this.users = params.users;
            this.excludeUsers = params.excludeUsers;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let existingChats = flags & (1 << 0) ? true : false;
            let newChats = flags & (1 << 1) ? true : false;
            let contacts = flags & (1 << 2) ? true : false;
            let nonContacts = flags & (1 << 3) ? true : false;
            let excludeSelected = flags & (1 << 5) ? true : false;
            let users = flags & (1 << 4) ? await index_js_1.TLObject.read(_data, index_js_1.Primitive.Long) : [];
            let excludeUsers = flags & (1 << 6) ? await index_js_1.TLObject.read(_data, index_js_1.Primitive.Long) : [];
            return new Raw.BusinessBotRecipients({
                existingChats: existingChats,
                newChats: newChats,
                contacts: contacts,
                nonContacts: nonContacts,
                excludeSelected: excludeSelected,
                users: users,
                excludeUsers: excludeUsers,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.existingChats ? 1 << 0 : 0;
            flags |= this.newChats ? 1 << 1 : 0;
            flags |= this.contacts ? 1 << 2 : 0;
            flags |= this.nonContacts ? 1 << 3 : 0;
            flags |= this.excludeSelected ? 1 << 5 : 0;
            flags |= this.users ? 1 << 4 : 0;
            flags |= this.excludeUsers ? 1 << 6 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.users) {
                b.write(index_js_1.Primitive.Vector.write(this.users, index_js_1.Primitive.Long));
            }
            if (this.excludeUsers) {
                b.write(index_js_1.Primitive.Vector.write(this.excludeUsers, index_js_1.Primitive.Long));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.BusinessBotRecipients = BusinessBotRecipients;
    class ContactBirthday extends index_js_1.TLObject {
        contactId;
        birthday;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ContactBirthday';
            this.constructorId = 0x1d998733;
            this.subclassOfId = 0xd8dd2806;
            this._slots = ['contactId', 'birthday'];
            this.contactId = params.contactId;
            this.birthday = params.birthday;
        }
        static async read(_data, ..._args) {
            let contactId = await index_js_1.Primitive.Long.read(_data);
            let birthday = await index_js_1.TLObject.read(_data);
            return new Raw.ContactBirthday({ contactId: contactId, birthday: birthday });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.contactId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.contactId));
            }
            if (this.birthday !== undefined) {
                b.write(this.birthday.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ContactBirthday = ContactBirthday;
    class MissingInvitee extends index_js_1.TLObject {
        premiumWouldAllowInvite;
        premiumRequiredForPm;
        userId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MissingInvitee';
            this.constructorId = 0x628c9224;
            this.subclassOfId = 0x5c8cacdc;
            this._slots = ['premiumWouldAllowInvite', 'premiumRequiredForPm', 'userId'];
            this.premiumWouldAllowInvite = params.premiumWouldAllowInvite;
            this.premiumRequiredForPm = params.premiumRequiredForPm;
            this.userId = params.userId;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let premiumWouldAllowInvite = flags & (1 << 0) ? true : false;
            let premiumRequiredForPm = flags & (1 << 1) ? true : false;
            let userId = await index_js_1.Primitive.Long.read(_data);
            return new Raw.MissingInvitee({
                premiumWouldAllowInvite: premiumWouldAllowInvite,
                premiumRequiredForPm: premiumRequiredForPm,
                userId: userId,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.premiumWouldAllowInvite ? 1 << 0 : 0;
            flags |= this.premiumRequiredForPm ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MissingInvitee = MissingInvitee;
    class InputBusinessChatLink extends index_js_1.TLObject {
        message;
        entities;
        title;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'InputBusinessChatLink';
            this.constructorId = 0x11679fa7;
            this.subclassOfId = 0xab670513;
            this._slots = ['message', 'entities', 'title'];
            this.message = params.message;
            this.entities = params.entities;
            this.title = params.title;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let message = await index_js_1.Primitive.String.read(_data);
            let entities = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : [];
            let title = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
            return new Raw.InputBusinessChatLink({ message: message, entities: entities, title: title });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.entities ? 1 << 0 : 0;
            flags |= this.title !== undefined ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.message !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.message));
            }
            if (this.entities) {
                b.write(index_js_1.Primitive.Vector.write(this.entities));
            }
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InputBusinessChatLink = InputBusinessChatLink;
    class BusinessChatLink extends index_js_1.TLObject {
        link;
        message;
        entities;
        title;
        views;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'BusinessChatLink';
            this.constructorId = 0xb4ae666f;
            this.subclassOfId = 0x3c0d4a8b;
            this._slots = ['link', 'message', 'entities', 'title', 'views'];
            this.link = params.link;
            this.message = params.message;
            this.entities = params.entities;
            this.title = params.title;
            this.views = params.views;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let link = await index_js_1.Primitive.String.read(_data);
            let message = await index_js_1.Primitive.String.read(_data);
            let entities = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : [];
            let title = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let views = await index_js_1.Primitive.Int.read(_data);
            return new Raw.BusinessChatLink({
                link: link,
                message: message,
                entities: entities,
                title: title,
                views: views,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.entities ? 1 << 0 : 0;
            flags |= this.title !== undefined ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.link !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.link));
            }
            if (this.message !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.message));
            }
            if (this.entities) {
                b.write(index_js_1.Primitive.Vector.write(this.entities));
            }
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            if (this.views !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.views));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.BusinessChatLink = BusinessChatLink;
    class RequestedPeerUser extends index_js_1.TLObject {
        userId;
        firstName;
        lastName;
        username;
        photo;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'RequestedPeerUser';
            this.constructorId = 0xd62ff46a;
            this.subclassOfId = 0xc2887c10;
            this._slots = ['userId', 'firstName', 'lastName', 'username', 'photo'];
            this.userId = params.userId;
            this.firstName = params.firstName;
            this.lastName = params.lastName;
            this.username = params.username;
            this.photo = params.photo;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let userId = await index_js_1.Primitive.Long.read(_data);
            let firstName = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let lastName = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let username = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let photo = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.RequestedPeerUser({
                userId: userId,
                firstName: firstName,
                lastName: lastName,
                username: username,
                photo: photo,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.firstName !== undefined ? 1 << 0 : 0;
            flags |= this.lastName !== undefined ? 1 << 0 : 0;
            flags |= this.username !== undefined ? 1 << 1 : 0;
            flags |= this.photo !== undefined ? 1 << 2 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.userId));
            }
            if (this.firstName !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.firstName));
            }
            if (this.lastName !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.lastName));
            }
            if (this.username !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.username));
            }
            if (this.photo !== undefined) {
                b.write(this.photo.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.RequestedPeerUser = RequestedPeerUser;
    class RequestedPeerChat extends index_js_1.TLObject {
        chatId;
        title;
        photo;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'RequestedPeerChat';
            this.constructorId = 0x7307544f;
            this.subclassOfId = 0xc2887c10;
            this._slots = ['chatId', 'title', 'photo'];
            this.chatId = params.chatId;
            this.title = params.title;
            this.photo = params.photo;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let chatId = await index_js_1.Primitive.Long.read(_data);
            let title = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let photo = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.RequestedPeerChat({ chatId: chatId, title: title, photo: photo });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.title !== undefined ? 1 << 0 : 0;
            flags |= this.photo !== undefined ? 1 << 2 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.chatId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.chatId));
            }
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            if (this.photo !== undefined) {
                b.write(this.photo.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.RequestedPeerChat = RequestedPeerChat;
    class RequestedPeerChannel extends index_js_1.TLObject {
        channelId;
        title;
        username;
        photo;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'RequestedPeerChannel';
            this.constructorId = 0x8ba403e4;
            this.subclassOfId = 0xc2887c10;
            this._slots = ['channelId', 'title', 'username', 'photo'];
            this.channelId = params.channelId;
            this.title = params.title;
            this.username = params.username;
            this.photo = params.photo;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let channelId = await index_js_1.Primitive.Long.read(_data);
            let title = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let username = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let photo = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.RequestedPeerChannel({
                channelId: channelId,
                title: title,
                username: username,
                photo: photo,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.title !== undefined ? 1 << 0 : 0;
            flags |= this.username !== undefined ? 1 << 1 : 0;
            flags |= this.photo !== undefined ? 1 << 2 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.channelId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.channelId));
            }
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            if (this.username !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.username));
            }
            if (this.photo !== undefined) {
                b.write(this.photo.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.RequestedPeerChannel = RequestedPeerChannel;
    class SponsoredMessageReportOption extends index_js_1.TLObject {
        text;
        option;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'SponsoredMessageReportOption';
            this.constructorId = 0x430d3150;
            this.subclassOfId = 0xdd32a718;
            this._slots = ['text', 'option'];
            this.text = params.text;
            this.option = params.option;
        }
        static async read(_data, ..._args) {
            let text = await index_js_1.Primitive.String.read(_data);
            let option = await index_js_1.Primitive.Bytes.read(_data);
            return new Raw.SponsoredMessageReportOption({ text: text, option: option });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.text !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.text));
            }
            if (this.option !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.option));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SponsoredMessageReportOption = SponsoredMessageReportOption;
    class BroadcastRevenueTransactionProceeds extends index_js_1.TLObject {
        amount;
        fromDate;
        toDate;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'BroadcastRevenueTransactionProceeds';
            this.constructorId = 0x557e2cc4;
            this.subclassOfId = 0x74fac2bd;
            this._slots = ['amount', 'fromDate', 'toDate'];
            this.amount = params.amount;
            this.fromDate = params.fromDate;
            this.toDate = params.toDate;
        }
        static async read(_data, ..._args) {
            let amount = await index_js_1.Primitive.Long.read(_data);
            let fromDate = await index_js_1.Primitive.Int.read(_data);
            let toDate = await index_js_1.Primitive.Int.read(_data);
            return new Raw.BroadcastRevenueTransactionProceeds({
                amount: amount,
                fromDate: fromDate,
                toDate: toDate,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.amount !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.amount));
            }
            if (this.fromDate !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.fromDate));
            }
            if (this.toDate !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.toDate));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.BroadcastRevenueTransactionProceeds = BroadcastRevenueTransactionProceeds;
    class BroadcastRevenueTransactionWithdrawal extends index_js_1.TLObject {
        pending;
        failed;
        amount;
        date;
        provider;
        transactionDate;
        transactionUrl;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'BroadcastRevenueTransactionWithdrawal';
            this.constructorId = 0x5a590978;
            this.subclassOfId = 0x74fac2bd;
            this._slots = [
                'pending',
                'failed',
                'amount',
                'date',
                'provider',
                'transactionDate',
                'transactionUrl',
            ];
            this.pending = params.pending;
            this.failed = params.failed;
            this.amount = params.amount;
            this.date = params.date;
            this.provider = params.provider;
            this.transactionDate = params.transactionDate;
            this.transactionUrl = params.transactionUrl;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let pending = flags & (1 << 0) ? true : false;
            let failed = flags & (1 << 2) ? true : false;
            let amount = await index_js_1.Primitive.Long.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            let provider = await index_js_1.Primitive.String.read(_data);
            let transactionDate = flags & (1 << 1) ? await index_js_1.Primitive.Int.read(_data) : undefined;
            let transactionUrl = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
            return new Raw.BroadcastRevenueTransactionWithdrawal({
                pending: pending,
                failed: failed,
                amount: amount,
                date: date,
                provider: provider,
                transactionDate: transactionDate,
                transactionUrl: transactionUrl,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.pending ? 1 << 0 : 0;
            flags |= this.failed ? 1 << 2 : 0;
            flags |= this.transactionDate !== undefined ? 1 << 1 : 0;
            flags |= this.transactionUrl !== undefined ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.amount !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.amount));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.provider !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.provider));
            }
            if (this.transactionDate !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.transactionDate));
            }
            if (this.transactionUrl !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.transactionUrl));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.BroadcastRevenueTransactionWithdrawal = BroadcastRevenueTransactionWithdrawal;
    class BroadcastRevenueTransactionRefund extends index_js_1.TLObject {
        amount;
        date;
        provider;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'BroadcastRevenueTransactionRefund';
            this.constructorId = 0x42d30d2e;
            this.subclassOfId = 0x74fac2bd;
            this._slots = ['amount', 'date', 'provider'];
            this.amount = params.amount;
            this.date = params.date;
            this.provider = params.provider;
        }
        static async read(_data, ..._args) {
            let amount = await index_js_1.Primitive.Long.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            let provider = await index_js_1.Primitive.String.read(_data);
            return new Raw.BroadcastRevenueTransactionRefund({
                amount: amount,
                date: date,
                provider: provider,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.amount !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.amount));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.provider !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.provider));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.BroadcastRevenueTransactionRefund = BroadcastRevenueTransactionRefund;
    class ReactionNotificationsFromContacts extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'ReactionNotificationsFromContacts';
            this.constructorId = 0xbac3a61a;
            this.subclassOfId = 0x345f7940;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.ReactionNotificationsFromContacts();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ReactionNotificationsFromContacts = ReactionNotificationsFromContacts;
    class ReactionNotificationsFromAll extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'ReactionNotificationsFromAll';
            this.constructorId = 0x4b9e22a0;
            this.subclassOfId = 0x345f7940;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.ReactionNotificationsFromAll();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ReactionNotificationsFromAll = ReactionNotificationsFromAll;
    class ReactionsNotifySettings extends index_js_1.TLObject {
        messagesNotifyFrom;
        storiesNotifyFrom;
        sound;
        showPreviews;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'ReactionsNotifySettings';
            this.constructorId = 0x56e34970;
            this.subclassOfId = 0x8dff0851;
            this._slots = ['messagesNotifyFrom', 'storiesNotifyFrom', 'sound', 'showPreviews'];
            this.messagesNotifyFrom = params.messagesNotifyFrom;
            this.storiesNotifyFrom = params.storiesNotifyFrom;
            this.sound = params.sound;
            this.showPreviews = params.showPreviews;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let messagesNotifyFrom = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
            let storiesNotifyFrom = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : undefined;
            let sound = await index_js_1.TLObject.read(_data);
            let showPreviews = await index_js_1.Primitive.Bool.read(_data);
            return new Raw.ReactionsNotifySettings({
                messagesNotifyFrom: messagesNotifyFrom,
                storiesNotifyFrom: storiesNotifyFrom,
                sound: sound,
                showPreviews: showPreviews,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.messagesNotifyFrom !== undefined ? 1 << 0 : 0;
            flags |= this.storiesNotifyFrom !== undefined ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.messagesNotifyFrom !== undefined) {
                b.write(this.messagesNotifyFrom.write());
            }
            if (this.storiesNotifyFrom !== undefined) {
                b.write(this.storiesNotifyFrom.write());
            }
            if (this.sound !== undefined) {
                b.write(this.sound.write());
            }
            if (this.showPreviews !== undefined) {
                b.write(index_js_1.Primitive.Bool.write(this.showPreviews));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.ReactionsNotifySettings = ReactionsNotifySettings;
    class BroadcastRevenueBalances extends index_js_1.TLObject {
        currentBalance;
        availableBalance;
        overallRevenue;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'BroadcastRevenueBalances';
            this.constructorId = 0x8438f1c6;
            this.subclassOfId = 0x15c28ff2;
            this._slots = ['currentBalance', 'availableBalance', 'overallRevenue'];
            this.currentBalance = params.currentBalance;
            this.availableBalance = params.availableBalance;
            this.overallRevenue = params.overallRevenue;
        }
        static async read(_data, ..._args) {
            let currentBalance = await index_js_1.Primitive.Long.read(_data);
            let availableBalance = await index_js_1.Primitive.Long.read(_data);
            let overallRevenue = await index_js_1.Primitive.Long.read(_data);
            return new Raw.BroadcastRevenueBalances({
                currentBalance: currentBalance,
                availableBalance: availableBalance,
                overallRevenue: overallRevenue,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.currentBalance !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.currentBalance));
            }
            if (this.availableBalance !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.availableBalance));
            }
            if (this.overallRevenue !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.overallRevenue));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.BroadcastRevenueBalances = BroadcastRevenueBalances;
    class AvailableEffect extends index_js_1.TLObject {
        premiumRequired;
        id;
        emoticon;
        staticIconId;
        effectStickerId;
        effectAnimationId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'AvailableEffect';
            this.constructorId = 0x93c3e27e;
            this.subclassOfId = 0x985a2f81;
            this._slots = [
                'premiumRequired',
                'id',
                'emoticon',
                'staticIconId',
                'effectStickerId',
                'effectAnimationId',
            ];
            this.premiumRequired = params.premiumRequired;
            this.id = params.id;
            this.emoticon = params.emoticon;
            this.staticIconId = params.staticIconId;
            this.effectStickerId = params.effectStickerId;
            this.effectAnimationId = params.effectAnimationId;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let premiumRequired = flags & (1 << 2) ? true : false;
            let id = await index_js_1.Primitive.Long.read(_data);
            let emoticon = await index_js_1.Primitive.String.read(_data);
            let staticIconId = flags & (1 << 0) ? await index_js_1.Primitive.Long.read(_data) : undefined;
            let effectStickerId = await index_js_1.Primitive.Long.read(_data);
            let effectAnimationId = flags & (1 << 1) ? await index_js_1.Primitive.Long.read(_data) : undefined;
            return new Raw.AvailableEffect({
                premiumRequired: premiumRequired,
                id: id,
                emoticon: emoticon,
                staticIconId: staticIconId,
                effectStickerId: effectStickerId,
                effectAnimationId: effectAnimationId,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.premiumRequired ? 1 << 2 : 0;
            flags |= this.staticIconId !== undefined ? 1 << 0 : 0;
            flags |= this.effectAnimationId !== undefined ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.emoticon !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.emoticon));
            }
            if (this.staticIconId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.staticIconId));
            }
            if (this.effectStickerId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.effectStickerId));
            }
            if (this.effectAnimationId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.effectAnimationId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.AvailableEffect = AvailableEffect;
    class FactCheck extends index_js_1.TLObject {
        needCheck;
        country;
        text;
        hash;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'FactCheck';
            this.constructorId = 0xb89bfccf;
            this.subclassOfId = 0x4640a3a3;
            this._slots = ['needCheck', 'country', 'text', 'hash'];
            this.needCheck = params.needCheck;
            this.country = params.country;
            this.text = params.text;
            this.hash = params.hash;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let needCheck = flags & (1 << 0) ? true : false;
            let country = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let text = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : undefined;
            let hash = await index_js_1.Primitive.Long.read(_data);
            return new Raw.FactCheck({ needCheck: needCheck, country: country, text: text, hash: hash });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.needCheck ? 1 << 0 : 0;
            flags |= this.country !== undefined ? 1 << 1 : 0;
            flags |= this.text !== undefined ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.country !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.country));
            }
            if (this.text !== undefined) {
                b.write(this.text.write());
            }
            if (this.hash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.hash));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.FactCheck = FactCheck;
    class StarsTransactionPeerUnsupported extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'StarsTransactionPeerUnsupported';
            this.constructorId = 0x95f2bfe4;
            this.subclassOfId = 0x41b69183;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.StarsTransactionPeerUnsupported();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.StarsTransactionPeerUnsupported = StarsTransactionPeerUnsupported;
    class StarsTransactionPeerAppStore extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'StarsTransactionPeerAppStore';
            this.constructorId = 0xb457b375;
            this.subclassOfId = 0x41b69183;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.StarsTransactionPeerAppStore();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.StarsTransactionPeerAppStore = StarsTransactionPeerAppStore;
    class StarsTransactionPeerPlayMarket extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'StarsTransactionPeerPlayMarket';
            this.constructorId = 0x7b560a0b;
            this.subclassOfId = 0x41b69183;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.StarsTransactionPeerPlayMarket();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.StarsTransactionPeerPlayMarket = StarsTransactionPeerPlayMarket;
    class StarsTransactionPeerPremiumBot extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'StarsTransactionPeerPremiumBot';
            this.constructorId = 0x250dbaf8;
            this.subclassOfId = 0x41b69183;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.StarsTransactionPeerPremiumBot();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.StarsTransactionPeerPremiumBot = StarsTransactionPeerPremiumBot;
    class StarsTransactionPeerFragment extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'StarsTransactionPeerFragment';
            this.constructorId = 0xe92fd902;
            this.subclassOfId = 0x41b69183;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.StarsTransactionPeerFragment();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.StarsTransactionPeerFragment = StarsTransactionPeerFragment;
    class StarsTransactionPeer extends index_js_1.TLObject {
        peer;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'StarsTransactionPeer';
            this.constructorId = 0xd80da15d;
            this.subclassOfId = 0x41b69183;
            this._slots = ['peer'];
            this.peer = params.peer;
        }
        static async read(_data, ..._args) {
            let peer = await index_js_1.TLObject.read(_data);
            return new Raw.StarsTransactionPeer({ peer: peer });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.StarsTransactionPeer = StarsTransactionPeer;
    class StarsTopupOption extends index_js_1.TLObject {
        extended;
        stars;
        storeProduct;
        currency;
        amount;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'StarsTopupOption';
            this.constructorId = 0xbd915c0;
            this.subclassOfId = 0xe5bca5ec;
            this._slots = ['extended', 'stars', 'storeProduct', 'currency', 'amount'];
            this.extended = params.extended;
            this.stars = params.stars;
            this.storeProduct = params.storeProduct;
            this.currency = params.currency;
            this.amount = params.amount;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let extended = flags & (1 << 1) ? true : false;
            let stars = await index_js_1.Primitive.Long.read(_data);
            let storeProduct = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let currency = await index_js_1.Primitive.String.read(_data);
            let amount = await index_js_1.Primitive.Long.read(_data);
            return new Raw.StarsTopupOption({
                extended: extended,
                stars: stars,
                storeProduct: storeProduct,
                currency: currency,
                amount: amount,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.extended ? 1 << 1 : 0;
            flags |= this.storeProduct !== undefined ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.stars !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.stars));
            }
            if (this.storeProduct !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.storeProduct));
            }
            if (this.currency !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.currency));
            }
            if (this.amount !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.amount));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.StarsTopupOption = StarsTopupOption;
    class StarsTransaction extends index_js_1.TLObject {
        refund;
        id;
        stars;
        date;
        peer;
        title;
        description;
        photo;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'StarsTransaction';
            this.constructorId = 0xcc7079b2;
            this.subclassOfId = 0x86884772;
            this._slots = ['refund', 'id', 'stars', 'date', 'peer', 'title', 'description', 'photo'];
            this.refund = params.refund;
            this.id = params.id;
            this.stars = params.stars;
            this.date = params.date;
            this.peer = params.peer;
            this.title = params.title;
            this.description = params.description;
            this.photo = params.photo;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let refund = flags & (1 << 3) ? true : false;
            let id = await index_js_1.Primitive.String.read(_data);
            let stars = await index_js_1.Primitive.Long.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            let peer = await index_js_1.TLObject.read(_data);
            let title = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let description = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let photo = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
            return new Raw.StarsTransaction({
                refund: refund,
                id: id,
                stars: stars,
                date: date,
                peer: peer,
                title: title,
                description: description,
                photo: photo,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.refund ? 1 << 3 : 0;
            flags |= this.title !== undefined ? 1 << 0 : 0;
            flags |= this.description !== undefined ? 1 << 1 : 0;
            flags |= this.photo !== undefined ? 1 << 2 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.id));
            }
            if (this.stars !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.stars));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.peer !== undefined) {
                b.write(this.peer.write());
            }
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            if (this.description !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.description));
            }
            if (this.photo !== undefined) {
                b.write(this.photo.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.StarsTransaction = StarsTransaction;
    class InvokeAfterMsg extends index_js_1.TLObject {
        __response__;
        msgId;
        query;
        constructor(params) {
            super();
            this.classType = 'functions';
            this.className = 'InvokeAfterMsg';
            this.constructorId = 0xcb9f372d;
            this.subclassOfId = 0xb7b2364b;
            this._slots = ['msgId', 'query'];
            this.msgId = params.msgId;
            this.query = params.query;
        }
        static async read(_data, ..._args) {
            let msgId = await index_js_1.Primitive.Long.read(_data);
            let query = await index_js_1.TLObject.read(_data);
            return new Raw.InvokeAfterMsg({ msgId: msgId, query: query });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.msgId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.msgId));
            }
            if (this.query !== undefined) {
                b.write(this.query.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InvokeAfterMsg = InvokeAfterMsg;
    class InvokeAfterMsgs extends index_js_1.TLObject {
        __response__;
        msgIds;
        query;
        constructor(params) {
            super();
            this.classType = 'functions';
            this.className = 'InvokeAfterMsgs';
            this.constructorId = 0x3dc4b4f0;
            this.subclassOfId = 0xb7b2364b;
            this._slots = ['msgIds', 'query'];
            this.msgIds = params.msgIds;
            this.query = params.query;
        }
        static async read(_data, ..._args) {
            let msgIds = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Long);
            let query = await index_js_1.TLObject.read(_data);
            return new Raw.InvokeAfterMsgs({ msgIds: msgIds, query: query });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.msgIds) {
                b.write(index_js_1.Primitive.Vector.write(this.msgIds, index_js_1.Primitive.Long));
            }
            if (this.query !== undefined) {
                b.write(this.query.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InvokeAfterMsgs = InvokeAfterMsgs;
    class InitConnection extends index_js_1.TLObject {
        __response__;
        apiId;
        deviceModel;
        systemVersion;
        appVersion;
        systemLangCode;
        langPack;
        langCode;
        proxy;
        params;
        query;
        constructor(params) {
            super();
            this.classType = 'functions';
            this.className = 'InitConnection';
            this.constructorId = 0xc1cd5ea9;
            this.subclassOfId = 0xb7b2364b;
            this._slots = [
                'apiId',
                'deviceModel',
                'systemVersion',
                'appVersion',
                'systemLangCode',
                'langPack',
                'langCode',
                'proxy',
                'params',
                'query',
            ];
            this.apiId = params.apiId;
            this.deviceModel = params.deviceModel;
            this.systemVersion = params.systemVersion;
            this.appVersion = params.appVersion;
            this.systemLangCode = params.systemLangCode;
            this.langPack = params.langPack;
            this.langCode = params.langCode;
            this.proxy = params.proxy;
            this.params = params.params;
            this.query = params.query;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let apiId = await index_js_1.Primitive.Int.read(_data);
            let deviceModel = await index_js_1.Primitive.String.read(_data);
            let systemVersion = await index_js_1.Primitive.String.read(_data);
            let appVersion = await index_js_1.Primitive.String.read(_data);
            let systemLangCode = await index_js_1.Primitive.String.read(_data);
            let langPack = await index_js_1.Primitive.String.read(_data);
            let langCode = await index_js_1.Primitive.String.read(_data);
            let proxy = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
            let params = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : undefined;
            let query = await index_js_1.TLObject.read(_data);
            return new Raw.InitConnection({
                apiId: apiId,
                deviceModel: deviceModel,
                systemVersion: systemVersion,
                appVersion: appVersion,
                systemLangCode: systemLangCode,
                langPack: langPack,
                langCode: langCode,
                proxy: proxy,
                params: params,
                query: query,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.proxy !== undefined ? 1 << 0 : 0;
            flags |= this.params !== undefined ? 1 << 1 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.apiId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.apiId));
            }
            if (this.deviceModel !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.deviceModel));
            }
            if (this.systemVersion !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.systemVersion));
            }
            if (this.appVersion !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.appVersion));
            }
            if (this.systemLangCode !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.systemLangCode));
            }
            if (this.langPack !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.langPack));
            }
            if (this.langCode !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.langCode));
            }
            if (this.proxy !== undefined) {
                b.write(this.proxy.write());
            }
            if (this.params !== undefined) {
                b.write(this.params.write());
            }
            if (this.query !== undefined) {
                b.write(this.query.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InitConnection = InitConnection;
    class InvokeWithLayer extends index_js_1.TLObject {
        __response__;
        layer;
        query;
        constructor(params) {
            super();
            this.classType = 'functions';
            this.className = 'InvokeWithLayer';
            this.constructorId = 0xda9b0d0d;
            this.subclassOfId = 0xb7b2364b;
            this._slots = ['layer', 'query'];
            this.layer = params.layer;
            this.query = params.query;
        }
        static async read(_data, ..._args) {
            let layer = await index_js_1.Primitive.Int.read(_data);
            let query = await index_js_1.TLObject.read(_data);
            return new Raw.InvokeWithLayer({ layer: layer, query: query });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.layer !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.layer));
            }
            if (this.query !== undefined) {
                b.write(this.query.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InvokeWithLayer = InvokeWithLayer;
    class InvokeWithoutUpdates extends index_js_1.TLObject {
        __response__;
        query;
        constructor(params) {
            super();
            this.classType = 'functions';
            this.className = 'InvokeWithoutUpdates';
            this.constructorId = 0xbf9459b7;
            this.subclassOfId = 0xb7b2364b;
            this._slots = ['query'];
            this.query = params.query;
        }
        static async read(_data, ..._args) {
            let query = await index_js_1.TLObject.read(_data);
            return new Raw.InvokeWithoutUpdates({ query: query });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.query !== undefined) {
                b.write(this.query.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InvokeWithoutUpdates = InvokeWithoutUpdates;
    class InvokeWithMessagesRange extends index_js_1.TLObject {
        __response__;
        range;
        query;
        constructor(params) {
            super();
            this.classType = 'functions';
            this.className = 'InvokeWithMessagesRange';
            this.constructorId = 0x365275f2;
            this.subclassOfId = 0xb7b2364b;
            this._slots = ['range', 'query'];
            this.range = params.range;
            this.query = params.query;
        }
        static async read(_data, ..._args) {
            let range = await index_js_1.TLObject.read(_data);
            let query = await index_js_1.TLObject.read(_data);
            return new Raw.InvokeWithMessagesRange({ range: range, query: query });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.range !== undefined) {
                b.write(this.range.write());
            }
            if (this.query !== undefined) {
                b.write(this.query.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InvokeWithMessagesRange = InvokeWithMessagesRange;
    class InvokeWithTakeout extends index_js_1.TLObject {
        __response__;
        takeoutId;
        query;
        constructor(params) {
            super();
            this.classType = 'functions';
            this.className = 'InvokeWithTakeout';
            this.constructorId = 0xaca9fd2e;
            this.subclassOfId = 0xb7b2364b;
            this._slots = ['takeoutId', 'query'];
            this.takeoutId = params.takeoutId;
            this.query = params.query;
        }
        static async read(_data, ..._args) {
            let takeoutId = await index_js_1.Primitive.Long.read(_data);
            let query = await index_js_1.TLObject.read(_data);
            return new Raw.InvokeWithTakeout({ takeoutId: takeoutId, query: query });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.takeoutId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.takeoutId));
            }
            if (this.query !== undefined) {
                b.write(this.query.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InvokeWithTakeout = InvokeWithTakeout;
    class InvokeWithBusinessConnection extends index_js_1.TLObject {
        __response__;
        connectionId;
        query;
        constructor(params) {
            super();
            this.classType = 'functions';
            this.className = 'InvokeWithBusinessConnection';
            this.constructorId = 0xdd289f8e;
            this.subclassOfId = 0xb7b2364b;
            this._slots = ['connectionId', 'query'];
            this.connectionId = params.connectionId;
            this.query = params.query;
        }
        static async read(_data, ..._args) {
            let connectionId = await index_js_1.Primitive.String.read(_data);
            let query = await index_js_1.TLObject.read(_data);
            return new Raw.InvokeWithBusinessConnection({ connectionId: connectionId, query: query });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.connectionId !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.connectionId));
            }
            if (this.query !== undefined) {
                b.write(this.query.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InvokeWithBusinessConnection = InvokeWithBusinessConnection;
    class InvokeWithGooglePlayIntegrity extends index_js_1.TLObject {
        __response__;
        nonce;
        token;
        query;
        constructor(params) {
            super();
            this.classType = 'functions';
            this.className = 'InvokeWithGooglePlayIntegrity';
            this.constructorId = 0x1df92984;
            this.subclassOfId = 0xb7b2364b;
            this._slots = ['nonce', 'token', 'query'];
            this.nonce = params.nonce;
            this.token = params.token;
            this.query = params.query;
        }
        static async read(_data, ..._args) {
            let nonce = await index_js_1.Primitive.String.read(_data);
            let token = await index_js_1.Primitive.String.read(_data);
            let query = await index_js_1.TLObject.read(_data);
            return new Raw.InvokeWithGooglePlayIntegrity({ nonce: nonce, token: token, query: query });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.nonce !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.nonce));
            }
            if (this.token !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.token));
            }
            if (this.query !== undefined) {
                b.write(this.query.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InvokeWithGooglePlayIntegrity = InvokeWithGooglePlayIntegrity;
    class InvokeWithApnsSecret extends index_js_1.TLObject {
        __response__;
        nonce;
        secret;
        query;
        constructor(params) {
            super();
            this.classType = 'functions';
            this.className = 'InvokeWithApnsSecret';
            this.constructorId = 0x0dae54f8;
            this.subclassOfId = 0xb7b2364b;
            this._slots = ['nonce', 'secret', 'query'];
            this.nonce = params.nonce;
            this.secret = params.secret;
            this.query = params.query;
        }
        static async read(_data, ..._args) {
            let nonce = await index_js_1.Primitive.String.read(_data);
            let secret = await index_js_1.Primitive.String.read(_data);
            let query = await index_js_1.TLObject.read(_data);
            return new Raw.InvokeWithApnsSecret({ nonce: nonce, secret: secret, query: query });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.nonce !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.nonce));
            }
            if (this.secret !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.secret));
            }
            if (this.query !== undefined) {
                b.write(this.query.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.InvokeWithApnsSecret = InvokeWithApnsSecret;
    class DecryptedMessage8 extends index_js_1.TLObject {
        randomId;
        randomBytes;
        message;
        media;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DecryptedMessage8';
            this.constructorId = 0x1f814f1f;
            this.subclassOfId = 0x5303193e;
            this._slots = ['randomId', 'randomBytes', 'message', 'media'];
            this.randomId = params.randomId;
            this.randomBytes = params.randomBytes;
            this.message = params.message;
            this.media = params.media;
        }
        static async read(_data, ..._args) {
            let randomId = await index_js_1.Primitive.Long.read(_data);
            let randomBytes = await index_js_1.Primitive.Bytes.read(_data);
            let message = await index_js_1.Primitive.String.read(_data);
            let media = await index_js_1.TLObject.read(_data);
            return new Raw.DecryptedMessage8({
                randomId: randomId,
                randomBytes: randomBytes,
                message: message,
                media: media,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.randomId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.randomId));
            }
            if (this.randomBytes !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.randomBytes));
            }
            if (this.message !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.message));
            }
            if (this.media !== undefined) {
                b.write(this.media.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DecryptedMessage8 = DecryptedMessage8;
    class DecryptedMessageService8 extends index_js_1.TLObject {
        randomId;
        randomBytes;
        action;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DecryptedMessageService8';
            this.constructorId = 0xaa48327d;
            this.subclassOfId = 0x5303193e;
            this._slots = ['randomId', 'randomBytes', 'action'];
            this.randomId = params.randomId;
            this.randomBytes = params.randomBytes;
            this.action = params.action;
        }
        static async read(_data, ..._args) {
            let randomId = await index_js_1.Primitive.Long.read(_data);
            let randomBytes = await index_js_1.Primitive.Bytes.read(_data);
            let action = await index_js_1.TLObject.read(_data);
            return new Raw.DecryptedMessageService8({
                randomId: randomId,
                randomBytes: randomBytes,
                action: action,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.randomId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.randomId));
            }
            if (this.randomBytes !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.randomBytes));
            }
            if (this.action !== undefined) {
                b.write(this.action.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DecryptedMessageService8 = DecryptedMessageService8;
    class DecryptedMessageMediaEmpty8 extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'DecryptedMessageMediaEmpty8';
            this.constructorId = 0x89f5c4a;
            this.subclassOfId = 0xb3d2034;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.DecryptedMessageMediaEmpty8();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DecryptedMessageMediaEmpty8 = DecryptedMessageMediaEmpty8;
    class DecryptedMessageMediaPhoto8 extends index_js_1.TLObject {
        thumb;
        thumbW;
        thumbH;
        w;
        h;
        size;
        key;
        iv;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DecryptedMessageMediaPhoto8';
            this.constructorId = 0x32798a8c;
            this.subclassOfId = 0xb3d2034;
            this._slots = ['thumb', 'thumbW', 'thumbH', 'w', 'h', 'size', 'key', 'iv'];
            this.thumb = params.thumb;
            this.thumbW = params.thumbW;
            this.thumbH = params.thumbH;
            this.w = params.w;
            this.h = params.h;
            this.size = params.size;
            this.key = params.key;
            this.iv = params.iv;
        }
        static async read(_data, ..._args) {
            let thumb = await index_js_1.Primitive.Bytes.read(_data);
            let thumbW = await index_js_1.Primitive.Int.read(_data);
            let thumbH = await index_js_1.Primitive.Int.read(_data);
            let w = await index_js_1.Primitive.Int.read(_data);
            let h = await index_js_1.Primitive.Int.read(_data);
            let size = await index_js_1.Primitive.Int.read(_data);
            let key = await index_js_1.Primitive.Bytes.read(_data);
            let iv = await index_js_1.Primitive.Bytes.read(_data);
            return new Raw.DecryptedMessageMediaPhoto8({
                thumb: thumb,
                thumbW: thumbW,
                thumbH: thumbH,
                w: w,
                h: h,
                size: size,
                key: key,
                iv: iv,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.thumb !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.thumb));
            }
            if (this.thumbW !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.thumbW));
            }
            if (this.thumbH !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.thumbH));
            }
            if (this.w !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.w));
            }
            if (this.h !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.h));
            }
            if (this.size !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.size));
            }
            if (this.key !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.key));
            }
            if (this.iv !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.iv));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DecryptedMessageMediaPhoto8 = DecryptedMessageMediaPhoto8;
    class DecryptedMessageMediaVideo8 extends index_js_1.TLObject {
        thumb;
        thumbW;
        thumbH;
        duration;
        w;
        h;
        size;
        key;
        iv;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DecryptedMessageMediaVideo8';
            this.constructorId = 0x4cee6ef3;
            this.subclassOfId = 0xb3d2034;
            this._slots = ['thumb', 'thumbW', 'thumbH', 'duration', 'w', 'h', 'size', 'key', 'iv'];
            this.thumb = params.thumb;
            this.thumbW = params.thumbW;
            this.thumbH = params.thumbH;
            this.duration = params.duration;
            this.w = params.w;
            this.h = params.h;
            this.size = params.size;
            this.key = params.key;
            this.iv = params.iv;
        }
        static async read(_data, ..._args) {
            let thumb = await index_js_1.Primitive.Bytes.read(_data);
            let thumbW = await index_js_1.Primitive.Int.read(_data);
            let thumbH = await index_js_1.Primitive.Int.read(_data);
            let duration = await index_js_1.Primitive.Int.read(_data);
            let w = await index_js_1.Primitive.Int.read(_data);
            let h = await index_js_1.Primitive.Int.read(_data);
            let size = await index_js_1.Primitive.Int.read(_data);
            let key = await index_js_1.Primitive.Bytes.read(_data);
            let iv = await index_js_1.Primitive.Bytes.read(_data);
            return new Raw.DecryptedMessageMediaVideo8({
                thumb: thumb,
                thumbW: thumbW,
                thumbH: thumbH,
                duration: duration,
                w: w,
                h: h,
                size: size,
                key: key,
                iv: iv,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.thumb !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.thumb));
            }
            if (this.thumbW !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.thumbW));
            }
            if (this.thumbH !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.thumbH));
            }
            if (this.duration !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.duration));
            }
            if (this.w !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.w));
            }
            if (this.h !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.h));
            }
            if (this.size !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.size));
            }
            if (this.key !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.key));
            }
            if (this.iv !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.iv));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DecryptedMessageMediaVideo8 = DecryptedMessageMediaVideo8;
    class DecryptedMessageMediaGeoPoint8 extends index_js_1.TLObject {
        lat;
        long;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DecryptedMessageMediaGeoPoint8';
            this.constructorId = 0x35480a59;
            this.subclassOfId = 0xb3d2034;
            this._slots = ['lat', 'long'];
            this.lat = params.lat;
            this.long = params.long;
        }
        static async read(_data, ..._args) {
            let lat = await index_js_1.Primitive.Double.read(_data);
            let long = await index_js_1.Primitive.Double.read(_data);
            return new Raw.DecryptedMessageMediaGeoPoint8({ lat: lat, long: long });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.lat !== undefined) {
                b.write(index_js_1.Primitive.Double.write(this.lat));
            }
            if (this.long !== undefined) {
                b.write(index_js_1.Primitive.Double.write(this.long));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DecryptedMessageMediaGeoPoint8 = DecryptedMessageMediaGeoPoint8;
    class DecryptedMessageMediaContact8 extends index_js_1.TLObject {
        phoneNumber;
        firstName;
        lastName;
        userId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DecryptedMessageMediaContact8';
            this.constructorId = 0x588a0a97;
            this.subclassOfId = 0xb3d2034;
            this._slots = ['phoneNumber', 'firstName', 'lastName', 'userId'];
            this.phoneNumber = params.phoneNumber;
            this.firstName = params.firstName;
            this.lastName = params.lastName;
            this.userId = params.userId;
        }
        static async read(_data, ..._args) {
            let phoneNumber = await index_js_1.Primitive.String.read(_data);
            let firstName = await index_js_1.Primitive.String.read(_data);
            let lastName = await index_js_1.Primitive.String.read(_data);
            let userId = await index_js_1.Primitive.Int.read(_data);
            return new Raw.DecryptedMessageMediaContact8({
                phoneNumber: phoneNumber,
                firstName: firstName,
                lastName: lastName,
                userId: userId,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.phoneNumber !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.phoneNumber));
            }
            if (this.firstName !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.firstName));
            }
            if (this.lastName !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.lastName));
            }
            if (this.userId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.userId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DecryptedMessageMediaContact8 = DecryptedMessageMediaContact8;
    class DecryptedMessageActionSetMessageTTL8 extends index_js_1.TLObject {
        ttlSeconds;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DecryptedMessageActionSetMessageTTL8';
            this.constructorId = 0xa1733aec;
            this.subclassOfId = 0x6faf258d;
            this._slots = ['ttlSeconds'];
            this.ttlSeconds = params.ttlSeconds;
        }
        static async read(_data, ..._args) {
            let ttlSeconds = await index_js_1.Primitive.Int.read(_data);
            return new Raw.DecryptedMessageActionSetMessageTTL8({ ttlSeconds: ttlSeconds });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.ttlSeconds !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.ttlSeconds));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DecryptedMessageActionSetMessageTTL8 = DecryptedMessageActionSetMessageTTL8;
    class DecryptedMessageMediaDocument8 extends index_js_1.TLObject {
        thumb;
        thumbW;
        thumbH;
        fileName;
        mimeType;
        size;
        key;
        iv;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DecryptedMessageMediaDocument8';
            this.constructorId = 0xb095434b;
            this.subclassOfId = 0xb3d2034;
            this._slots = ['thumb', 'thumbW', 'thumbH', 'fileName', 'mimeType', 'size', 'key', 'iv'];
            this.thumb = params.thumb;
            this.thumbW = params.thumbW;
            this.thumbH = params.thumbH;
            this.fileName = params.fileName;
            this.mimeType = params.mimeType;
            this.size = params.size;
            this.key = params.key;
            this.iv = params.iv;
        }
        static async read(_data, ..._args) {
            let thumb = await index_js_1.Primitive.Bytes.read(_data);
            let thumbW = await index_js_1.Primitive.Int.read(_data);
            let thumbH = await index_js_1.Primitive.Int.read(_data);
            let fileName = await index_js_1.Primitive.String.read(_data);
            let mimeType = await index_js_1.Primitive.String.read(_data);
            let size = await index_js_1.Primitive.Int.read(_data);
            let key = await index_js_1.Primitive.Bytes.read(_data);
            let iv = await index_js_1.Primitive.Bytes.read(_data);
            return new Raw.DecryptedMessageMediaDocument8({
                thumb: thumb,
                thumbW: thumbW,
                thumbH: thumbH,
                fileName: fileName,
                mimeType: mimeType,
                size: size,
                key: key,
                iv: iv,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.thumb !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.thumb));
            }
            if (this.thumbW !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.thumbW));
            }
            if (this.thumbH !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.thumbH));
            }
            if (this.fileName !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.fileName));
            }
            if (this.mimeType !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.mimeType));
            }
            if (this.size !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.size));
            }
            if (this.key !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.key));
            }
            if (this.iv !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.iv));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DecryptedMessageMediaDocument8 = DecryptedMessageMediaDocument8;
    class DecryptedMessageMediaAudio8 extends index_js_1.TLObject {
        duration;
        size;
        key;
        iv;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DecryptedMessageMediaAudio8';
            this.constructorId = 0x6080758f;
            this.subclassOfId = 0xb3d2034;
            this._slots = ['duration', 'size', 'key', 'iv'];
            this.duration = params.duration;
            this.size = params.size;
            this.key = params.key;
            this.iv = params.iv;
        }
        static async read(_data, ..._args) {
            let duration = await index_js_1.Primitive.Int.read(_data);
            let size = await index_js_1.Primitive.Int.read(_data);
            let key = await index_js_1.Primitive.Bytes.read(_data);
            let iv = await index_js_1.Primitive.Bytes.read(_data);
            return new Raw.DecryptedMessageMediaAudio8({
                duration: duration,
                size: size,
                key: key,
                iv: iv,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.duration !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.duration));
            }
            if (this.size !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.size));
            }
            if (this.key !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.key));
            }
            if (this.iv !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.iv));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DecryptedMessageMediaAudio8 = DecryptedMessageMediaAudio8;
    class DecryptedMessageActionReadMessages8 extends index_js_1.TLObject {
        randomIds;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DecryptedMessageActionReadMessages8';
            this.constructorId = 0xc4f40be;
            this.subclassOfId = 0x6faf258d;
            this._slots = ['randomIds'];
            this.randomIds = params.randomIds;
        }
        static async read(_data, ..._args) {
            let randomIds = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Long);
            return new Raw.DecryptedMessageActionReadMessages8({ randomIds: randomIds });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.randomIds) {
                b.write(index_js_1.Primitive.Vector.write(this.randomIds, index_js_1.Primitive.Long));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DecryptedMessageActionReadMessages8 = DecryptedMessageActionReadMessages8;
    class DecryptedMessageActionDeleteMessages8 extends index_js_1.TLObject {
        randomIds;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DecryptedMessageActionDeleteMessages8';
            this.constructorId = 0x65614304;
            this.subclassOfId = 0x6faf258d;
            this._slots = ['randomIds'];
            this.randomIds = params.randomIds;
        }
        static async read(_data, ..._args) {
            let randomIds = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Long);
            return new Raw.DecryptedMessageActionDeleteMessages8({ randomIds: randomIds });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.randomIds) {
                b.write(index_js_1.Primitive.Vector.write(this.randomIds, index_js_1.Primitive.Long));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DecryptedMessageActionDeleteMessages8 = DecryptedMessageActionDeleteMessages8;
    class DecryptedMessageActionScreenshotMessages8 extends index_js_1.TLObject {
        randomIds;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DecryptedMessageActionScreenshotMessages8';
            this.constructorId = 0x8ac1f475;
            this.subclassOfId = 0x6faf258d;
            this._slots = ['randomIds'];
            this.randomIds = params.randomIds;
        }
        static async read(_data, ..._args) {
            let randomIds = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Long);
            return new Raw.DecryptedMessageActionScreenshotMessages8({ randomIds: randomIds });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.randomIds) {
                b.write(index_js_1.Primitive.Vector.write(this.randomIds, index_js_1.Primitive.Long));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DecryptedMessageActionScreenshotMessages8 = DecryptedMessageActionScreenshotMessages8;
    class DecryptedMessageActionFlushHistory8 extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'DecryptedMessageActionFlushHistory8';
            this.constructorId = 0x6719e45c;
            this.subclassOfId = 0x6faf258d;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.DecryptedMessageActionFlushHistory8();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DecryptedMessageActionFlushHistory8 = DecryptedMessageActionFlushHistory8;
    class DecryptedMessage17 extends index_js_1.TLObject {
        randomId;
        ttl;
        message;
        media;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DecryptedMessage17';
            this.constructorId = 0x204d3878;
            this.subclassOfId = 0x5303193e;
            this._slots = ['randomId', 'ttl', 'message', 'media'];
            this.randomId = params.randomId;
            this.ttl = params.ttl;
            this.message = params.message;
            this.media = params.media;
        }
        static async read(_data, ..._args) {
            let randomId = await index_js_1.Primitive.Long.read(_data);
            let ttl = await index_js_1.Primitive.Int.read(_data);
            let message = await index_js_1.Primitive.String.read(_data);
            let media = await index_js_1.TLObject.read(_data);
            return new Raw.DecryptedMessage17({
                randomId: randomId,
                ttl: ttl,
                message: message,
                media: media,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.randomId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.randomId));
            }
            if (this.ttl !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.ttl));
            }
            if (this.message !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.message));
            }
            if (this.media !== undefined) {
                b.write(this.media.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DecryptedMessage17 = DecryptedMessage17;
    class DecryptedMessageService17 extends index_js_1.TLObject {
        randomId;
        action;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DecryptedMessageService17';
            this.constructorId = 0x73164160;
            this.subclassOfId = 0x5303193e;
            this._slots = ['randomId', 'action'];
            this.randomId = params.randomId;
            this.action = params.action;
        }
        static async read(_data, ..._args) {
            let randomId = await index_js_1.Primitive.Long.read(_data);
            let action = await index_js_1.TLObject.read(_data);
            return new Raw.DecryptedMessageService17({ randomId: randomId, action: action });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.randomId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.randomId));
            }
            if (this.action !== undefined) {
                b.write(this.action.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DecryptedMessageService17 = DecryptedMessageService17;
    class DecryptedMessageMediaVideo17 extends index_js_1.TLObject {
        thumb;
        thumbW;
        thumbH;
        duration;
        mimeType;
        w;
        h;
        size;
        key;
        iv;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DecryptedMessageMediaVideo17';
            this.constructorId = 0x524a415d;
            this.subclassOfId = 0xb3d2034;
            this._slots = [
                'thumb',
                'thumbW',
                'thumbH',
                'duration',
                'mimeType',
                'w',
                'h',
                'size',
                'key',
                'iv',
            ];
            this.thumb = params.thumb;
            this.thumbW = params.thumbW;
            this.thumbH = params.thumbH;
            this.duration = params.duration;
            this.mimeType = params.mimeType;
            this.w = params.w;
            this.h = params.h;
            this.size = params.size;
            this.key = params.key;
            this.iv = params.iv;
        }
        static async read(_data, ..._args) {
            let thumb = await index_js_1.Primitive.Bytes.read(_data);
            let thumbW = await index_js_1.Primitive.Int.read(_data);
            let thumbH = await index_js_1.Primitive.Int.read(_data);
            let duration = await index_js_1.Primitive.Int.read(_data);
            let mimeType = await index_js_1.Primitive.String.read(_data);
            let w = await index_js_1.Primitive.Int.read(_data);
            let h = await index_js_1.Primitive.Int.read(_data);
            let size = await index_js_1.Primitive.Int.read(_data);
            let key = await index_js_1.Primitive.Bytes.read(_data);
            let iv = await index_js_1.Primitive.Bytes.read(_data);
            return new Raw.DecryptedMessageMediaVideo17({
                thumb: thumb,
                thumbW: thumbW,
                thumbH: thumbH,
                duration: duration,
                mimeType: mimeType,
                w: w,
                h: h,
                size: size,
                key: key,
                iv: iv,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.thumb !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.thumb));
            }
            if (this.thumbW !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.thumbW));
            }
            if (this.thumbH !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.thumbH));
            }
            if (this.duration !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.duration));
            }
            if (this.mimeType !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.mimeType));
            }
            if (this.w !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.w));
            }
            if (this.h !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.h));
            }
            if (this.size !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.size));
            }
            if (this.key !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.key));
            }
            if (this.iv !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.iv));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DecryptedMessageMediaVideo17 = DecryptedMessageMediaVideo17;
    class DecryptedMessageMediaAudio17 extends index_js_1.TLObject {
        duration;
        mimeType;
        size;
        key;
        iv;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DecryptedMessageMediaAudio17';
            this.constructorId = 0x57e0a9cb;
            this.subclassOfId = 0xb3d2034;
            this._slots = ['duration', 'mimeType', 'size', 'key', 'iv'];
            this.duration = params.duration;
            this.mimeType = params.mimeType;
            this.size = params.size;
            this.key = params.key;
            this.iv = params.iv;
        }
        static async read(_data, ..._args) {
            let duration = await index_js_1.Primitive.Int.read(_data);
            let mimeType = await index_js_1.Primitive.String.read(_data);
            let size = await index_js_1.Primitive.Int.read(_data);
            let key = await index_js_1.Primitive.Bytes.read(_data);
            let iv = await index_js_1.Primitive.Bytes.read(_data);
            return new Raw.DecryptedMessageMediaAudio17({
                duration: duration,
                mimeType: mimeType,
                size: size,
                key: key,
                iv: iv,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.duration !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.duration));
            }
            if (this.mimeType !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.mimeType));
            }
            if (this.size !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.size));
            }
            if (this.key !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.key));
            }
            if (this.iv !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.iv));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DecryptedMessageMediaAudio17 = DecryptedMessageMediaAudio17;
    class DecryptedMessageLayer17 extends index_js_1.TLObject {
        randomBytes;
        layer;
        inSeqNo;
        outSeqNo;
        message;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DecryptedMessageLayer17';
            this.constructorId = 0x1be31789;
            this.subclassOfId = 0x85caa022;
            this._slots = ['randomBytes', 'layer', 'inSeqNo', 'outSeqNo', 'message'];
            this.randomBytes = params.randomBytes;
            this.layer = params.layer;
            this.inSeqNo = params.inSeqNo;
            this.outSeqNo = params.outSeqNo;
            this.message = params.message;
        }
        static async read(_data, ..._args) {
            let randomBytes = await index_js_1.Primitive.Bytes.read(_data);
            let layer = await index_js_1.Primitive.Int.read(_data);
            let inSeqNo = await index_js_1.Primitive.Int.read(_data);
            let outSeqNo = await index_js_1.Primitive.Int.read(_data);
            let message = await index_js_1.TLObject.read(_data);
            return new Raw.DecryptedMessageLayer17({
                randomBytes: randomBytes,
                layer: layer,
                inSeqNo: inSeqNo,
                outSeqNo: outSeqNo,
                message: message,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.randomBytes !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.randomBytes));
            }
            if (this.layer !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.layer));
            }
            if (this.inSeqNo !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.inSeqNo));
            }
            if (this.outSeqNo !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.outSeqNo));
            }
            if (this.message !== undefined) {
                b.write(this.message.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DecryptedMessageLayer17 = DecryptedMessageLayer17;
    class SendMessageUploadVideoAction17 extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'SendMessageUploadVideoAction17';
            this.constructorId = 0x92042ff7;
            this.subclassOfId = 0x20b2cc21;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.SendMessageUploadVideoAction17();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SendMessageUploadVideoAction17 = SendMessageUploadVideoAction17;
    class SendMessageUploadAudioAction17 extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'SendMessageUploadAudioAction17';
            this.constructorId = 0xe6ac8a6f;
            this.subclassOfId = 0x20b2cc21;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.SendMessageUploadAudioAction17();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SendMessageUploadAudioAction17 = SendMessageUploadAudioAction17;
    class SendMessageUploadPhotoAction17 extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'SendMessageUploadPhotoAction17';
            this.constructorId = 0x990a3c1a;
            this.subclassOfId = 0x20b2cc21;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.SendMessageUploadPhotoAction17();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SendMessageUploadPhotoAction17 = SendMessageUploadPhotoAction17;
    class SendMessageUploadDocumentAction17 extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'SendMessageUploadDocumentAction17';
            this.constructorId = 0x8faee98e;
            this.subclassOfId = 0x20b2cc21;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.SendMessageUploadDocumentAction17();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SendMessageUploadDocumentAction17 = SendMessageUploadDocumentAction17;
    class DecryptedMessageActionResend17 extends index_js_1.TLObject {
        startSeqNo;
        endSeqNo;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DecryptedMessageActionResend17';
            this.constructorId = 0x511110b0;
            this.subclassOfId = 0x6faf258d;
            this._slots = ['startSeqNo', 'endSeqNo'];
            this.startSeqNo = params.startSeqNo;
            this.endSeqNo = params.endSeqNo;
        }
        static async read(_data, ..._args) {
            let startSeqNo = await index_js_1.Primitive.Int.read(_data);
            let endSeqNo = await index_js_1.Primitive.Int.read(_data);
            return new Raw.DecryptedMessageActionResend17({ startSeqNo: startSeqNo, endSeqNo: endSeqNo });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.startSeqNo !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.startSeqNo));
            }
            if (this.endSeqNo !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.endSeqNo));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DecryptedMessageActionResend17 = DecryptedMessageActionResend17;
    class DecryptedMessageActionNotifyLayer17 extends index_js_1.TLObject {
        layer;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DecryptedMessageActionNotifyLayer17';
            this.constructorId = 0xf3048883;
            this.subclassOfId = 0x6faf258d;
            this._slots = ['layer'];
            this.layer = params.layer;
        }
        static async read(_data, ..._args) {
            let layer = await index_js_1.Primitive.Int.read(_data);
            return new Raw.DecryptedMessageActionNotifyLayer17({ layer: layer });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.layer !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.layer));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DecryptedMessageActionNotifyLayer17 = DecryptedMessageActionNotifyLayer17;
    class DecryptedMessageActionTyping17 extends index_js_1.TLObject {
        action;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DecryptedMessageActionTyping17';
            this.constructorId = 0xccb27641;
            this.subclassOfId = 0x6faf258d;
            this._slots = ['action'];
            this.action = params.action;
        }
        static async read(_data, ..._args) {
            let action = await index_js_1.TLObject.read(_data);
            return new Raw.DecryptedMessageActionTyping17({ action: action });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.action !== undefined) {
                b.write(this.action.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DecryptedMessageActionTyping17 = DecryptedMessageActionTyping17;
    class DecryptedMessageActionRequestKey20 extends index_js_1.TLObject {
        exchangeId;
        gA;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DecryptedMessageActionRequestKey20';
            this.constructorId = 0xf3c9611b;
            this.subclassOfId = 0x6faf258d;
            this._slots = ['exchangeId', 'gA'];
            this.exchangeId = params.exchangeId;
            this.gA = params.gA;
        }
        static async read(_data, ..._args) {
            let exchangeId = await index_js_1.Primitive.Long.read(_data);
            let gA = await index_js_1.Primitive.Bytes.read(_data);
            return new Raw.DecryptedMessageActionRequestKey20({ exchangeId: exchangeId, gA: gA });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.exchangeId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.exchangeId));
            }
            if (this.gA !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.gA));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DecryptedMessageActionRequestKey20 = DecryptedMessageActionRequestKey20;
    class DecryptedMessageActionAcceptKey20 extends index_js_1.TLObject {
        exchangeId;
        gB;
        keyFingerprint;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DecryptedMessageActionAcceptKey20';
            this.constructorId = 0x6fe1735b;
            this.subclassOfId = 0x6faf258d;
            this._slots = ['exchangeId', 'gB', 'keyFingerprint'];
            this.exchangeId = params.exchangeId;
            this.gB = params.gB;
            this.keyFingerprint = params.keyFingerprint;
        }
        static async read(_data, ..._args) {
            let exchangeId = await index_js_1.Primitive.Long.read(_data);
            let gB = await index_js_1.Primitive.Bytes.read(_data);
            let keyFingerprint = await index_js_1.Primitive.Long.read(_data);
            return new Raw.DecryptedMessageActionAcceptKey20({
                exchangeId: exchangeId,
                gB: gB,
                keyFingerprint: keyFingerprint,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.exchangeId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.exchangeId));
            }
            if (this.gB !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.gB));
            }
            if (this.keyFingerprint !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.keyFingerprint));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DecryptedMessageActionAcceptKey20 = DecryptedMessageActionAcceptKey20;
    class DecryptedMessageActionAbortKey20 extends index_js_1.TLObject {
        exchangeId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DecryptedMessageActionAbortKey20';
            this.constructorId = 0xdd05ec6b;
            this.subclassOfId = 0x6faf258d;
            this._slots = ['exchangeId'];
            this.exchangeId = params.exchangeId;
        }
        static async read(_data, ..._args) {
            let exchangeId = await index_js_1.Primitive.Long.read(_data);
            return new Raw.DecryptedMessageActionAbortKey20({ exchangeId: exchangeId });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.exchangeId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.exchangeId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DecryptedMessageActionAbortKey20 = DecryptedMessageActionAbortKey20;
    class DecryptedMessageActionCommitKey20 extends index_js_1.TLObject {
        exchangeId;
        keyFingerprint;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DecryptedMessageActionCommitKey20';
            this.constructorId = 0xec2e0b9b;
            this.subclassOfId = 0x6faf258d;
            this._slots = ['exchangeId', 'keyFingerprint'];
            this.exchangeId = params.exchangeId;
            this.keyFingerprint = params.keyFingerprint;
        }
        static async read(_data, ..._args) {
            let exchangeId = await index_js_1.Primitive.Long.read(_data);
            let keyFingerprint = await index_js_1.Primitive.Long.read(_data);
            return new Raw.DecryptedMessageActionCommitKey20({
                exchangeId: exchangeId,
                keyFingerprint: keyFingerprint,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.exchangeId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.exchangeId));
            }
            if (this.keyFingerprint !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.keyFingerprint));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DecryptedMessageActionCommitKey20 = DecryptedMessageActionCommitKey20;
    class DecryptedMessageActionNoop20 extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'DecryptedMessageActionNoop20';
            this.constructorId = 0xa82fdd63;
            this.subclassOfId = 0x6faf258d;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.DecryptedMessageActionNoop20();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DecryptedMessageActionNoop20 = DecryptedMessageActionNoop20;
    class DocumentAttributeSticker23 extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'DocumentAttributeSticker23';
            this.constructorId = 0xfb0a5727;
            this.subclassOfId = 0xf729eb9b;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.DocumentAttributeSticker23();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DocumentAttributeSticker23 = DocumentAttributeSticker23;
    class DocumentAttributeVideo23 extends index_js_1.TLObject {
        duration;
        w;
        h;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DocumentAttributeVideo23';
            this.constructorId = 0x5910cccb;
            this.subclassOfId = 0xf729eb9b;
            this._slots = ['duration', 'w', 'h'];
            this.duration = params.duration;
            this.w = params.w;
            this.h = params.h;
        }
        static async read(_data, ..._args) {
            let duration = await index_js_1.Primitive.Int.read(_data);
            let w = await index_js_1.Primitive.Int.read(_data);
            let h = await index_js_1.Primitive.Int.read(_data);
            return new Raw.DocumentAttributeVideo23({ duration: duration, w: w, h: h });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.duration !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.duration));
            }
            if (this.w !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.w));
            }
            if (this.h !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.h));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DocumentAttributeVideo23 = DocumentAttributeVideo23;
    class DocumentAttributeAudio23 extends index_js_1.TLObject {
        duration;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DocumentAttributeAudio23';
            this.constructorId = 0x51448e5;
            this.subclassOfId = 0xf729eb9b;
            this._slots = ['duration'];
            this.duration = params.duration;
        }
        static async read(_data, ..._args) {
            let duration = await index_js_1.Primitive.Int.read(_data);
            return new Raw.DocumentAttributeAudio23({ duration: duration });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.duration !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.duration));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DocumentAttributeAudio23 = DocumentAttributeAudio23;
    class PhotoSize23 extends index_js_1.TLObject {
        type;
        location;
        w;
        h;
        size;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PhotoSize23';
            this.constructorId = 0x77bfb61b;
            this.subclassOfId = 0x17cc29d9;
            this._slots = ['type', 'location', 'w', 'h', 'size'];
            this.type = params.type;
            this.location = params.location;
            this.w = params.w;
            this.h = params.h;
            this.size = params.size;
        }
        static async read(_data, ..._args) {
            let type = await index_js_1.Primitive.String.read(_data);
            let location = await index_js_1.TLObject.read(_data);
            let w = await index_js_1.Primitive.Int.read(_data);
            let h = await index_js_1.Primitive.Int.read(_data);
            let size = await index_js_1.Primitive.Int.read(_data);
            return new Raw.PhotoSize23({ type: type, location: location, w: w, h: h, size: size });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.type !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.type));
            }
            if (this.location !== undefined) {
                b.write(this.location.write());
            }
            if (this.w !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.w));
            }
            if (this.h !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.h));
            }
            if (this.size !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.size));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PhotoSize23 = PhotoSize23;
    class PhotoCachedSize23 extends index_js_1.TLObject {
        type;
        location;
        w;
        h;
        bytes;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'PhotoCachedSize23';
            this.constructorId = 0xe9a734fa;
            this.subclassOfId = 0x17cc29d9;
            this._slots = ['type', 'location', 'w', 'h', 'bytes'];
            this.type = params.type;
            this.location = params.location;
            this.w = params.w;
            this.h = params.h;
            this.bytes = params.bytes;
        }
        static async read(_data, ..._args) {
            let type = await index_js_1.Primitive.String.read(_data);
            let location = await index_js_1.TLObject.read(_data);
            let w = await index_js_1.Primitive.Int.read(_data);
            let h = await index_js_1.Primitive.Int.read(_data);
            let bytes = await index_js_1.Primitive.Bytes.read(_data);
            return new Raw.PhotoCachedSize23({
                type: type,
                location: location,
                w: w,
                h: h,
                bytes: bytes,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.type !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.type));
            }
            if (this.location !== undefined) {
                b.write(this.location.write());
            }
            if (this.w !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.w));
            }
            if (this.h !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.h));
            }
            if (this.bytes !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.bytes));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.PhotoCachedSize23 = PhotoCachedSize23;
    class FileLocationUnavailable23 extends index_js_1.TLObject {
        volumeId;
        localId;
        secret;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'FileLocationUnavailable23';
            this.constructorId = 0x7c596b46;
            this.subclassOfId = 0x90f76823;
            this._slots = ['volumeId', 'localId', 'secret'];
            this.volumeId = params.volumeId;
            this.localId = params.localId;
            this.secret = params.secret;
        }
        static async read(_data, ..._args) {
            let volumeId = await index_js_1.Primitive.Long.read(_data);
            let localId = await index_js_1.Primitive.Int.read(_data);
            let secret = await index_js_1.Primitive.Long.read(_data);
            return new Raw.FileLocationUnavailable23({
                volumeId: volumeId,
                localId: localId,
                secret: secret,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.volumeId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.volumeId));
            }
            if (this.localId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.localId));
            }
            if (this.secret !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.secret));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.FileLocationUnavailable23 = FileLocationUnavailable23;
    class FileLocation23 extends index_js_1.TLObject {
        dcId;
        volumeId;
        localId;
        secret;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'FileLocation23';
            this.constructorId = 0x53d69076;
            this.subclassOfId = 0x90f76823;
            this._slots = ['dcId', 'volumeId', 'localId', 'secret'];
            this.dcId = params.dcId;
            this.volumeId = params.volumeId;
            this.localId = params.localId;
            this.secret = params.secret;
        }
        static async read(_data, ..._args) {
            let dcId = await index_js_1.Primitive.Int.read(_data);
            let volumeId = await index_js_1.Primitive.Long.read(_data);
            let localId = await index_js_1.Primitive.Int.read(_data);
            let secret = await index_js_1.Primitive.Long.read(_data);
            return new Raw.FileLocation23({
                dcId: dcId,
                volumeId: volumeId,
                localId: localId,
                secret: secret,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.dcId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.dcId));
            }
            if (this.volumeId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.volumeId));
            }
            if (this.localId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.localId));
            }
            if (this.secret !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.secret));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.FileLocation23 = FileLocation23;
    class DecryptedMessageMediaExternalDocument23 extends index_js_1.TLObject {
        id;
        accessHash;
        date;
        mimeType;
        size;
        thumb;
        dcId;
        attributes;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DecryptedMessageMediaExternalDocument23';
            this.constructorId = 0xfa95b0dd;
            this.subclassOfId = 0xb3d2034;
            this._slots = ['id', 'accessHash', 'date', 'mimeType', 'size', 'thumb', 'dcId', 'attributes'];
            this.id = params.id;
            this.accessHash = params.accessHash;
            this.date = params.date;
            this.mimeType = params.mimeType;
            this.size = params.size;
            this.thumb = params.thumb;
            this.dcId = params.dcId;
            this.attributes = params.attributes;
        }
        static async read(_data, ..._args) {
            let id = await index_js_1.Primitive.Long.read(_data);
            let accessHash = await index_js_1.Primitive.Long.read(_data);
            let date = await index_js_1.Primitive.Int.read(_data);
            let mimeType = await index_js_1.Primitive.String.read(_data);
            let size = await index_js_1.Primitive.Int.read(_data);
            let thumb = await index_js_1.TLObject.read(_data);
            let dcId = await index_js_1.Primitive.Int.read(_data);
            let attributes = await index_js_1.TLObject.read(_data);
            return new Raw.DecryptedMessageMediaExternalDocument23({
                id: id,
                accessHash: accessHash,
                date: date,
                mimeType: mimeType,
                size: size,
                thumb: thumb,
                dcId: dcId,
                attributes: attributes,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.id !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.id));
            }
            if (this.accessHash !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.accessHash));
            }
            if (this.date !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.date));
            }
            if (this.mimeType !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.mimeType));
            }
            if (this.size !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.size));
            }
            if (this.thumb !== undefined) {
                b.write(this.thumb.write());
            }
            if (this.dcId !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.dcId));
            }
            if (this.attributes) {
                b.write(index_js_1.Primitive.Vector.write(this.attributes));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DecryptedMessageMediaExternalDocument23 = DecryptedMessageMediaExternalDocument23;
    class DecryptedMessage45 extends index_js_1.TLObject {
        randomId;
        ttl;
        message;
        media;
        entities;
        viaBotName;
        replyToRandomId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DecryptedMessage45';
            this.constructorId = 0x36b091de;
            this.subclassOfId = 0x5303193e;
            this._slots = [
                'randomId',
                'ttl',
                'message',
                'media',
                'entities',
                'viaBotName',
                'replyToRandomId',
            ];
            this.randomId = params.randomId;
            this.ttl = params.ttl;
            this.message = params.message;
            this.media = params.media;
            this.entities = params.entities;
            this.viaBotName = params.viaBotName;
            this.replyToRandomId = params.replyToRandomId;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let randomId = await index_js_1.Primitive.Long.read(_data);
            let ttl = await index_js_1.Primitive.Int.read(_data);
            let message = await index_js_1.Primitive.String.read(_data);
            let media = flags & (1 << 9) ? await index_js_1.TLObject.read(_data) : undefined;
            let entities = flags & (1 << 7) ? await index_js_1.TLObject.read(_data) : [];
            let viaBotName = flags & (1 << 11) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let replyToRandomId = flags & (1 << 3) ? await index_js_1.Primitive.Long.read(_data) : undefined;
            return new Raw.DecryptedMessage45({
                randomId: randomId,
                ttl: ttl,
                message: message,
                media: media,
                entities: entities,
                viaBotName: viaBotName,
                replyToRandomId: replyToRandomId,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.media !== undefined ? 1 << 9 : 0;
            flags |= this.entities ? 1 << 7 : 0;
            flags |= this.viaBotName !== undefined ? 1 << 11 : 0;
            flags |= this.replyToRandomId !== undefined ? 1 << 3 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.randomId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.randomId));
            }
            if (this.ttl !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.ttl));
            }
            if (this.message !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.message));
            }
            if (this.media !== undefined) {
                b.write(this.media.write());
            }
            if (this.entities) {
                b.write(index_js_1.Primitive.Vector.write(this.entities));
            }
            if (this.viaBotName !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.viaBotName));
            }
            if (this.replyToRandomId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.replyToRandomId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DecryptedMessage45 = DecryptedMessage45;
    class DecryptedMessageMediaPhoto45 extends index_js_1.TLObject {
        thumb;
        thumbW;
        thumbH;
        w;
        h;
        size;
        key;
        iv;
        caption;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DecryptedMessageMediaPhoto45';
            this.constructorId = 0xf1fa8d78;
            this.subclassOfId = 0xb3d2034;
            this._slots = ['thumb', 'thumbW', 'thumbH', 'w', 'h', 'size', 'key', 'iv', 'caption'];
            this.thumb = params.thumb;
            this.thumbW = params.thumbW;
            this.thumbH = params.thumbH;
            this.w = params.w;
            this.h = params.h;
            this.size = params.size;
            this.key = params.key;
            this.iv = params.iv;
            this.caption = params.caption;
        }
        static async read(_data, ..._args) {
            let thumb = await index_js_1.Primitive.Bytes.read(_data);
            let thumbW = await index_js_1.Primitive.Int.read(_data);
            let thumbH = await index_js_1.Primitive.Int.read(_data);
            let w = await index_js_1.Primitive.Int.read(_data);
            let h = await index_js_1.Primitive.Int.read(_data);
            let size = await index_js_1.Primitive.Int.read(_data);
            let key = await index_js_1.Primitive.Bytes.read(_data);
            let iv = await index_js_1.Primitive.Bytes.read(_data);
            let caption = await index_js_1.Primitive.String.read(_data);
            return new Raw.DecryptedMessageMediaPhoto45({
                thumb: thumb,
                thumbW: thumbW,
                thumbH: thumbH,
                w: w,
                h: h,
                size: size,
                key: key,
                iv: iv,
                caption: caption,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.thumb !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.thumb));
            }
            if (this.thumbW !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.thumbW));
            }
            if (this.thumbH !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.thumbH));
            }
            if (this.w !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.w));
            }
            if (this.h !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.h));
            }
            if (this.size !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.size));
            }
            if (this.key !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.key));
            }
            if (this.iv !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.iv));
            }
            if (this.caption !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.caption));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DecryptedMessageMediaPhoto45 = DecryptedMessageMediaPhoto45;
    class DecryptedMessageMediaVideo45 extends index_js_1.TLObject {
        thumb;
        thumbW;
        thumbH;
        duration;
        mimeType;
        w;
        h;
        size;
        key;
        iv;
        caption;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DecryptedMessageMediaVideo45';
            this.constructorId = 0x970c8c0e;
            this.subclassOfId = 0xb3d2034;
            this._slots = [
                'thumb',
                'thumbW',
                'thumbH',
                'duration',
                'mimeType',
                'w',
                'h',
                'size',
                'key',
                'iv',
                'caption',
            ];
            this.thumb = params.thumb;
            this.thumbW = params.thumbW;
            this.thumbH = params.thumbH;
            this.duration = params.duration;
            this.mimeType = params.mimeType;
            this.w = params.w;
            this.h = params.h;
            this.size = params.size;
            this.key = params.key;
            this.iv = params.iv;
            this.caption = params.caption;
        }
        static async read(_data, ..._args) {
            let thumb = await index_js_1.Primitive.Bytes.read(_data);
            let thumbW = await index_js_1.Primitive.Int.read(_data);
            let thumbH = await index_js_1.Primitive.Int.read(_data);
            let duration = await index_js_1.Primitive.Int.read(_data);
            let mimeType = await index_js_1.Primitive.String.read(_data);
            let w = await index_js_1.Primitive.Int.read(_data);
            let h = await index_js_1.Primitive.Int.read(_data);
            let size = await index_js_1.Primitive.Int.read(_data);
            let key = await index_js_1.Primitive.Bytes.read(_data);
            let iv = await index_js_1.Primitive.Bytes.read(_data);
            let caption = await index_js_1.Primitive.String.read(_data);
            return new Raw.DecryptedMessageMediaVideo45({
                thumb: thumb,
                thumbW: thumbW,
                thumbH: thumbH,
                duration: duration,
                mimeType: mimeType,
                w: w,
                h: h,
                size: size,
                key: key,
                iv: iv,
                caption: caption,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.thumb !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.thumb));
            }
            if (this.thumbW !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.thumbW));
            }
            if (this.thumbH !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.thumbH));
            }
            if (this.duration !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.duration));
            }
            if (this.mimeType !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.mimeType));
            }
            if (this.w !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.w));
            }
            if (this.h !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.h));
            }
            if (this.size !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.size));
            }
            if (this.key !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.key));
            }
            if (this.iv !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.iv));
            }
            if (this.caption !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.caption));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DecryptedMessageMediaVideo45 = DecryptedMessageMediaVideo45;
    class DecryptedMessageMediaDocument45 extends index_js_1.TLObject {
        thumb;
        thumbW;
        thumbH;
        mimeType;
        size;
        key;
        iv;
        attributes;
        caption;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DecryptedMessageMediaDocument45';
            this.constructorId = 0x7afe8ae2;
            this.subclassOfId = 0xb3d2034;
            this._slots = [
                'thumb',
                'thumbW',
                'thumbH',
                'mimeType',
                'size',
                'key',
                'iv',
                'attributes',
                'caption',
            ];
            this.thumb = params.thumb;
            this.thumbW = params.thumbW;
            this.thumbH = params.thumbH;
            this.mimeType = params.mimeType;
            this.size = params.size;
            this.key = params.key;
            this.iv = params.iv;
            this.attributes = params.attributes;
            this.caption = params.caption;
        }
        static async read(_data, ..._args) {
            let thumb = await index_js_1.Primitive.Bytes.read(_data);
            let thumbW = await index_js_1.Primitive.Int.read(_data);
            let thumbH = await index_js_1.Primitive.Int.read(_data);
            let mimeType = await index_js_1.Primitive.String.read(_data);
            let size = await index_js_1.Primitive.Int.read(_data);
            let key = await index_js_1.Primitive.Bytes.read(_data);
            let iv = await index_js_1.Primitive.Bytes.read(_data);
            let attributes = await index_js_1.TLObject.read(_data);
            let caption = await index_js_1.Primitive.String.read(_data);
            return new Raw.DecryptedMessageMediaDocument45({
                thumb: thumb,
                thumbW: thumbW,
                thumbH: thumbH,
                mimeType: mimeType,
                size: size,
                key: key,
                iv: iv,
                attributes: attributes,
                caption: caption,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.thumb !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.thumb));
            }
            if (this.thumbW !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.thumbW));
            }
            if (this.thumbH !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.thumbH));
            }
            if (this.mimeType !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.mimeType));
            }
            if (this.size !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.size));
            }
            if (this.key !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.key));
            }
            if (this.iv !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.iv));
            }
            if (this.attributes) {
                b.write(index_js_1.Primitive.Vector.write(this.attributes));
            }
            if (this.caption !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.caption));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DecryptedMessageMediaDocument45 = DecryptedMessageMediaDocument45;
    class DocumentAttributeSticker45 extends index_js_1.TLObject {
        alt;
        stickerset;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DocumentAttributeSticker45';
            this.constructorId = 0x3a556302;
            this.subclassOfId = 0xf729eb9b;
            this._slots = ['alt', 'stickerset'];
            this.alt = params.alt;
            this.stickerset = params.stickerset;
        }
        static async read(_data, ..._args) {
            let alt = await index_js_1.Primitive.String.read(_data);
            let stickerset = await index_js_1.TLObject.read(_data);
            return new Raw.DocumentAttributeSticker45({ alt: alt, stickerset: stickerset });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.alt !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.alt));
            }
            if (this.stickerset !== undefined) {
                b.write(this.stickerset.write());
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DocumentAttributeSticker45 = DocumentAttributeSticker45;
    class DocumentAttributeAudio45 extends index_js_1.TLObject {
        duration;
        title;
        performer;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DocumentAttributeAudio45';
            this.constructorId = 0xded218e0;
            this.subclassOfId = 0xf729eb9b;
            this._slots = ['duration', 'title', 'performer'];
            this.duration = params.duration;
            this.title = params.title;
            this.performer = params.performer;
        }
        static async read(_data, ..._args) {
            let duration = await index_js_1.Primitive.Int.read(_data);
            let title = await index_js_1.Primitive.String.read(_data);
            let performer = await index_js_1.Primitive.String.read(_data);
            return new Raw.DocumentAttributeAudio45({
                duration: duration,
                title: title,
                performer: performer,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.duration !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.duration));
            }
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            if (this.performer !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.performer));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DocumentAttributeAudio45 = DocumentAttributeAudio45;
    class DecryptedMessageMediaVenue45 extends index_js_1.TLObject {
        lat;
        long;
        title;
        address;
        provider;
        venueId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DecryptedMessageMediaVenue45';
            this.constructorId = 0x8a0df56f;
            this.subclassOfId = 0xb3d2034;
            this._slots = ['lat', 'long', 'title', 'address', 'provider', 'venueId'];
            this.lat = params.lat;
            this.long = params.long;
            this.title = params.title;
            this.address = params.address;
            this.provider = params.provider;
            this.venueId = params.venueId;
        }
        static async read(_data, ..._args) {
            let lat = await index_js_1.Primitive.Double.read(_data);
            let long = await index_js_1.Primitive.Double.read(_data);
            let title = await index_js_1.Primitive.String.read(_data);
            let address = await index_js_1.Primitive.String.read(_data);
            let provider = await index_js_1.Primitive.String.read(_data);
            let venueId = await index_js_1.Primitive.String.read(_data);
            return new Raw.DecryptedMessageMediaVenue45({
                lat: lat,
                long: long,
                title: title,
                address: address,
                provider: provider,
                venueId: venueId,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.lat !== undefined) {
                b.write(index_js_1.Primitive.Double.write(this.lat));
            }
            if (this.long !== undefined) {
                b.write(index_js_1.Primitive.Double.write(this.long));
            }
            if (this.title !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.title));
            }
            if (this.address !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.address));
            }
            if (this.provider !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.provider));
            }
            if (this.venueId !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.venueId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DecryptedMessageMediaVenue45 = DecryptedMessageMediaVenue45;
    class DecryptedMessageMediaWebPage45 extends index_js_1.TLObject {
        url;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DecryptedMessageMediaWebPage45';
            this.constructorId = 0xe50511d8;
            this.subclassOfId = 0xb3d2034;
            this._slots = ['url'];
            this.url = params.url;
        }
        static async read(_data, ..._args) {
            let url = await index_js_1.Primitive.String.read(_data);
            return new Raw.DecryptedMessageMediaWebPage45({ url: url });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.url !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.url));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DecryptedMessageMediaWebPage45 = DecryptedMessageMediaWebPage45;
    class DocumentAttributeVideo66 extends index_js_1.TLObject {
        roundMessage;
        duration;
        w;
        h;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DocumentAttributeVideo66';
            this.constructorId = 0xef02ce6;
            this.subclassOfId = 0xf729eb9b;
            this._slots = ['roundMessage', 'duration', 'w', 'h'];
            this.roundMessage = params.roundMessage;
            this.duration = params.duration;
            this.w = params.w;
            this.h = params.h;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let roundMessage = flags & (1 << 0) ? true : false;
            let duration = await index_js_1.Primitive.Int.read(_data);
            let w = await index_js_1.Primitive.Int.read(_data);
            let h = await index_js_1.Primitive.Int.read(_data);
            return new Raw.DocumentAttributeVideo66({
                roundMessage: roundMessage,
                duration: duration,
                w: w,
                h: h,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.roundMessage ? 1 << 0 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.duration !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.duration));
            }
            if (this.w !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.w));
            }
            if (this.h !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.h));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DocumentAttributeVideo66 = DocumentAttributeVideo66;
    class SendMessageUploadRoundAction66 extends index_js_1.TLObject {
        constructor() {
            super();
            this.classType = 'types';
            this.className = 'SendMessageUploadRoundAction66';
            this.constructorId = 0xbb718624;
            this.subclassOfId = 0x20b2cc21;
            this._slots = [];
        }
        static async read(_data, ..._args) {
            return new Raw.SendMessageUploadRoundAction66();
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.SendMessageUploadRoundAction66 = SendMessageUploadRoundAction66;
    class DecryptedMessage73 extends index_js_1.TLObject {
        noWebpage;
        silent;
        randomId;
        ttl;
        message;
        media;
        entities;
        viaBotName;
        replyToRandomId;
        groupedId;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DecryptedMessage73';
            this.constructorId = 0x91cc4674;
            this.subclassOfId = 0x5303193e;
            this._slots = [
                'noWebpage',
                'silent',
                'randomId',
                'ttl',
                'message',
                'media',
                'entities',
                'viaBotName',
                'replyToRandomId',
                'groupedId',
            ];
            this.noWebpage = params.noWebpage;
            this.silent = params.silent;
            this.randomId = params.randomId;
            this.ttl = params.ttl;
            this.message = params.message;
            this.media = params.media;
            this.entities = params.entities;
            this.viaBotName = params.viaBotName;
            this.replyToRandomId = params.replyToRandomId;
            this.groupedId = params.groupedId;
        }
        static async read(_data, ..._args) {
            let flags = await index_js_1.Primitive.Int.read(_data);
            let noWebpage = flags & (1 << 1) ? true : false;
            let silent = flags & (1 << 5) ? true : false;
            let randomId = await index_js_1.Primitive.Long.read(_data);
            let ttl = await index_js_1.Primitive.Int.read(_data);
            let message = await index_js_1.Primitive.String.read(_data);
            let media = flags & (1 << 9) ? await index_js_1.TLObject.read(_data) : undefined;
            let entities = flags & (1 << 7) ? await index_js_1.TLObject.read(_data) : [];
            let viaBotName = flags & (1 << 11) ? await index_js_1.Primitive.String.read(_data) : undefined;
            let replyToRandomId = flags & (1 << 3) ? await index_js_1.Primitive.Long.read(_data) : undefined;
            let groupedId = flags & (1 << 17) ? await index_js_1.Primitive.Long.read(_data) : undefined;
            return new Raw.DecryptedMessage73({
                noWebpage: noWebpage,
                silent: silent,
                randomId: randomId,
                ttl: ttl,
                message: message,
                media: media,
                entities: entities,
                viaBotName: viaBotName,
                replyToRandomId: replyToRandomId,
                groupedId: groupedId,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            let flags = 0;
            flags |= this.noWebpage ? 1 << 1 : 0;
            flags |= this.silent ? 1 << 5 : 0;
            flags |= this.media !== undefined ? 1 << 9 : 0;
            flags |= this.entities ? 1 << 7 : 0;
            flags |= this.viaBotName !== undefined ? 1 << 11 : 0;
            flags |= this.replyToRandomId !== undefined ? 1 << 3 : 0;
            flags |= this.groupedId !== undefined ? 1 << 17 : 0;
            b.write(index_js_1.Primitive.Int.write(flags));
            if (this.randomId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.randomId));
            }
            if (this.ttl !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.ttl));
            }
            if (this.message !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.message));
            }
            if (this.media !== undefined) {
                b.write(this.media.write());
            }
            if (this.entities) {
                b.write(index_js_1.Primitive.Vector.write(this.entities));
            }
            if (this.viaBotName !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.viaBotName));
            }
            if (this.replyToRandomId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.replyToRandomId));
            }
            if (this.groupedId !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.groupedId));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DecryptedMessage73 = DecryptedMessage73;
    class MessageEntityBlockquote101 extends index_js_1.TLObject {
        offset;
        length;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'MessageEntityBlockquote101';
            this.constructorId = 0x20df5d0;
            this.subclassOfId = 0xcf6419dc;
            this._slots = ['offset', 'length'];
            this.offset = params.offset;
            this.length = params.length;
        }
        static async read(_data, ..._args) {
            let offset = await index_js_1.Primitive.Int.read(_data);
            let length = await index_js_1.Primitive.Int.read(_data);
            return new Raw.MessageEntityBlockquote101({ offset: offset, length: length });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.offset !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.offset));
            }
            if (this.length !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.length));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.MessageEntityBlockquote101 = MessageEntityBlockquote101;
    class DecryptedMessageMediaDocument143 extends index_js_1.TLObject {
        thumb;
        thumbW;
        thumbH;
        mimeType;
        size;
        key;
        iv;
        attributes;
        caption;
        constructor(params) {
            super();
            this.classType = 'types';
            this.className = 'DecryptedMessageMediaDocument143';
            this.constructorId = 0x6abd9782;
            this.subclassOfId = 0xb3d2034;
            this._slots = [
                'thumb',
                'thumbW',
                'thumbH',
                'mimeType',
                'size',
                'key',
                'iv',
                'attributes',
                'caption',
            ];
            this.thumb = params.thumb;
            this.thumbW = params.thumbW;
            this.thumbH = params.thumbH;
            this.mimeType = params.mimeType;
            this.size = params.size;
            this.key = params.key;
            this.iv = params.iv;
            this.attributes = params.attributes;
            this.caption = params.caption;
        }
        static async read(_data, ..._args) {
            let thumb = await index_js_1.Primitive.Bytes.read(_data);
            let thumbW = await index_js_1.Primitive.Int.read(_data);
            let thumbH = await index_js_1.Primitive.Int.read(_data);
            let mimeType = await index_js_1.Primitive.String.read(_data);
            let size = await index_js_1.Primitive.Long.read(_data);
            let key = await index_js_1.Primitive.Bytes.read(_data);
            let iv = await index_js_1.Primitive.Bytes.read(_data);
            let attributes = await index_js_1.TLObject.read(_data);
            let caption = await index_js_1.Primitive.String.read(_data);
            return new Raw.DecryptedMessageMediaDocument143({
                thumb: thumb,
                thumbW: thumbW,
                thumbH: thumbH,
                mimeType: mimeType,
                size: size,
                key: key,
                iv: iv,
                attributes: attributes,
                caption: caption,
            });
        }
        write() {
            let b = new index_js_1.BytesIO();
            b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
            if (this.thumb !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.thumb));
            }
            if (this.thumbW !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.thumbW));
            }
            if (this.thumbH !== undefined) {
                b.write(index_js_1.Primitive.Int.write(this.thumbH));
            }
            if (this.mimeType !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.mimeType));
            }
            if (this.size !== undefined) {
                b.write(index_js_1.Primitive.Long.write(this.size));
            }
            if (this.key !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.key));
            }
            if (this.iv !== undefined) {
                b.write(index_js_1.Primitive.Bytes.write(this.iv));
            }
            if (this.attributes) {
                b.write(index_js_1.Primitive.Vector.write(this.attributes));
            }
            if (this.caption !== undefined) {
                b.write(index_js_1.Primitive.String.write(this.caption));
            }
            return platform_node_js_1.Buffer.from(b.buffer);
        }
    }
    Raw.DecryptedMessageMediaDocument143 = DecryptedMessageMediaDocument143;
    let help;
    (function (help) {
        class ConfigSimple extends index_js_1.TLObject {
            date;
            expires;
            rules;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'help.ConfigSimple';
                this.constructorId = 0x5a592a6c;
                this.subclassOfId = 0x29183ac4;
                this._slots = ['date', 'expires', 'rules'];
                this.date = params.date;
                this.expires = params.expires;
                this.rules = params.rules;
            }
            static async read(_data, ..._args) {
                let date = await index_js_1.Primitive.Int.read(_data);
                let expires = await index_js_1.Primitive.Int.read(_data);
                let rules = await index_js_1.TLObject.read(_data);
                return new Raw.help.ConfigSimple({ date: date, expires: expires, rules: rules });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.date !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.date));
                }
                if (this.expires !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.expires));
                }
                if (this.rules) {
                    b.write(index_js_1.Primitive.Vector.write(this.rules));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.ConfigSimple = ConfigSimple;
        class AppUpdate extends index_js_1.TLObject {
            canNotSkip;
            id;
            version;
            text;
            entities;
            document;
            url;
            sticker;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'help.AppUpdate';
                this.constructorId = 0xccbbce30;
                this.subclassOfId = 0x5897069e;
                this._slots = [
                    'canNotSkip',
                    'id',
                    'version',
                    'text',
                    'entities',
                    'document',
                    'url',
                    'sticker',
                ];
                this.canNotSkip = params.canNotSkip;
                this.id = params.id;
                this.version = params.version;
                this.text = params.text;
                this.entities = params.entities;
                this.document = params.document;
                this.url = params.url;
                this.sticker = params.sticker;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let canNotSkip = flags & (1 << 0) ? true : false;
                let id = await index_js_1.Primitive.Int.read(_data);
                let version = await index_js_1.Primitive.String.read(_data);
                let text = await index_js_1.Primitive.String.read(_data);
                let entities = await index_js_1.TLObject.read(_data);
                let document = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : undefined;
                let url = flags & (1 << 2) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let sticker = flags & (1 << 3) ? await index_js_1.TLObject.read(_data) : undefined;
                return new Raw.help.AppUpdate({
                    canNotSkip: canNotSkip,
                    id: id,
                    version: version,
                    text: text,
                    entities: entities,
                    document: document,
                    url: url,
                    sticker: sticker,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.canNotSkip ? 1 << 0 : 0;
                flags |= this.document !== undefined ? 1 << 1 : 0;
                flags |= this.url !== undefined ? 1 << 2 : 0;
                flags |= this.sticker !== undefined ? 1 << 3 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.id !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.id));
                }
                if (this.version !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.version));
                }
                if (this.text !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.text));
                }
                if (this.entities) {
                    b.write(index_js_1.Primitive.Vector.write(this.entities));
                }
                if (this.document !== undefined) {
                    b.write(this.document.write());
                }
                if (this.url !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.url));
                }
                if (this.sticker !== undefined) {
                    b.write(this.sticker.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.AppUpdate = AppUpdate;
        class NoAppUpdate extends index_js_1.TLObject {
            constructor() {
                super();
                this.classType = 'types';
                this.className = 'help.NoAppUpdate';
                this.constructorId = 0xc45a6536;
                this.subclassOfId = 0x5897069e;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.help.NoAppUpdate();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.NoAppUpdate = NoAppUpdate;
        class InviteText extends index_js_1.TLObject {
            message;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'help.InviteText';
                this.constructorId = 0x18cb9f78;
                this.subclassOfId = 0xcf70aa35;
                this._slots = ['message'];
                this.message = params.message;
            }
            static async read(_data, ..._args) {
                let message = await index_js_1.Primitive.String.read(_data);
                return new Raw.help.InviteText({ message: message });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.message !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.message));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.InviteText = InviteText;
        class Support extends index_js_1.TLObject {
            phoneNumber;
            user;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'help.Support';
                this.constructorId = 0x17c6b5f6;
                this.subclassOfId = 0x7159bceb;
                this._slots = ['phoneNumber', 'user'];
                this.phoneNumber = params.phoneNumber;
                this.user = params.user;
            }
            static async read(_data, ..._args) {
                let phoneNumber = await index_js_1.Primitive.String.read(_data);
                let user = await index_js_1.TLObject.read(_data);
                return new Raw.help.Support({ phoneNumber: phoneNumber, user: user });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.phoneNumber !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.phoneNumber));
                }
                if (this.user !== undefined) {
                    b.write(this.user.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.Support = Support;
        class TermsOfService extends index_js_1.TLObject {
            popup;
            id;
            text;
            entities;
            minAgeConfirm;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'help.TermsOfService';
                this.constructorId = 0x780a0310;
                this.subclassOfId = 0x20ee8312;
                this._slots = ['popup', 'id', 'text', 'entities', 'minAgeConfirm'];
                this.popup = params.popup;
                this.id = params.id;
                this.text = params.text;
                this.entities = params.entities;
                this.minAgeConfirm = params.minAgeConfirm;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let popup = flags & (1 << 0) ? true : false;
                let id = await index_js_1.TLObject.read(_data);
                let text = await index_js_1.Primitive.String.read(_data);
                let entities = await index_js_1.TLObject.read(_data);
                let minAgeConfirm = flags & (1 << 1) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                return new Raw.help.TermsOfService({
                    popup: popup,
                    id: id,
                    text: text,
                    entities: entities,
                    minAgeConfirm: minAgeConfirm,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.popup ? 1 << 0 : 0;
                flags |= this.minAgeConfirm !== undefined ? 1 << 1 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.id !== undefined) {
                    b.write(this.id.write());
                }
                if (this.text !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.text));
                }
                if (this.entities) {
                    b.write(index_js_1.Primitive.Vector.write(this.entities));
                }
                if (this.minAgeConfirm !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.minAgeConfirm));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.TermsOfService = TermsOfService;
        class RecentMeUrls extends index_js_1.TLObject {
            urls;
            chats;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'help.RecentMeUrls';
                this.constructorId = 0xe0310d7;
                this.subclassOfId = 0xf269c477;
                this._slots = ['urls', 'chats', 'users'];
                this.urls = params.urls;
                this.chats = params.chats;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let urls = await index_js_1.TLObject.read(_data);
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.help.RecentMeUrls({ urls: urls, chats: chats, users: users });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.urls) {
                    b.write(index_js_1.Primitive.Vector.write(this.urls));
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.RecentMeUrls = RecentMeUrls;
        class TermsOfServiceUpdateEmpty extends index_js_1.TLObject {
            expires;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'help.TermsOfServiceUpdateEmpty';
                this.constructorId = 0xe3309f7f;
                this.subclassOfId = 0x293c2977;
                this._slots = ['expires'];
                this.expires = params.expires;
            }
            static async read(_data, ..._args) {
                let expires = await index_js_1.Primitive.Int.read(_data);
                return new Raw.help.TermsOfServiceUpdateEmpty({ expires: expires });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.expires !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.expires));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.TermsOfServiceUpdateEmpty = TermsOfServiceUpdateEmpty;
        class TermsOfServiceUpdate extends index_js_1.TLObject {
            expires;
            termsOfService;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'help.TermsOfServiceUpdate';
                this.constructorId = 0x28ecf961;
                this.subclassOfId = 0x293c2977;
                this._slots = ['expires', 'termsOfService'];
                this.expires = params.expires;
                this.termsOfService = params.termsOfService;
            }
            static async read(_data, ..._args) {
                let expires = await index_js_1.Primitive.Int.read(_data);
                let termsOfService = await index_js_1.TLObject.read(_data);
                return new Raw.help.TermsOfServiceUpdate({
                    expires: expires,
                    termsOfService: termsOfService,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.expires !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.expires));
                }
                if (this.termsOfService !== undefined) {
                    b.write(this.termsOfService.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.TermsOfServiceUpdate = TermsOfServiceUpdate;
        class DeepLinkInfoEmpty extends index_js_1.TLObject {
            constructor() {
                super();
                this.classType = 'types';
                this.className = 'help.DeepLinkInfoEmpty';
                this.constructorId = 0x66afa166;
                this.subclassOfId = 0x984aac38;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.help.DeepLinkInfoEmpty();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.DeepLinkInfoEmpty = DeepLinkInfoEmpty;
        class DeepLinkInfo extends index_js_1.TLObject {
            updateApp;
            message;
            entities;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'help.DeepLinkInfo';
                this.constructorId = 0x6a4ee832;
                this.subclassOfId = 0x984aac38;
                this._slots = ['updateApp', 'message', 'entities'];
                this.updateApp = params.updateApp;
                this.message = params.message;
                this.entities = params.entities;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let updateApp = flags & (1 << 0) ? true : false;
                let message = await index_js_1.Primitive.String.read(_data);
                let entities = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : [];
                return new Raw.help.DeepLinkInfo({
                    updateApp: updateApp,
                    message: message,
                    entities: entities,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.updateApp ? 1 << 0 : 0;
                flags |= this.entities ? 1 << 1 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.message !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.message));
                }
                if (this.entities) {
                    b.write(index_js_1.Primitive.Vector.write(this.entities));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.DeepLinkInfo = DeepLinkInfo;
        class PassportConfigNotModified extends index_js_1.TLObject {
            constructor() {
                super();
                this.classType = 'types';
                this.className = 'help.PassportConfigNotModified';
                this.constructorId = 0xbfb9f457;
                this.subclassOfId = 0xc666c0ad;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.help.PassportConfigNotModified();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.PassportConfigNotModified = PassportConfigNotModified;
        class PassportConfig extends index_js_1.TLObject {
            hash;
            countriesLangs;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'help.PassportConfig';
                this.constructorId = 0xa098d6af;
                this.subclassOfId = 0xc666c0ad;
                this._slots = ['hash', 'countriesLangs'];
                this.hash = params.hash;
                this.countriesLangs = params.countriesLangs;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Int.read(_data);
                let countriesLangs = await index_js_1.TLObject.read(_data);
                return new Raw.help.PassportConfig({ hash: hash, countriesLangs: countriesLangs });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.hash));
                }
                if (this.countriesLangs !== undefined) {
                    b.write(this.countriesLangs.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.PassportConfig = PassportConfig;
        class SupportName extends index_js_1.TLObject {
            name;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'help.SupportName';
                this.constructorId = 0x8c05f1c9;
                this.subclassOfId = 0x7f50b7c2;
                this._slots = ['name'];
                this.name = params.name;
            }
            static async read(_data, ..._args) {
                let name = await index_js_1.Primitive.String.read(_data);
                return new Raw.help.SupportName({ name: name });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.name !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.name));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.SupportName = SupportName;
        class UserInfoEmpty extends index_js_1.TLObject {
            constructor() {
                super();
                this.classType = 'types';
                this.className = 'help.UserInfoEmpty';
                this.constructorId = 0xf3ae2eed;
                this.subclassOfId = 0x5c53d7d8;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.help.UserInfoEmpty();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.UserInfoEmpty = UserInfoEmpty;
        class UserInfo extends index_js_1.TLObject {
            message;
            entities;
            author;
            date;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'help.UserInfo';
                this.constructorId = 0x1eb3758;
                this.subclassOfId = 0x5c53d7d8;
                this._slots = ['message', 'entities', 'author', 'date'];
                this.message = params.message;
                this.entities = params.entities;
                this.author = params.author;
                this.date = params.date;
            }
            static async read(_data, ..._args) {
                let message = await index_js_1.Primitive.String.read(_data);
                let entities = await index_js_1.TLObject.read(_data);
                let author = await index_js_1.Primitive.String.read(_data);
                let date = await index_js_1.Primitive.Int.read(_data);
                return new Raw.help.UserInfo({
                    message: message,
                    entities: entities,
                    author: author,
                    date: date,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.message !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.message));
                }
                if (this.entities) {
                    b.write(index_js_1.Primitive.Vector.write(this.entities));
                }
                if (this.author !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.author));
                }
                if (this.date !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.date));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.UserInfo = UserInfo;
        class PromoDataEmpty extends index_js_1.TLObject {
            expires;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'help.PromoDataEmpty';
                this.constructorId = 0x98f6ac75;
                this.subclassOfId = 0x9d595542;
                this._slots = ['expires'];
                this.expires = params.expires;
            }
            static async read(_data, ..._args) {
                let expires = await index_js_1.Primitive.Int.read(_data);
                return new Raw.help.PromoDataEmpty({ expires: expires });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.expires !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.expires));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.PromoDataEmpty = PromoDataEmpty;
        class PromoData extends index_js_1.TLObject {
            proxy;
            expires;
            peer;
            chats;
            users;
            psaType;
            psaMessage;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'help.PromoData';
                this.constructorId = 0x8c39793f;
                this.subclassOfId = 0x9d595542;
                this._slots = ['proxy', 'expires', 'peer', 'chats', 'users', 'psaType', 'psaMessage'];
                this.proxy = params.proxy;
                this.expires = params.expires;
                this.peer = params.peer;
                this.chats = params.chats;
                this.users = params.users;
                this.psaType = params.psaType;
                this.psaMessage = params.psaMessage;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let proxy = flags & (1 << 0) ? true : false;
                let expires = await index_js_1.Primitive.Int.read(_data);
                let peer = await index_js_1.TLObject.read(_data);
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                let psaType = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let psaMessage = flags & (1 << 2) ? await index_js_1.Primitive.String.read(_data) : undefined;
                return new Raw.help.PromoData({
                    proxy: proxy,
                    expires: expires,
                    peer: peer,
                    chats: chats,
                    users: users,
                    psaType: psaType,
                    psaMessage: psaMessage,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.proxy ? 1 << 0 : 0;
                flags |= this.psaType !== undefined ? 1 << 1 : 0;
                flags |= this.psaMessage !== undefined ? 1 << 2 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.expires !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.expires));
                }
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                if (this.psaType !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.psaType));
                }
                if (this.psaMessage !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.psaMessage));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.PromoData = PromoData;
        class CountryCode extends index_js_1.TLObject {
            countryCode;
            prefixes;
            patterns;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'help.CountryCode';
                this.constructorId = 0x4203c5ef;
                this.subclassOfId = 0x76f34665;
                this._slots = ['countryCode', 'prefixes', 'patterns'];
                this.countryCode = params.countryCode;
                this.prefixes = params.prefixes;
                this.patterns = params.patterns;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let countryCode = await index_js_1.Primitive.String.read(_data);
                let prefixes = flags & (1 << 0) ? await index_js_1.TLObject.read(_data, index_js_1.Primitive.String) : [];
                let patterns = flags & (1 << 1) ? await index_js_1.TLObject.read(_data, index_js_1.Primitive.String) : [];
                return new Raw.help.CountryCode({
                    countryCode: countryCode,
                    prefixes: prefixes,
                    patterns: patterns,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.prefixes ? 1 << 0 : 0;
                flags |= this.patterns ? 1 << 1 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.countryCode !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.countryCode));
                }
                if (this.prefixes) {
                    b.write(index_js_1.Primitive.Vector.write(this.prefixes, index_js_1.Primitive.String));
                }
                if (this.patterns) {
                    b.write(index_js_1.Primitive.Vector.write(this.patterns, index_js_1.Primitive.String));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.CountryCode = CountryCode;
        class Country extends index_js_1.TLObject {
            hidden;
            iso2;
            defaultName;
            name;
            countryCodes;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'help.Country';
                this.constructorId = 0xc3878e23;
                this.subclassOfId = 0xa22e9e28;
                this._slots = ['hidden', 'iso2', 'defaultName', 'name', 'countryCodes'];
                this.hidden = params.hidden;
                this.iso2 = params.iso2;
                this.defaultName = params.defaultName;
                this.name = params.name;
                this.countryCodes = params.countryCodes;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let hidden = flags & (1 << 0) ? true : false;
                let iso2 = await index_js_1.Primitive.String.read(_data);
                let defaultName = await index_js_1.Primitive.String.read(_data);
                let name = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let countryCodes = await index_js_1.TLObject.read(_data);
                return new Raw.help.Country({
                    hidden: hidden,
                    iso2: iso2,
                    defaultName: defaultName,
                    name: name,
                    countryCodes: countryCodes,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.hidden ? 1 << 0 : 0;
                flags |= this.name !== undefined ? 1 << 1 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.iso2 !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.iso2));
                }
                if (this.defaultName !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.defaultName));
                }
                if (this.name !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.name));
                }
                if (this.countryCodes) {
                    b.write(index_js_1.Primitive.Vector.write(this.countryCodes));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.Country = Country;
        class CountriesListNotModified extends index_js_1.TLObject {
            constructor() {
                super();
                this.classType = 'types';
                this.className = 'help.CountriesListNotModified';
                this.constructorId = 0x93cc1f32;
                this.subclassOfId = 0xea31fe88;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.help.CountriesListNotModified();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.CountriesListNotModified = CountriesListNotModified;
        class CountriesList extends index_js_1.TLObject {
            countries;
            hash;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'help.CountriesList';
                this.constructorId = 0x87d0759e;
                this.subclassOfId = 0xea31fe88;
                this._slots = ['countries', 'hash'];
                this.countries = params.countries;
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let countries = await index_js_1.TLObject.read(_data);
                let hash = await index_js_1.Primitive.Int.read(_data);
                return new Raw.help.CountriesList({ countries: countries, hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.countries) {
                    b.write(index_js_1.Primitive.Vector.write(this.countries));
                }
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.CountriesList = CountriesList;
        class PremiumPromo extends index_js_1.TLObject {
            statusText;
            statusEntities;
            videoSections;
            videos;
            periodOptions;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'help.PremiumPromo';
                this.constructorId = 0x5334759c;
                this.subclassOfId = 0xc987a338;
                this._slots = [
                    'statusText',
                    'statusEntities',
                    'videoSections',
                    'videos',
                    'periodOptions',
                    'users',
                ];
                this.statusText = params.statusText;
                this.statusEntities = params.statusEntities;
                this.videoSections = params.videoSections;
                this.videos = params.videos;
                this.periodOptions = params.periodOptions;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let statusText = await index_js_1.Primitive.String.read(_data);
                let statusEntities = await index_js_1.TLObject.read(_data);
                let videoSections = await index_js_1.TLObject.read(_data, index_js_1.Primitive.String);
                let videos = await index_js_1.TLObject.read(_data);
                let periodOptions = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.help.PremiumPromo({
                    statusText: statusText,
                    statusEntities: statusEntities,
                    videoSections: videoSections,
                    videos: videos,
                    periodOptions: periodOptions,
                    users: users,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.statusText !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.statusText));
                }
                if (this.statusEntities) {
                    b.write(index_js_1.Primitive.Vector.write(this.statusEntities));
                }
                if (this.videoSections) {
                    b.write(index_js_1.Primitive.Vector.write(this.videoSections, index_js_1.Primitive.String));
                }
                if (this.videos) {
                    b.write(index_js_1.Primitive.Vector.write(this.videos));
                }
                if (this.periodOptions) {
                    b.write(index_js_1.Primitive.Vector.write(this.periodOptions));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.PremiumPromo = PremiumPromo;
        class AppConfigNotModified extends index_js_1.TLObject {
            constructor() {
                super();
                this.classType = 'types';
                this.className = 'help.AppConfigNotModified';
                this.constructorId = 0x7cde641d;
                this.subclassOfId = 0x14381c9a;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.help.AppConfigNotModified();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.AppConfigNotModified = AppConfigNotModified;
        class AppConfig extends index_js_1.TLObject {
            hash;
            config;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'help.AppConfig';
                this.constructorId = 0xdd18782e;
                this.subclassOfId = 0x14381c9a;
                this._slots = ['hash', 'config'];
                this.hash = params.hash;
                this.config = params.config;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Int.read(_data);
                let config = await index_js_1.TLObject.read(_data);
                return new Raw.help.AppConfig({ hash: hash, config: config });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.hash));
                }
                if (this.config !== undefined) {
                    b.write(this.config.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.AppConfig = AppConfig;
        class PeerColorSet extends index_js_1.TLObject {
            colors;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'help.PeerColorSet';
                this.constructorId = 0x26219a58;
                this.subclassOfId = 0x11cbe12c;
                this._slots = ['colors'];
                this.colors = params.colors;
            }
            static async read(_data, ..._args) {
                let colors = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int);
                return new Raw.help.PeerColorSet({ colors: colors });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.colors) {
                    b.write(index_js_1.Primitive.Vector.write(this.colors, index_js_1.Primitive.Int));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.PeerColorSet = PeerColorSet;
        class PeerColorProfileSet extends index_js_1.TLObject {
            paletteColors;
            bgColors;
            storyColors;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'help.PeerColorProfileSet';
                this.constructorId = 0x767d61eb;
                this.subclassOfId = 0x11cbe12c;
                this._slots = ['paletteColors', 'bgColors', 'storyColors'];
                this.paletteColors = params.paletteColors;
                this.bgColors = params.bgColors;
                this.storyColors = params.storyColors;
            }
            static async read(_data, ..._args) {
                let paletteColors = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int);
                let bgColors = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int);
                let storyColors = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int);
                return new Raw.help.PeerColorProfileSet({
                    paletteColors: paletteColors,
                    bgColors: bgColors,
                    storyColors: storyColors,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.paletteColors) {
                    b.write(index_js_1.Primitive.Vector.write(this.paletteColors, index_js_1.Primitive.Int));
                }
                if (this.bgColors) {
                    b.write(index_js_1.Primitive.Vector.write(this.bgColors, index_js_1.Primitive.Int));
                }
                if (this.storyColors) {
                    b.write(index_js_1.Primitive.Vector.write(this.storyColors, index_js_1.Primitive.Int));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.PeerColorProfileSet = PeerColorProfileSet;
        class PeerColorOption extends index_js_1.TLObject {
            hidden;
            colorId;
            colors;
            darkColors;
            channelMinLevel;
            groupMinLevel;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'help.PeerColorOption';
                this.constructorId = 0xadec6ebe;
                this.subclassOfId = 0x56b8ae98;
                this._slots = [
                    'hidden',
                    'colorId',
                    'colors',
                    'darkColors',
                    'channelMinLevel',
                    'groupMinLevel',
                ];
                this.hidden = params.hidden;
                this.colorId = params.colorId;
                this.colors = params.colors;
                this.darkColors = params.darkColors;
                this.channelMinLevel = params.channelMinLevel;
                this.groupMinLevel = params.groupMinLevel;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let hidden = flags & (1 << 0) ? true : false;
                let colorId = await index_js_1.Primitive.Int.read(_data);
                let colors = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : undefined;
                let darkColors = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
                let channelMinLevel = flags & (1 << 3) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let groupMinLevel = flags & (1 << 4) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                return new Raw.help.PeerColorOption({
                    hidden: hidden,
                    colorId: colorId,
                    colors: colors,
                    darkColors: darkColors,
                    channelMinLevel: channelMinLevel,
                    groupMinLevel: groupMinLevel,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.hidden ? 1 << 0 : 0;
                flags |= this.colors !== undefined ? 1 << 1 : 0;
                flags |= this.darkColors !== undefined ? 1 << 2 : 0;
                flags |= this.channelMinLevel !== undefined ? 1 << 3 : 0;
                flags |= this.groupMinLevel !== undefined ? 1 << 4 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.colorId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.colorId));
                }
                if (this.colors !== undefined) {
                    b.write(this.colors.write());
                }
                if (this.darkColors !== undefined) {
                    b.write(this.darkColors.write());
                }
                if (this.channelMinLevel !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.channelMinLevel));
                }
                if (this.groupMinLevel !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.groupMinLevel));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.PeerColorOption = PeerColorOption;
        class PeerColorsNotModified extends index_js_1.TLObject {
            constructor() {
                super();
                this.classType = 'types';
                this.className = 'help.PeerColorsNotModified';
                this.constructorId = 0x2ba1f5ce;
                this.subclassOfId = 0xe3f6733;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.help.PeerColorsNotModified();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.PeerColorsNotModified = PeerColorsNotModified;
        class PeerColors extends index_js_1.TLObject {
            hash;
            colors;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'help.PeerColors';
                this.constructorId = 0xf8ed08;
                this.subclassOfId = 0xe3f6733;
                this._slots = ['hash', 'colors'];
                this.hash = params.hash;
                this.colors = params.colors;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Int.read(_data);
                let colors = await index_js_1.TLObject.read(_data);
                return new Raw.help.PeerColors({ hash: hash, colors: colors });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.hash));
                }
                if (this.colors) {
                    b.write(index_js_1.Primitive.Vector.write(this.colors));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.PeerColors = PeerColors;
        class TimezonesListNotModified extends index_js_1.TLObject {
            constructor() {
                super();
                this.classType = 'types';
                this.className = 'help.TimezonesListNotModified';
                this.constructorId = 0x970708cc;
                this.subclassOfId = 0xca76e475;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.help.TimezonesListNotModified();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.TimezonesListNotModified = TimezonesListNotModified;
        class TimezonesList extends index_js_1.TLObject {
            timezones;
            hash;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'help.TimezonesList';
                this.constructorId = 0x7b74ed71;
                this.subclassOfId = 0xca76e475;
                this._slots = ['timezones', 'hash'];
                this.timezones = params.timezones;
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let timezones = await index_js_1.TLObject.read(_data);
                let hash = await index_js_1.Primitive.Int.read(_data);
                return new Raw.help.TimezonesList({ timezones: timezones, hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.timezones) {
                    b.write(index_js_1.Primitive.Vector.write(this.timezones));
                }
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.TimezonesList = TimezonesList;
        class GetConfig extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'help.GetConfig';
                this.constructorId = 0xc4f9186b;
                this.subclassOfId = 0xd3262a4a;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.help.GetConfig();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.GetConfig = GetConfig;
        class GetNearestDc extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'help.GetNearestDc';
                this.constructorId = 0x1fb33026;
                this.subclassOfId = 0x3877045f;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.help.GetNearestDc();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.GetNearestDc = GetNearestDc;
        class GetAppUpdate extends index_js_1.TLObject {
            __response__;
            source;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'help.GetAppUpdate';
                this.constructorId = 0x522d5a7d;
                this.subclassOfId = 0x5897069e;
                this._slots = ['source'];
                this.source = params.source;
            }
            static async read(_data, ..._args) {
                let source = await index_js_1.Primitive.String.read(_data);
                return new Raw.help.GetAppUpdate({ source: source });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.source !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.source));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.GetAppUpdate = GetAppUpdate;
        class GetInviteText extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'help.GetInviteText';
                this.constructorId = 0x4d392343;
                this.subclassOfId = 0xcf70aa35;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.help.GetInviteText();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.GetInviteText = GetInviteText;
        class GetSupport extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'help.GetSupport';
                this.constructorId = 0x9cdf08cd;
                this.subclassOfId = 0x7159bceb;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.help.GetSupport();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.GetSupport = GetSupport;
        class SetBotUpdatesStatus extends index_js_1.TLObject {
            __response__;
            pendingUpdatesCount;
            message;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'help.SetBotUpdatesStatus';
                this.constructorId = 0xec22cfcd;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['pendingUpdatesCount', 'message'];
                this.pendingUpdatesCount = params.pendingUpdatesCount;
                this.message = params.message;
            }
            static async read(_data, ..._args) {
                let pendingUpdatesCount = await index_js_1.Primitive.Int.read(_data);
                let message = await index_js_1.Primitive.String.read(_data);
                return new Raw.help.SetBotUpdatesStatus({
                    pendingUpdatesCount: pendingUpdatesCount,
                    message: message,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.pendingUpdatesCount !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.pendingUpdatesCount));
                }
                if (this.message !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.message));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.SetBotUpdatesStatus = SetBotUpdatesStatus;
        class GetCdnConfig extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'help.GetCdnConfig';
                this.constructorId = 0x52029342;
                this.subclassOfId = 0xecda397c;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.help.GetCdnConfig();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.GetCdnConfig = GetCdnConfig;
        class GetRecentMeUrls extends index_js_1.TLObject {
            __response__;
            referer;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'help.GetRecentMeUrls';
                this.constructorId = 0x3dc0f114;
                this.subclassOfId = 0xf269c477;
                this._slots = ['referer'];
                this.referer = params.referer;
            }
            static async read(_data, ..._args) {
                let referer = await index_js_1.Primitive.String.read(_data);
                return new Raw.help.GetRecentMeUrls({ referer: referer });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.referer !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.referer));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.GetRecentMeUrls = GetRecentMeUrls;
        class GetTermsOfServiceUpdate extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'help.GetTermsOfServiceUpdate';
                this.constructorId = 0x2ca51fd1;
                this.subclassOfId = 0x293c2977;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.help.GetTermsOfServiceUpdate();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.GetTermsOfServiceUpdate = GetTermsOfServiceUpdate;
        class AcceptTermsOfService extends index_js_1.TLObject {
            __response__;
            id;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'help.AcceptTermsOfService';
                this.constructorId = 0xee72f79a;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['id'];
                this.id = params.id;
            }
            static async read(_data, ..._args) {
                let id = await index_js_1.TLObject.read(_data);
                return new Raw.help.AcceptTermsOfService({ id: id });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.id !== undefined) {
                    b.write(this.id.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.AcceptTermsOfService = AcceptTermsOfService;
        class GetDeepLinkInfo extends index_js_1.TLObject {
            __response__;
            path;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'help.GetDeepLinkInfo';
                this.constructorId = 0x3fedc75f;
                this.subclassOfId = 0x984aac38;
                this._slots = ['path'];
                this.path = params.path;
            }
            static async read(_data, ..._args) {
                let path = await index_js_1.Primitive.String.read(_data);
                return new Raw.help.GetDeepLinkInfo({ path: path });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.path !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.path));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.GetDeepLinkInfo = GetDeepLinkInfo;
        class GetAppConfig extends index_js_1.TLObject {
            __response__;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'help.GetAppConfig';
                this.constructorId = 0x61e3f854;
                this.subclassOfId = 0x14381c9a;
                this._slots = ['hash'];
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Int.read(_data);
                return new Raw.help.GetAppConfig({ hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.GetAppConfig = GetAppConfig;
        class SaveAppLog extends index_js_1.TLObject {
            __response__;
            events;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'help.SaveAppLog';
                this.constructorId = 0x6f02f748;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['events'];
                this.events = params.events;
            }
            static async read(_data, ..._args) {
                let events = await index_js_1.TLObject.read(_data);
                return new Raw.help.SaveAppLog({ events: events });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.events) {
                    b.write(index_js_1.Primitive.Vector.write(this.events));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.SaveAppLog = SaveAppLog;
        class GetPassportConfig extends index_js_1.TLObject {
            __response__;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'help.GetPassportConfig';
                this.constructorId = 0xc661ad08;
                this.subclassOfId = 0xc666c0ad;
                this._slots = ['hash'];
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Int.read(_data);
                return new Raw.help.GetPassportConfig({ hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.GetPassportConfig = GetPassportConfig;
        class GetSupportName extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'help.GetSupportName';
                this.constructorId = 0xd360e72c;
                this.subclassOfId = 0x7f50b7c2;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.help.GetSupportName();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.GetSupportName = GetSupportName;
        class GetUserInfo extends index_js_1.TLObject {
            __response__;
            userId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'help.GetUserInfo';
                this.constructorId = 0x38a08d3;
                this.subclassOfId = 0x5c53d7d8;
                this._slots = ['userId'];
                this.userId = params.userId;
            }
            static async read(_data, ..._args) {
                let userId = await index_js_1.TLObject.read(_data);
                return new Raw.help.GetUserInfo({ userId: userId });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.userId !== undefined) {
                    b.write(this.userId.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.GetUserInfo = GetUserInfo;
        class EditUserInfo extends index_js_1.TLObject {
            __response__;
            userId;
            message;
            entities;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'help.EditUserInfo';
                this.constructorId = 0x66b91b70;
                this.subclassOfId = 0x5c53d7d8;
                this._slots = ['userId', 'message', 'entities'];
                this.userId = params.userId;
                this.message = params.message;
                this.entities = params.entities;
            }
            static async read(_data, ..._args) {
                let userId = await index_js_1.TLObject.read(_data);
                let message = await index_js_1.Primitive.String.read(_data);
                let entities = await index_js_1.TLObject.read(_data);
                return new Raw.help.EditUserInfo({ userId: userId, message: message, entities: entities });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.userId !== undefined) {
                    b.write(this.userId.write());
                }
                if (this.message !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.message));
                }
                if (this.entities) {
                    b.write(index_js_1.Primitive.Vector.write(this.entities));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.EditUserInfo = EditUserInfo;
        class GetPromoData extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'help.GetPromoData';
                this.constructorId = 0xc0977421;
                this.subclassOfId = 0x9d595542;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.help.GetPromoData();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.GetPromoData = GetPromoData;
        class HidePromoData extends index_js_1.TLObject {
            __response__;
            peer;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'help.HidePromoData';
                this.constructorId = 0x1e251c95;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['peer'];
                this.peer = params.peer;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                return new Raw.help.HidePromoData({ peer: peer });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.HidePromoData = HidePromoData;
        class DismissSuggestion extends index_js_1.TLObject {
            __response__;
            peer;
            suggestion;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'help.DismissSuggestion';
                this.constructorId = 0xf50dbaa1;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['peer', 'suggestion'];
                this.peer = params.peer;
                this.suggestion = params.suggestion;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let suggestion = await index_js_1.Primitive.String.read(_data);
                return new Raw.help.DismissSuggestion({ peer: peer, suggestion: suggestion });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.suggestion !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.suggestion));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.DismissSuggestion = DismissSuggestion;
        class GetCountriesList extends index_js_1.TLObject {
            __response__;
            langCode;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'help.GetCountriesList';
                this.constructorId = 0x735787a8;
                this.subclassOfId = 0xea31fe88;
                this._slots = ['langCode', 'hash'];
                this.langCode = params.langCode;
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let langCode = await index_js_1.Primitive.String.read(_data);
                let hash = await index_js_1.Primitive.Int.read(_data);
                return new Raw.help.GetCountriesList({ langCode: langCode, hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.langCode !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.langCode));
                }
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.GetCountriesList = GetCountriesList;
        class GetPremiumPromo extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'help.GetPremiumPromo';
                this.constructorId = 0xb81b93d4;
                this.subclassOfId = 0xc987a338;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.help.GetPremiumPromo();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.GetPremiumPromo = GetPremiumPromo;
        class GetPeerColors extends index_js_1.TLObject {
            __response__;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'help.GetPeerColors';
                this.constructorId = 0xda80f42f;
                this.subclassOfId = 0xe3f6733;
                this._slots = ['hash'];
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Int.read(_data);
                return new Raw.help.GetPeerColors({ hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.GetPeerColors = GetPeerColors;
        class GetPeerProfileColors extends index_js_1.TLObject {
            __response__;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'help.GetPeerProfileColors';
                this.constructorId = 0xabcfa9fd;
                this.subclassOfId = 0xe3f6733;
                this._slots = ['hash'];
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Int.read(_data);
                return new Raw.help.GetPeerProfileColors({ hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.GetPeerProfileColors = GetPeerProfileColors;
        class GetTimezonesList extends index_js_1.TLObject {
            __response__;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'help.GetTimezonesList';
                this.constructorId = 0x49b30240;
                this.subclassOfId = 0xca76e475;
                this._slots = ['hash'];
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Int.read(_data);
                return new Raw.help.GetTimezonesList({ hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        help.GetTimezonesList = GetTimezonesList;
    })(help = Raw.help || (Raw.help = {}));
    let storage;
    (function (storage) {
        class FileUnknown extends index_js_1.TLObject {
            constructor() {
                super();
                this.classType = 'types';
                this.className = 'storage.FileUnknown';
                this.constructorId = 0xaa963b05;
                this.subclassOfId = 0xf3a1e6f3;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.storage.FileUnknown();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        storage.FileUnknown = FileUnknown;
        class FilePartial extends index_js_1.TLObject {
            constructor() {
                super();
                this.classType = 'types';
                this.className = 'storage.FilePartial';
                this.constructorId = 0x40bc6f52;
                this.subclassOfId = 0xf3a1e6f3;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.storage.FilePartial();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        storage.FilePartial = FilePartial;
        class FileJpeg extends index_js_1.TLObject {
            constructor() {
                super();
                this.classType = 'types';
                this.className = 'storage.FileJpeg';
                this.constructorId = 0x7efe0e;
                this.subclassOfId = 0xf3a1e6f3;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.storage.FileJpeg();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        storage.FileJpeg = FileJpeg;
        class FileGif extends index_js_1.TLObject {
            constructor() {
                super();
                this.classType = 'types';
                this.className = 'storage.FileGif';
                this.constructorId = 0xcae1aadf;
                this.subclassOfId = 0xf3a1e6f3;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.storage.FileGif();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        storage.FileGif = FileGif;
        class FilePng extends index_js_1.TLObject {
            constructor() {
                super();
                this.classType = 'types';
                this.className = 'storage.FilePng';
                this.constructorId = 0xa4f63c0;
                this.subclassOfId = 0xf3a1e6f3;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.storage.FilePng();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        storage.FilePng = FilePng;
        class FilePdf extends index_js_1.TLObject {
            constructor() {
                super();
                this.classType = 'types';
                this.className = 'storage.FilePdf';
                this.constructorId = 0xae1e508d;
                this.subclassOfId = 0xf3a1e6f3;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.storage.FilePdf();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        storage.FilePdf = FilePdf;
        class FileMp3 extends index_js_1.TLObject {
            constructor() {
                super();
                this.classType = 'types';
                this.className = 'storage.FileMp3';
                this.constructorId = 0x528a0677;
                this.subclassOfId = 0xf3a1e6f3;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.storage.FileMp3();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        storage.FileMp3 = FileMp3;
        class FileMov extends index_js_1.TLObject {
            constructor() {
                super();
                this.classType = 'types';
                this.className = 'storage.FileMov';
                this.constructorId = 0x4b09ebbc;
                this.subclassOfId = 0xf3a1e6f3;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.storage.FileMov();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        storage.FileMov = FileMov;
        class FileMp4 extends index_js_1.TLObject {
            constructor() {
                super();
                this.classType = 'types';
                this.className = 'storage.FileMp4';
                this.constructorId = 0xb3cea0e4;
                this.subclassOfId = 0xf3a1e6f3;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.storage.FileMp4();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        storage.FileMp4 = FileMp4;
        class FileWebp extends index_js_1.TLObject {
            constructor() {
                super();
                this.classType = 'types';
                this.className = 'storage.FileWebp';
                this.constructorId = 0x1081464c;
                this.subclassOfId = 0xf3a1e6f3;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.storage.FileWebp();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        storage.FileWebp = FileWebp;
    })(storage = Raw.storage || (Raw.storage = {}));
    let auth;
    (function (auth) {
        class SentCode extends index_js_1.TLObject {
            type;
            phoneCodeHash;
            nextType;
            timeout;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'auth.SentCode';
                this.constructorId = 0x5e002502;
                this.subclassOfId = 0x6ce87081;
                this._slots = ['type', 'phoneCodeHash', 'nextType', 'timeout'];
                this.type = params.type;
                this.phoneCodeHash = params.phoneCodeHash;
                this.nextType = params.nextType;
                this.timeout = params.timeout;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let type = await index_js_1.TLObject.read(_data);
                let phoneCodeHash = await index_js_1.Primitive.String.read(_data);
                let nextType = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : undefined;
                let timeout = flags & (1 << 2) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                return new Raw.auth.SentCode({
                    type: type,
                    phoneCodeHash: phoneCodeHash,
                    nextType: nextType,
                    timeout: timeout,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.nextType !== undefined ? 1 << 1 : 0;
                flags |= this.timeout !== undefined ? 1 << 2 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.type !== undefined) {
                    b.write(this.type.write());
                }
                if (this.phoneCodeHash !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.phoneCodeHash));
                }
                if (this.nextType !== undefined) {
                    b.write(this.nextType.write());
                }
                if (this.timeout !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.timeout));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        auth.SentCode = SentCode;
        class SentCodeSuccess extends index_js_1.TLObject {
            authorization;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'auth.SentCodeSuccess';
                this.constructorId = 0x2390fe44;
                this.subclassOfId = 0x6ce87081;
                this._slots = ['authorization'];
                this.authorization = params.authorization;
            }
            static async read(_data, ..._args) {
                let authorization = await index_js_1.TLObject.read(_data);
                return new Raw.auth.SentCodeSuccess({ authorization: authorization });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.authorization !== undefined) {
                    b.write(this.authorization.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        auth.SentCodeSuccess = SentCodeSuccess;
        class Authorization extends index_js_1.TLObject {
            setupPasswordRequired;
            otherwiseReloginDays;
            tmpSessions;
            futureAuthToken;
            user;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'auth.Authorization';
                this.constructorId = 0x2ea2c0d4;
                this.subclassOfId = 0xb9e04e39;
                this._slots = [
                    'setupPasswordRequired',
                    'otherwiseReloginDays',
                    'tmpSessions',
                    'futureAuthToken',
                    'user',
                ];
                this.setupPasswordRequired = params.setupPasswordRequired;
                this.otherwiseReloginDays = params.otherwiseReloginDays;
                this.tmpSessions = params.tmpSessions;
                this.futureAuthToken = params.futureAuthToken;
                this.user = params.user;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let setupPasswordRequired = flags & (1 << 1) ? true : false;
                let otherwiseReloginDays = flags & (1 << 1) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let tmpSessions = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let futureAuthToken = flags & (1 << 2) ? await index_js_1.Primitive.Bytes.read(_data) : undefined;
                let user = await index_js_1.TLObject.read(_data);
                return new Raw.auth.Authorization({
                    setupPasswordRequired: setupPasswordRequired,
                    otherwiseReloginDays: otherwiseReloginDays,
                    tmpSessions: tmpSessions,
                    futureAuthToken: futureAuthToken,
                    user: user,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.setupPasswordRequired ? 1 << 1 : 0;
                flags |= this.otherwiseReloginDays !== undefined ? 1 << 1 : 0;
                flags |= this.tmpSessions !== undefined ? 1 << 0 : 0;
                flags |= this.futureAuthToken !== undefined ? 1 << 2 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.otherwiseReloginDays !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.otherwiseReloginDays));
                }
                if (this.tmpSessions !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.tmpSessions));
                }
                if (this.futureAuthToken !== undefined) {
                    b.write(index_js_1.Primitive.Bytes.write(this.futureAuthToken));
                }
                if (this.user !== undefined) {
                    b.write(this.user.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        auth.Authorization = Authorization;
        class AuthorizationSignUpRequired extends index_js_1.TLObject {
            termsOfService;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'auth.AuthorizationSignUpRequired';
                this.constructorId = 0x44747e9a;
                this.subclassOfId = 0xb9e04e39;
                this._slots = ['termsOfService'];
                this.termsOfService = params.termsOfService;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let termsOfService = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
                return new Raw.auth.AuthorizationSignUpRequired({ termsOfService: termsOfService });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.termsOfService !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.termsOfService !== undefined) {
                    b.write(this.termsOfService.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        auth.AuthorizationSignUpRequired = AuthorizationSignUpRequired;
        class ExportedAuthorization extends index_js_1.TLObject {
            id;
            bytes;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'auth.ExportedAuthorization';
                this.constructorId = 0xb434e2b8;
                this.subclassOfId = 0x5fd1ec51;
                this._slots = ['id', 'bytes'];
                this.id = params.id;
                this.bytes = params.bytes;
            }
            static async read(_data, ..._args) {
                let id = await index_js_1.Primitive.Long.read(_data);
                let bytes = await index_js_1.Primitive.Bytes.read(_data);
                return new Raw.auth.ExportedAuthorization({ id: id, bytes: bytes });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.id !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.id));
                }
                if (this.bytes !== undefined) {
                    b.write(index_js_1.Primitive.Bytes.write(this.bytes));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        auth.ExportedAuthorization = ExportedAuthorization;
        class PasswordRecovery extends index_js_1.TLObject {
            emailPattern;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'auth.PasswordRecovery';
                this.constructorId = 0x137948a5;
                this.subclassOfId = 0xfa72d43a;
                this._slots = ['emailPattern'];
                this.emailPattern = params.emailPattern;
            }
            static async read(_data, ..._args) {
                let emailPattern = await index_js_1.Primitive.String.read(_data);
                return new Raw.auth.PasswordRecovery({ emailPattern: emailPattern });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.emailPattern !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.emailPattern));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        auth.PasswordRecovery = PasswordRecovery;
        class CodeTypeSms extends index_js_1.TLObject {
            constructor() {
                super();
                this.classType = 'types';
                this.className = 'auth.CodeTypeSms';
                this.constructorId = 0x72a3158c;
                this.subclassOfId = 0xb3f3e401;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.auth.CodeTypeSms();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        auth.CodeTypeSms = CodeTypeSms;
        class CodeTypeCall extends index_js_1.TLObject {
            constructor() {
                super();
                this.classType = 'types';
                this.className = 'auth.CodeTypeCall';
                this.constructorId = 0x741cd3e3;
                this.subclassOfId = 0xb3f3e401;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.auth.CodeTypeCall();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        auth.CodeTypeCall = CodeTypeCall;
        class CodeTypeFlashCall extends index_js_1.TLObject {
            constructor() {
                super();
                this.classType = 'types';
                this.className = 'auth.CodeTypeFlashCall';
                this.constructorId = 0x226ccefb;
                this.subclassOfId = 0xb3f3e401;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.auth.CodeTypeFlashCall();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        auth.CodeTypeFlashCall = CodeTypeFlashCall;
        class CodeTypeMissedCall extends index_js_1.TLObject {
            constructor() {
                super();
                this.classType = 'types';
                this.className = 'auth.CodeTypeMissedCall';
                this.constructorId = 0xd61ad6ee;
                this.subclassOfId = 0xb3f3e401;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.auth.CodeTypeMissedCall();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        auth.CodeTypeMissedCall = CodeTypeMissedCall;
        class CodeTypeFragmentSms extends index_js_1.TLObject {
            constructor() {
                super();
                this.classType = 'types';
                this.className = 'auth.CodeTypeFragmentSms';
                this.constructorId = 0x6ed998c;
                this.subclassOfId = 0xb3f3e401;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.auth.CodeTypeFragmentSms();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        auth.CodeTypeFragmentSms = CodeTypeFragmentSms;
        class SentCodeTypeApp extends index_js_1.TLObject {
            length;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'auth.SentCodeTypeApp';
                this.constructorId = 0x3dbb5986;
                this.subclassOfId = 0xff5b158e;
                this._slots = ['length'];
                this.length = params.length;
            }
            static async read(_data, ..._args) {
                let length = await index_js_1.Primitive.Int.read(_data);
                return new Raw.auth.SentCodeTypeApp({ length: length });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.length !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.length));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        auth.SentCodeTypeApp = SentCodeTypeApp;
        class SentCodeTypeSms extends index_js_1.TLObject {
            length;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'auth.SentCodeTypeSms';
                this.constructorId = 0xc000bba2;
                this.subclassOfId = 0xff5b158e;
                this._slots = ['length'];
                this.length = params.length;
            }
            static async read(_data, ..._args) {
                let length = await index_js_1.Primitive.Int.read(_data);
                return new Raw.auth.SentCodeTypeSms({ length: length });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.length !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.length));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        auth.SentCodeTypeSms = SentCodeTypeSms;
        class SentCodeTypeCall extends index_js_1.TLObject {
            length;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'auth.SentCodeTypeCall';
                this.constructorId = 0x5353e5a7;
                this.subclassOfId = 0xff5b158e;
                this._slots = ['length'];
                this.length = params.length;
            }
            static async read(_data, ..._args) {
                let length = await index_js_1.Primitive.Int.read(_data);
                return new Raw.auth.SentCodeTypeCall({ length: length });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.length !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.length));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        auth.SentCodeTypeCall = SentCodeTypeCall;
        class SentCodeTypeFlashCall extends index_js_1.TLObject {
            pattern;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'auth.SentCodeTypeFlashCall';
                this.constructorId = 0xab03c6d9;
                this.subclassOfId = 0xff5b158e;
                this._slots = ['pattern'];
                this.pattern = params.pattern;
            }
            static async read(_data, ..._args) {
                let pattern = await index_js_1.Primitive.String.read(_data);
                return new Raw.auth.SentCodeTypeFlashCall({ pattern: pattern });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.pattern !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.pattern));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        auth.SentCodeTypeFlashCall = SentCodeTypeFlashCall;
        class SentCodeTypeMissedCall extends index_js_1.TLObject {
            prefix;
            length;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'auth.SentCodeTypeMissedCall';
                this.constructorId = 0x82006484;
                this.subclassOfId = 0xff5b158e;
                this._slots = ['prefix', 'length'];
                this.prefix = params.prefix;
                this.length = params.length;
            }
            static async read(_data, ..._args) {
                let prefix = await index_js_1.Primitive.String.read(_data);
                let length = await index_js_1.Primitive.Int.read(_data);
                return new Raw.auth.SentCodeTypeMissedCall({ prefix: prefix, length: length });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.prefix !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.prefix));
                }
                if (this.length !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.length));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        auth.SentCodeTypeMissedCall = SentCodeTypeMissedCall;
        class SentCodeTypeEmailCode extends index_js_1.TLObject {
            appleSigninAllowed;
            googleSigninAllowed;
            emailPattern;
            length;
            resetAvailablePeriod;
            resetPendingDate;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'auth.SentCodeTypeEmailCode';
                this.constructorId = 0xf450f59b;
                this.subclassOfId = 0xff5b158e;
                this._slots = [
                    'appleSigninAllowed',
                    'googleSigninAllowed',
                    'emailPattern',
                    'length',
                    'resetAvailablePeriod',
                    'resetPendingDate',
                ];
                this.appleSigninAllowed = params.appleSigninAllowed;
                this.googleSigninAllowed = params.googleSigninAllowed;
                this.emailPattern = params.emailPattern;
                this.length = params.length;
                this.resetAvailablePeriod = params.resetAvailablePeriod;
                this.resetPendingDate = params.resetPendingDate;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let appleSigninAllowed = flags & (1 << 0) ? true : false;
                let googleSigninAllowed = flags & (1 << 1) ? true : false;
                let emailPattern = await index_js_1.Primitive.String.read(_data);
                let length = await index_js_1.Primitive.Int.read(_data);
                let resetAvailablePeriod = flags & (1 << 3) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let resetPendingDate = flags & (1 << 4) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                return new Raw.auth.SentCodeTypeEmailCode({
                    appleSigninAllowed: appleSigninAllowed,
                    googleSigninAllowed: googleSigninAllowed,
                    emailPattern: emailPattern,
                    length: length,
                    resetAvailablePeriod: resetAvailablePeriod,
                    resetPendingDate: resetPendingDate,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.appleSigninAllowed ? 1 << 0 : 0;
                flags |= this.googleSigninAllowed ? 1 << 1 : 0;
                flags |= this.resetAvailablePeriod !== undefined ? 1 << 3 : 0;
                flags |= this.resetPendingDate !== undefined ? 1 << 4 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.emailPattern !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.emailPattern));
                }
                if (this.length !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.length));
                }
                if (this.resetAvailablePeriod !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.resetAvailablePeriod));
                }
                if (this.resetPendingDate !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.resetPendingDate));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        auth.SentCodeTypeEmailCode = SentCodeTypeEmailCode;
        class SentCodeTypeSetUpEmailRequired extends index_js_1.TLObject {
            appleSigninAllowed;
            googleSigninAllowed;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'auth.SentCodeTypeSetUpEmailRequired';
                this.constructorId = 0xa5491dea;
                this.subclassOfId = 0xff5b158e;
                this._slots = ['appleSigninAllowed', 'googleSigninAllowed'];
                this.appleSigninAllowed = params.appleSigninAllowed;
                this.googleSigninAllowed = params.googleSigninAllowed;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let appleSigninAllowed = flags & (1 << 0) ? true : false;
                let googleSigninAllowed = flags & (1 << 1) ? true : false;
                return new Raw.auth.SentCodeTypeSetUpEmailRequired({
                    appleSigninAllowed: appleSigninAllowed,
                    googleSigninAllowed: googleSigninAllowed,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.appleSigninAllowed ? 1 << 0 : 0;
                flags |= this.googleSigninAllowed ? 1 << 1 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        auth.SentCodeTypeSetUpEmailRequired = SentCodeTypeSetUpEmailRequired;
        class SentCodeTypeFragmentSms extends index_js_1.TLObject {
            url;
            length;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'auth.SentCodeTypeFragmentSms';
                this.constructorId = 0xd9565c39;
                this.subclassOfId = 0xff5b158e;
                this._slots = ['url', 'length'];
                this.url = params.url;
                this.length = params.length;
            }
            static async read(_data, ..._args) {
                let url = await index_js_1.Primitive.String.read(_data);
                let length = await index_js_1.Primitive.Int.read(_data);
                return new Raw.auth.SentCodeTypeFragmentSms({ url: url, length: length });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.url !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.url));
                }
                if (this.length !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.length));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        auth.SentCodeTypeFragmentSms = SentCodeTypeFragmentSms;
        class SentCodeTypeFirebaseSms extends index_js_1.TLObject {
            nonce;
            playIntegrityNonce;
            receipt;
            pushTimeout;
            length;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'auth.SentCodeTypeFirebaseSms';
                this.constructorId = 0x13c90f17;
                this.subclassOfId = 0xff5b158e;
                this._slots = ['nonce', 'playIntegrityNonce', 'receipt', 'pushTimeout', 'length'];
                this.nonce = params.nonce;
                this.playIntegrityNonce = params.playIntegrityNonce;
                this.receipt = params.receipt;
                this.pushTimeout = params.pushTimeout;
                this.length = params.length;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let nonce = flags & (1 << 0) ? await index_js_1.Primitive.Bytes.read(_data) : undefined;
                let playIntegrityNonce = flags & (1 << 2) ? await index_js_1.Primitive.Bytes.read(_data) : undefined;
                let receipt = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let pushTimeout = flags & (1 << 1) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let length = await index_js_1.Primitive.Int.read(_data);
                return new Raw.auth.SentCodeTypeFirebaseSms({
                    nonce: nonce,
                    playIntegrityNonce: playIntegrityNonce,
                    receipt: receipt,
                    pushTimeout: pushTimeout,
                    length: length,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.nonce !== undefined ? 1 << 0 : 0;
                flags |= this.playIntegrityNonce !== undefined ? 1 << 2 : 0;
                flags |= this.receipt !== undefined ? 1 << 1 : 0;
                flags |= this.pushTimeout !== undefined ? 1 << 1 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.nonce !== undefined) {
                    b.write(index_js_1.Primitive.Bytes.write(this.nonce));
                }
                if (this.playIntegrityNonce !== undefined) {
                    b.write(index_js_1.Primitive.Bytes.write(this.playIntegrityNonce));
                }
                if (this.receipt !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.receipt));
                }
                if (this.pushTimeout !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.pushTimeout));
                }
                if (this.length !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.length));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        auth.SentCodeTypeFirebaseSms = SentCodeTypeFirebaseSms;
        class SentCodeTypeSmsWord extends index_js_1.TLObject {
            beginning;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'auth.SentCodeTypeSmsWord';
                this.constructorId = 0xa416ac81;
                this.subclassOfId = 0xff5b158e;
                this._slots = ['beginning'];
                this.beginning = params.beginning;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let beginning = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
                return new Raw.auth.SentCodeTypeSmsWord({ beginning: beginning });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.beginning !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.beginning !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.beginning));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        auth.SentCodeTypeSmsWord = SentCodeTypeSmsWord;
        class SentCodeTypeSmsPhrase extends index_js_1.TLObject {
            beginning;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'auth.SentCodeTypeSmsPhrase';
                this.constructorId = 0xb37794af;
                this.subclassOfId = 0xff5b158e;
                this._slots = ['beginning'];
                this.beginning = params.beginning;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let beginning = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
                return new Raw.auth.SentCodeTypeSmsPhrase({ beginning: beginning });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.beginning !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.beginning !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.beginning));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        auth.SentCodeTypeSmsPhrase = SentCodeTypeSmsPhrase;
        class LoginToken extends index_js_1.TLObject {
            expires;
            token;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'auth.LoginToken';
                this.constructorId = 0x629f1980;
                this.subclassOfId = 0x6b55f636;
                this._slots = ['expires', 'token'];
                this.expires = params.expires;
                this.token = params.token;
            }
            static async read(_data, ..._args) {
                let expires = await index_js_1.Primitive.Int.read(_data);
                let token = await index_js_1.Primitive.Bytes.read(_data);
                return new Raw.auth.LoginToken({ expires: expires, token: token });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.expires !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.expires));
                }
                if (this.token !== undefined) {
                    b.write(index_js_1.Primitive.Bytes.write(this.token));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        auth.LoginToken = LoginToken;
        class LoginTokenMigrateTo extends index_js_1.TLObject {
            dcId;
            token;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'auth.LoginTokenMigrateTo';
                this.constructorId = 0x68e9916;
                this.subclassOfId = 0x6b55f636;
                this._slots = ['dcId', 'token'];
                this.dcId = params.dcId;
                this.token = params.token;
            }
            static async read(_data, ..._args) {
                let dcId = await index_js_1.Primitive.Int.read(_data);
                let token = await index_js_1.Primitive.Bytes.read(_data);
                return new Raw.auth.LoginTokenMigrateTo({ dcId: dcId, token: token });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.dcId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.dcId));
                }
                if (this.token !== undefined) {
                    b.write(index_js_1.Primitive.Bytes.write(this.token));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        auth.LoginTokenMigrateTo = LoginTokenMigrateTo;
        class LoginTokenSuccess extends index_js_1.TLObject {
            authorization;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'auth.LoginTokenSuccess';
                this.constructorId = 0x390d5c5e;
                this.subclassOfId = 0x6b55f636;
                this._slots = ['authorization'];
                this.authorization = params.authorization;
            }
            static async read(_data, ..._args) {
                let authorization = await index_js_1.TLObject.read(_data);
                return new Raw.auth.LoginTokenSuccess({ authorization: authorization });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.authorization !== undefined) {
                    b.write(this.authorization.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        auth.LoginTokenSuccess = LoginTokenSuccess;
        class LoggedOut extends index_js_1.TLObject {
            futureAuthToken;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'auth.LoggedOut';
                this.constructorId = 0xc3a2835f;
                this.subclassOfId = 0xa804315;
                this._slots = ['futureAuthToken'];
                this.futureAuthToken = params.futureAuthToken;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let futureAuthToken = flags & (1 << 0) ? await index_js_1.Primitive.Bytes.read(_data) : undefined;
                return new Raw.auth.LoggedOut({ futureAuthToken: futureAuthToken });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.futureAuthToken !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.futureAuthToken !== undefined) {
                    b.write(index_js_1.Primitive.Bytes.write(this.futureAuthToken));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        auth.LoggedOut = LoggedOut;
        class SendCode extends index_js_1.TLObject {
            __response__;
            phoneNumber;
            apiId;
            apiHash;
            settings;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'auth.SendCode';
                this.constructorId = 0xa677244f;
                this.subclassOfId = 0x6ce87081;
                this._slots = ['phoneNumber', 'apiId', 'apiHash', 'settings'];
                this.phoneNumber = params.phoneNumber;
                this.apiId = params.apiId;
                this.apiHash = params.apiHash;
                this.settings = params.settings;
            }
            static async read(_data, ..._args) {
                let phoneNumber = await index_js_1.Primitive.String.read(_data);
                let apiId = await index_js_1.Primitive.Int.read(_data);
                let apiHash = await index_js_1.Primitive.String.read(_data);
                let settings = await index_js_1.TLObject.read(_data);
                return new Raw.auth.SendCode({
                    phoneNumber: phoneNumber,
                    apiId: apiId,
                    apiHash: apiHash,
                    settings: settings,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.phoneNumber !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.phoneNumber));
                }
                if (this.apiId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.apiId));
                }
                if (this.apiHash !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.apiHash));
                }
                if (this.settings !== undefined) {
                    b.write(this.settings.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        auth.SendCode = SendCode;
        class SignUp extends index_js_1.TLObject {
            __response__;
            noJoinedNotifications;
            phoneNumber;
            phoneCodeHash;
            firstName;
            lastName;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'auth.SignUp';
                this.constructorId = 0xaac7b717;
                this.subclassOfId = 0xb9e04e39;
                this._slots = [
                    'noJoinedNotifications',
                    'phoneNumber',
                    'phoneCodeHash',
                    'firstName',
                    'lastName',
                ];
                this.noJoinedNotifications = params.noJoinedNotifications;
                this.phoneNumber = params.phoneNumber;
                this.phoneCodeHash = params.phoneCodeHash;
                this.firstName = params.firstName;
                this.lastName = params.lastName;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let noJoinedNotifications = flags & (1 << 0) ? true : false;
                let phoneNumber = await index_js_1.Primitive.String.read(_data);
                let phoneCodeHash = await index_js_1.Primitive.String.read(_data);
                let firstName = await index_js_1.Primitive.String.read(_data);
                let lastName = await index_js_1.Primitive.String.read(_data);
                return new Raw.auth.SignUp({
                    noJoinedNotifications: noJoinedNotifications,
                    phoneNumber: phoneNumber,
                    phoneCodeHash: phoneCodeHash,
                    firstName: firstName,
                    lastName: lastName,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.noJoinedNotifications ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.phoneNumber !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.phoneNumber));
                }
                if (this.phoneCodeHash !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.phoneCodeHash));
                }
                if (this.firstName !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.firstName));
                }
                if (this.lastName !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.lastName));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        auth.SignUp = SignUp;
        class SignIn extends index_js_1.TLObject {
            __response__;
            phoneNumber;
            phoneCodeHash;
            phoneCode;
            emailVerification;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'auth.SignIn';
                this.constructorId = 0x8d52a951;
                this.subclassOfId = 0xb9e04e39;
                this._slots = ['phoneNumber', 'phoneCodeHash', 'phoneCode', 'emailVerification'];
                this.phoneNumber = params.phoneNumber;
                this.phoneCodeHash = params.phoneCodeHash;
                this.phoneCode = params.phoneCode;
                this.emailVerification = params.emailVerification;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let phoneNumber = await index_js_1.Primitive.String.read(_data);
                let phoneCodeHash = await index_js_1.Primitive.String.read(_data);
                let phoneCode = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let emailVerification = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : undefined;
                return new Raw.auth.SignIn({
                    phoneNumber: phoneNumber,
                    phoneCodeHash: phoneCodeHash,
                    phoneCode: phoneCode,
                    emailVerification: emailVerification,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.phoneCode !== undefined ? 1 << 0 : 0;
                flags |= this.emailVerification !== undefined ? 1 << 1 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.phoneNumber !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.phoneNumber));
                }
                if (this.phoneCodeHash !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.phoneCodeHash));
                }
                if (this.phoneCode !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.phoneCode));
                }
                if (this.emailVerification !== undefined) {
                    b.write(this.emailVerification.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        auth.SignIn = SignIn;
        class LogOut extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'auth.LogOut';
                this.constructorId = 0x3e72ba19;
                this.subclassOfId = 0xa804315;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.auth.LogOut();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        auth.LogOut = LogOut;
        class ResetAuthorizations extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'auth.ResetAuthorizations';
                this.constructorId = 0x9fab0d1a;
                this.subclassOfId = 0xf5b399ac;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.auth.ResetAuthorizations();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        auth.ResetAuthorizations = ResetAuthorizations;
        class ExportAuthorization extends index_js_1.TLObject {
            __response__;
            dcId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'auth.ExportAuthorization';
                this.constructorId = 0xe5bfffcd;
                this.subclassOfId = 0x5fd1ec51;
                this._slots = ['dcId'];
                this.dcId = params.dcId;
            }
            static async read(_data, ..._args) {
                let dcId = await index_js_1.Primitive.Int.read(_data);
                return new Raw.auth.ExportAuthorization({ dcId: dcId });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.dcId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.dcId));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        auth.ExportAuthorization = ExportAuthorization;
        class ImportAuthorization extends index_js_1.TLObject {
            __response__;
            id;
            bytes;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'auth.ImportAuthorization';
                this.constructorId = 0xa57a7dad;
                this.subclassOfId = 0xb9e04e39;
                this._slots = ['id', 'bytes'];
                this.id = params.id;
                this.bytes = params.bytes;
            }
            static async read(_data, ..._args) {
                let id = await index_js_1.Primitive.Long.read(_data);
                let bytes = await index_js_1.Primitive.Bytes.read(_data);
                return new Raw.auth.ImportAuthorization({ id: id, bytes: bytes });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.id !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.id));
                }
                if (this.bytes !== undefined) {
                    b.write(index_js_1.Primitive.Bytes.write(this.bytes));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        auth.ImportAuthorization = ImportAuthorization;
        class BindTempAuthKey extends index_js_1.TLObject {
            __response__;
            permAuthKeyId;
            nonce;
            expiresAt;
            encryptedMessage;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'auth.BindTempAuthKey';
                this.constructorId = 0xcdd42a05;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['permAuthKeyId', 'nonce', 'expiresAt', 'encryptedMessage'];
                this.permAuthKeyId = params.permAuthKeyId;
                this.nonce = params.nonce;
                this.expiresAt = params.expiresAt;
                this.encryptedMessage = params.encryptedMessage;
            }
            static async read(_data, ..._args) {
                let permAuthKeyId = await index_js_1.Primitive.Long.read(_data);
                let nonce = await index_js_1.Primitive.Long.read(_data);
                let expiresAt = await index_js_1.Primitive.Int.read(_data);
                let encryptedMessage = await index_js_1.Primitive.Bytes.read(_data);
                return new Raw.auth.BindTempAuthKey({
                    permAuthKeyId: permAuthKeyId,
                    nonce: nonce,
                    expiresAt: expiresAt,
                    encryptedMessage: encryptedMessage,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.permAuthKeyId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.permAuthKeyId));
                }
                if (this.nonce !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.nonce));
                }
                if (this.expiresAt !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.expiresAt));
                }
                if (this.encryptedMessage !== undefined) {
                    b.write(index_js_1.Primitive.Bytes.write(this.encryptedMessage));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        auth.BindTempAuthKey = BindTempAuthKey;
        class ImportBotAuthorization extends index_js_1.TLObject {
            __response__;
            flags;
            apiId;
            apiHash;
            botAuthToken;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'auth.ImportBotAuthorization';
                this.constructorId = 0x67a3ff2c;
                this.subclassOfId = 0xb9e04e39;
                this._slots = ['flags', 'apiId', 'apiHash', 'botAuthToken'];
                this.flags = params.flags;
                this.apiId = params.apiId;
                this.apiHash = params.apiHash;
                this.botAuthToken = params.botAuthToken;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let apiId = await index_js_1.Primitive.Int.read(_data);
                let apiHash = await index_js_1.Primitive.String.read(_data);
                let botAuthToken = await index_js_1.Primitive.String.read(_data);
                return new Raw.auth.ImportBotAuthorization({
                    flags: flags,
                    apiId: apiId,
                    apiHash: apiHash,
                    botAuthToken: botAuthToken,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.flags !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.flags));
                }
                if (this.apiId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.apiId));
                }
                if (this.apiHash !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.apiHash));
                }
                if (this.botAuthToken !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.botAuthToken));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        auth.ImportBotAuthorization = ImportBotAuthorization;
        class CheckPassword extends index_js_1.TLObject {
            __response__;
            password;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'auth.CheckPassword';
                this.constructorId = 0xd18b4d16;
                this.subclassOfId = 0xb9e04e39;
                this._slots = ['password'];
                this.password = params.password;
            }
            static async read(_data, ..._args) {
                let password = await index_js_1.TLObject.read(_data);
                return new Raw.auth.CheckPassword({ password: password });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.password !== undefined) {
                    b.write(this.password.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        auth.CheckPassword = CheckPassword;
        class RequestPasswordRecovery extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'auth.RequestPasswordRecovery';
                this.constructorId = 0xd897bc66;
                this.subclassOfId = 0xfa72d43a;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.auth.RequestPasswordRecovery();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        auth.RequestPasswordRecovery = RequestPasswordRecovery;
        class RecoverPassword extends index_js_1.TLObject {
            __response__;
            code;
            newSettings;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'auth.RecoverPassword';
                this.constructorId = 0x37096c70;
                this.subclassOfId = 0xb9e04e39;
                this._slots = ['code', 'newSettings'];
                this.code = params.code;
                this.newSettings = params.newSettings;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let code = await index_js_1.Primitive.String.read(_data);
                let newSettings = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
                return new Raw.auth.RecoverPassword({ code: code, newSettings: newSettings });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.newSettings !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.code !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.code));
                }
                if (this.newSettings !== undefined) {
                    b.write(this.newSettings.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        auth.RecoverPassword = RecoverPassword;
        class ResendCode extends index_js_1.TLObject {
            __response__;
            phoneNumber;
            phoneCodeHash;
            reason;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'auth.ResendCode';
                this.constructorId = 0xcae47523;
                this.subclassOfId = 0x6ce87081;
                this._slots = ['phoneNumber', 'phoneCodeHash', 'reason'];
                this.phoneNumber = params.phoneNumber;
                this.phoneCodeHash = params.phoneCodeHash;
                this.reason = params.reason;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let phoneNumber = await index_js_1.Primitive.String.read(_data);
                let phoneCodeHash = await index_js_1.Primitive.String.read(_data);
                let reason = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
                return new Raw.auth.ResendCode({
                    phoneNumber: phoneNumber,
                    phoneCodeHash: phoneCodeHash,
                    reason: reason,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.reason !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.phoneNumber !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.phoneNumber));
                }
                if (this.phoneCodeHash !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.phoneCodeHash));
                }
                if (this.reason !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.reason));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        auth.ResendCode = ResendCode;
        class CancelCode extends index_js_1.TLObject {
            __response__;
            phoneNumber;
            phoneCodeHash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'auth.CancelCode';
                this.constructorId = 0x1f040578;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['phoneNumber', 'phoneCodeHash'];
                this.phoneNumber = params.phoneNumber;
                this.phoneCodeHash = params.phoneCodeHash;
            }
            static async read(_data, ..._args) {
                let phoneNumber = await index_js_1.Primitive.String.read(_data);
                let phoneCodeHash = await index_js_1.Primitive.String.read(_data);
                return new Raw.auth.CancelCode({ phoneNumber: phoneNumber, phoneCodeHash: phoneCodeHash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.phoneNumber !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.phoneNumber));
                }
                if (this.phoneCodeHash !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.phoneCodeHash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        auth.CancelCode = CancelCode;
        class DropTempAuthKeys extends index_js_1.TLObject {
            __response__;
            exceptAuthKeys;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'auth.DropTempAuthKeys';
                this.constructorId = 0x8e48a188;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['exceptAuthKeys'];
                this.exceptAuthKeys = params.exceptAuthKeys;
            }
            static async read(_data, ..._args) {
                let exceptAuthKeys = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Long);
                return new Raw.auth.DropTempAuthKeys({ exceptAuthKeys: exceptAuthKeys });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.exceptAuthKeys) {
                    b.write(index_js_1.Primitive.Vector.write(this.exceptAuthKeys, index_js_1.Primitive.Long));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        auth.DropTempAuthKeys = DropTempAuthKeys;
        class ExportLoginToken extends index_js_1.TLObject {
            __response__;
            apiId;
            apiHash;
            exceptIds;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'auth.ExportLoginToken';
                this.constructorId = 0xb7e085fe;
                this.subclassOfId = 0x6b55f636;
                this._slots = ['apiId', 'apiHash', 'exceptIds'];
                this.apiId = params.apiId;
                this.apiHash = params.apiHash;
                this.exceptIds = params.exceptIds;
            }
            static async read(_data, ..._args) {
                let apiId = await index_js_1.Primitive.Int.read(_data);
                let apiHash = await index_js_1.Primitive.String.read(_data);
                let exceptIds = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Long);
                return new Raw.auth.ExportLoginToken({
                    apiId: apiId,
                    apiHash: apiHash,
                    exceptIds: exceptIds,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.apiId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.apiId));
                }
                if (this.apiHash !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.apiHash));
                }
                if (this.exceptIds) {
                    b.write(index_js_1.Primitive.Vector.write(this.exceptIds, index_js_1.Primitive.Long));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        auth.ExportLoginToken = ExportLoginToken;
        class ImportLoginToken extends index_js_1.TLObject {
            __response__;
            token;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'auth.ImportLoginToken';
                this.constructorId = 0x95ac5ce4;
                this.subclassOfId = 0x6b55f636;
                this._slots = ['token'];
                this.token = params.token;
            }
            static async read(_data, ..._args) {
                let token = await index_js_1.Primitive.Bytes.read(_data);
                return new Raw.auth.ImportLoginToken({ token: token });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.token !== undefined) {
                    b.write(index_js_1.Primitive.Bytes.write(this.token));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        auth.ImportLoginToken = ImportLoginToken;
        class AcceptLoginToken extends index_js_1.TLObject {
            __response__;
            token;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'auth.AcceptLoginToken';
                this.constructorId = 0xe894ad4d;
                this.subclassOfId = 0xc913c01a;
                this._slots = ['token'];
                this.token = params.token;
            }
            static async read(_data, ..._args) {
                let token = await index_js_1.Primitive.Bytes.read(_data);
                return new Raw.auth.AcceptLoginToken({ token: token });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.token !== undefined) {
                    b.write(index_js_1.Primitive.Bytes.write(this.token));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        auth.AcceptLoginToken = AcceptLoginToken;
        class CheckRecoveryPassword extends index_js_1.TLObject {
            __response__;
            code;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'auth.CheckRecoveryPassword';
                this.constructorId = 0xd36bf79;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['code'];
                this.code = params.code;
            }
            static async read(_data, ..._args) {
                let code = await index_js_1.Primitive.String.read(_data);
                return new Raw.auth.CheckRecoveryPassword({ code: code });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.code !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.code));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        auth.CheckRecoveryPassword = CheckRecoveryPassword;
        class ImportWebTokenAuthorization extends index_js_1.TLObject {
            __response__;
            apiId;
            apiHash;
            webAuthToken;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'auth.ImportWebTokenAuthorization';
                this.constructorId = 0x2db873a9;
                this.subclassOfId = 0xb9e04e39;
                this._slots = ['apiId', 'apiHash', 'webAuthToken'];
                this.apiId = params.apiId;
                this.apiHash = params.apiHash;
                this.webAuthToken = params.webAuthToken;
            }
            static async read(_data, ..._args) {
                let apiId = await index_js_1.Primitive.Int.read(_data);
                let apiHash = await index_js_1.Primitive.String.read(_data);
                let webAuthToken = await index_js_1.Primitive.String.read(_data);
                return new Raw.auth.ImportWebTokenAuthorization({
                    apiId: apiId,
                    apiHash: apiHash,
                    webAuthToken: webAuthToken,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.apiId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.apiId));
                }
                if (this.apiHash !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.apiHash));
                }
                if (this.webAuthToken !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.webAuthToken));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        auth.ImportWebTokenAuthorization = ImportWebTokenAuthorization;
        class RequestFirebaseSms extends index_js_1.TLObject {
            __response__;
            phoneNumber;
            phoneCodeHash;
            safetyNetToken;
            playIntegrityToken;
            iosPushSecret;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'auth.RequestFirebaseSms';
                this.constructorId = 0x8e39261e;
                this.subclassOfId = 0xf5b399ac;
                this._slots = [
                    'phoneNumber',
                    'phoneCodeHash',
                    'safetyNetToken',
                    'playIntegrityToken',
                    'iosPushSecret',
                ];
                this.phoneNumber = params.phoneNumber;
                this.phoneCodeHash = params.phoneCodeHash;
                this.safetyNetToken = params.safetyNetToken;
                this.playIntegrityToken = params.playIntegrityToken;
                this.iosPushSecret = params.iosPushSecret;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let phoneNumber = await index_js_1.Primitive.String.read(_data);
                let phoneCodeHash = await index_js_1.Primitive.String.read(_data);
                let safetyNetToken = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let playIntegrityToken = flags & (1 << 2) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let iosPushSecret = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
                return new Raw.auth.RequestFirebaseSms({
                    phoneNumber: phoneNumber,
                    phoneCodeHash: phoneCodeHash,
                    safetyNetToken: safetyNetToken,
                    playIntegrityToken: playIntegrityToken,
                    iosPushSecret: iosPushSecret,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.safetyNetToken !== undefined ? 1 << 0 : 0;
                flags |= this.playIntegrityToken !== undefined ? 1 << 2 : 0;
                flags |= this.iosPushSecret !== undefined ? 1 << 1 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.phoneNumber !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.phoneNumber));
                }
                if (this.phoneCodeHash !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.phoneCodeHash));
                }
                if (this.safetyNetToken !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.safetyNetToken));
                }
                if (this.playIntegrityToken !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.playIntegrityToken));
                }
                if (this.iosPushSecret !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.iosPushSecret));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        auth.RequestFirebaseSms = RequestFirebaseSms;
        class ResetLoginEmail extends index_js_1.TLObject {
            __response__;
            phoneNumber;
            phoneCodeHash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'auth.ResetLoginEmail';
                this.constructorId = 0x7e960193;
                this.subclassOfId = 0x6ce87081;
                this._slots = ['phoneNumber', 'phoneCodeHash'];
                this.phoneNumber = params.phoneNumber;
                this.phoneCodeHash = params.phoneCodeHash;
            }
            static async read(_data, ..._args) {
                let phoneNumber = await index_js_1.Primitive.String.read(_data);
                let phoneCodeHash = await index_js_1.Primitive.String.read(_data);
                return new Raw.auth.ResetLoginEmail({
                    phoneNumber: phoneNumber,
                    phoneCodeHash: phoneCodeHash,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.phoneNumber !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.phoneNumber));
                }
                if (this.phoneCodeHash !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.phoneCodeHash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        auth.ResetLoginEmail = ResetLoginEmail;
        class ReportMissingCode extends index_js_1.TLObject {
            __response__;
            phoneNumber;
            phoneCodeHash;
            mnc;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'auth.ReportMissingCode';
                this.constructorId = 0xcb9deff6;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['phoneNumber', 'phoneCodeHash', 'mnc'];
                this.phoneNumber = params.phoneNumber;
                this.phoneCodeHash = params.phoneCodeHash;
                this.mnc = params.mnc;
            }
            static async read(_data, ..._args) {
                let phoneNumber = await index_js_1.Primitive.String.read(_data);
                let phoneCodeHash = await index_js_1.Primitive.String.read(_data);
                let mnc = await index_js_1.Primitive.String.read(_data);
                return new Raw.auth.ReportMissingCode({
                    phoneNumber: phoneNumber,
                    phoneCodeHash: phoneCodeHash,
                    mnc: mnc,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.phoneNumber !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.phoneNumber));
                }
                if (this.phoneCodeHash !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.phoneCodeHash));
                }
                if (this.mnc !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.mnc));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        auth.ReportMissingCode = ReportMissingCode;
    })(auth = Raw.auth || (Raw.auth = {}));
    let contacts;
    (function (contacts_1) {
        class ContactsNotModified extends index_js_1.TLObject {
            constructor() {
                super();
                this.classType = 'types';
                this.className = 'contacts.ContactsNotModified';
                this.constructorId = 0xb74ba9d2;
                this.subclassOfId = 0x38be25f6;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.contacts.ContactsNotModified();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        contacts_1.ContactsNotModified = ContactsNotModified;
        class Contacts extends index_js_1.TLObject {
            contacts;
            savedCount;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'contacts.Contacts';
                this.constructorId = 0xeae87e42;
                this.subclassOfId = 0x38be25f6;
                this._slots = ['contacts', 'savedCount', 'users'];
                this.contacts = params.contacts;
                this.savedCount = params.savedCount;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let contacts = await index_js_1.TLObject.read(_data);
                let savedCount = await index_js_1.Primitive.Int.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.contacts.Contacts({
                    contacts: contacts,
                    savedCount: savedCount,
                    users: users,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.contacts) {
                    b.write(index_js_1.Primitive.Vector.write(this.contacts));
                }
                if (this.savedCount !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.savedCount));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        contacts_1.Contacts = Contacts;
        class ImportedContacts extends index_js_1.TLObject {
            imported;
            popularInvites;
            retryContacts;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'contacts.ImportedContacts';
                this.constructorId = 0x77d01c3b;
                this.subclassOfId = 0x8172ad93;
                this._slots = ['imported', 'popularInvites', 'retryContacts', 'users'];
                this.imported = params.imported;
                this.popularInvites = params.popularInvites;
                this.retryContacts = params.retryContacts;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let imported = await index_js_1.TLObject.read(_data);
                let popularInvites = await index_js_1.TLObject.read(_data);
                let retryContacts = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Long);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.contacts.ImportedContacts({
                    imported: imported,
                    popularInvites: popularInvites,
                    retryContacts: retryContacts,
                    users: users,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.imported) {
                    b.write(index_js_1.Primitive.Vector.write(this.imported));
                }
                if (this.popularInvites) {
                    b.write(index_js_1.Primitive.Vector.write(this.popularInvites));
                }
                if (this.retryContacts) {
                    b.write(index_js_1.Primitive.Vector.write(this.retryContacts, index_js_1.Primitive.Long));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        contacts_1.ImportedContacts = ImportedContacts;
        class Blocked extends index_js_1.TLObject {
            blocked;
            chats;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'contacts.Blocked';
                this.constructorId = 0xade1591;
                this.subclassOfId = 0xffba4f4f;
                this._slots = ['blocked', 'chats', 'users'];
                this.blocked = params.blocked;
                this.chats = params.chats;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let blocked = await index_js_1.TLObject.read(_data);
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.contacts.Blocked({ blocked: blocked, chats: chats, users: users });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.blocked) {
                    b.write(index_js_1.Primitive.Vector.write(this.blocked));
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        contacts_1.Blocked = Blocked;
        class BlockedSlice extends index_js_1.TLObject {
            count;
            blocked;
            chats;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'contacts.BlockedSlice';
                this.constructorId = 0xe1664194;
                this.subclassOfId = 0xffba4f4f;
                this._slots = ['count', 'blocked', 'chats', 'users'];
                this.count = params.count;
                this.blocked = params.blocked;
                this.chats = params.chats;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let count = await index_js_1.Primitive.Int.read(_data);
                let blocked = await index_js_1.TLObject.read(_data);
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.contacts.BlockedSlice({
                    count: count,
                    blocked: blocked,
                    chats: chats,
                    users: users,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.count !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.count));
                }
                if (this.blocked) {
                    b.write(index_js_1.Primitive.Vector.write(this.blocked));
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        contacts_1.BlockedSlice = BlockedSlice;
        class Found extends index_js_1.TLObject {
            myResults;
            results;
            chats;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'contacts.Found';
                this.constructorId = 0xb3134d9d;
                this.subclassOfId = 0x4386a2e3;
                this._slots = ['myResults', 'results', 'chats', 'users'];
                this.myResults = params.myResults;
                this.results = params.results;
                this.chats = params.chats;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let myResults = await index_js_1.TLObject.read(_data);
                let results = await index_js_1.TLObject.read(_data);
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.contacts.Found({
                    myResults: myResults,
                    results: results,
                    chats: chats,
                    users: users,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.myResults) {
                    b.write(index_js_1.Primitive.Vector.write(this.myResults));
                }
                if (this.results) {
                    b.write(index_js_1.Primitive.Vector.write(this.results));
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        contacts_1.Found = Found;
        class ResolvedPeer extends index_js_1.TLObject {
            peer;
            chats;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'contacts.ResolvedPeer';
                this.constructorId = 0x7f077ad9;
                this.subclassOfId = 0xf065b3a8;
                this._slots = ['peer', 'chats', 'users'];
                this.peer = params.peer;
                this.chats = params.chats;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.contacts.ResolvedPeer({ peer: peer, chats: chats, users: users });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        contacts_1.ResolvedPeer = ResolvedPeer;
        class TopPeersNotModified extends index_js_1.TLObject {
            constructor() {
                super();
                this.classType = 'types';
                this.className = 'contacts.TopPeersNotModified';
                this.constructorId = 0xde266ef5;
                this.subclassOfId = 0x9ee8bb88;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.contacts.TopPeersNotModified();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        contacts_1.TopPeersNotModified = TopPeersNotModified;
        class TopPeers extends index_js_1.TLObject {
            categories;
            chats;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'contacts.TopPeers';
                this.constructorId = 0x70b772a8;
                this.subclassOfId = 0x9ee8bb88;
                this._slots = ['categories', 'chats', 'users'];
                this.categories = params.categories;
                this.chats = params.chats;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let categories = await index_js_1.TLObject.read(_data);
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.contacts.TopPeers({ categories: categories, chats: chats, users: users });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.categories) {
                    b.write(index_js_1.Primitive.Vector.write(this.categories));
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        contacts_1.TopPeers = TopPeers;
        class TopPeersDisabled extends index_js_1.TLObject {
            constructor() {
                super();
                this.classType = 'types';
                this.className = 'contacts.TopPeersDisabled';
                this.constructorId = 0xb52c939d;
                this.subclassOfId = 0x9ee8bb88;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.contacts.TopPeersDisabled();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        contacts_1.TopPeersDisabled = TopPeersDisabled;
        class ContactBirthdays extends index_js_1.TLObject {
            contacts;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'contacts.ContactBirthdays';
                this.constructorId = 0x114ff30d;
                this.subclassOfId = 0xe7aabff;
                this._slots = ['contacts', 'users'];
                this.contacts = params.contacts;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let contacts = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.contacts.ContactBirthdays({ contacts: contacts, users: users });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.contacts) {
                    b.write(index_js_1.Primitive.Vector.write(this.contacts));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        contacts_1.ContactBirthdays = ContactBirthdays;
        class GetContactIDs extends index_js_1.TLObject {
            __response__;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'contacts.GetContactIDs';
                this.constructorId = 0x7adc669d;
                this.subclassOfId = 0x5026710f;
                this._slots = ['hash'];
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Long.read(_data);
                return new Raw.contacts.GetContactIDs({ hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        contacts_1.GetContactIDs = GetContactIDs;
        class GetStatuses extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'contacts.GetStatuses';
                this.constructorId = 0xc4a353ee;
                this.subclassOfId = 0xdf815c90;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.contacts.GetStatuses();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        contacts_1.GetStatuses = GetStatuses;
        class GetContacts extends index_js_1.TLObject {
            __response__;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'contacts.GetContacts';
                this.constructorId = 0x5dd69e12;
                this.subclassOfId = 0x38be25f6;
                this._slots = ['hash'];
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Long.read(_data);
                return new Raw.contacts.GetContacts({ hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        contacts_1.GetContacts = GetContacts;
        class ImportContacts extends index_js_1.TLObject {
            __response__;
            contacts;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'contacts.ImportContacts';
                this.constructorId = 0x2c800be5;
                this.subclassOfId = 0x8172ad93;
                this._slots = ['contacts'];
                this.contacts = params.contacts;
            }
            static async read(_data, ..._args) {
                let contacts = await index_js_1.TLObject.read(_data);
                return new Raw.contacts.ImportContacts({ contacts: contacts });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.contacts) {
                    b.write(index_js_1.Primitive.Vector.write(this.contacts));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        contacts_1.ImportContacts = ImportContacts;
        class DeleteContacts extends index_js_1.TLObject {
            __response__;
            id;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'contacts.DeleteContacts';
                this.constructorId = 0x96a0e00;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['id'];
                this.id = params.id;
            }
            static async read(_data, ..._args) {
                let id = await index_js_1.TLObject.read(_data);
                return new Raw.contacts.DeleteContacts({ id: id });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.id) {
                    b.write(index_js_1.Primitive.Vector.write(this.id));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        contacts_1.DeleteContacts = DeleteContacts;
        class DeleteByPhones extends index_js_1.TLObject {
            __response__;
            phones;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'contacts.DeleteByPhones';
                this.constructorId = 0x1013fd9e;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['phones'];
                this.phones = params.phones;
            }
            static async read(_data, ..._args) {
                let phones = await index_js_1.TLObject.read(_data, index_js_1.Primitive.String);
                return new Raw.contacts.DeleteByPhones({ phones: phones });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.phones) {
                    b.write(index_js_1.Primitive.Vector.write(this.phones, index_js_1.Primitive.String));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        contacts_1.DeleteByPhones = DeleteByPhones;
        class Block extends index_js_1.TLObject {
            __response__;
            myStoriesFrom;
            id;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'contacts.Block';
                this.constructorId = 0x2e2e8734;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['myStoriesFrom', 'id'];
                this.myStoriesFrom = params.myStoriesFrom;
                this.id = params.id;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let myStoriesFrom = flags & (1 << 0) ? true : false;
                let id = await index_js_1.TLObject.read(_data);
                return new Raw.contacts.Block({ myStoriesFrom: myStoriesFrom, id: id });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.myStoriesFrom ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.id !== undefined) {
                    b.write(this.id.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        contacts_1.Block = Block;
        class Unblock extends index_js_1.TLObject {
            __response__;
            myStoriesFrom;
            id;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'contacts.Unblock';
                this.constructorId = 0xb550d328;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['myStoriesFrom', 'id'];
                this.myStoriesFrom = params.myStoriesFrom;
                this.id = params.id;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let myStoriesFrom = flags & (1 << 0) ? true : false;
                let id = await index_js_1.TLObject.read(_data);
                return new Raw.contacts.Unblock({ myStoriesFrom: myStoriesFrom, id: id });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.myStoriesFrom ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.id !== undefined) {
                    b.write(this.id.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        contacts_1.Unblock = Unblock;
        class GetBlocked extends index_js_1.TLObject {
            __response__;
            myStoriesFrom;
            offset;
            limit;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'contacts.GetBlocked';
                this.constructorId = 0x9a868f80;
                this.subclassOfId = 0xffba4f4f;
                this._slots = ['myStoriesFrom', 'offset', 'limit'];
                this.myStoriesFrom = params.myStoriesFrom;
                this.offset = params.offset;
                this.limit = params.limit;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let myStoriesFrom = flags & (1 << 0) ? true : false;
                let offset = await index_js_1.Primitive.Int.read(_data);
                let limit = await index_js_1.Primitive.Int.read(_data);
                return new Raw.contacts.GetBlocked({
                    myStoriesFrom: myStoriesFrom,
                    offset: offset,
                    limit: limit,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.myStoriesFrom ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.offset !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.offset));
                }
                if (this.limit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.limit));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        contacts_1.GetBlocked = GetBlocked;
        class Search extends index_js_1.TLObject {
            __response__;
            q;
            limit;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'contacts.Search';
                this.constructorId = 0x11f812d8;
                this.subclassOfId = 0x4386a2e3;
                this._slots = ['q', 'limit'];
                this.q = params.q;
                this.limit = params.limit;
            }
            static async read(_data, ..._args) {
                let q = await index_js_1.Primitive.String.read(_data);
                let limit = await index_js_1.Primitive.Int.read(_data);
                return new Raw.contacts.Search({ q: q, limit: limit });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.q !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.q));
                }
                if (this.limit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.limit));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        contacts_1.Search = Search;
        class ResolveUsername extends index_js_1.TLObject {
            __response__;
            username;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'contacts.ResolveUsername';
                this.constructorId = 0xf93ccba3;
                this.subclassOfId = 0xf065b3a8;
                this._slots = ['username'];
                this.username = params.username;
            }
            static async read(_data, ..._args) {
                let username = await index_js_1.Primitive.String.read(_data);
                return new Raw.contacts.ResolveUsername({ username: username });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.username !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.username));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        contacts_1.ResolveUsername = ResolveUsername;
        class GetTopPeers extends index_js_1.TLObject {
            __response__;
            correspondents;
            botsPm;
            botsInline;
            phoneCalls;
            forwardUsers;
            forwardChats;
            groups;
            channels;
            offset;
            limit;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'contacts.GetTopPeers';
                this.constructorId = 0x973478b6;
                this.subclassOfId = 0x9ee8bb88;
                this._slots = [
                    'correspondents',
                    'botsPm',
                    'botsInline',
                    'phoneCalls',
                    'forwardUsers',
                    'forwardChats',
                    'groups',
                    'channels',
                    'offset',
                    'limit',
                    'hash',
                ];
                this.correspondents = params.correspondents;
                this.botsPm = params.botsPm;
                this.botsInline = params.botsInline;
                this.phoneCalls = params.phoneCalls;
                this.forwardUsers = params.forwardUsers;
                this.forwardChats = params.forwardChats;
                this.groups = params.groups;
                this.channels = params.channels;
                this.offset = params.offset;
                this.limit = params.limit;
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let correspondents = flags & (1 << 0) ? true : false;
                let botsPm = flags & (1 << 1) ? true : false;
                let botsInline = flags & (1 << 2) ? true : false;
                let phoneCalls = flags & (1 << 3) ? true : false;
                let forwardUsers = flags & (1 << 4) ? true : false;
                let forwardChats = flags & (1 << 5) ? true : false;
                let groups = flags & (1 << 10) ? true : false;
                let channels = flags & (1 << 15) ? true : false;
                let offset = await index_js_1.Primitive.Int.read(_data);
                let limit = await index_js_1.Primitive.Int.read(_data);
                let hash = await index_js_1.Primitive.Long.read(_data);
                return new Raw.contacts.GetTopPeers({
                    correspondents: correspondents,
                    botsPm: botsPm,
                    botsInline: botsInline,
                    phoneCalls: phoneCalls,
                    forwardUsers: forwardUsers,
                    forwardChats: forwardChats,
                    groups: groups,
                    channels: channels,
                    offset: offset,
                    limit: limit,
                    hash: hash,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.correspondents ? 1 << 0 : 0;
                flags |= this.botsPm ? 1 << 1 : 0;
                flags |= this.botsInline ? 1 << 2 : 0;
                flags |= this.phoneCalls ? 1 << 3 : 0;
                flags |= this.forwardUsers ? 1 << 4 : 0;
                flags |= this.forwardChats ? 1 << 5 : 0;
                flags |= this.groups ? 1 << 10 : 0;
                flags |= this.channels ? 1 << 15 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.offset !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.offset));
                }
                if (this.limit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.limit));
                }
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        contacts_1.GetTopPeers = GetTopPeers;
        class ResetTopPeerRating extends index_js_1.TLObject {
            __response__;
            category;
            peer;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'contacts.ResetTopPeerRating';
                this.constructorId = 0x1ae373ac;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['category', 'peer'];
                this.category = params.category;
                this.peer = params.peer;
            }
            static async read(_data, ..._args) {
                let category = await index_js_1.TLObject.read(_data);
                let peer = await index_js_1.TLObject.read(_data);
                return new Raw.contacts.ResetTopPeerRating({ category: category, peer: peer });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.category !== undefined) {
                    b.write(this.category.write());
                }
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        contacts_1.ResetTopPeerRating = ResetTopPeerRating;
        class ResetSaved extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'contacts.ResetSaved';
                this.constructorId = 0x879537f1;
                this.subclassOfId = 0xf5b399ac;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.contacts.ResetSaved();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        contacts_1.ResetSaved = ResetSaved;
        class GetSaved extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'contacts.GetSaved';
                this.constructorId = 0x82f1e39f;
                this.subclassOfId = 0x975dbef;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.contacts.GetSaved();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        contacts_1.GetSaved = GetSaved;
        class ToggleTopPeers extends index_js_1.TLObject {
            __response__;
            enabled;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'contacts.ToggleTopPeers';
                this.constructorId = 0x8514bdda;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['enabled'];
                this.enabled = params.enabled;
            }
            static async read(_data, ..._args) {
                let enabled = await index_js_1.Primitive.Bool.read(_data);
                return new Raw.contacts.ToggleTopPeers({ enabled: enabled });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.enabled !== undefined) {
                    b.write(index_js_1.Primitive.Bool.write(this.enabled));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        contacts_1.ToggleTopPeers = ToggleTopPeers;
        class AddContact extends index_js_1.TLObject {
            __response__;
            addPhonePrivacyException;
            id;
            firstName;
            lastName;
            phone;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'contacts.AddContact';
                this.constructorId = 0xe8f463d0;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['addPhonePrivacyException', 'id', 'firstName', 'lastName', 'phone'];
                this.addPhonePrivacyException = params.addPhonePrivacyException;
                this.id = params.id;
                this.firstName = params.firstName;
                this.lastName = params.lastName;
                this.phone = params.phone;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let addPhonePrivacyException = flags & (1 << 0) ? true : false;
                let id = await index_js_1.TLObject.read(_data);
                let firstName = await index_js_1.Primitive.String.read(_data);
                let lastName = await index_js_1.Primitive.String.read(_data);
                let phone = await index_js_1.Primitive.String.read(_data);
                return new Raw.contacts.AddContact({
                    addPhonePrivacyException: addPhonePrivacyException,
                    id: id,
                    firstName: firstName,
                    lastName: lastName,
                    phone: phone,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.addPhonePrivacyException ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.id !== undefined) {
                    b.write(this.id.write());
                }
                if (this.firstName !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.firstName));
                }
                if (this.lastName !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.lastName));
                }
                if (this.phone !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.phone));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        contacts_1.AddContact = AddContact;
        class AcceptContact extends index_js_1.TLObject {
            __response__;
            id;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'contacts.AcceptContact';
                this.constructorId = 0xf831a20f;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['id'];
                this.id = params.id;
            }
            static async read(_data, ..._args) {
                let id = await index_js_1.TLObject.read(_data);
                return new Raw.contacts.AcceptContact({ id: id });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.id !== undefined) {
                    b.write(this.id.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        contacts_1.AcceptContact = AcceptContact;
        class GetLocated extends index_js_1.TLObject {
            __response__;
            background;
            geoPoint;
            selfExpires;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'contacts.GetLocated';
                this.constructorId = 0xd348bc44;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['background', 'geoPoint', 'selfExpires'];
                this.background = params.background;
                this.geoPoint = params.geoPoint;
                this.selfExpires = params.selfExpires;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let background = flags & (1 << 1) ? true : false;
                let geoPoint = await index_js_1.TLObject.read(_data);
                let selfExpires = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                return new Raw.contacts.GetLocated({
                    background: background,
                    geoPoint: geoPoint,
                    selfExpires: selfExpires,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.background ? 1 << 1 : 0;
                flags |= this.selfExpires !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.geoPoint !== undefined) {
                    b.write(this.geoPoint.write());
                }
                if (this.selfExpires !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.selfExpires));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        contacts_1.GetLocated = GetLocated;
        class BlockFromReplies extends index_js_1.TLObject {
            __response__;
            deleteMessage;
            deleteHistory;
            reportSpam;
            msgId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'contacts.BlockFromReplies';
                this.constructorId = 0x29a8962c;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['deleteMessage', 'deleteHistory', 'reportSpam', 'msgId'];
                this.deleteMessage = params.deleteMessage;
                this.deleteHistory = params.deleteHistory;
                this.reportSpam = params.reportSpam;
                this.msgId = params.msgId;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let deleteMessage = flags & (1 << 0) ? true : false;
                let deleteHistory = flags & (1 << 1) ? true : false;
                let reportSpam = flags & (1 << 2) ? true : false;
                let msgId = await index_js_1.Primitive.Int.read(_data);
                return new Raw.contacts.BlockFromReplies({
                    deleteMessage: deleteMessage,
                    deleteHistory: deleteHistory,
                    reportSpam: reportSpam,
                    msgId: msgId,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.deleteMessage ? 1 << 0 : 0;
                flags |= this.deleteHistory ? 1 << 1 : 0;
                flags |= this.reportSpam ? 1 << 2 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.msgId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.msgId));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        contacts_1.BlockFromReplies = BlockFromReplies;
        class ResolvePhone extends index_js_1.TLObject {
            __response__;
            phone;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'contacts.ResolvePhone';
                this.constructorId = 0x8af94344;
                this.subclassOfId = 0xf065b3a8;
                this._slots = ['phone'];
                this.phone = params.phone;
            }
            static async read(_data, ..._args) {
                let phone = await index_js_1.Primitive.String.read(_data);
                return new Raw.contacts.ResolvePhone({ phone: phone });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.phone !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.phone));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        contacts_1.ResolvePhone = ResolvePhone;
        class ExportContactToken extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'contacts.ExportContactToken';
                this.constructorId = 0xf8654027;
                this.subclassOfId = 0x86ddbed1;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.contacts.ExportContactToken();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        contacts_1.ExportContactToken = ExportContactToken;
        class ImportContactToken extends index_js_1.TLObject {
            __response__;
            token;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'contacts.ImportContactToken';
                this.constructorId = 0x13005788;
                this.subclassOfId = 0x2da17977;
                this._slots = ['token'];
                this.token = params.token;
            }
            static async read(_data, ..._args) {
                let token = await index_js_1.Primitive.String.read(_data);
                return new Raw.contacts.ImportContactToken({ token: token });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.token !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.token));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        contacts_1.ImportContactToken = ImportContactToken;
        class EditCloseFriends extends index_js_1.TLObject {
            __response__;
            id;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'contacts.EditCloseFriends';
                this.constructorId = 0xba6705f0;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['id'];
                this.id = params.id;
            }
            static async read(_data, ..._args) {
                let id = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Long);
                return new Raw.contacts.EditCloseFriends({ id: id });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.id) {
                    b.write(index_js_1.Primitive.Vector.write(this.id, index_js_1.Primitive.Long));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        contacts_1.EditCloseFriends = EditCloseFriends;
        class SetBlocked extends index_js_1.TLObject {
            __response__;
            myStoriesFrom;
            id;
            limit;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'contacts.SetBlocked';
                this.constructorId = 0x94c65c76;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['myStoriesFrom', 'id', 'limit'];
                this.myStoriesFrom = params.myStoriesFrom;
                this.id = params.id;
                this.limit = params.limit;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let myStoriesFrom = flags & (1 << 0) ? true : false;
                let id = await index_js_1.TLObject.read(_data);
                let limit = await index_js_1.Primitive.Int.read(_data);
                return new Raw.contacts.SetBlocked({ myStoriesFrom: myStoriesFrom, id: id, limit: limit });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.myStoriesFrom ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.id) {
                    b.write(index_js_1.Primitive.Vector.write(this.id));
                }
                if (this.limit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.limit));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        contacts_1.SetBlocked = SetBlocked;
        class GetBirthdays extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'contacts.GetBirthdays';
                this.constructorId = 0xdaeda864;
                this.subclassOfId = 0xe7aabff;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.contacts.GetBirthdays();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        contacts_1.GetBirthdays = GetBirthdays;
    })(contacts = Raw.contacts || (Raw.contacts = {}));
    let messages;
    (function (messages_1) {
        class Dialogs extends index_js_1.TLObject {
            dialogs;
            messages;
            chats;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.Dialogs';
                this.constructorId = 0x15ba6c40;
                this.subclassOfId = 0xe1b52ee;
                this._slots = ['dialogs', 'messages', 'chats', 'users'];
                this.dialogs = params.dialogs;
                this.messages = params.messages;
                this.chats = params.chats;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let dialogs = await index_js_1.TLObject.read(_data);
                let messages = await index_js_1.TLObject.read(_data);
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.messages.Dialogs({
                    dialogs: dialogs,
                    messages: messages,
                    chats: chats,
                    users: users,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.dialogs) {
                    b.write(index_js_1.Primitive.Vector.write(this.dialogs));
                }
                if (this.messages) {
                    b.write(index_js_1.Primitive.Vector.write(this.messages));
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.Dialogs = Dialogs;
        class DialogsSlice extends index_js_1.TLObject {
            count;
            dialogs;
            messages;
            chats;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.DialogsSlice';
                this.constructorId = 0x71e094f3;
                this.subclassOfId = 0xe1b52ee;
                this._slots = ['count', 'dialogs', 'messages', 'chats', 'users'];
                this.count = params.count;
                this.dialogs = params.dialogs;
                this.messages = params.messages;
                this.chats = params.chats;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let count = await index_js_1.Primitive.Int.read(_data);
                let dialogs = await index_js_1.TLObject.read(_data);
                let messages = await index_js_1.TLObject.read(_data);
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.messages.DialogsSlice({
                    count: count,
                    dialogs: dialogs,
                    messages: messages,
                    chats: chats,
                    users: users,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.count !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.count));
                }
                if (this.dialogs) {
                    b.write(index_js_1.Primitive.Vector.write(this.dialogs));
                }
                if (this.messages) {
                    b.write(index_js_1.Primitive.Vector.write(this.messages));
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.DialogsSlice = DialogsSlice;
        class DialogsNotModified extends index_js_1.TLObject {
            count;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.DialogsNotModified';
                this.constructorId = 0xf0e3e596;
                this.subclassOfId = 0xe1b52ee;
                this._slots = ['count'];
                this.count = params.count;
            }
            static async read(_data, ..._args) {
                let count = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.DialogsNotModified({ count: count });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.count !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.count));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.DialogsNotModified = DialogsNotModified;
        class Messages extends index_js_1.TLObject {
            messages;
            chats;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.Messages';
                this.constructorId = 0x8c718e87;
                this.subclassOfId = 0xd4b40b5e;
                this._slots = ['messages', 'chats', 'users'];
                this.messages = params.messages;
                this.chats = params.chats;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let messages = await index_js_1.TLObject.read(_data);
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.messages.Messages({ messages: messages, chats: chats, users: users });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.messages) {
                    b.write(index_js_1.Primitive.Vector.write(this.messages));
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.Messages = Messages;
        class MessagesSlice extends index_js_1.TLObject {
            inexact;
            count;
            nextRate;
            offsetIdOffset;
            messages;
            chats;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.MessagesSlice';
                this.constructorId = 0x3a54685e;
                this.subclassOfId = 0xd4b40b5e;
                this._slots = [
                    'inexact',
                    'count',
                    'nextRate',
                    'offsetIdOffset',
                    'messages',
                    'chats',
                    'users',
                ];
                this.inexact = params.inexact;
                this.count = params.count;
                this.nextRate = params.nextRate;
                this.offsetIdOffset = params.offsetIdOffset;
                this.messages = params.messages;
                this.chats = params.chats;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let inexact = flags & (1 << 1) ? true : false;
                let count = await index_js_1.Primitive.Int.read(_data);
                let nextRate = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let offsetIdOffset = flags & (1 << 2) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let messages = await index_js_1.TLObject.read(_data);
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.messages.MessagesSlice({
                    inexact: inexact,
                    count: count,
                    nextRate: nextRate,
                    offsetIdOffset: offsetIdOffset,
                    messages: messages,
                    chats: chats,
                    users: users,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.inexact ? 1 << 1 : 0;
                flags |= this.nextRate !== undefined ? 1 << 0 : 0;
                flags |= this.offsetIdOffset !== undefined ? 1 << 2 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.count !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.count));
                }
                if (this.nextRate !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.nextRate));
                }
                if (this.offsetIdOffset !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.offsetIdOffset));
                }
                if (this.messages) {
                    b.write(index_js_1.Primitive.Vector.write(this.messages));
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.MessagesSlice = MessagesSlice;
        class ChannelMessages extends index_js_1.TLObject {
            inexact;
            pts;
            count;
            offsetIdOffset;
            messages;
            topics;
            chats;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.ChannelMessages';
                this.constructorId = 0xc776ba4e;
                this.subclassOfId = 0xd4b40b5e;
                this._slots = [
                    'inexact',
                    'pts',
                    'count',
                    'offsetIdOffset',
                    'messages',
                    'topics',
                    'chats',
                    'users',
                ];
                this.inexact = params.inexact;
                this.pts = params.pts;
                this.count = params.count;
                this.offsetIdOffset = params.offsetIdOffset;
                this.messages = params.messages;
                this.topics = params.topics;
                this.chats = params.chats;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let inexact = flags & (1 << 1) ? true : false;
                let pts = await index_js_1.Primitive.Int.read(_data);
                let count = await index_js_1.Primitive.Int.read(_data);
                let offsetIdOffset = flags & (1 << 2) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let messages = await index_js_1.TLObject.read(_data);
                let topics = await index_js_1.TLObject.read(_data);
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.messages.ChannelMessages({
                    inexact: inexact,
                    pts: pts,
                    count: count,
                    offsetIdOffset: offsetIdOffset,
                    messages: messages,
                    topics: topics,
                    chats: chats,
                    users: users,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.inexact ? 1 << 1 : 0;
                flags |= this.offsetIdOffset !== undefined ? 1 << 2 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.pts !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.pts));
                }
                if (this.count !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.count));
                }
                if (this.offsetIdOffset !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.offsetIdOffset));
                }
                if (this.messages) {
                    b.write(index_js_1.Primitive.Vector.write(this.messages));
                }
                if (this.topics) {
                    b.write(index_js_1.Primitive.Vector.write(this.topics));
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.ChannelMessages = ChannelMessages;
        class MessagesNotModified extends index_js_1.TLObject {
            count;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.MessagesNotModified';
                this.constructorId = 0x74535f21;
                this.subclassOfId = 0xd4b40b5e;
                this._slots = ['count'];
                this.count = params.count;
            }
            static async read(_data, ..._args) {
                let count = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.MessagesNotModified({ count: count });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.count !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.count));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.MessagesNotModified = MessagesNotModified;
        class Chats extends index_js_1.TLObject {
            chats;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.Chats';
                this.constructorId = 0x64ff9fd5;
                this.subclassOfId = 0x99d5cb14;
                this._slots = ['chats'];
                this.chats = params.chats;
            }
            static async read(_data, ..._args) {
                let chats = await index_js_1.TLObject.read(_data);
                return new Raw.messages.Chats({ chats: chats });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.Chats = Chats;
        class ChatsSlice extends index_js_1.TLObject {
            count;
            chats;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.ChatsSlice';
                this.constructorId = 0x9cd81144;
                this.subclassOfId = 0x99d5cb14;
                this._slots = ['count', 'chats'];
                this.count = params.count;
                this.chats = params.chats;
            }
            static async read(_data, ..._args) {
                let count = await index_js_1.Primitive.Int.read(_data);
                let chats = await index_js_1.TLObject.read(_data);
                return new Raw.messages.ChatsSlice({ count: count, chats: chats });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.count !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.count));
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.ChatsSlice = ChatsSlice;
        class ChatFull extends index_js_1.TLObject {
            fullChat;
            chats;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.ChatFull';
                this.constructorId = 0xe5d7d19c;
                this.subclassOfId = 0x225a5109;
                this._slots = ['fullChat', 'chats', 'users'];
                this.fullChat = params.fullChat;
                this.chats = params.chats;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let fullChat = await index_js_1.TLObject.read(_data);
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.messages.ChatFull({ fullChat: fullChat, chats: chats, users: users });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.fullChat !== undefined) {
                    b.write(this.fullChat.write());
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.ChatFull = ChatFull;
        class AffectedHistory extends index_js_1.TLObject {
            pts;
            ptsCount;
            offset;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.AffectedHistory';
                this.constructorId = 0xb45c69d1;
                this.subclassOfId = 0x2c49c116;
                this._slots = ['pts', 'ptsCount', 'offset'];
                this.pts = params.pts;
                this.ptsCount = params.ptsCount;
                this.offset = params.offset;
            }
            static async read(_data, ..._args) {
                let pts = await index_js_1.Primitive.Int.read(_data);
                let ptsCount = await index_js_1.Primitive.Int.read(_data);
                let offset = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.AffectedHistory({ pts: pts, ptsCount: ptsCount, offset: offset });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.pts !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.pts));
                }
                if (this.ptsCount !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.ptsCount));
                }
                if (this.offset !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.offset));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.AffectedHistory = AffectedHistory;
        class DhConfigNotModified extends index_js_1.TLObject {
            random;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.DhConfigNotModified';
                this.constructorId = 0xc0e24635;
                this.subclassOfId = 0xe488ed8b;
                this._slots = ['random'];
                this.random = params.random;
            }
            static async read(_data, ..._args) {
                let random = await index_js_1.Primitive.Bytes.read(_data);
                return new Raw.messages.DhConfigNotModified({ random: random });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.random !== undefined) {
                    b.write(index_js_1.Primitive.Bytes.write(this.random));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.DhConfigNotModified = DhConfigNotModified;
        class DhConfig extends index_js_1.TLObject {
            g;
            p;
            version;
            random;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.DhConfig';
                this.constructorId = 0x2c221edd;
                this.subclassOfId = 0xe488ed8b;
                this._slots = ['g', 'p', 'version', 'random'];
                this.g = params.g;
                this.p = params.p;
                this.version = params.version;
                this.random = params.random;
            }
            static async read(_data, ..._args) {
                let g = await index_js_1.Primitive.Int.read(_data);
                let p = await index_js_1.Primitive.Bytes.read(_data);
                let version = await index_js_1.Primitive.Int.read(_data);
                let random = await index_js_1.Primitive.Bytes.read(_data);
                return new Raw.messages.DhConfig({ g: g, p: p, version: version, random: random });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.g !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.g));
                }
                if (this.p !== undefined) {
                    b.write(index_js_1.Primitive.Bytes.write(this.p));
                }
                if (this.version !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.version));
                }
                if (this.random !== undefined) {
                    b.write(index_js_1.Primitive.Bytes.write(this.random));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.DhConfig = DhConfig;
        class SentEncryptedMessage extends index_js_1.TLObject {
            date;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.SentEncryptedMessage';
                this.constructorId = 0x560f8935;
                this.subclassOfId = 0xc99e3e50;
                this._slots = ['date'];
                this.date = params.date;
            }
            static async read(_data, ..._args) {
                let date = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.SentEncryptedMessage({ date: date });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.date !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.date));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SentEncryptedMessage = SentEncryptedMessage;
        class SentEncryptedFile extends index_js_1.TLObject {
            date;
            file;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.SentEncryptedFile';
                this.constructorId = 0x9493ff32;
                this.subclassOfId = 0xc99e3e50;
                this._slots = ['date', 'file'];
                this.date = params.date;
                this.file = params.file;
            }
            static async read(_data, ..._args) {
                let date = await index_js_1.Primitive.Int.read(_data);
                let file = await index_js_1.TLObject.read(_data);
                return new Raw.messages.SentEncryptedFile({ date: date, file: file });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.date !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.date));
                }
                if (this.file !== undefined) {
                    b.write(this.file.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SentEncryptedFile = SentEncryptedFile;
        class StickersNotModified extends index_js_1.TLObject {
            constructor() {
                super();
                this.classType = 'types';
                this.className = 'messages.StickersNotModified';
                this.constructorId = 0xf1749a22;
                this.subclassOfId = 0xd73bb9de;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.messages.StickersNotModified();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.StickersNotModified = StickersNotModified;
        class Stickers extends index_js_1.TLObject {
            hash;
            stickers;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.Stickers';
                this.constructorId = 0x30a6ec7e;
                this.subclassOfId = 0xd73bb9de;
                this._slots = ['hash', 'stickers'];
                this.hash = params.hash;
                this.stickers = params.stickers;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Long.read(_data);
                let stickers = await index_js_1.TLObject.read(_data);
                return new Raw.messages.Stickers({ hash: hash, stickers: stickers });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                if (this.stickers) {
                    b.write(index_js_1.Primitive.Vector.write(this.stickers));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.Stickers = Stickers;
        class AllStickersNotModified extends index_js_1.TLObject {
            constructor() {
                super();
                this.classType = 'types';
                this.className = 'messages.AllStickersNotModified';
                this.constructorId = 0xe86602c3;
                this.subclassOfId = 0x45834829;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.messages.AllStickersNotModified();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.AllStickersNotModified = AllStickersNotModified;
        class AllStickers extends index_js_1.TLObject {
            hash;
            sets;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.AllStickers';
                this.constructorId = 0xcdbbcebb;
                this.subclassOfId = 0x45834829;
                this._slots = ['hash', 'sets'];
                this.hash = params.hash;
                this.sets = params.sets;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Long.read(_data);
                let sets = await index_js_1.TLObject.read(_data);
                return new Raw.messages.AllStickers({ hash: hash, sets: sets });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                if (this.sets) {
                    b.write(index_js_1.Primitive.Vector.write(this.sets));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.AllStickers = AllStickers;
        class AffectedMessages extends index_js_1.TLObject {
            pts;
            ptsCount;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.AffectedMessages';
                this.constructorId = 0x84d19185;
                this.subclassOfId = 0xced3c06e;
                this._slots = ['pts', 'ptsCount'];
                this.pts = params.pts;
                this.ptsCount = params.ptsCount;
            }
            static async read(_data, ..._args) {
                let pts = await index_js_1.Primitive.Int.read(_data);
                let ptsCount = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.AffectedMessages({ pts: pts, ptsCount: ptsCount });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.pts !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.pts));
                }
                if (this.ptsCount !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.ptsCount));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.AffectedMessages = AffectedMessages;
        class StickerSet extends index_js_1.TLObject {
            set;
            packs;
            keywords;
            documents;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.StickerSet';
                this.constructorId = 0x6e153f16;
                this.subclassOfId = 0x9b704a5a;
                this._slots = ['set', 'packs', 'keywords', 'documents'];
                this.set = params.set;
                this.packs = params.packs;
                this.keywords = params.keywords;
                this.documents = params.documents;
            }
            static async read(_data, ..._args) {
                let set = await index_js_1.TLObject.read(_data);
                let packs = await index_js_1.TLObject.read(_data);
                let keywords = await index_js_1.TLObject.read(_data);
                let documents = await index_js_1.TLObject.read(_data);
                return new Raw.messages.StickerSet({
                    set: set,
                    packs: packs,
                    keywords: keywords,
                    documents: documents,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.set !== undefined) {
                    b.write(this.set.write());
                }
                if (this.packs) {
                    b.write(index_js_1.Primitive.Vector.write(this.packs));
                }
                if (this.keywords) {
                    b.write(index_js_1.Primitive.Vector.write(this.keywords));
                }
                if (this.documents) {
                    b.write(index_js_1.Primitive.Vector.write(this.documents));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.StickerSet = StickerSet;
        class StickerSetNotModified extends index_js_1.TLObject {
            constructor() {
                super();
                this.classType = 'types';
                this.className = 'messages.StickerSetNotModified';
                this.constructorId = 0xd3f924eb;
                this.subclassOfId = 0x9b704a5a;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.messages.StickerSetNotModified();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.StickerSetNotModified = StickerSetNotModified;
        class SavedGifsNotModified extends index_js_1.TLObject {
            constructor() {
                super();
                this.classType = 'types';
                this.className = 'messages.SavedGifsNotModified';
                this.constructorId = 0xe8025ca2;
                this.subclassOfId = 0xa68b61f5;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.messages.SavedGifsNotModified();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SavedGifsNotModified = SavedGifsNotModified;
        class SavedGifs extends index_js_1.TLObject {
            hash;
            gifs;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.SavedGifs';
                this.constructorId = 0x84a02a0d;
                this.subclassOfId = 0xa68b61f5;
                this._slots = ['hash', 'gifs'];
                this.hash = params.hash;
                this.gifs = params.gifs;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Long.read(_data);
                let gifs = await index_js_1.TLObject.read(_data);
                return new Raw.messages.SavedGifs({ hash: hash, gifs: gifs });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                if (this.gifs) {
                    b.write(index_js_1.Primitive.Vector.write(this.gifs));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SavedGifs = SavedGifs;
        class BotResults extends index_js_1.TLObject {
            gallery;
            queryId;
            nextOffset;
            switchPm;
            switchWebview;
            results;
            cacheTime;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.BotResults';
                this.constructorId = 0xe021f2f6;
                this.subclassOfId = 0x3ed4d9c9;
                this._slots = [
                    'gallery',
                    'queryId',
                    'nextOffset',
                    'switchPm',
                    'switchWebview',
                    'results',
                    'cacheTime',
                    'users',
                ];
                this.gallery = params.gallery;
                this.queryId = params.queryId;
                this.nextOffset = params.nextOffset;
                this.switchPm = params.switchPm;
                this.switchWebview = params.switchWebview;
                this.results = params.results;
                this.cacheTime = params.cacheTime;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let gallery = flags & (1 << 0) ? true : false;
                let queryId = await index_js_1.Primitive.Long.read(_data);
                let nextOffset = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let switchPm = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
                let switchWebview = flags & (1 << 3) ? await index_js_1.TLObject.read(_data) : undefined;
                let results = await index_js_1.TLObject.read(_data);
                let cacheTime = await index_js_1.Primitive.Int.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.messages.BotResults({
                    gallery: gallery,
                    queryId: queryId,
                    nextOffset: nextOffset,
                    switchPm: switchPm,
                    switchWebview: switchWebview,
                    results: results,
                    cacheTime: cacheTime,
                    users: users,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.gallery ? 1 << 0 : 0;
                flags |= this.nextOffset !== undefined ? 1 << 1 : 0;
                flags |= this.switchPm !== undefined ? 1 << 2 : 0;
                flags |= this.switchWebview !== undefined ? 1 << 3 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.queryId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.queryId));
                }
                if (this.nextOffset !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.nextOffset));
                }
                if (this.switchPm !== undefined) {
                    b.write(this.switchPm.write());
                }
                if (this.switchWebview !== undefined) {
                    b.write(this.switchWebview.write());
                }
                if (this.results) {
                    b.write(index_js_1.Primitive.Vector.write(this.results));
                }
                if (this.cacheTime !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.cacheTime));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.BotResults = BotResults;
        class BotCallbackAnswer extends index_js_1.TLObject {
            alert;
            hasUrl;
            nativeUi;
            message;
            url;
            cacheTime;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.BotCallbackAnswer';
                this.constructorId = 0x36585ea4;
                this.subclassOfId = 0x6c4dd18c;
                this._slots = ['alert', 'hasUrl', 'nativeUi', 'message', 'url', 'cacheTime'];
                this.alert = params.alert;
                this.hasUrl = params.hasUrl;
                this.nativeUi = params.nativeUi;
                this.message = params.message;
                this.url = params.url;
                this.cacheTime = params.cacheTime;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let alert = flags & (1 << 1) ? true : false;
                let hasUrl = flags & (1 << 3) ? true : false;
                let nativeUi = flags & (1 << 4) ? true : false;
                let message = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let url = flags & (1 << 2) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let cacheTime = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.BotCallbackAnswer({
                    alert: alert,
                    hasUrl: hasUrl,
                    nativeUi: nativeUi,
                    message: message,
                    url: url,
                    cacheTime: cacheTime,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.alert ? 1 << 1 : 0;
                flags |= this.hasUrl ? 1 << 3 : 0;
                flags |= this.nativeUi ? 1 << 4 : 0;
                flags |= this.message !== undefined ? 1 << 0 : 0;
                flags |= this.url !== undefined ? 1 << 2 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.message !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.message));
                }
                if (this.url !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.url));
                }
                if (this.cacheTime !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.cacheTime));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.BotCallbackAnswer = BotCallbackAnswer;
        class MessageEditData extends index_js_1.TLObject {
            caption;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.MessageEditData';
                this.constructorId = 0x26b5dde6;
                this.subclassOfId = 0xfb47949d;
                this._slots = ['caption'];
                this.caption = params.caption;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let caption = flags & (1 << 0) ? true : false;
                return new Raw.messages.MessageEditData({ caption: caption });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.caption ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.MessageEditData = MessageEditData;
        class PeerDialogs extends index_js_1.TLObject {
            dialogs;
            messages;
            chats;
            users;
            state;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.PeerDialogs';
                this.constructorId = 0x3371c354;
                this.subclassOfId = 0x3ac70132;
                this._slots = ['dialogs', 'messages', 'chats', 'users', 'state'];
                this.dialogs = params.dialogs;
                this.messages = params.messages;
                this.chats = params.chats;
                this.users = params.users;
                this.state = params.state;
            }
            static async read(_data, ..._args) {
                let dialogs = await index_js_1.TLObject.read(_data);
                let messages = await index_js_1.TLObject.read(_data);
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                let state = await index_js_1.TLObject.read(_data);
                return new Raw.messages.PeerDialogs({
                    dialogs: dialogs,
                    messages: messages,
                    chats: chats,
                    users: users,
                    state: state,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.dialogs) {
                    b.write(index_js_1.Primitive.Vector.write(this.dialogs));
                }
                if (this.messages) {
                    b.write(index_js_1.Primitive.Vector.write(this.messages));
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                if (this.state !== undefined) {
                    b.write(this.state.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.PeerDialogs = PeerDialogs;
        class FeaturedStickersNotModified extends index_js_1.TLObject {
            count;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.FeaturedStickersNotModified';
                this.constructorId = 0xc6dc0c66;
                this.subclassOfId = 0x2614b722;
                this._slots = ['count'];
                this.count = params.count;
            }
            static async read(_data, ..._args) {
                let count = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.FeaturedStickersNotModified({ count: count });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.count !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.count));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.FeaturedStickersNotModified = FeaturedStickersNotModified;
        class FeaturedStickers extends index_js_1.TLObject {
            premium;
            hash;
            count;
            sets;
            unread;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.FeaturedStickers';
                this.constructorId = 0xbe382906;
                this.subclassOfId = 0x2614b722;
                this._slots = ['premium', 'hash', 'count', 'sets', 'unread'];
                this.premium = params.premium;
                this.hash = params.hash;
                this.count = params.count;
                this.sets = params.sets;
                this.unread = params.unread;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let premium = flags & (1 << 0) ? true : false;
                let hash = await index_js_1.Primitive.Long.read(_data);
                let count = await index_js_1.Primitive.Int.read(_data);
                let sets = await index_js_1.TLObject.read(_data);
                let unread = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Long);
                return new Raw.messages.FeaturedStickers({
                    premium: premium,
                    hash: hash,
                    count: count,
                    sets: sets,
                    unread: unread,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.premium ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                if (this.count !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.count));
                }
                if (this.sets) {
                    b.write(index_js_1.Primitive.Vector.write(this.sets));
                }
                if (this.unread) {
                    b.write(index_js_1.Primitive.Vector.write(this.unread, index_js_1.Primitive.Long));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.FeaturedStickers = FeaturedStickers;
        class RecentStickersNotModified extends index_js_1.TLObject {
            constructor() {
                super();
                this.classType = 'types';
                this.className = 'messages.RecentStickersNotModified';
                this.constructorId = 0xb17f890;
                this.subclassOfId = 0xf76f8683;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.messages.RecentStickersNotModified();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.RecentStickersNotModified = RecentStickersNotModified;
        class RecentStickers extends index_js_1.TLObject {
            hash;
            packs;
            stickers;
            dates;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.RecentStickers';
                this.constructorId = 0x88d37c56;
                this.subclassOfId = 0xf76f8683;
                this._slots = ['hash', 'packs', 'stickers', 'dates'];
                this.hash = params.hash;
                this.packs = params.packs;
                this.stickers = params.stickers;
                this.dates = params.dates;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Long.read(_data);
                let packs = await index_js_1.TLObject.read(_data);
                let stickers = await index_js_1.TLObject.read(_data);
                let dates = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int);
                return new Raw.messages.RecentStickers({
                    hash: hash,
                    packs: packs,
                    stickers: stickers,
                    dates: dates,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                if (this.packs) {
                    b.write(index_js_1.Primitive.Vector.write(this.packs));
                }
                if (this.stickers) {
                    b.write(index_js_1.Primitive.Vector.write(this.stickers));
                }
                if (this.dates) {
                    b.write(index_js_1.Primitive.Vector.write(this.dates, index_js_1.Primitive.Int));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.RecentStickers = RecentStickers;
        class ArchivedStickers extends index_js_1.TLObject {
            count;
            sets;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.ArchivedStickers';
                this.constructorId = 0x4fcba9c8;
                this.subclassOfId = 0x7296d771;
                this._slots = ['count', 'sets'];
                this.count = params.count;
                this.sets = params.sets;
            }
            static async read(_data, ..._args) {
                let count = await index_js_1.Primitive.Int.read(_data);
                let sets = await index_js_1.TLObject.read(_data);
                return new Raw.messages.ArchivedStickers({ count: count, sets: sets });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.count !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.count));
                }
                if (this.sets) {
                    b.write(index_js_1.Primitive.Vector.write(this.sets));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.ArchivedStickers = ArchivedStickers;
        class StickerSetInstallResultSuccess extends index_js_1.TLObject {
            constructor() {
                super();
                this.classType = 'types';
                this.className = 'messages.StickerSetInstallResultSuccess';
                this.constructorId = 0x38641628;
                this.subclassOfId = 0x67cb3fe8;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.messages.StickerSetInstallResultSuccess();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.StickerSetInstallResultSuccess = StickerSetInstallResultSuccess;
        class StickerSetInstallResultArchive extends index_js_1.TLObject {
            sets;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.StickerSetInstallResultArchive';
                this.constructorId = 0x35e410a8;
                this.subclassOfId = 0x67cb3fe8;
                this._slots = ['sets'];
                this.sets = params.sets;
            }
            static async read(_data, ..._args) {
                let sets = await index_js_1.TLObject.read(_data);
                return new Raw.messages.StickerSetInstallResultArchive({ sets: sets });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.sets) {
                    b.write(index_js_1.Primitive.Vector.write(this.sets));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.StickerSetInstallResultArchive = StickerSetInstallResultArchive;
        class HighScores extends index_js_1.TLObject {
            scores;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.HighScores';
                this.constructorId = 0x9a3bfd99;
                this.subclassOfId = 0x6ccd95fd;
                this._slots = ['scores', 'users'];
                this.scores = params.scores;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let scores = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.messages.HighScores({ scores: scores, users: users });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.scores) {
                    b.write(index_js_1.Primitive.Vector.write(this.scores));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.HighScores = HighScores;
        class FavedStickersNotModified extends index_js_1.TLObject {
            constructor() {
                super();
                this.classType = 'types';
                this.className = 'messages.FavedStickersNotModified';
                this.constructorId = 0x9e8fa6d3;
                this.subclassOfId = 0x8e736fb9;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.messages.FavedStickersNotModified();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.FavedStickersNotModified = FavedStickersNotModified;
        class FavedStickers extends index_js_1.TLObject {
            hash;
            packs;
            stickers;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.FavedStickers';
                this.constructorId = 0x2cb51097;
                this.subclassOfId = 0x8e736fb9;
                this._slots = ['hash', 'packs', 'stickers'];
                this.hash = params.hash;
                this.packs = params.packs;
                this.stickers = params.stickers;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Long.read(_data);
                let packs = await index_js_1.TLObject.read(_data);
                let stickers = await index_js_1.TLObject.read(_data);
                return new Raw.messages.FavedStickers({ hash: hash, packs: packs, stickers: stickers });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                if (this.packs) {
                    b.write(index_js_1.Primitive.Vector.write(this.packs));
                }
                if (this.stickers) {
                    b.write(index_js_1.Primitive.Vector.write(this.stickers));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.FavedStickers = FavedStickers;
        class FoundStickerSetsNotModified extends index_js_1.TLObject {
            constructor() {
                super();
                this.classType = 'types';
                this.className = 'messages.FoundStickerSetsNotModified';
                this.constructorId = 0xd54b65d;
                this.subclassOfId = 0x40df361;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.messages.FoundStickerSetsNotModified();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.FoundStickerSetsNotModified = FoundStickerSetsNotModified;
        class FoundStickerSets extends index_js_1.TLObject {
            hash;
            sets;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.FoundStickerSets';
                this.constructorId = 0x8af09dd2;
                this.subclassOfId = 0x40df361;
                this._slots = ['hash', 'sets'];
                this.hash = params.hash;
                this.sets = params.sets;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Long.read(_data);
                let sets = await index_js_1.TLObject.read(_data);
                return new Raw.messages.FoundStickerSets({ hash: hash, sets: sets });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                if (this.sets) {
                    b.write(index_js_1.Primitive.Vector.write(this.sets));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.FoundStickerSets = FoundStickerSets;
        class SearchCounter extends index_js_1.TLObject {
            inexact;
            filter;
            count;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.SearchCounter';
                this.constructorId = 0xe844ebff;
                this.subclassOfId = 0xd6a7bfa2;
                this._slots = ['inexact', 'filter', 'count'];
                this.inexact = params.inexact;
                this.filter = params.filter;
                this.count = params.count;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let inexact = flags & (1 << 1) ? true : false;
                let filter = await index_js_1.TLObject.read(_data);
                let count = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.SearchCounter({ inexact: inexact, filter: filter, count: count });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.inexact ? 1 << 1 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.filter !== undefined) {
                    b.write(this.filter.write());
                }
                if (this.count !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.count));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SearchCounter = SearchCounter;
        class InactiveChats extends index_js_1.TLObject {
            dates;
            chats;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.InactiveChats';
                this.constructorId = 0xa927fec5;
                this.subclassOfId = 0x8bf3d7d4;
                this._slots = ['dates', 'chats', 'users'];
                this.dates = params.dates;
                this.chats = params.chats;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let dates = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int);
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.messages.InactiveChats({ dates: dates, chats: chats, users: users });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.dates) {
                    b.write(index_js_1.Primitive.Vector.write(this.dates, index_js_1.Primitive.Int));
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.InactiveChats = InactiveChats;
        class VotesList extends index_js_1.TLObject {
            count;
            votes;
            chats;
            users;
            nextOffset;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.VotesList';
                this.constructorId = 0x4899484e;
                this.subclassOfId = 0xc2199885;
                this._slots = ['count', 'votes', 'chats', 'users', 'nextOffset'];
                this.count = params.count;
                this.votes = params.votes;
                this.chats = params.chats;
                this.users = params.users;
                this.nextOffset = params.nextOffset;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let count = await index_js_1.Primitive.Int.read(_data);
                let votes = await index_js_1.TLObject.read(_data);
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                let nextOffset = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
                return new Raw.messages.VotesList({
                    count: count,
                    votes: votes,
                    chats: chats,
                    users: users,
                    nextOffset: nextOffset,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.nextOffset !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.count !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.count));
                }
                if (this.votes) {
                    b.write(index_js_1.Primitive.Vector.write(this.votes));
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                if (this.nextOffset !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.nextOffset));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.VotesList = VotesList;
        class MessageViews extends index_js_1.TLObject {
            views;
            chats;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.MessageViews';
                this.constructorId = 0xb6c4f543;
                this.subclassOfId = 0xafb5eb9c;
                this._slots = ['views', 'chats', 'users'];
                this.views = params.views;
                this.chats = params.chats;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let views = await index_js_1.TLObject.read(_data);
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.messages.MessageViews({ views: views, chats: chats, users: users });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.views) {
                    b.write(index_js_1.Primitive.Vector.write(this.views));
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.MessageViews = MessageViews;
        class DiscussionMessage extends index_js_1.TLObject {
            messages;
            maxId;
            readInboxMaxId;
            readOutboxMaxId;
            unreadCount;
            chats;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.DiscussionMessage';
                this.constructorId = 0xa6341782;
                this.subclassOfId = 0x53f8e3e8;
                this._slots = [
                    'messages',
                    'maxId',
                    'readInboxMaxId',
                    'readOutboxMaxId',
                    'unreadCount',
                    'chats',
                    'users',
                ];
                this.messages = params.messages;
                this.maxId = params.maxId;
                this.readInboxMaxId = params.readInboxMaxId;
                this.readOutboxMaxId = params.readOutboxMaxId;
                this.unreadCount = params.unreadCount;
                this.chats = params.chats;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let messages = await index_js_1.TLObject.read(_data);
                let maxId = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let readInboxMaxId = flags & (1 << 1) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let readOutboxMaxId = flags & (1 << 2) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let unreadCount = await index_js_1.Primitive.Int.read(_data);
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.messages.DiscussionMessage({
                    messages: messages,
                    maxId: maxId,
                    readInboxMaxId: readInboxMaxId,
                    readOutboxMaxId: readOutboxMaxId,
                    unreadCount: unreadCount,
                    chats: chats,
                    users: users,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.maxId !== undefined ? 1 << 0 : 0;
                flags |= this.readInboxMaxId !== undefined ? 1 << 1 : 0;
                flags |= this.readOutboxMaxId !== undefined ? 1 << 2 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.messages) {
                    b.write(index_js_1.Primitive.Vector.write(this.messages));
                }
                if (this.maxId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.maxId));
                }
                if (this.readInboxMaxId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.readInboxMaxId));
                }
                if (this.readOutboxMaxId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.readOutboxMaxId));
                }
                if (this.unreadCount !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.unreadCount));
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.DiscussionMessage = DiscussionMessage;
        class HistoryImport extends index_js_1.TLObject {
            id;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.HistoryImport';
                this.constructorId = 0x1662af0b;
                this.subclassOfId = 0xb18bb50a;
                this._slots = ['id'];
                this.id = params.id;
            }
            static async read(_data, ..._args) {
                let id = await index_js_1.Primitive.Long.read(_data);
                return new Raw.messages.HistoryImport({ id: id });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.id !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.id));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.HistoryImport = HistoryImport;
        class HistoryImportParsed extends index_js_1.TLObject {
            pm;
            group;
            title;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.HistoryImportParsed';
                this.constructorId = 0x5e0fb7b9;
                this.subclassOfId = 0x5bb2720b;
                this._slots = ['pm', 'group', 'title'];
                this.pm = params.pm;
                this.group = params.group;
                this.title = params.title;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let pm = flags & (1 << 0) ? true : false;
                let group = flags & (1 << 1) ? true : false;
                let title = flags & (1 << 2) ? await index_js_1.Primitive.String.read(_data) : undefined;
                return new Raw.messages.HistoryImportParsed({ pm: pm, group: group, title: title });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.pm ? 1 << 0 : 0;
                flags |= this.group ? 1 << 1 : 0;
                flags |= this.title !== undefined ? 1 << 2 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.title !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.title));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.HistoryImportParsed = HistoryImportParsed;
        class AffectedFoundMessages extends index_js_1.TLObject {
            pts;
            ptsCount;
            offset;
            messages;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.AffectedFoundMessages';
                this.constructorId = 0xef8d3e6c;
                this.subclassOfId = 0xf817652e;
                this._slots = ['pts', 'ptsCount', 'offset', 'messages'];
                this.pts = params.pts;
                this.ptsCount = params.ptsCount;
                this.offset = params.offset;
                this.messages = params.messages;
            }
            static async read(_data, ..._args) {
                let pts = await index_js_1.Primitive.Int.read(_data);
                let ptsCount = await index_js_1.Primitive.Int.read(_data);
                let offset = await index_js_1.Primitive.Int.read(_data);
                let messages = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int);
                return new Raw.messages.AffectedFoundMessages({
                    pts: pts,
                    ptsCount: ptsCount,
                    offset: offset,
                    messages: messages,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.pts !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.pts));
                }
                if (this.ptsCount !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.ptsCount));
                }
                if (this.offset !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.offset));
                }
                if (this.messages) {
                    b.write(index_js_1.Primitive.Vector.write(this.messages, index_js_1.Primitive.Int));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.AffectedFoundMessages = AffectedFoundMessages;
        class ExportedChatInvites extends index_js_1.TLObject {
            count;
            invites;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.ExportedChatInvites';
                this.constructorId = 0xbdc62dcc;
                this.subclassOfId = 0x603d3871;
                this._slots = ['count', 'invites', 'users'];
                this.count = params.count;
                this.invites = params.invites;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let count = await index_js_1.Primitive.Int.read(_data);
                let invites = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.messages.ExportedChatInvites({
                    count: count,
                    invites: invites,
                    users: users,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.count !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.count));
                }
                if (this.invites) {
                    b.write(index_js_1.Primitive.Vector.write(this.invites));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.ExportedChatInvites = ExportedChatInvites;
        class ExportedChatInvite extends index_js_1.TLObject {
            invite;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.ExportedChatInvite';
                this.constructorId = 0x1871be50;
                this.subclassOfId = 0x82dcd4ca;
                this._slots = ['invite', 'users'];
                this.invite = params.invite;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let invite = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.messages.ExportedChatInvite({ invite: invite, users: users });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.invite !== undefined) {
                    b.write(this.invite.write());
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.ExportedChatInvite = ExportedChatInvite;
        class ExportedChatInviteReplaced extends index_js_1.TLObject {
            invite;
            newInvite;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.ExportedChatInviteReplaced';
                this.constructorId = 0x222600ef;
                this.subclassOfId = 0x82dcd4ca;
                this._slots = ['invite', 'newInvite', 'users'];
                this.invite = params.invite;
                this.newInvite = params.newInvite;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let invite = await index_js_1.TLObject.read(_data);
                let newInvite = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.messages.ExportedChatInviteReplaced({
                    invite: invite,
                    newInvite: newInvite,
                    users: users,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.invite !== undefined) {
                    b.write(this.invite.write());
                }
                if (this.newInvite !== undefined) {
                    b.write(this.newInvite.write());
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.ExportedChatInviteReplaced = ExportedChatInviteReplaced;
        class ChatInviteImporters extends index_js_1.TLObject {
            count;
            importers;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.ChatInviteImporters';
                this.constructorId = 0x81b6b00a;
                this.subclassOfId = 0xd9bc8aa6;
                this._slots = ['count', 'importers', 'users'];
                this.count = params.count;
                this.importers = params.importers;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let count = await index_js_1.Primitive.Int.read(_data);
                let importers = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.messages.ChatInviteImporters({
                    count: count,
                    importers: importers,
                    users: users,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.count !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.count));
                }
                if (this.importers) {
                    b.write(index_js_1.Primitive.Vector.write(this.importers));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.ChatInviteImporters = ChatInviteImporters;
        class ChatAdminsWithInvites extends index_js_1.TLObject {
            admins;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.ChatAdminsWithInvites';
                this.constructorId = 0xb69b72d7;
                this.subclassOfId = 0x8f5bad2b;
                this._slots = ['admins', 'users'];
                this.admins = params.admins;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let admins = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.messages.ChatAdminsWithInvites({ admins: admins, users: users });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.admins) {
                    b.write(index_js_1.Primitive.Vector.write(this.admins));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.ChatAdminsWithInvites = ChatAdminsWithInvites;
        class CheckedHistoryImportPeer extends index_js_1.TLObject {
            confirmText;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.CheckedHistoryImportPeer';
                this.constructorId = 0xa24de717;
                this.subclassOfId = 0xb84bb337;
                this._slots = ['confirmText'];
                this.confirmText = params.confirmText;
            }
            static async read(_data, ..._args) {
                let confirmText = await index_js_1.Primitive.String.read(_data);
                return new Raw.messages.CheckedHistoryImportPeer({ confirmText: confirmText });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.confirmText !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.confirmText));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.CheckedHistoryImportPeer = CheckedHistoryImportPeer;
        class SponsoredMessages extends index_js_1.TLObject {
            postsBetween;
            messages;
            chats;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.SponsoredMessages';
                this.constructorId = 0xc9ee1d87;
                this.subclassOfId = 0x7f4169e0;
                this._slots = ['postsBetween', 'messages', 'chats', 'users'];
                this.postsBetween = params.postsBetween;
                this.messages = params.messages;
                this.chats = params.chats;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let postsBetween = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let messages = await index_js_1.TLObject.read(_data);
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.messages.SponsoredMessages({
                    postsBetween: postsBetween,
                    messages: messages,
                    chats: chats,
                    users: users,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.postsBetween !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.postsBetween !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.postsBetween));
                }
                if (this.messages) {
                    b.write(index_js_1.Primitive.Vector.write(this.messages));
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SponsoredMessages = SponsoredMessages;
        class SponsoredMessagesEmpty extends index_js_1.TLObject {
            constructor() {
                super();
                this.classType = 'types';
                this.className = 'messages.SponsoredMessagesEmpty';
                this.constructorId = 0x1839490f;
                this.subclassOfId = 0x7f4169e0;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.messages.SponsoredMessagesEmpty();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SponsoredMessagesEmpty = SponsoredMessagesEmpty;
        class SearchResultsCalendar extends index_js_1.TLObject {
            inexact;
            count;
            minDate;
            minMsgId;
            offsetIdOffset;
            periods;
            messages;
            chats;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.SearchResultsCalendar';
                this.constructorId = 0x147ee23c;
                this.subclassOfId = 0x92c5640f;
                this._slots = [
                    'inexact',
                    'count',
                    'minDate',
                    'minMsgId',
                    'offsetIdOffset',
                    'periods',
                    'messages',
                    'chats',
                    'users',
                ];
                this.inexact = params.inexact;
                this.count = params.count;
                this.minDate = params.minDate;
                this.minMsgId = params.minMsgId;
                this.offsetIdOffset = params.offsetIdOffset;
                this.periods = params.periods;
                this.messages = params.messages;
                this.chats = params.chats;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let inexact = flags & (1 << 0) ? true : false;
                let count = await index_js_1.Primitive.Int.read(_data);
                let minDate = await index_js_1.Primitive.Int.read(_data);
                let minMsgId = await index_js_1.Primitive.Int.read(_data);
                let offsetIdOffset = flags & (1 << 1) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let periods = await index_js_1.TLObject.read(_data);
                let messages = await index_js_1.TLObject.read(_data);
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.messages.SearchResultsCalendar({
                    inexact: inexact,
                    count: count,
                    minDate: minDate,
                    minMsgId: minMsgId,
                    offsetIdOffset: offsetIdOffset,
                    periods: periods,
                    messages: messages,
                    chats: chats,
                    users: users,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.inexact ? 1 << 0 : 0;
                flags |= this.offsetIdOffset !== undefined ? 1 << 1 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.count !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.count));
                }
                if (this.minDate !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.minDate));
                }
                if (this.minMsgId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.minMsgId));
                }
                if (this.offsetIdOffset !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.offsetIdOffset));
                }
                if (this.periods) {
                    b.write(index_js_1.Primitive.Vector.write(this.periods));
                }
                if (this.messages) {
                    b.write(index_js_1.Primitive.Vector.write(this.messages));
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SearchResultsCalendar = SearchResultsCalendar;
        class SearchResultsPositions extends index_js_1.TLObject {
            count;
            positions;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.SearchResultsPositions';
                this.constructorId = 0x53b22baf;
                this.subclassOfId = 0xd963708d;
                this._slots = ['count', 'positions'];
                this.count = params.count;
                this.positions = params.positions;
            }
            static async read(_data, ..._args) {
                let count = await index_js_1.Primitive.Int.read(_data);
                let positions = await index_js_1.TLObject.read(_data);
                return new Raw.messages.SearchResultsPositions({ count: count, positions: positions });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.count !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.count));
                }
                if (this.positions) {
                    b.write(index_js_1.Primitive.Vector.write(this.positions));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SearchResultsPositions = SearchResultsPositions;
        class PeerSettings extends index_js_1.TLObject {
            settings;
            chats;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.PeerSettings';
                this.constructorId = 0x6880b94d;
                this.subclassOfId = 0x65a2f7a1;
                this._slots = ['settings', 'chats', 'users'];
                this.settings = params.settings;
                this.chats = params.chats;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let settings = await index_js_1.TLObject.read(_data);
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.messages.PeerSettings({ settings: settings, chats: chats, users: users });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.settings !== undefined) {
                    b.write(this.settings.write());
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.PeerSettings = PeerSettings;
        class MessageReactionsList extends index_js_1.TLObject {
            count;
            reactions;
            chats;
            users;
            nextOffset;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.MessageReactionsList';
                this.constructorId = 0x31bd492d;
                this.subclassOfId = 0x60fce5e6;
                this._slots = ['count', 'reactions', 'chats', 'users', 'nextOffset'];
                this.count = params.count;
                this.reactions = params.reactions;
                this.chats = params.chats;
                this.users = params.users;
                this.nextOffset = params.nextOffset;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let count = await index_js_1.Primitive.Int.read(_data);
                let reactions = await index_js_1.TLObject.read(_data);
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                let nextOffset = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
                return new Raw.messages.MessageReactionsList({
                    count: count,
                    reactions: reactions,
                    chats: chats,
                    users: users,
                    nextOffset: nextOffset,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.nextOffset !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.count !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.count));
                }
                if (this.reactions) {
                    b.write(index_js_1.Primitive.Vector.write(this.reactions));
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                if (this.nextOffset !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.nextOffset));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.MessageReactionsList = MessageReactionsList;
        class AvailableReactionsNotModified extends index_js_1.TLObject {
            constructor() {
                super();
                this.classType = 'types';
                this.className = 'messages.AvailableReactionsNotModified';
                this.constructorId = 0x9f071957;
                this.subclassOfId = 0xe426ad82;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.messages.AvailableReactionsNotModified();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.AvailableReactionsNotModified = AvailableReactionsNotModified;
        class AvailableReactions extends index_js_1.TLObject {
            hash;
            reactions;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.AvailableReactions';
                this.constructorId = 0x768e3aad;
                this.subclassOfId = 0xe426ad82;
                this._slots = ['hash', 'reactions'];
                this.hash = params.hash;
                this.reactions = params.reactions;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Int.read(_data);
                let reactions = await index_js_1.TLObject.read(_data);
                return new Raw.messages.AvailableReactions({ hash: hash, reactions: reactions });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.hash));
                }
                if (this.reactions) {
                    b.write(index_js_1.Primitive.Vector.write(this.reactions));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.AvailableReactions = AvailableReactions;
        class TranscribedAudio extends index_js_1.TLObject {
            pending;
            transcriptionId;
            text;
            trialRemainsNum;
            trialRemainsUntilDate;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.TranscribedAudio';
                this.constructorId = 0xcfb9d957;
                this.subclassOfId = 0x21b24936;
                this._slots = [
                    'pending',
                    'transcriptionId',
                    'text',
                    'trialRemainsNum',
                    'trialRemainsUntilDate',
                ];
                this.pending = params.pending;
                this.transcriptionId = params.transcriptionId;
                this.text = params.text;
                this.trialRemainsNum = params.trialRemainsNum;
                this.trialRemainsUntilDate = params.trialRemainsUntilDate;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let pending = flags & (1 << 0) ? true : false;
                let transcriptionId = await index_js_1.Primitive.Long.read(_data);
                let text = await index_js_1.Primitive.String.read(_data);
                let trialRemainsNum = flags & (1 << 1) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let trialRemainsUntilDate = flags & (1 << 1) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                return new Raw.messages.TranscribedAudio({
                    pending: pending,
                    transcriptionId: transcriptionId,
                    text: text,
                    trialRemainsNum: trialRemainsNum,
                    trialRemainsUntilDate: trialRemainsUntilDate,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.pending ? 1 << 0 : 0;
                flags |= this.trialRemainsNum !== undefined ? 1 << 1 : 0;
                flags |= this.trialRemainsUntilDate !== undefined ? 1 << 1 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.transcriptionId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.transcriptionId));
                }
                if (this.text !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.text));
                }
                if (this.trialRemainsNum !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.trialRemainsNum));
                }
                if (this.trialRemainsUntilDate !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.trialRemainsUntilDate));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.TranscribedAudio = TranscribedAudio;
        class ReactionsNotModified extends index_js_1.TLObject {
            constructor() {
                super();
                this.classType = 'types';
                this.className = 'messages.ReactionsNotModified';
                this.constructorId = 0xb06fdbdf;
                this.subclassOfId = 0xadc38324;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.messages.ReactionsNotModified();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.ReactionsNotModified = ReactionsNotModified;
        class Reactions extends index_js_1.TLObject {
            hash;
            reactions;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.Reactions';
                this.constructorId = 0xeafdf716;
                this.subclassOfId = 0xadc38324;
                this._slots = ['hash', 'reactions'];
                this.hash = params.hash;
                this.reactions = params.reactions;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Long.read(_data);
                let reactions = await index_js_1.TLObject.read(_data);
                return new Raw.messages.Reactions({ hash: hash, reactions: reactions });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                if (this.reactions) {
                    b.write(index_js_1.Primitive.Vector.write(this.reactions));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.Reactions = Reactions;
        class ForumTopics extends index_js_1.TLObject {
            orderByCreateDate;
            count;
            topics;
            messages;
            chats;
            users;
            pts;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.ForumTopics';
                this.constructorId = 0x367617d3;
                this.subclassOfId = 0x8e1d3e1e;
                this._slots = ['orderByCreateDate', 'count', 'topics', 'messages', 'chats', 'users', 'pts'];
                this.orderByCreateDate = params.orderByCreateDate;
                this.count = params.count;
                this.topics = params.topics;
                this.messages = params.messages;
                this.chats = params.chats;
                this.users = params.users;
                this.pts = params.pts;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let orderByCreateDate = flags & (1 << 0) ? true : false;
                let count = await index_js_1.Primitive.Int.read(_data);
                let topics = await index_js_1.TLObject.read(_data);
                let messages = await index_js_1.TLObject.read(_data);
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                let pts = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.ForumTopics({
                    orderByCreateDate: orderByCreateDate,
                    count: count,
                    topics: topics,
                    messages: messages,
                    chats: chats,
                    users: users,
                    pts: pts,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.orderByCreateDate ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.count !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.count));
                }
                if (this.topics) {
                    b.write(index_js_1.Primitive.Vector.write(this.topics));
                }
                if (this.messages) {
                    b.write(index_js_1.Primitive.Vector.write(this.messages));
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                if (this.pts !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.pts));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.ForumTopics = ForumTopics;
        class EmojiGroupsNotModified extends index_js_1.TLObject {
            constructor() {
                super();
                this.classType = 'types';
                this.className = 'messages.EmojiGroupsNotModified';
                this.constructorId = 0x6fb4ad87;
                this.subclassOfId = 0x7eca55d9;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.messages.EmojiGroupsNotModified();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.EmojiGroupsNotModified = EmojiGroupsNotModified;
        class EmojiGroups extends index_js_1.TLObject {
            hash;
            groups;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.EmojiGroups';
                this.constructorId = 0x881fb94b;
                this.subclassOfId = 0x7eca55d9;
                this._slots = ['hash', 'groups'];
                this.hash = params.hash;
                this.groups = params.groups;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Int.read(_data);
                let groups = await index_js_1.TLObject.read(_data);
                return new Raw.messages.EmojiGroups({ hash: hash, groups: groups });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.hash));
                }
                if (this.groups) {
                    b.write(index_js_1.Primitive.Vector.write(this.groups));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.EmojiGroups = EmojiGroups;
        class TranslateResult extends index_js_1.TLObject {
            result;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.TranslateResult';
                this.constructorId = 0x33db32f8;
                this.subclassOfId = 0x24243e8;
                this._slots = ['result'];
                this.result = params.result;
            }
            static async read(_data, ..._args) {
                let result = await index_js_1.TLObject.read(_data);
                return new Raw.messages.TranslateResult({ result: result });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.result) {
                    b.write(index_js_1.Primitive.Vector.write(this.result));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.TranslateResult = TranslateResult;
        class BotApp extends index_js_1.TLObject {
            inactive;
            requestWriteAccess;
            hasSettings;
            app;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.BotApp';
                this.constructorId = 0xeb50adf5;
                this.subclassOfId = 0x8f7243a7;
                this._slots = ['inactive', 'requestWriteAccess', 'hasSettings', 'app'];
                this.inactive = params.inactive;
                this.requestWriteAccess = params.requestWriteAccess;
                this.hasSettings = params.hasSettings;
                this.app = params.app;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let inactive = flags & (1 << 0) ? true : false;
                let requestWriteAccess = flags & (1 << 1) ? true : false;
                let hasSettings = flags & (1 << 2) ? true : false;
                let app = await index_js_1.TLObject.read(_data);
                return new Raw.messages.BotApp({
                    inactive: inactive,
                    requestWriteAccess: requestWriteAccess,
                    hasSettings: hasSettings,
                    app: app,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.inactive ? 1 << 0 : 0;
                flags |= this.requestWriteAccess ? 1 << 1 : 0;
                flags |= this.hasSettings ? 1 << 2 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.app !== undefined) {
                    b.write(this.app.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.BotApp = BotApp;
        class WebPage extends index_js_1.TLObject {
            webpage;
            chats;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.WebPage';
                this.constructorId = 0xfd5e12bd;
                this.subclassOfId = 0x2cf8b154;
                this._slots = ['webpage', 'chats', 'users'];
                this.webpage = params.webpage;
                this.chats = params.chats;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let webpage = await index_js_1.TLObject.read(_data);
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.messages.WebPage({ webpage: webpage, chats: chats, users: users });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.webpage !== undefined) {
                    b.write(this.webpage.write());
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.WebPage = WebPage;
        class SavedDialogs extends index_js_1.TLObject {
            dialogs;
            messages;
            chats;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.SavedDialogs';
                this.constructorId = 0xf83ae221;
                this.subclassOfId = 0x614bb87e;
                this._slots = ['dialogs', 'messages', 'chats', 'users'];
                this.dialogs = params.dialogs;
                this.messages = params.messages;
                this.chats = params.chats;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let dialogs = await index_js_1.TLObject.read(_data);
                let messages = await index_js_1.TLObject.read(_data);
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.messages.SavedDialogs({
                    dialogs: dialogs,
                    messages: messages,
                    chats: chats,
                    users: users,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.dialogs) {
                    b.write(index_js_1.Primitive.Vector.write(this.dialogs));
                }
                if (this.messages) {
                    b.write(index_js_1.Primitive.Vector.write(this.messages));
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SavedDialogs = SavedDialogs;
        class SavedDialogsSlice extends index_js_1.TLObject {
            count;
            dialogs;
            messages;
            chats;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.SavedDialogsSlice';
                this.constructorId = 0x44ba9dd9;
                this.subclassOfId = 0x614bb87e;
                this._slots = ['count', 'dialogs', 'messages', 'chats', 'users'];
                this.count = params.count;
                this.dialogs = params.dialogs;
                this.messages = params.messages;
                this.chats = params.chats;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let count = await index_js_1.Primitive.Int.read(_data);
                let dialogs = await index_js_1.TLObject.read(_data);
                let messages = await index_js_1.TLObject.read(_data);
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.messages.SavedDialogsSlice({
                    count: count,
                    dialogs: dialogs,
                    messages: messages,
                    chats: chats,
                    users: users,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.count !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.count));
                }
                if (this.dialogs) {
                    b.write(index_js_1.Primitive.Vector.write(this.dialogs));
                }
                if (this.messages) {
                    b.write(index_js_1.Primitive.Vector.write(this.messages));
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SavedDialogsSlice = SavedDialogsSlice;
        class SavedDialogsNotModified extends index_js_1.TLObject {
            count;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.SavedDialogsNotModified';
                this.constructorId = 0xc01f6fe8;
                this.subclassOfId = 0x614bb87e;
                this._slots = ['count'];
                this.count = params.count;
            }
            static async read(_data, ..._args) {
                let count = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.SavedDialogsNotModified({ count: count });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.count !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.count));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SavedDialogsNotModified = SavedDialogsNotModified;
        class SavedReactionTagsNotModified extends index_js_1.TLObject {
            constructor() {
                super();
                this.classType = 'types';
                this.className = 'messages.SavedReactionTagsNotModified';
                this.constructorId = 0x889b59ef;
                this.subclassOfId = 0xa39b5be3;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.messages.SavedReactionTagsNotModified();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SavedReactionTagsNotModified = SavedReactionTagsNotModified;
        class SavedReactionTags extends index_js_1.TLObject {
            tags;
            hash;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.SavedReactionTags';
                this.constructorId = 0x3259950a;
                this.subclassOfId = 0xa39b5be3;
                this._slots = ['tags', 'hash'];
                this.tags = params.tags;
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let tags = await index_js_1.TLObject.read(_data);
                let hash = await index_js_1.Primitive.Long.read(_data);
                return new Raw.messages.SavedReactionTags({ tags: tags, hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.tags) {
                    b.write(index_js_1.Primitive.Vector.write(this.tags));
                }
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SavedReactionTags = SavedReactionTags;
        class QuickReplies extends index_js_1.TLObject {
            quickReplies;
            messages;
            chats;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.QuickReplies';
                this.constructorId = 0xc68d6695;
                this.subclassOfId = 0xf737e966;
                this._slots = ['quickReplies', 'messages', 'chats', 'users'];
                this.quickReplies = params.quickReplies;
                this.messages = params.messages;
                this.chats = params.chats;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let quickReplies = await index_js_1.TLObject.read(_data);
                let messages = await index_js_1.TLObject.read(_data);
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.messages.QuickReplies({
                    quickReplies: quickReplies,
                    messages: messages,
                    chats: chats,
                    users: users,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.quickReplies) {
                    b.write(index_js_1.Primitive.Vector.write(this.quickReplies));
                }
                if (this.messages) {
                    b.write(index_js_1.Primitive.Vector.write(this.messages));
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.QuickReplies = QuickReplies;
        class QuickRepliesNotModified extends index_js_1.TLObject {
            constructor() {
                super();
                this.classType = 'types';
                this.className = 'messages.QuickRepliesNotModified';
                this.constructorId = 0x5f91eb5b;
                this.subclassOfId = 0xf737e966;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.messages.QuickRepliesNotModified();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.QuickRepliesNotModified = QuickRepliesNotModified;
        class DialogFilters extends index_js_1.TLObject {
            tagsEnabled;
            filters;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.DialogFilters';
                this.constructorId = 0x2ad93719;
                this.subclassOfId = 0xa5fff1b7;
                this._slots = ['tagsEnabled', 'filters'];
                this.tagsEnabled = params.tagsEnabled;
                this.filters = params.filters;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let tagsEnabled = flags & (1 << 0) ? true : false;
                let filters = await index_js_1.TLObject.read(_data);
                return new Raw.messages.DialogFilters({ tagsEnabled: tagsEnabled, filters: filters });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.tagsEnabled ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.filters) {
                    b.write(index_js_1.Primitive.Vector.write(this.filters));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.DialogFilters = DialogFilters;
        class MyStickers extends index_js_1.TLObject {
            count;
            sets;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.MyStickers';
                this.constructorId = 0xfaff629d;
                this.subclassOfId = 0xb1b4350a;
                this._slots = ['count', 'sets'];
                this.count = params.count;
                this.sets = params.sets;
            }
            static async read(_data, ..._args) {
                let count = await index_js_1.Primitive.Int.read(_data);
                let sets = await index_js_1.TLObject.read(_data);
                return new Raw.messages.MyStickers({ count: count, sets: sets });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.count !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.count));
                }
                if (this.sets) {
                    b.write(index_js_1.Primitive.Vector.write(this.sets));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.MyStickers = MyStickers;
        class InvitedUsers extends index_js_1.TLObject {
            updates;
            missingInvitees;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.InvitedUsers';
                this.constructorId = 0x7f5defa6;
                this.subclassOfId = 0x3dbe90a1;
                this._slots = ['updates', 'missingInvitees'];
                this.updates = params.updates;
                this.missingInvitees = params.missingInvitees;
            }
            static async read(_data, ..._args) {
                let updates = await index_js_1.TLObject.read(_data);
                let missingInvitees = await index_js_1.TLObject.read(_data);
                return new Raw.messages.InvitedUsers({
                    updates: updates,
                    missingInvitees: missingInvitees,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.updates !== undefined) {
                    b.write(this.updates.write());
                }
                if (this.missingInvitees) {
                    b.write(index_js_1.Primitive.Vector.write(this.missingInvitees));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.InvitedUsers = InvitedUsers;
        class AvailableEffectsNotModified extends index_js_1.TLObject {
            constructor() {
                super();
                this.classType = 'types';
                this.className = 'messages.AvailableEffectsNotModified';
                this.constructorId = 0xd1ed9a5b;
                this.subclassOfId = 0x4470d5bd;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.messages.AvailableEffectsNotModified();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.AvailableEffectsNotModified = AvailableEffectsNotModified;
        class AvailableEffects extends index_js_1.TLObject {
            hash;
            effects;
            documents;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'messages.AvailableEffects';
                this.constructorId = 0xbddb616e;
                this.subclassOfId = 0x4470d5bd;
                this._slots = ['hash', 'effects', 'documents'];
                this.hash = params.hash;
                this.effects = params.effects;
                this.documents = params.documents;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Int.read(_data);
                let effects = await index_js_1.TLObject.read(_data);
                let documents = await index_js_1.TLObject.read(_data);
                return new Raw.messages.AvailableEffects({
                    hash: hash,
                    effects: effects,
                    documents: documents,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.hash));
                }
                if (this.effects) {
                    b.write(index_js_1.Primitive.Vector.write(this.effects));
                }
                if (this.documents) {
                    b.write(index_js_1.Primitive.Vector.write(this.documents));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.AvailableEffects = AvailableEffects;
        class GetMessages extends index_js_1.TLObject {
            __response__;
            id;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetMessages';
                this.constructorId = 0x63c66506;
                this.subclassOfId = 0xd4b40b5e;
                this._slots = ['id'];
                this.id = params.id;
            }
            static async read(_data, ..._args) {
                let id = await index_js_1.TLObject.read(_data);
                return new Raw.messages.GetMessages({ id: id });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.id) {
                    b.write(index_js_1.Primitive.Vector.write(this.id));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetMessages = GetMessages;
        class GetDialogs extends index_js_1.TLObject {
            __response__;
            excludePinned;
            folderId;
            offsetDate;
            offsetId;
            offsetPeer;
            limit;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetDialogs';
                this.constructorId = 0xa0f4cb4f;
                this.subclassOfId = 0xe1b52ee;
                this._slots = [
                    'excludePinned',
                    'folderId',
                    'offsetDate',
                    'offsetId',
                    'offsetPeer',
                    'limit',
                    'hash',
                ];
                this.excludePinned = params.excludePinned;
                this.folderId = params.folderId;
                this.offsetDate = params.offsetDate;
                this.offsetId = params.offsetId;
                this.offsetPeer = params.offsetPeer;
                this.limit = params.limit;
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let excludePinned = flags & (1 << 0) ? true : false;
                let folderId = flags & (1 << 1) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let offsetDate = await index_js_1.Primitive.Int.read(_data);
                let offsetId = await index_js_1.Primitive.Int.read(_data);
                let offsetPeer = await index_js_1.TLObject.read(_data);
                let limit = await index_js_1.Primitive.Int.read(_data);
                let hash = await index_js_1.Primitive.Long.read(_data);
                return new Raw.messages.GetDialogs({
                    excludePinned: excludePinned,
                    folderId: folderId,
                    offsetDate: offsetDate,
                    offsetId: offsetId,
                    offsetPeer: offsetPeer,
                    limit: limit,
                    hash: hash,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.excludePinned ? 1 << 0 : 0;
                flags |= this.folderId !== undefined ? 1 << 1 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.folderId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.folderId));
                }
                if (this.offsetDate !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.offsetDate));
                }
                if (this.offsetId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.offsetId));
                }
                if (this.offsetPeer !== undefined) {
                    b.write(this.offsetPeer.write());
                }
                if (this.limit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.limit));
                }
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetDialogs = GetDialogs;
        class GetHistory extends index_js_1.TLObject {
            __response__;
            peer;
            offsetId;
            offsetDate;
            addOffset;
            limit;
            maxId;
            minId;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetHistory';
                this.constructorId = 0x4423e6c5;
                this.subclassOfId = 0xd4b40b5e;
                this._slots = [
                    'peer',
                    'offsetId',
                    'offsetDate',
                    'addOffset',
                    'limit',
                    'maxId',
                    'minId',
                    'hash',
                ];
                this.peer = params.peer;
                this.offsetId = params.offsetId;
                this.offsetDate = params.offsetDate;
                this.addOffset = params.addOffset;
                this.limit = params.limit;
                this.maxId = params.maxId;
                this.minId = params.minId;
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let offsetId = await index_js_1.Primitive.Int.read(_data);
                let offsetDate = await index_js_1.Primitive.Int.read(_data);
                let addOffset = await index_js_1.Primitive.Int.read(_data);
                let limit = await index_js_1.Primitive.Int.read(_data);
                let maxId = await index_js_1.Primitive.Int.read(_data);
                let minId = await index_js_1.Primitive.Int.read(_data);
                let hash = await index_js_1.Primitive.Long.read(_data);
                return new Raw.messages.GetHistory({
                    peer: peer,
                    offsetId: offsetId,
                    offsetDate: offsetDate,
                    addOffset: addOffset,
                    limit: limit,
                    maxId: maxId,
                    minId: minId,
                    hash: hash,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.offsetId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.offsetId));
                }
                if (this.offsetDate !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.offsetDate));
                }
                if (this.addOffset !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.addOffset));
                }
                if (this.limit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.limit));
                }
                if (this.maxId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.maxId));
                }
                if (this.minId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.minId));
                }
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetHistory = GetHistory;
        class Search extends index_js_1.TLObject {
            __response__;
            peer;
            q;
            fromId;
            savedPeerId;
            savedReaction;
            topMsgId;
            filter;
            minDate;
            maxDate;
            offsetId;
            addOffset;
            limit;
            maxId;
            minId;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.Search';
                this.constructorId = 0x29ee847a;
                this.subclassOfId = 0xd4b40b5e;
                this._slots = [
                    'peer',
                    'q',
                    'fromId',
                    'savedPeerId',
                    'savedReaction',
                    'topMsgId',
                    'filter',
                    'minDate',
                    'maxDate',
                    'offsetId',
                    'addOffset',
                    'limit',
                    'maxId',
                    'minId',
                    'hash',
                ];
                this.peer = params.peer;
                this.q = params.q;
                this.fromId = params.fromId;
                this.savedPeerId = params.savedPeerId;
                this.savedReaction = params.savedReaction;
                this.topMsgId = params.topMsgId;
                this.filter = params.filter;
                this.minDate = params.minDate;
                this.maxDate = params.maxDate;
                this.offsetId = params.offsetId;
                this.addOffset = params.addOffset;
                this.limit = params.limit;
                this.maxId = params.maxId;
                this.minId = params.minId;
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let peer = await index_js_1.TLObject.read(_data);
                let q = await index_js_1.Primitive.String.read(_data);
                let fromId = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
                let savedPeerId = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
                let savedReaction = flags & (1 << 3) ? await index_js_1.TLObject.read(_data) : [];
                let topMsgId = flags & (1 << 1) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let filter = await index_js_1.TLObject.read(_data);
                let minDate = await index_js_1.Primitive.Int.read(_data);
                let maxDate = await index_js_1.Primitive.Int.read(_data);
                let offsetId = await index_js_1.Primitive.Int.read(_data);
                let addOffset = await index_js_1.Primitive.Int.read(_data);
                let limit = await index_js_1.Primitive.Int.read(_data);
                let maxId = await index_js_1.Primitive.Int.read(_data);
                let minId = await index_js_1.Primitive.Int.read(_data);
                let hash = await index_js_1.Primitive.Long.read(_data);
                return new Raw.messages.Search({
                    peer: peer,
                    q: q,
                    fromId: fromId,
                    savedPeerId: savedPeerId,
                    savedReaction: savedReaction,
                    topMsgId: topMsgId,
                    filter: filter,
                    minDate: minDate,
                    maxDate: maxDate,
                    offsetId: offsetId,
                    addOffset: addOffset,
                    limit: limit,
                    maxId: maxId,
                    minId: minId,
                    hash: hash,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.fromId !== undefined ? 1 << 0 : 0;
                flags |= this.savedPeerId !== undefined ? 1 << 2 : 0;
                flags |= this.savedReaction ? 1 << 3 : 0;
                flags |= this.topMsgId !== undefined ? 1 << 1 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.q !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.q));
                }
                if (this.fromId !== undefined) {
                    b.write(this.fromId.write());
                }
                if (this.savedPeerId !== undefined) {
                    b.write(this.savedPeerId.write());
                }
                if (this.savedReaction) {
                    b.write(index_js_1.Primitive.Vector.write(this.savedReaction));
                }
                if (this.topMsgId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.topMsgId));
                }
                if (this.filter !== undefined) {
                    b.write(this.filter.write());
                }
                if (this.minDate !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.minDate));
                }
                if (this.maxDate !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.maxDate));
                }
                if (this.offsetId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.offsetId));
                }
                if (this.addOffset !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.addOffset));
                }
                if (this.limit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.limit));
                }
                if (this.maxId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.maxId));
                }
                if (this.minId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.minId));
                }
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.Search = Search;
        class ReadHistory extends index_js_1.TLObject {
            __response__;
            peer;
            maxId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.ReadHistory';
                this.constructorId = 0xe306d3a;
                this.subclassOfId = 0xced3c06e;
                this._slots = ['peer', 'maxId'];
                this.peer = params.peer;
                this.maxId = params.maxId;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let maxId = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.ReadHistory({ peer: peer, maxId: maxId });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.maxId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.maxId));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.ReadHistory = ReadHistory;
        class DeleteHistory extends index_js_1.TLObject {
            __response__;
            justClear;
            revoke;
            peer;
            maxId;
            minDate;
            maxDate;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.DeleteHistory';
                this.constructorId = 0xb08f922a;
                this.subclassOfId = 0x2c49c116;
                this._slots = ['justClear', 'revoke', 'peer', 'maxId', 'minDate', 'maxDate'];
                this.justClear = params.justClear;
                this.revoke = params.revoke;
                this.peer = params.peer;
                this.maxId = params.maxId;
                this.minDate = params.minDate;
                this.maxDate = params.maxDate;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let justClear = flags & (1 << 0) ? true : false;
                let revoke = flags & (1 << 1) ? true : false;
                let peer = await index_js_1.TLObject.read(_data);
                let maxId = await index_js_1.Primitive.Int.read(_data);
                let minDate = flags & (1 << 2) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let maxDate = flags & (1 << 3) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                return new Raw.messages.DeleteHistory({
                    justClear: justClear,
                    revoke: revoke,
                    peer: peer,
                    maxId: maxId,
                    minDate: minDate,
                    maxDate: maxDate,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.justClear ? 1 << 0 : 0;
                flags |= this.revoke ? 1 << 1 : 0;
                flags |= this.minDate !== undefined ? 1 << 2 : 0;
                flags |= this.maxDate !== undefined ? 1 << 3 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.maxId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.maxId));
                }
                if (this.minDate !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.minDate));
                }
                if (this.maxDate !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.maxDate));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.DeleteHistory = DeleteHistory;
        class DeleteMessages extends index_js_1.TLObject {
            __response__;
            revoke;
            id;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.DeleteMessages';
                this.constructorId = 0xe58e95d2;
                this.subclassOfId = 0xced3c06e;
                this._slots = ['revoke', 'id'];
                this.revoke = params.revoke;
                this.id = params.id;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let revoke = flags & (1 << 0) ? true : false;
                let id = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int);
                return new Raw.messages.DeleteMessages({ revoke: revoke, id: id });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.revoke ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.id) {
                    b.write(index_js_1.Primitive.Vector.write(this.id, index_js_1.Primitive.Int));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.DeleteMessages = DeleteMessages;
        class ReceivedMessages extends index_js_1.TLObject {
            __response__;
            maxId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.ReceivedMessages';
                this.constructorId = 0x5a954c0;
                this.subclassOfId = 0x8565f897;
                this._slots = ['maxId'];
                this.maxId = params.maxId;
            }
            static async read(_data, ..._args) {
                let maxId = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.ReceivedMessages({ maxId: maxId });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.maxId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.maxId));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.ReceivedMessages = ReceivedMessages;
        class SetTyping extends index_js_1.TLObject {
            __response__;
            peer;
            topMsgId;
            action;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.SetTyping';
                this.constructorId = 0x58943ee2;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['peer', 'topMsgId', 'action'];
                this.peer = params.peer;
                this.topMsgId = params.topMsgId;
                this.action = params.action;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let peer = await index_js_1.TLObject.read(_data);
                let topMsgId = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let action = await index_js_1.TLObject.read(_data);
                return new Raw.messages.SetTyping({ peer: peer, topMsgId: topMsgId, action: action });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.topMsgId !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.topMsgId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.topMsgId));
                }
                if (this.action !== undefined) {
                    b.write(this.action.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SetTyping = SetTyping;
        class SendMessage extends index_js_1.TLObject {
            __response__;
            noWebpage;
            silent;
            background;
            clearDraft;
            noforwards;
            updateStickersetsOrder;
            invertMedia;
            peer;
            replyTo;
            message;
            randomId;
            replyMarkup;
            entities;
            scheduleDate;
            sendAs;
            quickReplyShortcut;
            effect;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.SendMessage';
                this.constructorId = 0x983f9745;
                this.subclassOfId = 0x8af52aac;
                this._slots = [
                    'noWebpage',
                    'silent',
                    'background',
                    'clearDraft',
                    'noforwards',
                    'updateStickersetsOrder',
                    'invertMedia',
                    'peer',
                    'replyTo',
                    'message',
                    'randomId',
                    'replyMarkup',
                    'entities',
                    'scheduleDate',
                    'sendAs',
                    'quickReplyShortcut',
                    'effect',
                ];
                this.noWebpage = params.noWebpage;
                this.silent = params.silent;
                this.background = params.background;
                this.clearDraft = params.clearDraft;
                this.noforwards = params.noforwards;
                this.updateStickersetsOrder = params.updateStickersetsOrder;
                this.invertMedia = params.invertMedia;
                this.peer = params.peer;
                this.replyTo = params.replyTo;
                this.message = params.message;
                this.randomId = params.randomId;
                this.replyMarkup = params.replyMarkup;
                this.entities = params.entities;
                this.scheduleDate = params.scheduleDate;
                this.sendAs = params.sendAs;
                this.quickReplyShortcut = params.quickReplyShortcut;
                this.effect = params.effect;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let noWebpage = flags & (1 << 1) ? true : false;
                let silent = flags & (1 << 5) ? true : false;
                let background = flags & (1 << 6) ? true : false;
                let clearDraft = flags & (1 << 7) ? true : false;
                let noforwards = flags & (1 << 14) ? true : false;
                let updateStickersetsOrder = flags & (1 << 15) ? true : false;
                let invertMedia = flags & (1 << 16) ? true : false;
                let peer = await index_js_1.TLObject.read(_data);
                let replyTo = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
                let message = await index_js_1.Primitive.String.read(_data);
                let randomId = await index_js_1.Primitive.Long.read(_data);
                let replyMarkup = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
                let entities = flags & (1 << 3) ? await index_js_1.TLObject.read(_data) : [];
                let scheduleDate = flags & (1 << 10) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let sendAs = flags & (1 << 13) ? await index_js_1.TLObject.read(_data) : undefined;
                let quickReplyShortcut = flags & (1 << 17) ? await index_js_1.TLObject.read(_data) : undefined;
                let effect = flags & (1 << 18) ? await index_js_1.Primitive.Long.read(_data) : undefined;
                return new Raw.messages.SendMessage({
                    noWebpage: noWebpage,
                    silent: silent,
                    background: background,
                    clearDraft: clearDraft,
                    noforwards: noforwards,
                    updateStickersetsOrder: updateStickersetsOrder,
                    invertMedia: invertMedia,
                    peer: peer,
                    replyTo: replyTo,
                    message: message,
                    randomId: randomId,
                    replyMarkup: replyMarkup,
                    entities: entities,
                    scheduleDate: scheduleDate,
                    sendAs: sendAs,
                    quickReplyShortcut: quickReplyShortcut,
                    effect: effect,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.noWebpage ? 1 << 1 : 0;
                flags |= this.silent ? 1 << 5 : 0;
                flags |= this.background ? 1 << 6 : 0;
                flags |= this.clearDraft ? 1 << 7 : 0;
                flags |= this.noforwards ? 1 << 14 : 0;
                flags |= this.updateStickersetsOrder ? 1 << 15 : 0;
                flags |= this.invertMedia ? 1 << 16 : 0;
                flags |= this.replyTo !== undefined ? 1 << 0 : 0;
                flags |= this.replyMarkup !== undefined ? 1 << 2 : 0;
                flags |= this.entities ? 1 << 3 : 0;
                flags |= this.scheduleDate !== undefined ? 1 << 10 : 0;
                flags |= this.sendAs !== undefined ? 1 << 13 : 0;
                flags |= this.quickReplyShortcut !== undefined ? 1 << 17 : 0;
                flags |= this.effect !== undefined ? 1 << 18 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.replyTo !== undefined) {
                    b.write(this.replyTo.write());
                }
                if (this.message !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.message));
                }
                if (this.randomId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.randomId));
                }
                if (this.replyMarkup !== undefined) {
                    b.write(this.replyMarkup.write());
                }
                if (this.entities) {
                    b.write(index_js_1.Primitive.Vector.write(this.entities));
                }
                if (this.scheduleDate !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.scheduleDate));
                }
                if (this.sendAs !== undefined) {
                    b.write(this.sendAs.write());
                }
                if (this.quickReplyShortcut !== undefined) {
                    b.write(this.quickReplyShortcut.write());
                }
                if (this.effect !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.effect));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SendMessage = SendMessage;
        class SendMedia extends index_js_1.TLObject {
            __response__;
            silent;
            background;
            clearDraft;
            noforwards;
            updateStickersetsOrder;
            invertMedia;
            peer;
            replyTo;
            media;
            message;
            randomId;
            replyMarkup;
            entities;
            scheduleDate;
            sendAs;
            quickReplyShortcut;
            effect;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.SendMedia';
                this.constructorId = 0x7852834e;
                this.subclassOfId = 0x8af52aac;
                this._slots = [
                    'silent',
                    'background',
                    'clearDraft',
                    'noforwards',
                    'updateStickersetsOrder',
                    'invertMedia',
                    'peer',
                    'replyTo',
                    'media',
                    'message',
                    'randomId',
                    'replyMarkup',
                    'entities',
                    'scheduleDate',
                    'sendAs',
                    'quickReplyShortcut',
                    'effect',
                ];
                this.silent = params.silent;
                this.background = params.background;
                this.clearDraft = params.clearDraft;
                this.noforwards = params.noforwards;
                this.updateStickersetsOrder = params.updateStickersetsOrder;
                this.invertMedia = params.invertMedia;
                this.peer = params.peer;
                this.replyTo = params.replyTo;
                this.media = params.media;
                this.message = params.message;
                this.randomId = params.randomId;
                this.replyMarkup = params.replyMarkup;
                this.entities = params.entities;
                this.scheduleDate = params.scheduleDate;
                this.sendAs = params.sendAs;
                this.quickReplyShortcut = params.quickReplyShortcut;
                this.effect = params.effect;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let silent = flags & (1 << 5) ? true : false;
                let background = flags & (1 << 6) ? true : false;
                let clearDraft = flags & (1 << 7) ? true : false;
                let noforwards = flags & (1 << 14) ? true : false;
                let updateStickersetsOrder = flags & (1 << 15) ? true : false;
                let invertMedia = flags & (1 << 16) ? true : false;
                let peer = await index_js_1.TLObject.read(_data);
                let replyTo = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
                let media = await index_js_1.TLObject.read(_data);
                let message = await index_js_1.Primitive.String.read(_data);
                let randomId = await index_js_1.Primitive.Long.read(_data);
                let replyMarkup = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
                let entities = flags & (1 << 3) ? await index_js_1.TLObject.read(_data) : [];
                let scheduleDate = flags & (1 << 10) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let sendAs = flags & (1 << 13) ? await index_js_1.TLObject.read(_data) : undefined;
                let quickReplyShortcut = flags & (1 << 17) ? await index_js_1.TLObject.read(_data) : undefined;
                let effect = flags & (1 << 18) ? await index_js_1.Primitive.Long.read(_data) : undefined;
                return new Raw.messages.SendMedia({
                    silent: silent,
                    background: background,
                    clearDraft: clearDraft,
                    noforwards: noforwards,
                    updateStickersetsOrder: updateStickersetsOrder,
                    invertMedia: invertMedia,
                    peer: peer,
                    replyTo: replyTo,
                    media: media,
                    message: message,
                    randomId: randomId,
                    replyMarkup: replyMarkup,
                    entities: entities,
                    scheduleDate: scheduleDate,
                    sendAs: sendAs,
                    quickReplyShortcut: quickReplyShortcut,
                    effect: effect,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.silent ? 1 << 5 : 0;
                flags |= this.background ? 1 << 6 : 0;
                flags |= this.clearDraft ? 1 << 7 : 0;
                flags |= this.noforwards ? 1 << 14 : 0;
                flags |= this.updateStickersetsOrder ? 1 << 15 : 0;
                flags |= this.invertMedia ? 1 << 16 : 0;
                flags |= this.replyTo !== undefined ? 1 << 0 : 0;
                flags |= this.replyMarkup !== undefined ? 1 << 2 : 0;
                flags |= this.entities ? 1 << 3 : 0;
                flags |= this.scheduleDate !== undefined ? 1 << 10 : 0;
                flags |= this.sendAs !== undefined ? 1 << 13 : 0;
                flags |= this.quickReplyShortcut !== undefined ? 1 << 17 : 0;
                flags |= this.effect !== undefined ? 1 << 18 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.replyTo !== undefined) {
                    b.write(this.replyTo.write());
                }
                if (this.media !== undefined) {
                    b.write(this.media.write());
                }
                if (this.message !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.message));
                }
                if (this.randomId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.randomId));
                }
                if (this.replyMarkup !== undefined) {
                    b.write(this.replyMarkup.write());
                }
                if (this.entities) {
                    b.write(index_js_1.Primitive.Vector.write(this.entities));
                }
                if (this.scheduleDate !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.scheduleDate));
                }
                if (this.sendAs !== undefined) {
                    b.write(this.sendAs.write());
                }
                if (this.quickReplyShortcut !== undefined) {
                    b.write(this.quickReplyShortcut.write());
                }
                if (this.effect !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.effect));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SendMedia = SendMedia;
        class ForwardMessages extends index_js_1.TLObject {
            __response__;
            silent;
            background;
            withMyScore;
            dropAuthor;
            dropMediaCaptions;
            noforwards;
            fromPeer;
            id;
            randomId;
            toPeer;
            topMsgId;
            scheduleDate;
            sendAs;
            quickReplyShortcut;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.ForwardMessages';
                this.constructorId = 0xd5039208;
                this.subclassOfId = 0x8af52aac;
                this._slots = [
                    'silent',
                    'background',
                    'withMyScore',
                    'dropAuthor',
                    'dropMediaCaptions',
                    'noforwards',
                    'fromPeer',
                    'id',
                    'randomId',
                    'toPeer',
                    'topMsgId',
                    'scheduleDate',
                    'sendAs',
                    'quickReplyShortcut',
                ];
                this.silent = params.silent;
                this.background = params.background;
                this.withMyScore = params.withMyScore;
                this.dropAuthor = params.dropAuthor;
                this.dropMediaCaptions = params.dropMediaCaptions;
                this.noforwards = params.noforwards;
                this.fromPeer = params.fromPeer;
                this.id = params.id;
                this.randomId = params.randomId;
                this.toPeer = params.toPeer;
                this.topMsgId = params.topMsgId;
                this.scheduleDate = params.scheduleDate;
                this.sendAs = params.sendAs;
                this.quickReplyShortcut = params.quickReplyShortcut;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let silent = flags & (1 << 5) ? true : false;
                let background = flags & (1 << 6) ? true : false;
                let withMyScore = flags & (1 << 8) ? true : false;
                let dropAuthor = flags & (1 << 11) ? true : false;
                let dropMediaCaptions = flags & (1 << 12) ? true : false;
                let noforwards = flags & (1 << 14) ? true : false;
                let fromPeer = await index_js_1.TLObject.read(_data);
                let id = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int);
                let randomId = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Long);
                let toPeer = await index_js_1.TLObject.read(_data);
                let topMsgId = flags & (1 << 9) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let scheduleDate = flags & (1 << 10) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let sendAs = flags & (1 << 13) ? await index_js_1.TLObject.read(_data) : undefined;
                let quickReplyShortcut = flags & (1 << 17) ? await index_js_1.TLObject.read(_data) : undefined;
                return new Raw.messages.ForwardMessages({
                    silent: silent,
                    background: background,
                    withMyScore: withMyScore,
                    dropAuthor: dropAuthor,
                    dropMediaCaptions: dropMediaCaptions,
                    noforwards: noforwards,
                    fromPeer: fromPeer,
                    id: id,
                    randomId: randomId,
                    toPeer: toPeer,
                    topMsgId: topMsgId,
                    scheduleDate: scheduleDate,
                    sendAs: sendAs,
                    quickReplyShortcut: quickReplyShortcut,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.silent ? 1 << 5 : 0;
                flags |= this.background ? 1 << 6 : 0;
                flags |= this.withMyScore ? 1 << 8 : 0;
                flags |= this.dropAuthor ? 1 << 11 : 0;
                flags |= this.dropMediaCaptions ? 1 << 12 : 0;
                flags |= this.noforwards ? 1 << 14 : 0;
                flags |= this.topMsgId !== undefined ? 1 << 9 : 0;
                flags |= this.scheduleDate !== undefined ? 1 << 10 : 0;
                flags |= this.sendAs !== undefined ? 1 << 13 : 0;
                flags |= this.quickReplyShortcut !== undefined ? 1 << 17 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.fromPeer !== undefined) {
                    b.write(this.fromPeer.write());
                }
                if (this.id) {
                    b.write(index_js_1.Primitive.Vector.write(this.id, index_js_1.Primitive.Int));
                }
                if (this.randomId) {
                    b.write(index_js_1.Primitive.Vector.write(this.randomId, index_js_1.Primitive.Long));
                }
                if (this.toPeer !== undefined) {
                    b.write(this.toPeer.write());
                }
                if (this.topMsgId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.topMsgId));
                }
                if (this.scheduleDate !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.scheduleDate));
                }
                if (this.sendAs !== undefined) {
                    b.write(this.sendAs.write());
                }
                if (this.quickReplyShortcut !== undefined) {
                    b.write(this.quickReplyShortcut.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.ForwardMessages = ForwardMessages;
        class ReportSpam extends index_js_1.TLObject {
            __response__;
            peer;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.ReportSpam';
                this.constructorId = 0xcf1592db;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['peer'];
                this.peer = params.peer;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                return new Raw.messages.ReportSpam({ peer: peer });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.ReportSpam = ReportSpam;
        class GetPeerSettings extends index_js_1.TLObject {
            __response__;
            peer;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetPeerSettings';
                this.constructorId = 0xefd9a6a2;
                this.subclassOfId = 0x65a2f7a1;
                this._slots = ['peer'];
                this.peer = params.peer;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                return new Raw.messages.GetPeerSettings({ peer: peer });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetPeerSettings = GetPeerSettings;
        class Report extends index_js_1.TLObject {
            __response__;
            peer;
            id;
            reason;
            message;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.Report';
                this.constructorId = 0x8953ab4e;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['peer', 'id', 'reason', 'message'];
                this.peer = params.peer;
                this.id = params.id;
                this.reason = params.reason;
                this.message = params.message;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let id = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int);
                let reason = await index_js_1.TLObject.read(_data);
                let message = await index_js_1.Primitive.String.read(_data);
                return new Raw.messages.Report({ peer: peer, id: id, reason: reason, message: message });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.id) {
                    b.write(index_js_1.Primitive.Vector.write(this.id, index_js_1.Primitive.Int));
                }
                if (this.reason !== undefined) {
                    b.write(this.reason.write());
                }
                if (this.message !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.message));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.Report = Report;
        class GetChats extends index_js_1.TLObject {
            __response__;
            id;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetChats';
                this.constructorId = 0x49e9528f;
                this.subclassOfId = 0x99d5cb14;
                this._slots = ['id'];
                this.id = params.id;
            }
            static async read(_data, ..._args) {
                let id = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Long);
                return new Raw.messages.GetChats({ id: id });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.id) {
                    b.write(index_js_1.Primitive.Vector.write(this.id, index_js_1.Primitive.Long));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetChats = GetChats;
        class GetFullChat extends index_js_1.TLObject {
            __response__;
            chatId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetFullChat';
                this.constructorId = 0xaeb00b34;
                this.subclassOfId = 0x225a5109;
                this._slots = ['chatId'];
                this.chatId = params.chatId;
            }
            static async read(_data, ..._args) {
                let chatId = await index_js_1.Primitive.Long.read(_data);
                return new Raw.messages.GetFullChat({ chatId: chatId });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.chatId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.chatId));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetFullChat = GetFullChat;
        class EditChatTitle extends index_js_1.TLObject {
            __response__;
            chatId;
            title;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.EditChatTitle';
                this.constructorId = 0x73783ffd;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['chatId', 'title'];
                this.chatId = params.chatId;
                this.title = params.title;
            }
            static async read(_data, ..._args) {
                let chatId = await index_js_1.Primitive.Long.read(_data);
                let title = await index_js_1.Primitive.String.read(_data);
                return new Raw.messages.EditChatTitle({ chatId: chatId, title: title });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.chatId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.chatId));
                }
                if (this.title !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.title));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.EditChatTitle = EditChatTitle;
        class EditChatPhoto extends index_js_1.TLObject {
            __response__;
            chatId;
            photo;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.EditChatPhoto';
                this.constructorId = 0x35ddd674;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['chatId', 'photo'];
                this.chatId = params.chatId;
                this.photo = params.photo;
            }
            static async read(_data, ..._args) {
                let chatId = await index_js_1.Primitive.Long.read(_data);
                let photo = await index_js_1.TLObject.read(_data);
                return new Raw.messages.EditChatPhoto({ chatId: chatId, photo: photo });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.chatId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.chatId));
                }
                if (this.photo !== undefined) {
                    b.write(this.photo.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.EditChatPhoto = EditChatPhoto;
        class AddChatUser extends index_js_1.TLObject {
            __response__;
            chatId;
            userId;
            fwdLimit;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.AddChatUser';
                this.constructorId = 0xcbc6d107;
                this.subclassOfId = 0x3dbe90a1;
                this._slots = ['chatId', 'userId', 'fwdLimit'];
                this.chatId = params.chatId;
                this.userId = params.userId;
                this.fwdLimit = params.fwdLimit;
            }
            static async read(_data, ..._args) {
                let chatId = await index_js_1.Primitive.Long.read(_data);
                let userId = await index_js_1.TLObject.read(_data);
                let fwdLimit = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.AddChatUser({ chatId: chatId, userId: userId, fwdLimit: fwdLimit });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.chatId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.chatId));
                }
                if (this.userId !== undefined) {
                    b.write(this.userId.write());
                }
                if (this.fwdLimit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.fwdLimit));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.AddChatUser = AddChatUser;
        class DeleteChatUser extends index_js_1.TLObject {
            __response__;
            revokeHistory;
            chatId;
            userId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.DeleteChatUser';
                this.constructorId = 0xa2185cab;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['revokeHistory', 'chatId', 'userId'];
                this.revokeHistory = params.revokeHistory;
                this.chatId = params.chatId;
                this.userId = params.userId;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let revokeHistory = flags & (1 << 0) ? true : false;
                let chatId = await index_js_1.Primitive.Long.read(_data);
                let userId = await index_js_1.TLObject.read(_data);
                return new Raw.messages.DeleteChatUser({
                    revokeHistory: revokeHistory,
                    chatId: chatId,
                    userId: userId,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.revokeHistory ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.chatId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.chatId));
                }
                if (this.userId !== undefined) {
                    b.write(this.userId.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.DeleteChatUser = DeleteChatUser;
        class CreateChat extends index_js_1.TLObject {
            __response__;
            users;
            title;
            ttlPeriod;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.CreateChat';
                this.constructorId = 0x92ceddd4;
                this.subclassOfId = 0x3dbe90a1;
                this._slots = ['users', 'title', 'ttlPeriod'];
                this.users = params.users;
                this.title = params.title;
                this.ttlPeriod = params.ttlPeriod;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                let title = await index_js_1.Primitive.String.read(_data);
                let ttlPeriod = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                return new Raw.messages.CreateChat({ users: users, title: title, ttlPeriod: ttlPeriod });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.ttlPeriod !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                if (this.title !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.title));
                }
                if (this.ttlPeriod !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.ttlPeriod));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.CreateChat = CreateChat;
        class GetDhConfig extends index_js_1.TLObject {
            __response__;
            version;
            randomLength;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetDhConfig';
                this.constructorId = 0x26cf8950;
                this.subclassOfId = 0xe488ed8b;
                this._slots = ['version', 'randomLength'];
                this.version = params.version;
                this.randomLength = params.randomLength;
            }
            static async read(_data, ..._args) {
                let version = await index_js_1.Primitive.Int.read(_data);
                let randomLength = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.GetDhConfig({ version: version, randomLength: randomLength });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.version !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.version));
                }
                if (this.randomLength !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.randomLength));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetDhConfig = GetDhConfig;
        class RequestEncryption extends index_js_1.TLObject {
            __response__;
            userId;
            randomId;
            gA;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.RequestEncryption';
                this.constructorId = 0xf64daf43;
                this.subclassOfId = 0x6d28a37a;
                this._slots = ['userId', 'randomId', 'gA'];
                this.userId = params.userId;
                this.randomId = params.randomId;
                this.gA = params.gA;
            }
            static async read(_data, ..._args) {
                let userId = await index_js_1.TLObject.read(_data);
                let randomId = await index_js_1.Primitive.Int.read(_data);
                let gA = await index_js_1.Primitive.Bytes.read(_data);
                return new Raw.messages.RequestEncryption({ userId: userId, randomId: randomId, gA: gA });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.userId !== undefined) {
                    b.write(this.userId.write());
                }
                if (this.randomId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.randomId));
                }
                if (this.gA !== undefined) {
                    b.write(index_js_1.Primitive.Bytes.write(this.gA));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.RequestEncryption = RequestEncryption;
        class AcceptEncryption extends index_js_1.TLObject {
            __response__;
            peer;
            gB;
            keyFingerprint;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.AcceptEncryption';
                this.constructorId = 0x3dbc0415;
                this.subclassOfId = 0x6d28a37a;
                this._slots = ['peer', 'gB', 'keyFingerprint'];
                this.peer = params.peer;
                this.gB = params.gB;
                this.keyFingerprint = params.keyFingerprint;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let gB = await index_js_1.Primitive.Bytes.read(_data);
                let keyFingerprint = await index_js_1.Primitive.Long.read(_data);
                return new Raw.messages.AcceptEncryption({
                    peer: peer,
                    gB: gB,
                    keyFingerprint: keyFingerprint,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.gB !== undefined) {
                    b.write(index_js_1.Primitive.Bytes.write(this.gB));
                }
                if (this.keyFingerprint !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.keyFingerprint));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.AcceptEncryption = AcceptEncryption;
        class DiscardEncryption extends index_js_1.TLObject {
            __response__;
            deleteHistory;
            chatId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.DiscardEncryption';
                this.constructorId = 0xf393aea0;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['deleteHistory', 'chatId'];
                this.deleteHistory = params.deleteHistory;
                this.chatId = params.chatId;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let deleteHistory = flags & (1 << 0) ? true : false;
                let chatId = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.DiscardEncryption({ deleteHistory: deleteHistory, chatId: chatId });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.deleteHistory ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.chatId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.chatId));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.DiscardEncryption = DiscardEncryption;
        class SetEncryptedTyping extends index_js_1.TLObject {
            __response__;
            peer;
            typing;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.SetEncryptedTyping';
                this.constructorId = 0x791451ed;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['peer', 'typing'];
                this.peer = params.peer;
                this.typing = params.typing;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let typing = await index_js_1.Primitive.Bool.read(_data);
                return new Raw.messages.SetEncryptedTyping({ peer: peer, typing: typing });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.typing !== undefined) {
                    b.write(index_js_1.Primitive.Bool.write(this.typing));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SetEncryptedTyping = SetEncryptedTyping;
        class ReadEncryptedHistory extends index_js_1.TLObject {
            __response__;
            peer;
            maxDate;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.ReadEncryptedHistory';
                this.constructorId = 0x7f4b690a;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['peer', 'maxDate'];
                this.peer = params.peer;
                this.maxDate = params.maxDate;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let maxDate = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.ReadEncryptedHistory({ peer: peer, maxDate: maxDate });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.maxDate !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.maxDate));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.ReadEncryptedHistory = ReadEncryptedHistory;
        class SendEncrypted extends index_js_1.TLObject {
            __response__;
            silent;
            peer;
            randomId;
            data;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.SendEncrypted';
                this.constructorId = 0x44fa7a15;
                this.subclassOfId = 0xc99e3e50;
                this._slots = ['silent', 'peer', 'randomId', 'data'];
                this.silent = params.silent;
                this.peer = params.peer;
                this.randomId = params.randomId;
                this.data = params.data;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let silent = flags & (1 << 0) ? true : false;
                let peer = await index_js_1.TLObject.read(_data);
                let randomId = await index_js_1.Primitive.Long.read(_data);
                let data = await index_js_1.Primitive.Bytes.read(_data);
                return new Raw.messages.SendEncrypted({
                    silent: silent,
                    peer: peer,
                    randomId: randomId,
                    data: data,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.silent ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.randomId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.randomId));
                }
                if (this.data !== undefined) {
                    b.write(index_js_1.Primitive.Bytes.write(this.data));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SendEncrypted = SendEncrypted;
        class SendEncryptedFile extends index_js_1.TLObject {
            __response__;
            silent;
            peer;
            randomId;
            data;
            file;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.SendEncryptedFile';
                this.constructorId = 0x5559481d;
                this.subclassOfId = 0xc99e3e50;
                this._slots = ['silent', 'peer', 'randomId', 'data', 'file'];
                this.silent = params.silent;
                this.peer = params.peer;
                this.randomId = params.randomId;
                this.data = params.data;
                this.file = params.file;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let silent = flags & (1 << 0) ? true : false;
                let peer = await index_js_1.TLObject.read(_data);
                let randomId = await index_js_1.Primitive.Long.read(_data);
                let data = await index_js_1.Primitive.Bytes.read(_data);
                let file = await index_js_1.TLObject.read(_data);
                return new Raw.messages.SendEncryptedFile({
                    silent: silent,
                    peer: peer,
                    randomId: randomId,
                    data: data,
                    file: file,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.silent ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.randomId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.randomId));
                }
                if (this.data !== undefined) {
                    b.write(index_js_1.Primitive.Bytes.write(this.data));
                }
                if (this.file !== undefined) {
                    b.write(this.file.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SendEncryptedFile = SendEncryptedFile;
        class SendEncryptedService extends index_js_1.TLObject {
            __response__;
            peer;
            randomId;
            data;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.SendEncryptedService';
                this.constructorId = 0x32d439a4;
                this.subclassOfId = 0xc99e3e50;
                this._slots = ['peer', 'randomId', 'data'];
                this.peer = params.peer;
                this.randomId = params.randomId;
                this.data = params.data;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let randomId = await index_js_1.Primitive.Long.read(_data);
                let data = await index_js_1.Primitive.Bytes.read(_data);
                return new Raw.messages.SendEncryptedService({
                    peer: peer,
                    randomId: randomId,
                    data: data,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.randomId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.randomId));
                }
                if (this.data !== undefined) {
                    b.write(index_js_1.Primitive.Bytes.write(this.data));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SendEncryptedService = SendEncryptedService;
        class ReceivedQueue extends index_js_1.TLObject {
            __response__;
            maxQts;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.ReceivedQueue';
                this.constructorId = 0x55a5bb66;
                this.subclassOfId = 0x8918e168;
                this._slots = ['maxQts'];
                this.maxQts = params.maxQts;
            }
            static async read(_data, ..._args) {
                let maxQts = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.ReceivedQueue({ maxQts: maxQts });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.maxQts !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.maxQts));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.ReceivedQueue = ReceivedQueue;
        class ReportEncryptedSpam extends index_js_1.TLObject {
            __response__;
            peer;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.ReportEncryptedSpam';
                this.constructorId = 0x4b0c8c0f;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['peer'];
                this.peer = params.peer;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                return new Raw.messages.ReportEncryptedSpam({ peer: peer });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.ReportEncryptedSpam = ReportEncryptedSpam;
        class ReadMessageContents extends index_js_1.TLObject {
            __response__;
            id;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.ReadMessageContents';
                this.constructorId = 0x36a73f77;
                this.subclassOfId = 0xced3c06e;
                this._slots = ['id'];
                this.id = params.id;
            }
            static async read(_data, ..._args) {
                let id = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int);
                return new Raw.messages.ReadMessageContents({ id: id });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.id) {
                    b.write(index_js_1.Primitive.Vector.write(this.id, index_js_1.Primitive.Int));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.ReadMessageContents = ReadMessageContents;
        class GetStickers extends index_js_1.TLObject {
            __response__;
            emoticon;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetStickers';
                this.constructorId = 0xd5a5d3a1;
                this.subclassOfId = 0xd73bb9de;
                this._slots = ['emoticon', 'hash'];
                this.emoticon = params.emoticon;
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let emoticon = await index_js_1.Primitive.String.read(_data);
                let hash = await index_js_1.Primitive.Long.read(_data);
                return new Raw.messages.GetStickers({ emoticon: emoticon, hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.emoticon !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.emoticon));
                }
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetStickers = GetStickers;
        class GetAllStickers extends index_js_1.TLObject {
            __response__;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetAllStickers';
                this.constructorId = 0xb8a0a1a8;
                this.subclassOfId = 0x45834829;
                this._slots = ['hash'];
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Long.read(_data);
                return new Raw.messages.GetAllStickers({ hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetAllStickers = GetAllStickers;
        class GetWebPagePreview extends index_js_1.TLObject {
            __response__;
            message;
            entities;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetWebPagePreview';
                this.constructorId = 0x8b68b0cc;
                this.subclassOfId = 0x476cbe32;
                this._slots = ['message', 'entities'];
                this.message = params.message;
                this.entities = params.entities;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let message = await index_js_1.Primitive.String.read(_data);
                let entities = flags & (1 << 3) ? await index_js_1.TLObject.read(_data) : [];
                return new Raw.messages.GetWebPagePreview({ message: message, entities: entities });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.entities ? 1 << 3 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.message !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.message));
                }
                if (this.entities) {
                    b.write(index_js_1.Primitive.Vector.write(this.entities));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetWebPagePreview = GetWebPagePreview;
        class ExportChatInvite extends index_js_1.TLObject {
            __response__;
            legacyRevokePermanent;
            requestNeeded;
            peer;
            expireDate;
            usageLimit;
            title;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.ExportChatInvite';
                this.constructorId = 0xa02ce5d5;
                this.subclassOfId = 0xb4748a58;
                this._slots = [
                    'legacyRevokePermanent',
                    'requestNeeded',
                    'peer',
                    'expireDate',
                    'usageLimit',
                    'title',
                ];
                this.legacyRevokePermanent = params.legacyRevokePermanent;
                this.requestNeeded = params.requestNeeded;
                this.peer = params.peer;
                this.expireDate = params.expireDate;
                this.usageLimit = params.usageLimit;
                this.title = params.title;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let legacyRevokePermanent = flags & (1 << 2) ? true : false;
                let requestNeeded = flags & (1 << 3) ? true : false;
                let peer = await index_js_1.TLObject.read(_data);
                let expireDate = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let usageLimit = flags & (1 << 1) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let title = flags & (1 << 4) ? await index_js_1.Primitive.String.read(_data) : undefined;
                return new Raw.messages.ExportChatInvite({
                    legacyRevokePermanent: legacyRevokePermanent,
                    requestNeeded: requestNeeded,
                    peer: peer,
                    expireDate: expireDate,
                    usageLimit: usageLimit,
                    title: title,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.legacyRevokePermanent ? 1 << 2 : 0;
                flags |= this.requestNeeded ? 1 << 3 : 0;
                flags |= this.expireDate !== undefined ? 1 << 0 : 0;
                flags |= this.usageLimit !== undefined ? 1 << 1 : 0;
                flags |= this.title !== undefined ? 1 << 4 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.expireDate !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.expireDate));
                }
                if (this.usageLimit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.usageLimit));
                }
                if (this.title !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.title));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.ExportChatInvite = ExportChatInvite;
        class CheckChatInvite extends index_js_1.TLObject {
            __response__;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.CheckChatInvite';
                this.constructorId = 0x3eadb1bb;
                this.subclassOfId = 0x4561736;
                this._slots = ['hash'];
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.String.read(_data);
                return new Raw.messages.CheckChatInvite({ hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.CheckChatInvite = CheckChatInvite;
        class ImportChatInvite extends index_js_1.TLObject {
            __response__;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.ImportChatInvite';
                this.constructorId = 0x6c50051c;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['hash'];
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.String.read(_data);
                return new Raw.messages.ImportChatInvite({ hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.ImportChatInvite = ImportChatInvite;
        class GetStickerSet extends index_js_1.TLObject {
            __response__;
            stickerset;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetStickerSet';
                this.constructorId = 0xc8a0ec74;
                this.subclassOfId = 0x9b704a5a;
                this._slots = ['stickerset', 'hash'];
                this.stickerset = params.stickerset;
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let stickerset = await index_js_1.TLObject.read(_data);
                let hash = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.GetStickerSet({ stickerset: stickerset, hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.stickerset !== undefined) {
                    b.write(this.stickerset.write());
                }
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetStickerSet = GetStickerSet;
        class InstallStickerSet extends index_js_1.TLObject {
            __response__;
            stickerset;
            archived;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.InstallStickerSet';
                this.constructorId = 0xc78fe460;
                this.subclassOfId = 0x67cb3fe8;
                this._slots = ['stickerset', 'archived'];
                this.stickerset = params.stickerset;
                this.archived = params.archived;
            }
            static async read(_data, ..._args) {
                let stickerset = await index_js_1.TLObject.read(_data);
                let archived = await index_js_1.Primitive.Bool.read(_data);
                return new Raw.messages.InstallStickerSet({ stickerset: stickerset, archived: archived });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.stickerset !== undefined) {
                    b.write(this.stickerset.write());
                }
                if (this.archived !== undefined) {
                    b.write(index_js_1.Primitive.Bool.write(this.archived));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.InstallStickerSet = InstallStickerSet;
        class UninstallStickerSet extends index_js_1.TLObject {
            __response__;
            stickerset;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.UninstallStickerSet';
                this.constructorId = 0xf96e55de;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['stickerset'];
                this.stickerset = params.stickerset;
            }
            static async read(_data, ..._args) {
                let stickerset = await index_js_1.TLObject.read(_data);
                return new Raw.messages.UninstallStickerSet({ stickerset: stickerset });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.stickerset !== undefined) {
                    b.write(this.stickerset.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.UninstallStickerSet = UninstallStickerSet;
        class StartBot extends index_js_1.TLObject {
            __response__;
            bot;
            peer;
            randomId;
            startParam;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.StartBot';
                this.constructorId = 0xe6df7378;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['bot', 'peer', 'randomId', 'startParam'];
                this.bot = params.bot;
                this.peer = params.peer;
                this.randomId = params.randomId;
                this.startParam = params.startParam;
            }
            static async read(_data, ..._args) {
                let bot = await index_js_1.TLObject.read(_data);
                let peer = await index_js_1.TLObject.read(_data);
                let randomId = await index_js_1.Primitive.Long.read(_data);
                let startParam = await index_js_1.Primitive.String.read(_data);
                return new Raw.messages.StartBot({
                    bot: bot,
                    peer: peer,
                    randomId: randomId,
                    startParam: startParam,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.bot !== undefined) {
                    b.write(this.bot.write());
                }
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.randomId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.randomId));
                }
                if (this.startParam !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.startParam));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.StartBot = StartBot;
        class GetMessagesViews extends index_js_1.TLObject {
            __response__;
            peer;
            id;
            increment;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetMessagesViews';
                this.constructorId = 0x5784d3e1;
                this.subclassOfId = 0xafb5eb9c;
                this._slots = ['peer', 'id', 'increment'];
                this.peer = params.peer;
                this.id = params.id;
                this.increment = params.increment;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let id = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int);
                let increment = await index_js_1.Primitive.Bool.read(_data);
                return new Raw.messages.GetMessagesViews({ peer: peer, id: id, increment: increment });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.id) {
                    b.write(index_js_1.Primitive.Vector.write(this.id, index_js_1.Primitive.Int));
                }
                if (this.increment !== undefined) {
                    b.write(index_js_1.Primitive.Bool.write(this.increment));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetMessagesViews = GetMessagesViews;
        class EditChatAdmin extends index_js_1.TLObject {
            __response__;
            chatId;
            userId;
            isAdmin;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.EditChatAdmin';
                this.constructorId = 0xa85bd1c2;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['chatId', 'userId', 'isAdmin'];
                this.chatId = params.chatId;
                this.userId = params.userId;
                this.isAdmin = params.isAdmin;
            }
            static async read(_data, ..._args) {
                let chatId = await index_js_1.Primitive.Long.read(_data);
                let userId = await index_js_1.TLObject.read(_data);
                let isAdmin = await index_js_1.Primitive.Bool.read(_data);
                return new Raw.messages.EditChatAdmin({ chatId: chatId, userId: userId, isAdmin: isAdmin });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.chatId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.chatId));
                }
                if (this.userId !== undefined) {
                    b.write(this.userId.write());
                }
                if (this.isAdmin !== undefined) {
                    b.write(index_js_1.Primitive.Bool.write(this.isAdmin));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.EditChatAdmin = EditChatAdmin;
        class MigrateChat extends index_js_1.TLObject {
            __response__;
            chatId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.MigrateChat';
                this.constructorId = 0xa2875319;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['chatId'];
                this.chatId = params.chatId;
            }
            static async read(_data, ..._args) {
                let chatId = await index_js_1.Primitive.Long.read(_data);
                return new Raw.messages.MigrateChat({ chatId: chatId });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.chatId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.chatId));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.MigrateChat = MigrateChat;
        class SearchGlobal extends index_js_1.TLObject {
            __response__;
            broadcastsOnly;
            folderId;
            q;
            filter;
            minDate;
            maxDate;
            offsetRate;
            offsetPeer;
            offsetId;
            limit;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.SearchGlobal';
                this.constructorId = 0x4bc6589a;
                this.subclassOfId = 0xd4b40b5e;
                this._slots = [
                    'broadcastsOnly',
                    'folderId',
                    'q',
                    'filter',
                    'minDate',
                    'maxDate',
                    'offsetRate',
                    'offsetPeer',
                    'offsetId',
                    'limit',
                ];
                this.broadcastsOnly = params.broadcastsOnly;
                this.folderId = params.folderId;
                this.q = params.q;
                this.filter = params.filter;
                this.minDate = params.minDate;
                this.maxDate = params.maxDate;
                this.offsetRate = params.offsetRate;
                this.offsetPeer = params.offsetPeer;
                this.offsetId = params.offsetId;
                this.limit = params.limit;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let broadcastsOnly = flags & (1 << 1) ? true : false;
                let folderId = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let q = await index_js_1.Primitive.String.read(_data);
                let filter = await index_js_1.TLObject.read(_data);
                let minDate = await index_js_1.Primitive.Int.read(_data);
                let maxDate = await index_js_1.Primitive.Int.read(_data);
                let offsetRate = await index_js_1.Primitive.Int.read(_data);
                let offsetPeer = await index_js_1.TLObject.read(_data);
                let offsetId = await index_js_1.Primitive.Int.read(_data);
                let limit = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.SearchGlobal({
                    broadcastsOnly: broadcastsOnly,
                    folderId: folderId,
                    q: q,
                    filter: filter,
                    minDate: minDate,
                    maxDate: maxDate,
                    offsetRate: offsetRate,
                    offsetPeer: offsetPeer,
                    offsetId: offsetId,
                    limit: limit,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.broadcastsOnly ? 1 << 1 : 0;
                flags |= this.folderId !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.folderId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.folderId));
                }
                if (this.q !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.q));
                }
                if (this.filter !== undefined) {
                    b.write(this.filter.write());
                }
                if (this.minDate !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.minDate));
                }
                if (this.maxDate !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.maxDate));
                }
                if (this.offsetRate !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.offsetRate));
                }
                if (this.offsetPeer !== undefined) {
                    b.write(this.offsetPeer.write());
                }
                if (this.offsetId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.offsetId));
                }
                if (this.limit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.limit));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SearchGlobal = SearchGlobal;
        class ReorderStickerSets extends index_js_1.TLObject {
            __response__;
            masks;
            emojis;
            order;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.ReorderStickerSets';
                this.constructorId = 0x78337739;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['masks', 'emojis', 'order'];
                this.masks = params.masks;
                this.emojis = params.emojis;
                this.order = params.order;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let masks = flags & (1 << 0) ? true : false;
                let emojis = flags & (1 << 1) ? true : false;
                let order = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Long);
                return new Raw.messages.ReorderStickerSets({ masks: masks, emojis: emojis, order: order });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.masks ? 1 << 0 : 0;
                flags |= this.emojis ? 1 << 1 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.order) {
                    b.write(index_js_1.Primitive.Vector.write(this.order, index_js_1.Primitive.Long));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.ReorderStickerSets = ReorderStickerSets;
        class GetDocumentByHash extends index_js_1.TLObject {
            __response__;
            sha256;
            size;
            mimeType;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetDocumentByHash';
                this.constructorId = 0xb1f2061f;
                this.subclassOfId = 0x211fe820;
                this._slots = ['sha256', 'size', 'mimeType'];
                this.sha256 = params.sha256;
                this.size = params.size;
                this.mimeType = params.mimeType;
            }
            static async read(_data, ..._args) {
                let sha256 = await index_js_1.Primitive.Bytes.read(_data);
                let size = await index_js_1.Primitive.Long.read(_data);
                let mimeType = await index_js_1.Primitive.String.read(_data);
                return new Raw.messages.GetDocumentByHash({
                    sha256: sha256,
                    size: size,
                    mimeType: mimeType,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.sha256 !== undefined) {
                    b.write(index_js_1.Primitive.Bytes.write(this.sha256));
                }
                if (this.size !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.size));
                }
                if (this.mimeType !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.mimeType));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetDocumentByHash = GetDocumentByHash;
        class GetSavedGifs extends index_js_1.TLObject {
            __response__;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetSavedGifs';
                this.constructorId = 0x5cf09635;
                this.subclassOfId = 0xa68b61f5;
                this._slots = ['hash'];
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Long.read(_data);
                return new Raw.messages.GetSavedGifs({ hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetSavedGifs = GetSavedGifs;
        class SaveGif extends index_js_1.TLObject {
            __response__;
            id;
            unsave;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.SaveGif';
                this.constructorId = 0x327a30cb;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['id', 'unsave'];
                this.id = params.id;
                this.unsave = params.unsave;
            }
            static async read(_data, ..._args) {
                let id = await index_js_1.TLObject.read(_data);
                let unsave = await index_js_1.Primitive.Bool.read(_data);
                return new Raw.messages.SaveGif({ id: id, unsave: unsave });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.id !== undefined) {
                    b.write(this.id.write());
                }
                if (this.unsave !== undefined) {
                    b.write(index_js_1.Primitive.Bool.write(this.unsave));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SaveGif = SaveGif;
        class GetInlineBotResults extends index_js_1.TLObject {
            __response__;
            bot;
            peer;
            geoPoint;
            query;
            offset;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetInlineBotResults';
                this.constructorId = 0x514e999d;
                this.subclassOfId = 0x3ed4d9c9;
                this._slots = ['bot', 'peer', 'geoPoint', 'query', 'offset'];
                this.bot = params.bot;
                this.peer = params.peer;
                this.geoPoint = params.geoPoint;
                this.query = params.query;
                this.offset = params.offset;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let bot = await index_js_1.TLObject.read(_data);
                let peer = await index_js_1.TLObject.read(_data);
                let geoPoint = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
                let query = await index_js_1.Primitive.String.read(_data);
                let offset = await index_js_1.Primitive.String.read(_data);
                return new Raw.messages.GetInlineBotResults({
                    bot: bot,
                    peer: peer,
                    geoPoint: geoPoint,
                    query: query,
                    offset: offset,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.geoPoint !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.bot !== undefined) {
                    b.write(this.bot.write());
                }
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.geoPoint !== undefined) {
                    b.write(this.geoPoint.write());
                }
                if (this.query !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.query));
                }
                if (this.offset !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.offset));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetInlineBotResults = GetInlineBotResults;
        class SetInlineBotResults extends index_js_1.TLObject {
            __response__;
            gallery;
            private;
            queryId;
            results;
            cacheTime;
            nextOffset;
            switchPm;
            switchWebview;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.SetInlineBotResults';
                this.constructorId = 0xbb12a419;
                this.subclassOfId = 0xf5b399ac;
                this._slots = [
                    'gallery',
                    'private',
                    'queryId',
                    'results',
                    'cacheTime',
                    'nextOffset',
                    'switchPm',
                    'switchWebview',
                ];
                this.gallery = params.gallery;
                this.private = params.private;
                this.queryId = params.queryId;
                this.results = params.results;
                this.cacheTime = params.cacheTime;
                this.nextOffset = params.nextOffset;
                this.switchPm = params.switchPm;
                this.switchWebview = params.switchWebview;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let gallery = flags & (1 << 0) ? true : false;
                let _private = flags & (1 << 1) ? true : false;
                let queryId = await index_js_1.Primitive.Long.read(_data);
                let results = await index_js_1.TLObject.read(_data);
                let cacheTime = await index_js_1.Primitive.Int.read(_data);
                let nextOffset = flags & (1 << 2) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let switchPm = flags & (1 << 3) ? await index_js_1.TLObject.read(_data) : undefined;
                let switchWebview = flags & (1 << 4) ? await index_js_1.TLObject.read(_data) : undefined;
                return new Raw.messages.SetInlineBotResults({
                    gallery: gallery,
                    private: _private,
                    queryId: queryId,
                    results: results,
                    cacheTime: cacheTime,
                    nextOffset: nextOffset,
                    switchPm: switchPm,
                    switchWebview: switchWebview,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.gallery ? 1 << 0 : 0;
                flags |= this.private ? 1 << 1 : 0;
                flags |= this.nextOffset !== undefined ? 1 << 2 : 0;
                flags |= this.switchPm !== undefined ? 1 << 3 : 0;
                flags |= this.switchWebview !== undefined ? 1 << 4 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.queryId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.queryId));
                }
                if (this.results) {
                    b.write(index_js_1.Primitive.Vector.write(this.results));
                }
                if (this.cacheTime !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.cacheTime));
                }
                if (this.nextOffset !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.nextOffset));
                }
                if (this.switchPm !== undefined) {
                    b.write(this.switchPm.write());
                }
                if (this.switchWebview !== undefined) {
                    b.write(this.switchWebview.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SetInlineBotResults = SetInlineBotResults;
        class SendInlineBotResult extends index_js_1.TLObject {
            __response__;
            silent;
            background;
            clearDraft;
            hideVia;
            peer;
            replyTo;
            randomId;
            queryId;
            id;
            scheduleDate;
            sendAs;
            quickReplyShortcut;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.SendInlineBotResult';
                this.constructorId = 0x3ebee86a;
                this.subclassOfId = 0x8af52aac;
                this._slots = [
                    'silent',
                    'background',
                    'clearDraft',
                    'hideVia',
                    'peer',
                    'replyTo',
                    'randomId',
                    'queryId',
                    'id',
                    'scheduleDate',
                    'sendAs',
                    'quickReplyShortcut',
                ];
                this.silent = params.silent;
                this.background = params.background;
                this.clearDraft = params.clearDraft;
                this.hideVia = params.hideVia;
                this.peer = params.peer;
                this.replyTo = params.replyTo;
                this.randomId = params.randomId;
                this.queryId = params.queryId;
                this.id = params.id;
                this.scheduleDate = params.scheduleDate;
                this.sendAs = params.sendAs;
                this.quickReplyShortcut = params.quickReplyShortcut;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let silent = flags & (1 << 5) ? true : false;
                let background = flags & (1 << 6) ? true : false;
                let clearDraft = flags & (1 << 7) ? true : false;
                let hideVia = flags & (1 << 11) ? true : false;
                let peer = await index_js_1.TLObject.read(_data);
                let replyTo = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
                let randomId = await index_js_1.Primitive.Long.read(_data);
                let queryId = await index_js_1.Primitive.Long.read(_data);
                let id = await index_js_1.Primitive.String.read(_data);
                let scheduleDate = flags & (1 << 10) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let sendAs = flags & (1 << 13) ? await index_js_1.TLObject.read(_data) : undefined;
                let quickReplyShortcut = flags & (1 << 17) ? await index_js_1.TLObject.read(_data) : undefined;
                return new Raw.messages.SendInlineBotResult({
                    silent: silent,
                    background: background,
                    clearDraft: clearDraft,
                    hideVia: hideVia,
                    peer: peer,
                    replyTo: replyTo,
                    randomId: randomId,
                    queryId: queryId,
                    id: id,
                    scheduleDate: scheduleDate,
                    sendAs: sendAs,
                    quickReplyShortcut: quickReplyShortcut,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.silent ? 1 << 5 : 0;
                flags |= this.background ? 1 << 6 : 0;
                flags |= this.clearDraft ? 1 << 7 : 0;
                flags |= this.hideVia ? 1 << 11 : 0;
                flags |= this.replyTo !== undefined ? 1 << 0 : 0;
                flags |= this.scheduleDate !== undefined ? 1 << 10 : 0;
                flags |= this.sendAs !== undefined ? 1 << 13 : 0;
                flags |= this.quickReplyShortcut !== undefined ? 1 << 17 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.replyTo !== undefined) {
                    b.write(this.replyTo.write());
                }
                if (this.randomId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.randomId));
                }
                if (this.queryId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.queryId));
                }
                if (this.id !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.id));
                }
                if (this.scheduleDate !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.scheduleDate));
                }
                if (this.sendAs !== undefined) {
                    b.write(this.sendAs.write());
                }
                if (this.quickReplyShortcut !== undefined) {
                    b.write(this.quickReplyShortcut.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SendInlineBotResult = SendInlineBotResult;
        class GetMessageEditData extends index_js_1.TLObject {
            __response__;
            peer;
            id;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetMessageEditData';
                this.constructorId = 0xfda68d36;
                this.subclassOfId = 0xfb47949d;
                this._slots = ['peer', 'id'];
                this.peer = params.peer;
                this.id = params.id;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let id = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.GetMessageEditData({ peer: peer, id: id });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.id !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.id));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetMessageEditData = GetMessageEditData;
        class EditMessage extends index_js_1.TLObject {
            __response__;
            noWebpage;
            invertMedia;
            peer;
            id;
            message;
            media;
            replyMarkup;
            entities;
            scheduleDate;
            quickReplyShortcutId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.EditMessage';
                this.constructorId = 0xdfd14005;
                this.subclassOfId = 0x8af52aac;
                this._slots = [
                    'noWebpage',
                    'invertMedia',
                    'peer',
                    'id',
                    'message',
                    'media',
                    'replyMarkup',
                    'entities',
                    'scheduleDate',
                    'quickReplyShortcutId',
                ];
                this.noWebpage = params.noWebpage;
                this.invertMedia = params.invertMedia;
                this.peer = params.peer;
                this.id = params.id;
                this.message = params.message;
                this.media = params.media;
                this.replyMarkup = params.replyMarkup;
                this.entities = params.entities;
                this.scheduleDate = params.scheduleDate;
                this.quickReplyShortcutId = params.quickReplyShortcutId;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let noWebpage = flags & (1 << 1) ? true : false;
                let invertMedia = flags & (1 << 16) ? true : false;
                let peer = await index_js_1.TLObject.read(_data);
                let id = await index_js_1.Primitive.Int.read(_data);
                let message = flags & (1 << 11) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let media = flags & (1 << 14) ? await index_js_1.TLObject.read(_data) : undefined;
                let replyMarkup = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
                let entities = flags & (1 << 3) ? await index_js_1.TLObject.read(_data) : [];
                let scheduleDate = flags & (1 << 15) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let quickReplyShortcutId = flags & (1 << 17) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                return new Raw.messages.EditMessage({
                    noWebpage: noWebpage,
                    invertMedia: invertMedia,
                    peer: peer,
                    id: id,
                    message: message,
                    media: media,
                    replyMarkup: replyMarkup,
                    entities: entities,
                    scheduleDate: scheduleDate,
                    quickReplyShortcutId: quickReplyShortcutId,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.noWebpage ? 1 << 1 : 0;
                flags |= this.invertMedia ? 1 << 16 : 0;
                flags |= this.message !== undefined ? 1 << 11 : 0;
                flags |= this.media !== undefined ? 1 << 14 : 0;
                flags |= this.replyMarkup !== undefined ? 1 << 2 : 0;
                flags |= this.entities ? 1 << 3 : 0;
                flags |= this.scheduleDate !== undefined ? 1 << 15 : 0;
                flags |= this.quickReplyShortcutId !== undefined ? 1 << 17 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.id !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.id));
                }
                if (this.message !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.message));
                }
                if (this.media !== undefined) {
                    b.write(this.media.write());
                }
                if (this.replyMarkup !== undefined) {
                    b.write(this.replyMarkup.write());
                }
                if (this.entities) {
                    b.write(index_js_1.Primitive.Vector.write(this.entities));
                }
                if (this.scheduleDate !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.scheduleDate));
                }
                if (this.quickReplyShortcutId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.quickReplyShortcutId));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.EditMessage = EditMessage;
        class EditInlineBotMessage extends index_js_1.TLObject {
            __response__;
            noWebpage;
            invertMedia;
            id;
            message;
            media;
            replyMarkup;
            entities;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.EditInlineBotMessage';
                this.constructorId = 0x83557dba;
                this.subclassOfId = 0xf5b399ac;
                this._slots = [
                    'noWebpage',
                    'invertMedia',
                    'id',
                    'message',
                    'media',
                    'replyMarkup',
                    'entities',
                ];
                this.noWebpage = params.noWebpage;
                this.invertMedia = params.invertMedia;
                this.id = params.id;
                this.message = params.message;
                this.media = params.media;
                this.replyMarkup = params.replyMarkup;
                this.entities = params.entities;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let noWebpage = flags & (1 << 1) ? true : false;
                let invertMedia = flags & (1 << 16) ? true : false;
                let id = await index_js_1.TLObject.read(_data);
                let message = flags & (1 << 11) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let media = flags & (1 << 14) ? await index_js_1.TLObject.read(_data) : undefined;
                let replyMarkup = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
                let entities = flags & (1 << 3) ? await index_js_1.TLObject.read(_data) : [];
                return new Raw.messages.EditInlineBotMessage({
                    noWebpage: noWebpage,
                    invertMedia: invertMedia,
                    id: id,
                    message: message,
                    media: media,
                    replyMarkup: replyMarkup,
                    entities: entities,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.noWebpage ? 1 << 1 : 0;
                flags |= this.invertMedia ? 1 << 16 : 0;
                flags |= this.message !== undefined ? 1 << 11 : 0;
                flags |= this.media !== undefined ? 1 << 14 : 0;
                flags |= this.replyMarkup !== undefined ? 1 << 2 : 0;
                flags |= this.entities ? 1 << 3 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.id !== undefined) {
                    b.write(this.id.write());
                }
                if (this.message !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.message));
                }
                if (this.media !== undefined) {
                    b.write(this.media.write());
                }
                if (this.replyMarkup !== undefined) {
                    b.write(this.replyMarkup.write());
                }
                if (this.entities) {
                    b.write(index_js_1.Primitive.Vector.write(this.entities));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.EditInlineBotMessage = EditInlineBotMessage;
        class GetBotCallbackAnswer extends index_js_1.TLObject {
            __response__;
            game;
            peer;
            msgId;
            data;
            password;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetBotCallbackAnswer';
                this.constructorId = 0x9342ca07;
                this.subclassOfId = 0x6c4dd18c;
                this._slots = ['game', 'peer', 'msgId', 'data', 'password'];
                this.game = params.game;
                this.peer = params.peer;
                this.msgId = params.msgId;
                this.data = params.data;
                this.password = params.password;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let game = flags & (1 << 1) ? true : false;
                let peer = await index_js_1.TLObject.read(_data);
                let msgId = await index_js_1.Primitive.Int.read(_data);
                let data = flags & (1 << 0) ? await index_js_1.Primitive.Bytes.read(_data) : undefined;
                let password = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
                return new Raw.messages.GetBotCallbackAnswer({
                    game: game,
                    peer: peer,
                    msgId: msgId,
                    data: data,
                    password: password,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.game ? 1 << 1 : 0;
                flags |= this.data !== undefined ? 1 << 0 : 0;
                flags |= this.password !== undefined ? 1 << 2 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.msgId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.msgId));
                }
                if (this.data !== undefined) {
                    b.write(index_js_1.Primitive.Bytes.write(this.data));
                }
                if (this.password !== undefined) {
                    b.write(this.password.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetBotCallbackAnswer = GetBotCallbackAnswer;
        class SetBotCallbackAnswer extends index_js_1.TLObject {
            __response__;
            alert;
            queryId;
            message;
            url;
            cacheTime;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.SetBotCallbackAnswer';
                this.constructorId = 0xd58f130a;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['alert', 'queryId', 'message', 'url', 'cacheTime'];
                this.alert = params.alert;
                this.queryId = params.queryId;
                this.message = params.message;
                this.url = params.url;
                this.cacheTime = params.cacheTime;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let alert = flags & (1 << 1) ? true : false;
                let queryId = await index_js_1.Primitive.Long.read(_data);
                let message = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let url = flags & (1 << 2) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let cacheTime = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.SetBotCallbackAnswer({
                    alert: alert,
                    queryId: queryId,
                    message: message,
                    url: url,
                    cacheTime: cacheTime,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.alert ? 1 << 1 : 0;
                flags |= this.message !== undefined ? 1 << 0 : 0;
                flags |= this.url !== undefined ? 1 << 2 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.queryId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.queryId));
                }
                if (this.message !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.message));
                }
                if (this.url !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.url));
                }
                if (this.cacheTime !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.cacheTime));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SetBotCallbackAnswer = SetBotCallbackAnswer;
        class GetPeerDialogs extends index_js_1.TLObject {
            __response__;
            peers;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetPeerDialogs';
                this.constructorId = 0xe470bcfd;
                this.subclassOfId = 0x3ac70132;
                this._slots = ['peers'];
                this.peers = params.peers;
            }
            static async read(_data, ..._args) {
                let peers = await index_js_1.TLObject.read(_data);
                return new Raw.messages.GetPeerDialogs({ peers: peers });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peers) {
                    b.write(index_js_1.Primitive.Vector.write(this.peers));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetPeerDialogs = GetPeerDialogs;
        class SaveDraft extends index_js_1.TLObject {
            __response__;
            noWebpage;
            invertMedia;
            replyTo;
            peer;
            message;
            entities;
            media;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.SaveDraft';
                this.constructorId = 0x7ff3b806;
                this.subclassOfId = 0xf5b399ac;
                this._slots = [
                    'noWebpage',
                    'invertMedia',
                    'replyTo',
                    'peer',
                    'message',
                    'entities',
                    'media',
                ];
                this.noWebpage = params.noWebpage;
                this.invertMedia = params.invertMedia;
                this.replyTo = params.replyTo;
                this.peer = params.peer;
                this.message = params.message;
                this.entities = params.entities;
                this.media = params.media;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let noWebpage = flags & (1 << 1) ? true : false;
                let invertMedia = flags & (1 << 6) ? true : false;
                let replyTo = flags & (1 << 4) ? await index_js_1.TLObject.read(_data) : undefined;
                let peer = await index_js_1.TLObject.read(_data);
                let message = await index_js_1.Primitive.String.read(_data);
                let entities = flags & (1 << 3) ? await index_js_1.TLObject.read(_data) : [];
                let media = flags & (1 << 5) ? await index_js_1.TLObject.read(_data) : undefined;
                return new Raw.messages.SaveDraft({
                    noWebpage: noWebpage,
                    invertMedia: invertMedia,
                    replyTo: replyTo,
                    peer: peer,
                    message: message,
                    entities: entities,
                    media: media,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.noWebpage ? 1 << 1 : 0;
                flags |= this.invertMedia ? 1 << 6 : 0;
                flags |= this.replyTo !== undefined ? 1 << 4 : 0;
                flags |= this.entities ? 1 << 3 : 0;
                flags |= this.media !== undefined ? 1 << 5 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.replyTo !== undefined) {
                    b.write(this.replyTo.write());
                }
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.message !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.message));
                }
                if (this.entities) {
                    b.write(index_js_1.Primitive.Vector.write(this.entities));
                }
                if (this.media !== undefined) {
                    b.write(this.media.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SaveDraft = SaveDraft;
        class GetAllDrafts extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetAllDrafts';
                this.constructorId = 0x6a3f8d65;
                this.subclassOfId = 0x8af52aac;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.messages.GetAllDrafts();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetAllDrafts = GetAllDrafts;
        class GetFeaturedStickers extends index_js_1.TLObject {
            __response__;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetFeaturedStickers';
                this.constructorId = 0x64780b14;
                this.subclassOfId = 0x2614b722;
                this._slots = ['hash'];
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Long.read(_data);
                return new Raw.messages.GetFeaturedStickers({ hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetFeaturedStickers = GetFeaturedStickers;
        class ReadFeaturedStickers extends index_js_1.TLObject {
            __response__;
            id;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.ReadFeaturedStickers';
                this.constructorId = 0x5b118126;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['id'];
                this.id = params.id;
            }
            static async read(_data, ..._args) {
                let id = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Long);
                return new Raw.messages.ReadFeaturedStickers({ id: id });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.id) {
                    b.write(index_js_1.Primitive.Vector.write(this.id, index_js_1.Primitive.Long));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.ReadFeaturedStickers = ReadFeaturedStickers;
        class GetRecentStickers extends index_js_1.TLObject {
            __response__;
            attached;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetRecentStickers';
                this.constructorId = 0x9da9403b;
                this.subclassOfId = 0xf76f8683;
                this._slots = ['attached', 'hash'];
                this.attached = params.attached;
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let attached = flags & (1 << 0) ? true : false;
                let hash = await index_js_1.Primitive.Long.read(_data);
                return new Raw.messages.GetRecentStickers({ attached: attached, hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.attached ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetRecentStickers = GetRecentStickers;
        class SaveRecentSticker extends index_js_1.TLObject {
            __response__;
            attached;
            id;
            unsave;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.SaveRecentSticker';
                this.constructorId = 0x392718f8;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['attached', 'id', 'unsave'];
                this.attached = params.attached;
                this.id = params.id;
                this.unsave = params.unsave;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let attached = flags & (1 << 0) ? true : false;
                let id = await index_js_1.TLObject.read(_data);
                let unsave = await index_js_1.Primitive.Bool.read(_data);
                return new Raw.messages.SaveRecentSticker({ attached: attached, id: id, unsave: unsave });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.attached ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.id !== undefined) {
                    b.write(this.id.write());
                }
                if (this.unsave !== undefined) {
                    b.write(index_js_1.Primitive.Bool.write(this.unsave));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SaveRecentSticker = SaveRecentSticker;
        class ClearRecentStickers extends index_js_1.TLObject {
            __response__;
            attached;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.ClearRecentStickers';
                this.constructorId = 0x8999602d;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['attached'];
                this.attached = params.attached;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let attached = flags & (1 << 0) ? true : false;
                return new Raw.messages.ClearRecentStickers({ attached: attached });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.attached ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.ClearRecentStickers = ClearRecentStickers;
        class GetArchivedStickers extends index_js_1.TLObject {
            __response__;
            masks;
            emojis;
            offsetId;
            limit;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetArchivedStickers';
                this.constructorId = 0x57f17692;
                this.subclassOfId = 0x7296d771;
                this._slots = ['masks', 'emojis', 'offsetId', 'limit'];
                this.masks = params.masks;
                this.emojis = params.emojis;
                this.offsetId = params.offsetId;
                this.limit = params.limit;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let masks = flags & (1 << 0) ? true : false;
                let emojis = flags & (1 << 1) ? true : false;
                let offsetId = await index_js_1.Primitive.Long.read(_data);
                let limit = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.GetArchivedStickers({
                    masks: masks,
                    emojis: emojis,
                    offsetId: offsetId,
                    limit: limit,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.masks ? 1 << 0 : 0;
                flags |= this.emojis ? 1 << 1 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.offsetId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.offsetId));
                }
                if (this.limit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.limit));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetArchivedStickers = GetArchivedStickers;
        class GetMaskStickers extends index_js_1.TLObject {
            __response__;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetMaskStickers';
                this.constructorId = 0x640f82b8;
                this.subclassOfId = 0x45834829;
                this._slots = ['hash'];
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Long.read(_data);
                return new Raw.messages.GetMaskStickers({ hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetMaskStickers = GetMaskStickers;
        class GetAttachedStickers extends index_js_1.TLObject {
            __response__;
            media;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetAttachedStickers';
                this.constructorId = 0xcc5b67cc;
                this.subclassOfId = 0xcc125f6b;
                this._slots = ['media'];
                this.media = params.media;
            }
            static async read(_data, ..._args) {
                let media = await index_js_1.TLObject.read(_data);
                return new Raw.messages.GetAttachedStickers({ media: media });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.media !== undefined) {
                    b.write(this.media.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetAttachedStickers = GetAttachedStickers;
        class SetGameScore extends index_js_1.TLObject {
            __response__;
            editMessage;
            force;
            peer;
            id;
            userId;
            score;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.SetGameScore';
                this.constructorId = 0x8ef8ecc0;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['editMessage', 'force', 'peer', 'id', 'userId', 'score'];
                this.editMessage = params.editMessage;
                this.force = params.force;
                this.peer = params.peer;
                this.id = params.id;
                this.userId = params.userId;
                this.score = params.score;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let editMessage = flags & (1 << 0) ? true : false;
                let force = flags & (1 << 1) ? true : false;
                let peer = await index_js_1.TLObject.read(_data);
                let id = await index_js_1.Primitive.Int.read(_data);
                let userId = await index_js_1.TLObject.read(_data);
                let score = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.SetGameScore({
                    editMessage: editMessage,
                    force: force,
                    peer: peer,
                    id: id,
                    userId: userId,
                    score: score,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.editMessage ? 1 << 0 : 0;
                flags |= this.force ? 1 << 1 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.id !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.id));
                }
                if (this.userId !== undefined) {
                    b.write(this.userId.write());
                }
                if (this.score !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.score));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SetGameScore = SetGameScore;
        class SetInlineGameScore extends index_js_1.TLObject {
            __response__;
            editMessage;
            force;
            id;
            userId;
            score;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.SetInlineGameScore';
                this.constructorId = 0x15ad9f64;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['editMessage', 'force', 'id', 'userId', 'score'];
                this.editMessage = params.editMessage;
                this.force = params.force;
                this.id = params.id;
                this.userId = params.userId;
                this.score = params.score;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let editMessage = flags & (1 << 0) ? true : false;
                let force = flags & (1 << 1) ? true : false;
                let id = await index_js_1.TLObject.read(_data);
                let userId = await index_js_1.TLObject.read(_data);
                let score = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.SetInlineGameScore({
                    editMessage: editMessage,
                    force: force,
                    id: id,
                    userId: userId,
                    score: score,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.editMessage ? 1 << 0 : 0;
                flags |= this.force ? 1 << 1 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.id !== undefined) {
                    b.write(this.id.write());
                }
                if (this.userId !== undefined) {
                    b.write(this.userId.write());
                }
                if (this.score !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.score));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SetInlineGameScore = SetInlineGameScore;
        class GetGameHighScores extends index_js_1.TLObject {
            __response__;
            peer;
            id;
            userId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetGameHighScores';
                this.constructorId = 0xe822649d;
                this.subclassOfId = 0x6ccd95fd;
                this._slots = ['peer', 'id', 'userId'];
                this.peer = params.peer;
                this.id = params.id;
                this.userId = params.userId;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let id = await index_js_1.Primitive.Int.read(_data);
                let userId = await index_js_1.TLObject.read(_data);
                return new Raw.messages.GetGameHighScores({ peer: peer, id: id, userId: userId });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.id !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.id));
                }
                if (this.userId !== undefined) {
                    b.write(this.userId.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetGameHighScores = GetGameHighScores;
        class GetInlineGameHighScores extends index_js_1.TLObject {
            __response__;
            id;
            userId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetInlineGameHighScores';
                this.constructorId = 0xf635e1b;
                this.subclassOfId = 0x6ccd95fd;
                this._slots = ['id', 'userId'];
                this.id = params.id;
                this.userId = params.userId;
            }
            static async read(_data, ..._args) {
                let id = await index_js_1.TLObject.read(_data);
                let userId = await index_js_1.TLObject.read(_data);
                return new Raw.messages.GetInlineGameHighScores({ id: id, userId: userId });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.id !== undefined) {
                    b.write(this.id.write());
                }
                if (this.userId !== undefined) {
                    b.write(this.userId.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetInlineGameHighScores = GetInlineGameHighScores;
        class GetCommonChats extends index_js_1.TLObject {
            __response__;
            userId;
            maxId;
            limit;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetCommonChats';
                this.constructorId = 0xe40ca104;
                this.subclassOfId = 0x99d5cb14;
                this._slots = ['userId', 'maxId', 'limit'];
                this.userId = params.userId;
                this.maxId = params.maxId;
                this.limit = params.limit;
            }
            static async read(_data, ..._args) {
                let userId = await index_js_1.TLObject.read(_data);
                let maxId = await index_js_1.Primitive.Long.read(_data);
                let limit = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.GetCommonChats({ userId: userId, maxId: maxId, limit: limit });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.userId !== undefined) {
                    b.write(this.userId.write());
                }
                if (this.maxId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.maxId));
                }
                if (this.limit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.limit));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetCommonChats = GetCommonChats;
        class GetWebPage extends index_js_1.TLObject {
            __response__;
            url;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetWebPage';
                this.constructorId = 0x8d9692a3;
                this.subclassOfId = 0x2cf8b154;
                this._slots = ['url', 'hash'];
                this.url = params.url;
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let url = await index_js_1.Primitive.String.read(_data);
                let hash = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.GetWebPage({ url: url, hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.url !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.url));
                }
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetWebPage = GetWebPage;
        class ToggleDialogPin extends index_js_1.TLObject {
            __response__;
            pinned;
            peer;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.ToggleDialogPin';
                this.constructorId = 0xa731e257;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['pinned', 'peer'];
                this.pinned = params.pinned;
                this.peer = params.peer;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let pinned = flags & (1 << 0) ? true : false;
                let peer = await index_js_1.TLObject.read(_data);
                return new Raw.messages.ToggleDialogPin({ pinned: pinned, peer: peer });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.pinned ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.ToggleDialogPin = ToggleDialogPin;
        class ReorderPinnedDialogs extends index_js_1.TLObject {
            __response__;
            force;
            folderId;
            order;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.ReorderPinnedDialogs';
                this.constructorId = 0x3b1adf37;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['force', 'folderId', 'order'];
                this.force = params.force;
                this.folderId = params.folderId;
                this.order = params.order;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let force = flags & (1 << 0) ? true : false;
                let folderId = await index_js_1.Primitive.Int.read(_data);
                let order = await index_js_1.TLObject.read(_data);
                return new Raw.messages.ReorderPinnedDialogs({
                    force: force,
                    folderId: folderId,
                    order: order,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.force ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.folderId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.folderId));
                }
                if (this.order) {
                    b.write(index_js_1.Primitive.Vector.write(this.order));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.ReorderPinnedDialogs = ReorderPinnedDialogs;
        class GetPinnedDialogs extends index_js_1.TLObject {
            __response__;
            folderId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetPinnedDialogs';
                this.constructorId = 0xd6b94df2;
                this.subclassOfId = 0x3ac70132;
                this._slots = ['folderId'];
                this.folderId = params.folderId;
            }
            static async read(_data, ..._args) {
                let folderId = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.GetPinnedDialogs({ folderId: folderId });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.folderId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.folderId));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetPinnedDialogs = GetPinnedDialogs;
        class SetBotShippingResults extends index_js_1.TLObject {
            __response__;
            queryId;
            error;
            shippingOptions;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.SetBotShippingResults';
                this.constructorId = 0xe5f672fa;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['queryId', 'error', 'shippingOptions'];
                this.queryId = params.queryId;
                this.error = params.error;
                this.shippingOptions = params.shippingOptions;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let queryId = await index_js_1.Primitive.Long.read(_data);
                let error = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let shippingOptions = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : [];
                return new Raw.messages.SetBotShippingResults({
                    queryId: queryId,
                    error: error,
                    shippingOptions: shippingOptions,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.error !== undefined ? 1 << 0 : 0;
                flags |= this.shippingOptions ? 1 << 1 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.queryId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.queryId));
                }
                if (this.error !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.error));
                }
                if (this.shippingOptions) {
                    b.write(index_js_1.Primitive.Vector.write(this.shippingOptions));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SetBotShippingResults = SetBotShippingResults;
        class SetBotPrecheckoutResults extends index_js_1.TLObject {
            __response__;
            success;
            queryId;
            error;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.SetBotPrecheckoutResults';
                this.constructorId = 0x9c2dd95;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['success', 'queryId', 'error'];
                this.success = params.success;
                this.queryId = params.queryId;
                this.error = params.error;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let success = flags & (1 << 1) ? true : false;
                let queryId = await index_js_1.Primitive.Long.read(_data);
                let error = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
                return new Raw.messages.SetBotPrecheckoutResults({
                    success: success,
                    queryId: queryId,
                    error: error,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.success ? 1 << 1 : 0;
                flags |= this.error !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.queryId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.queryId));
                }
                if (this.error !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.error));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SetBotPrecheckoutResults = SetBotPrecheckoutResults;
        class UploadMedia extends index_js_1.TLObject {
            __response__;
            businessConnectionId;
            peer;
            media;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.UploadMedia';
                this.constructorId = 0x14967978;
                this.subclassOfId = 0x476cbe32;
                this._slots = ['businessConnectionId', 'peer', 'media'];
                this.businessConnectionId = params.businessConnectionId;
                this.peer = params.peer;
                this.media = params.media;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let businessConnectionId = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let peer = await index_js_1.TLObject.read(_data);
                let media = await index_js_1.TLObject.read(_data);
                return new Raw.messages.UploadMedia({
                    businessConnectionId: businessConnectionId,
                    peer: peer,
                    media: media,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.businessConnectionId !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.businessConnectionId !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.businessConnectionId));
                }
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.media !== undefined) {
                    b.write(this.media.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.UploadMedia = UploadMedia;
        class SendScreenshotNotification extends index_js_1.TLObject {
            __response__;
            peer;
            replyTo;
            randomId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.SendScreenshotNotification';
                this.constructorId = 0xa1405817;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['peer', 'replyTo', 'randomId'];
                this.peer = params.peer;
                this.replyTo = params.replyTo;
                this.randomId = params.randomId;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let replyTo = await index_js_1.TLObject.read(_data);
                let randomId = await index_js_1.Primitive.Long.read(_data);
                return new Raw.messages.SendScreenshotNotification({
                    peer: peer,
                    replyTo: replyTo,
                    randomId: randomId,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.replyTo !== undefined) {
                    b.write(this.replyTo.write());
                }
                if (this.randomId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.randomId));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SendScreenshotNotification = SendScreenshotNotification;
        class GetFavedStickers extends index_js_1.TLObject {
            __response__;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetFavedStickers';
                this.constructorId = 0x4f1aaa9;
                this.subclassOfId = 0x8e736fb9;
                this._slots = ['hash'];
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Long.read(_data);
                return new Raw.messages.GetFavedStickers({ hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetFavedStickers = GetFavedStickers;
        class FaveSticker extends index_js_1.TLObject {
            __response__;
            id;
            unfave;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.FaveSticker';
                this.constructorId = 0xb9ffc55b;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['id', 'unfave'];
                this.id = params.id;
                this.unfave = params.unfave;
            }
            static async read(_data, ..._args) {
                let id = await index_js_1.TLObject.read(_data);
                let unfave = await index_js_1.Primitive.Bool.read(_data);
                return new Raw.messages.FaveSticker({ id: id, unfave: unfave });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.id !== undefined) {
                    b.write(this.id.write());
                }
                if (this.unfave !== undefined) {
                    b.write(index_js_1.Primitive.Bool.write(this.unfave));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.FaveSticker = FaveSticker;
        class GetUnreadMentions extends index_js_1.TLObject {
            __response__;
            peer;
            topMsgId;
            offsetId;
            addOffset;
            limit;
            maxId;
            minId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetUnreadMentions';
                this.constructorId = 0xf107e790;
                this.subclassOfId = 0xd4b40b5e;
                this._slots = ['peer', 'topMsgId', 'offsetId', 'addOffset', 'limit', 'maxId', 'minId'];
                this.peer = params.peer;
                this.topMsgId = params.topMsgId;
                this.offsetId = params.offsetId;
                this.addOffset = params.addOffset;
                this.limit = params.limit;
                this.maxId = params.maxId;
                this.minId = params.minId;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let peer = await index_js_1.TLObject.read(_data);
                let topMsgId = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let offsetId = await index_js_1.Primitive.Int.read(_data);
                let addOffset = await index_js_1.Primitive.Int.read(_data);
                let limit = await index_js_1.Primitive.Int.read(_data);
                let maxId = await index_js_1.Primitive.Int.read(_data);
                let minId = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.GetUnreadMentions({
                    peer: peer,
                    topMsgId: topMsgId,
                    offsetId: offsetId,
                    addOffset: addOffset,
                    limit: limit,
                    maxId: maxId,
                    minId: minId,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.topMsgId !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.topMsgId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.topMsgId));
                }
                if (this.offsetId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.offsetId));
                }
                if (this.addOffset !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.addOffset));
                }
                if (this.limit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.limit));
                }
                if (this.maxId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.maxId));
                }
                if (this.minId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.minId));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetUnreadMentions = GetUnreadMentions;
        class ReadMentions extends index_js_1.TLObject {
            __response__;
            peer;
            topMsgId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.ReadMentions';
                this.constructorId = 0x36e5bf4d;
                this.subclassOfId = 0x2c49c116;
                this._slots = ['peer', 'topMsgId'];
                this.peer = params.peer;
                this.topMsgId = params.topMsgId;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let peer = await index_js_1.TLObject.read(_data);
                let topMsgId = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                return new Raw.messages.ReadMentions({ peer: peer, topMsgId: topMsgId });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.topMsgId !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.topMsgId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.topMsgId));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.ReadMentions = ReadMentions;
        class GetRecentLocations extends index_js_1.TLObject {
            __response__;
            peer;
            limit;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetRecentLocations';
                this.constructorId = 0x702a40e0;
                this.subclassOfId = 0xd4b40b5e;
                this._slots = ['peer', 'limit', 'hash'];
                this.peer = params.peer;
                this.limit = params.limit;
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let limit = await index_js_1.Primitive.Int.read(_data);
                let hash = await index_js_1.Primitive.Long.read(_data);
                return new Raw.messages.GetRecentLocations({ peer: peer, limit: limit, hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.limit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.limit));
                }
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetRecentLocations = GetRecentLocations;
        class SendMultiMedia extends index_js_1.TLObject {
            __response__;
            silent;
            background;
            clearDraft;
            noforwards;
            updateStickersetsOrder;
            invertMedia;
            peer;
            replyTo;
            multiMedia;
            scheduleDate;
            sendAs;
            quickReplyShortcut;
            effect;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.SendMultiMedia';
                this.constructorId = 0x37b74355;
                this.subclassOfId = 0x8af52aac;
                this._slots = [
                    'silent',
                    'background',
                    'clearDraft',
                    'noforwards',
                    'updateStickersetsOrder',
                    'invertMedia',
                    'peer',
                    'replyTo',
                    'multiMedia',
                    'scheduleDate',
                    'sendAs',
                    'quickReplyShortcut',
                    'effect',
                ];
                this.silent = params.silent;
                this.background = params.background;
                this.clearDraft = params.clearDraft;
                this.noforwards = params.noforwards;
                this.updateStickersetsOrder = params.updateStickersetsOrder;
                this.invertMedia = params.invertMedia;
                this.peer = params.peer;
                this.replyTo = params.replyTo;
                this.multiMedia = params.multiMedia;
                this.scheduleDate = params.scheduleDate;
                this.sendAs = params.sendAs;
                this.quickReplyShortcut = params.quickReplyShortcut;
                this.effect = params.effect;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let silent = flags & (1 << 5) ? true : false;
                let background = flags & (1 << 6) ? true : false;
                let clearDraft = flags & (1 << 7) ? true : false;
                let noforwards = flags & (1 << 14) ? true : false;
                let updateStickersetsOrder = flags & (1 << 15) ? true : false;
                let invertMedia = flags & (1 << 16) ? true : false;
                let peer = await index_js_1.TLObject.read(_data);
                let replyTo = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
                let multiMedia = await index_js_1.TLObject.read(_data);
                let scheduleDate = flags & (1 << 10) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let sendAs = flags & (1 << 13) ? await index_js_1.TLObject.read(_data) : undefined;
                let quickReplyShortcut = flags & (1 << 17) ? await index_js_1.TLObject.read(_data) : undefined;
                let effect = flags & (1 << 18) ? await index_js_1.Primitive.Long.read(_data) : undefined;
                return new Raw.messages.SendMultiMedia({
                    silent: silent,
                    background: background,
                    clearDraft: clearDraft,
                    noforwards: noforwards,
                    updateStickersetsOrder: updateStickersetsOrder,
                    invertMedia: invertMedia,
                    peer: peer,
                    replyTo: replyTo,
                    multiMedia: multiMedia,
                    scheduleDate: scheduleDate,
                    sendAs: sendAs,
                    quickReplyShortcut: quickReplyShortcut,
                    effect: effect,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.silent ? 1 << 5 : 0;
                flags |= this.background ? 1 << 6 : 0;
                flags |= this.clearDraft ? 1 << 7 : 0;
                flags |= this.noforwards ? 1 << 14 : 0;
                flags |= this.updateStickersetsOrder ? 1 << 15 : 0;
                flags |= this.invertMedia ? 1 << 16 : 0;
                flags |= this.replyTo !== undefined ? 1 << 0 : 0;
                flags |= this.scheduleDate !== undefined ? 1 << 10 : 0;
                flags |= this.sendAs !== undefined ? 1 << 13 : 0;
                flags |= this.quickReplyShortcut !== undefined ? 1 << 17 : 0;
                flags |= this.effect !== undefined ? 1 << 18 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.replyTo !== undefined) {
                    b.write(this.replyTo.write());
                }
                if (this.multiMedia) {
                    b.write(index_js_1.Primitive.Vector.write(this.multiMedia));
                }
                if (this.scheduleDate !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.scheduleDate));
                }
                if (this.sendAs !== undefined) {
                    b.write(this.sendAs.write());
                }
                if (this.quickReplyShortcut !== undefined) {
                    b.write(this.quickReplyShortcut.write());
                }
                if (this.effect !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.effect));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SendMultiMedia = SendMultiMedia;
        class UploadEncryptedFile extends index_js_1.TLObject {
            __response__;
            peer;
            file;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.UploadEncryptedFile';
                this.constructorId = 0x5057c497;
                this.subclassOfId = 0x842a67c0;
                this._slots = ['peer', 'file'];
                this.peer = params.peer;
                this.file = params.file;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let file = await index_js_1.TLObject.read(_data);
                return new Raw.messages.UploadEncryptedFile({ peer: peer, file: file });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.file !== undefined) {
                    b.write(this.file.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.UploadEncryptedFile = UploadEncryptedFile;
        class SearchStickerSets extends index_js_1.TLObject {
            __response__;
            excludeFeatured;
            q;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.SearchStickerSets';
                this.constructorId = 0x35705b8a;
                this.subclassOfId = 0x40df361;
                this._slots = ['excludeFeatured', 'q', 'hash'];
                this.excludeFeatured = params.excludeFeatured;
                this.q = params.q;
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let excludeFeatured = flags & (1 << 0) ? true : false;
                let q = await index_js_1.Primitive.String.read(_data);
                let hash = await index_js_1.Primitive.Long.read(_data);
                return new Raw.messages.SearchStickerSets({
                    excludeFeatured: excludeFeatured,
                    q: q,
                    hash: hash,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.excludeFeatured ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.q !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.q));
                }
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SearchStickerSets = SearchStickerSets;
        class GetSplitRanges extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetSplitRanges';
                this.constructorId = 0x1cff7e08;
                this.subclassOfId = 0x5ba52504;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.messages.GetSplitRanges();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetSplitRanges = GetSplitRanges;
        class MarkDialogUnread extends index_js_1.TLObject {
            __response__;
            unread;
            peer;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.MarkDialogUnread';
                this.constructorId = 0xc286d98f;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['unread', 'peer'];
                this.unread = params.unread;
                this.peer = params.peer;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let unread = flags & (1 << 0) ? true : false;
                let peer = await index_js_1.TLObject.read(_data);
                return new Raw.messages.MarkDialogUnread({ unread: unread, peer: peer });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.unread ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.MarkDialogUnread = MarkDialogUnread;
        class GetDialogUnreadMarks extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetDialogUnreadMarks';
                this.constructorId = 0x22e24e22;
                this.subclassOfId = 0xbec64ad9;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.messages.GetDialogUnreadMarks();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetDialogUnreadMarks = GetDialogUnreadMarks;
        class ClearAllDrafts extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'messages.ClearAllDrafts';
                this.constructorId = 0x7e58ee9c;
                this.subclassOfId = 0xf5b399ac;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.messages.ClearAllDrafts();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.ClearAllDrafts = ClearAllDrafts;
        class UpdatePinnedMessage extends index_js_1.TLObject {
            __response__;
            silent;
            unpin;
            pmOneside;
            peer;
            id;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.UpdatePinnedMessage';
                this.constructorId = 0xd2aaf7ec;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['silent', 'unpin', 'pmOneside', 'peer', 'id'];
                this.silent = params.silent;
                this.unpin = params.unpin;
                this.pmOneside = params.pmOneside;
                this.peer = params.peer;
                this.id = params.id;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let silent = flags & (1 << 0) ? true : false;
                let unpin = flags & (1 << 1) ? true : false;
                let pmOneside = flags & (1 << 2) ? true : false;
                let peer = await index_js_1.TLObject.read(_data);
                let id = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.UpdatePinnedMessage({
                    silent: silent,
                    unpin: unpin,
                    pmOneside: pmOneside,
                    peer: peer,
                    id: id,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.silent ? 1 << 0 : 0;
                flags |= this.unpin ? 1 << 1 : 0;
                flags |= this.pmOneside ? 1 << 2 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.id !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.id));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.UpdatePinnedMessage = UpdatePinnedMessage;
        class SendVote extends index_js_1.TLObject {
            __response__;
            peer;
            msgId;
            options;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.SendVote';
                this.constructorId = 0x10ea6184;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['peer', 'msgId', 'options'];
                this.peer = params.peer;
                this.msgId = params.msgId;
                this.options = params.options;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let msgId = await index_js_1.Primitive.Int.read(_data);
                let options = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Bytes);
                return new Raw.messages.SendVote({ peer: peer, msgId: msgId, options: options });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.msgId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.msgId));
                }
                if (this.options) {
                    b.write(index_js_1.Primitive.Vector.write(this.options, index_js_1.Primitive.Bytes));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SendVote = SendVote;
        class GetPollResults extends index_js_1.TLObject {
            __response__;
            peer;
            msgId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetPollResults';
                this.constructorId = 0x73bb643b;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['peer', 'msgId'];
                this.peer = params.peer;
                this.msgId = params.msgId;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let msgId = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.GetPollResults({ peer: peer, msgId: msgId });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.msgId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.msgId));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetPollResults = GetPollResults;
        class GetOnlines extends index_js_1.TLObject {
            __response__;
            peer;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetOnlines';
                this.constructorId = 0x6e2be050;
                this.subclassOfId = 0x8c81903a;
                this._slots = ['peer'];
                this.peer = params.peer;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                return new Raw.messages.GetOnlines({ peer: peer });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetOnlines = GetOnlines;
        class EditChatAbout extends index_js_1.TLObject {
            __response__;
            peer;
            about;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.EditChatAbout';
                this.constructorId = 0xdef60797;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['peer', 'about'];
                this.peer = params.peer;
                this.about = params.about;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let about = await index_js_1.Primitive.String.read(_data);
                return new Raw.messages.EditChatAbout({ peer: peer, about: about });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.about !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.about));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.EditChatAbout = EditChatAbout;
        class EditChatDefaultBannedRights extends index_js_1.TLObject {
            __response__;
            peer;
            bannedRights;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.EditChatDefaultBannedRights';
                this.constructorId = 0xa5866b41;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['peer', 'bannedRights'];
                this.peer = params.peer;
                this.bannedRights = params.bannedRights;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let bannedRights = await index_js_1.TLObject.read(_data);
                return new Raw.messages.EditChatDefaultBannedRights({
                    peer: peer,
                    bannedRights: bannedRights,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.bannedRights !== undefined) {
                    b.write(this.bannedRights.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.EditChatDefaultBannedRights = EditChatDefaultBannedRights;
        class GetEmojiKeywords extends index_js_1.TLObject {
            __response__;
            langCode;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetEmojiKeywords';
                this.constructorId = 0x35a0e062;
                this.subclassOfId = 0xd279c672;
                this._slots = ['langCode'];
                this.langCode = params.langCode;
            }
            static async read(_data, ..._args) {
                let langCode = await index_js_1.Primitive.String.read(_data);
                return new Raw.messages.GetEmojiKeywords({ langCode: langCode });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.langCode !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.langCode));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetEmojiKeywords = GetEmojiKeywords;
        class GetEmojiKeywordsDifference extends index_js_1.TLObject {
            __response__;
            langCode;
            fromVersion;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetEmojiKeywordsDifference';
                this.constructorId = 0x1508b6af;
                this.subclassOfId = 0xd279c672;
                this._slots = ['langCode', 'fromVersion'];
                this.langCode = params.langCode;
                this.fromVersion = params.fromVersion;
            }
            static async read(_data, ..._args) {
                let langCode = await index_js_1.Primitive.String.read(_data);
                let fromVersion = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.GetEmojiKeywordsDifference({
                    langCode: langCode,
                    fromVersion: fromVersion,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.langCode !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.langCode));
                }
                if (this.fromVersion !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.fromVersion));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetEmojiKeywordsDifference = GetEmojiKeywordsDifference;
        class GetEmojiKeywordsLanguages extends index_js_1.TLObject {
            __response__;
            langCodes;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetEmojiKeywordsLanguages';
                this.constructorId = 0x4e9963b2;
                this.subclassOfId = 0xe795d387;
                this._slots = ['langCodes'];
                this.langCodes = params.langCodes;
            }
            static async read(_data, ..._args) {
                let langCodes = await index_js_1.TLObject.read(_data, index_js_1.Primitive.String);
                return new Raw.messages.GetEmojiKeywordsLanguages({ langCodes: langCodes });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.langCodes) {
                    b.write(index_js_1.Primitive.Vector.write(this.langCodes, index_js_1.Primitive.String));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetEmojiKeywordsLanguages = GetEmojiKeywordsLanguages;
        class GetEmojiURL extends index_js_1.TLObject {
            __response__;
            langCode;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetEmojiURL';
                this.constructorId = 0xd5b10c26;
                this.subclassOfId = 0x1fa08a19;
                this._slots = ['langCode'];
                this.langCode = params.langCode;
            }
            static async read(_data, ..._args) {
                let langCode = await index_js_1.Primitive.String.read(_data);
                return new Raw.messages.GetEmojiURL({ langCode: langCode });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.langCode !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.langCode));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetEmojiURL = GetEmojiURL;
        class GetSearchCounters extends index_js_1.TLObject {
            __response__;
            peer;
            savedPeerId;
            topMsgId;
            filters;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetSearchCounters';
                this.constructorId = 0x1bbcf300;
                this.subclassOfId = 0x6bde3c6e;
                this._slots = ['peer', 'savedPeerId', 'topMsgId', 'filters'];
                this.peer = params.peer;
                this.savedPeerId = params.savedPeerId;
                this.topMsgId = params.topMsgId;
                this.filters = params.filters;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let peer = await index_js_1.TLObject.read(_data);
                let savedPeerId = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
                let topMsgId = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let filters = await index_js_1.TLObject.read(_data);
                return new Raw.messages.GetSearchCounters({
                    peer: peer,
                    savedPeerId: savedPeerId,
                    topMsgId: topMsgId,
                    filters: filters,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.savedPeerId !== undefined ? 1 << 2 : 0;
                flags |= this.topMsgId !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.savedPeerId !== undefined) {
                    b.write(this.savedPeerId.write());
                }
                if (this.topMsgId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.topMsgId));
                }
                if (this.filters) {
                    b.write(index_js_1.Primitive.Vector.write(this.filters));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetSearchCounters = GetSearchCounters;
        class RequestUrlAuth extends index_js_1.TLObject {
            __response__;
            peer;
            msgId;
            buttonId;
            url;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.RequestUrlAuth';
                this.constructorId = 0x198fb446;
                this.subclassOfId = 0x7765cb1e;
                this._slots = ['peer', 'msgId', 'buttonId', 'url'];
                this.peer = params.peer;
                this.msgId = params.msgId;
                this.buttonId = params.buttonId;
                this.url = params.url;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let peer = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : undefined;
                let msgId = flags & (1 << 1) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let buttonId = flags & (1 << 1) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let url = flags & (1 << 2) ? await index_js_1.Primitive.String.read(_data) : undefined;
                return new Raw.messages.RequestUrlAuth({
                    peer: peer,
                    msgId: msgId,
                    buttonId: buttonId,
                    url: url,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.peer !== undefined ? 1 << 1 : 0;
                flags |= this.msgId !== undefined ? 1 << 1 : 0;
                flags |= this.buttonId !== undefined ? 1 << 1 : 0;
                flags |= this.url !== undefined ? 1 << 2 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.msgId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.msgId));
                }
                if (this.buttonId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.buttonId));
                }
                if (this.url !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.url));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.RequestUrlAuth = RequestUrlAuth;
        class AcceptUrlAuth extends index_js_1.TLObject {
            __response__;
            writeAllowed;
            peer;
            msgId;
            buttonId;
            url;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.AcceptUrlAuth';
                this.constructorId = 0xb12c7125;
                this.subclassOfId = 0x7765cb1e;
                this._slots = ['writeAllowed', 'peer', 'msgId', 'buttonId', 'url'];
                this.writeAllowed = params.writeAllowed;
                this.peer = params.peer;
                this.msgId = params.msgId;
                this.buttonId = params.buttonId;
                this.url = params.url;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let writeAllowed = flags & (1 << 0) ? true : false;
                let peer = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : undefined;
                let msgId = flags & (1 << 1) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let buttonId = flags & (1 << 1) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let url = flags & (1 << 2) ? await index_js_1.Primitive.String.read(_data) : undefined;
                return new Raw.messages.AcceptUrlAuth({
                    writeAllowed: writeAllowed,
                    peer: peer,
                    msgId: msgId,
                    buttonId: buttonId,
                    url: url,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.writeAllowed ? 1 << 0 : 0;
                flags |= this.peer !== undefined ? 1 << 1 : 0;
                flags |= this.msgId !== undefined ? 1 << 1 : 0;
                flags |= this.buttonId !== undefined ? 1 << 1 : 0;
                flags |= this.url !== undefined ? 1 << 2 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.msgId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.msgId));
                }
                if (this.buttonId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.buttonId));
                }
                if (this.url !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.url));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.AcceptUrlAuth = AcceptUrlAuth;
        class HidePeerSettingsBar extends index_js_1.TLObject {
            __response__;
            peer;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.HidePeerSettingsBar';
                this.constructorId = 0x4facb138;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['peer'];
                this.peer = params.peer;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                return new Raw.messages.HidePeerSettingsBar({ peer: peer });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.HidePeerSettingsBar = HidePeerSettingsBar;
        class GetScheduledHistory extends index_js_1.TLObject {
            __response__;
            peer;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetScheduledHistory';
                this.constructorId = 0xf516760b;
                this.subclassOfId = 0xd4b40b5e;
                this._slots = ['peer', 'hash'];
                this.peer = params.peer;
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let hash = await index_js_1.Primitive.Long.read(_data);
                return new Raw.messages.GetScheduledHistory({ peer: peer, hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetScheduledHistory = GetScheduledHistory;
        class GetScheduledMessages extends index_js_1.TLObject {
            __response__;
            peer;
            id;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetScheduledMessages';
                this.constructorId = 0xbdbb0464;
                this.subclassOfId = 0xd4b40b5e;
                this._slots = ['peer', 'id'];
                this.peer = params.peer;
                this.id = params.id;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let id = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int);
                return new Raw.messages.GetScheduledMessages({ peer: peer, id: id });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.id) {
                    b.write(index_js_1.Primitive.Vector.write(this.id, index_js_1.Primitive.Int));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetScheduledMessages = GetScheduledMessages;
        class SendScheduledMessages extends index_js_1.TLObject {
            __response__;
            peer;
            id;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.SendScheduledMessages';
                this.constructorId = 0xbd38850a;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['peer', 'id'];
                this.peer = params.peer;
                this.id = params.id;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let id = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int);
                return new Raw.messages.SendScheduledMessages({ peer: peer, id: id });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.id) {
                    b.write(index_js_1.Primitive.Vector.write(this.id, index_js_1.Primitive.Int));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SendScheduledMessages = SendScheduledMessages;
        class DeleteScheduledMessages extends index_js_1.TLObject {
            __response__;
            peer;
            id;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.DeleteScheduledMessages';
                this.constructorId = 0x59ae2b16;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['peer', 'id'];
                this.peer = params.peer;
                this.id = params.id;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let id = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int);
                return new Raw.messages.DeleteScheduledMessages({ peer: peer, id: id });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.id) {
                    b.write(index_js_1.Primitive.Vector.write(this.id, index_js_1.Primitive.Int));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.DeleteScheduledMessages = DeleteScheduledMessages;
        class GetPollVotes extends index_js_1.TLObject {
            __response__;
            peer;
            id;
            option;
            offset;
            limit;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetPollVotes';
                this.constructorId = 0xb86e380e;
                this.subclassOfId = 0xc2199885;
                this._slots = ['peer', 'id', 'option', 'offset', 'limit'];
                this.peer = params.peer;
                this.id = params.id;
                this.option = params.option;
                this.offset = params.offset;
                this.limit = params.limit;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let peer = await index_js_1.TLObject.read(_data);
                let id = await index_js_1.Primitive.Int.read(_data);
                let option = flags & (1 << 0) ? await index_js_1.Primitive.Bytes.read(_data) : undefined;
                let offset = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let limit = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.GetPollVotes({
                    peer: peer,
                    id: id,
                    option: option,
                    offset: offset,
                    limit: limit,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.option !== undefined ? 1 << 0 : 0;
                flags |= this.offset !== undefined ? 1 << 1 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.id !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.id));
                }
                if (this.option !== undefined) {
                    b.write(index_js_1.Primitive.Bytes.write(this.option));
                }
                if (this.offset !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.offset));
                }
                if (this.limit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.limit));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetPollVotes = GetPollVotes;
        class ToggleStickerSets extends index_js_1.TLObject {
            __response__;
            uninstall;
            archive;
            unarchive;
            stickersets;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.ToggleStickerSets';
                this.constructorId = 0xb5052fea;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['uninstall', 'archive', 'unarchive', 'stickersets'];
                this.uninstall = params.uninstall;
                this.archive = params.archive;
                this.unarchive = params.unarchive;
                this.stickersets = params.stickersets;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let uninstall = flags & (1 << 0) ? true : false;
                let archive = flags & (1 << 1) ? true : false;
                let unarchive = flags & (1 << 2) ? true : false;
                let stickersets = await index_js_1.TLObject.read(_data);
                return new Raw.messages.ToggleStickerSets({
                    uninstall: uninstall,
                    archive: archive,
                    unarchive: unarchive,
                    stickersets: stickersets,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.uninstall ? 1 << 0 : 0;
                flags |= this.archive ? 1 << 1 : 0;
                flags |= this.unarchive ? 1 << 2 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.stickersets) {
                    b.write(index_js_1.Primitive.Vector.write(this.stickersets));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.ToggleStickerSets = ToggleStickerSets;
        class GetDialogFilters extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetDialogFilters';
                this.constructorId = 0xefd48c89;
                this.subclassOfId = 0xa5fff1b7;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.messages.GetDialogFilters();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetDialogFilters = GetDialogFilters;
        class GetSuggestedDialogFilters extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetSuggestedDialogFilters';
                this.constructorId = 0xa29cd42c;
                this.subclassOfId = 0x7b296c39;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.messages.GetSuggestedDialogFilters();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetSuggestedDialogFilters = GetSuggestedDialogFilters;
        class UpdateDialogFilter extends index_js_1.TLObject {
            __response__;
            id;
            filter;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.UpdateDialogFilter';
                this.constructorId = 0x1ad4a04a;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['id', 'filter'];
                this.id = params.id;
                this.filter = params.filter;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let id = await index_js_1.Primitive.Int.read(_data);
                let filter = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
                return new Raw.messages.UpdateDialogFilter({ id: id, filter: filter });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.filter !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.id !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.id));
                }
                if (this.filter !== undefined) {
                    b.write(this.filter.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.UpdateDialogFilter = UpdateDialogFilter;
        class UpdateDialogFiltersOrder extends index_js_1.TLObject {
            __response__;
            order;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.UpdateDialogFiltersOrder';
                this.constructorId = 0xc563c1e4;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['order'];
                this.order = params.order;
            }
            static async read(_data, ..._args) {
                let order = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int);
                return new Raw.messages.UpdateDialogFiltersOrder({ order: order });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.order) {
                    b.write(index_js_1.Primitive.Vector.write(this.order, index_js_1.Primitive.Int));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.UpdateDialogFiltersOrder = UpdateDialogFiltersOrder;
        class GetOldFeaturedStickers extends index_js_1.TLObject {
            __response__;
            offset;
            limit;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetOldFeaturedStickers';
                this.constructorId = 0x7ed094a1;
                this.subclassOfId = 0x2614b722;
                this._slots = ['offset', 'limit', 'hash'];
                this.offset = params.offset;
                this.limit = params.limit;
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let offset = await index_js_1.Primitive.Int.read(_data);
                let limit = await index_js_1.Primitive.Int.read(_data);
                let hash = await index_js_1.Primitive.Long.read(_data);
                return new Raw.messages.GetOldFeaturedStickers({
                    offset: offset,
                    limit: limit,
                    hash: hash,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.offset !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.offset));
                }
                if (this.limit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.limit));
                }
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetOldFeaturedStickers = GetOldFeaturedStickers;
        class GetReplies extends index_js_1.TLObject {
            __response__;
            peer;
            msgId;
            offsetId;
            offsetDate;
            addOffset;
            limit;
            maxId;
            minId;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetReplies';
                this.constructorId = 0x22ddd30c;
                this.subclassOfId = 0xd4b40b5e;
                this._slots = [
                    'peer',
                    'msgId',
                    'offsetId',
                    'offsetDate',
                    'addOffset',
                    'limit',
                    'maxId',
                    'minId',
                    'hash',
                ];
                this.peer = params.peer;
                this.msgId = params.msgId;
                this.offsetId = params.offsetId;
                this.offsetDate = params.offsetDate;
                this.addOffset = params.addOffset;
                this.limit = params.limit;
                this.maxId = params.maxId;
                this.minId = params.minId;
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let msgId = await index_js_1.Primitive.Int.read(_data);
                let offsetId = await index_js_1.Primitive.Int.read(_data);
                let offsetDate = await index_js_1.Primitive.Int.read(_data);
                let addOffset = await index_js_1.Primitive.Int.read(_data);
                let limit = await index_js_1.Primitive.Int.read(_data);
                let maxId = await index_js_1.Primitive.Int.read(_data);
                let minId = await index_js_1.Primitive.Int.read(_data);
                let hash = await index_js_1.Primitive.Long.read(_data);
                return new Raw.messages.GetReplies({
                    peer: peer,
                    msgId: msgId,
                    offsetId: offsetId,
                    offsetDate: offsetDate,
                    addOffset: addOffset,
                    limit: limit,
                    maxId: maxId,
                    minId: minId,
                    hash: hash,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.msgId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.msgId));
                }
                if (this.offsetId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.offsetId));
                }
                if (this.offsetDate !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.offsetDate));
                }
                if (this.addOffset !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.addOffset));
                }
                if (this.limit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.limit));
                }
                if (this.maxId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.maxId));
                }
                if (this.minId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.minId));
                }
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetReplies = GetReplies;
        class GetDiscussionMessage extends index_js_1.TLObject {
            __response__;
            peer;
            msgId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetDiscussionMessage';
                this.constructorId = 0x446972fd;
                this.subclassOfId = 0x53f8e3e8;
                this._slots = ['peer', 'msgId'];
                this.peer = params.peer;
                this.msgId = params.msgId;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let msgId = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.GetDiscussionMessage({ peer: peer, msgId: msgId });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.msgId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.msgId));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetDiscussionMessage = GetDiscussionMessage;
        class ReadDiscussion extends index_js_1.TLObject {
            __response__;
            peer;
            msgId;
            readMaxId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.ReadDiscussion';
                this.constructorId = 0xf731a9f4;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['peer', 'msgId', 'readMaxId'];
                this.peer = params.peer;
                this.msgId = params.msgId;
                this.readMaxId = params.readMaxId;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let msgId = await index_js_1.Primitive.Int.read(_data);
                let readMaxId = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.ReadDiscussion({ peer: peer, msgId: msgId, readMaxId: readMaxId });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.msgId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.msgId));
                }
                if (this.readMaxId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.readMaxId));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.ReadDiscussion = ReadDiscussion;
        class UnpinAllMessages extends index_js_1.TLObject {
            __response__;
            peer;
            topMsgId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.UnpinAllMessages';
                this.constructorId = 0xee22b9a8;
                this.subclassOfId = 0x2c49c116;
                this._slots = ['peer', 'topMsgId'];
                this.peer = params.peer;
                this.topMsgId = params.topMsgId;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let peer = await index_js_1.TLObject.read(_data);
                let topMsgId = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                return new Raw.messages.UnpinAllMessages({ peer: peer, topMsgId: topMsgId });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.topMsgId !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.topMsgId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.topMsgId));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.UnpinAllMessages = UnpinAllMessages;
        class DeleteChat extends index_js_1.TLObject {
            __response__;
            chatId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.DeleteChat';
                this.constructorId = 0x5bd0ee50;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['chatId'];
                this.chatId = params.chatId;
            }
            static async read(_data, ..._args) {
                let chatId = await index_js_1.Primitive.Long.read(_data);
                return new Raw.messages.DeleteChat({ chatId: chatId });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.chatId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.chatId));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.DeleteChat = DeleteChat;
        class DeletePhoneCallHistory extends index_js_1.TLObject {
            __response__;
            revoke;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.DeletePhoneCallHistory';
                this.constructorId = 0xf9cbe409;
                this.subclassOfId = 0xf817652e;
                this._slots = ['revoke'];
                this.revoke = params.revoke;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let revoke = flags & (1 << 0) ? true : false;
                return new Raw.messages.DeletePhoneCallHistory({ revoke: revoke });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.revoke ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.DeletePhoneCallHistory = DeletePhoneCallHistory;
        class CheckHistoryImport extends index_js_1.TLObject {
            __response__;
            importHead;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.CheckHistoryImport';
                this.constructorId = 0x43fe19f3;
                this.subclassOfId = 0x5bb2720b;
                this._slots = ['importHead'];
                this.importHead = params.importHead;
            }
            static async read(_data, ..._args) {
                let importHead = await index_js_1.Primitive.String.read(_data);
                return new Raw.messages.CheckHistoryImport({ importHead: importHead });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.importHead !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.importHead));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.CheckHistoryImport = CheckHistoryImport;
        class InitHistoryImport extends index_js_1.TLObject {
            __response__;
            peer;
            file;
            mediaCount;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.InitHistoryImport';
                this.constructorId = 0x34090c3b;
                this.subclassOfId = 0xb18bb50a;
                this._slots = ['peer', 'file', 'mediaCount'];
                this.peer = params.peer;
                this.file = params.file;
                this.mediaCount = params.mediaCount;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let file = await index_js_1.TLObject.read(_data);
                let mediaCount = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.InitHistoryImport({
                    peer: peer,
                    file: file,
                    mediaCount: mediaCount,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.file !== undefined) {
                    b.write(this.file.write());
                }
                if (this.mediaCount !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.mediaCount));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.InitHistoryImport = InitHistoryImport;
        class UploadImportedMedia extends index_js_1.TLObject {
            __response__;
            peer;
            importId;
            fileName;
            media;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.UploadImportedMedia';
                this.constructorId = 0x2a862092;
                this.subclassOfId = 0x476cbe32;
                this._slots = ['peer', 'importId', 'fileName', 'media'];
                this.peer = params.peer;
                this.importId = params.importId;
                this.fileName = params.fileName;
                this.media = params.media;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let importId = await index_js_1.Primitive.Long.read(_data);
                let fileName = await index_js_1.Primitive.String.read(_data);
                let media = await index_js_1.TLObject.read(_data);
                return new Raw.messages.UploadImportedMedia({
                    peer: peer,
                    importId: importId,
                    fileName: fileName,
                    media: media,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.importId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.importId));
                }
                if (this.fileName !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.fileName));
                }
                if (this.media !== undefined) {
                    b.write(this.media.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.UploadImportedMedia = UploadImportedMedia;
        class StartHistoryImport extends index_js_1.TLObject {
            __response__;
            peer;
            importId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.StartHistoryImport';
                this.constructorId = 0xb43df344;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['peer', 'importId'];
                this.peer = params.peer;
                this.importId = params.importId;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let importId = await index_js_1.Primitive.Long.read(_data);
                return new Raw.messages.StartHistoryImport({ peer: peer, importId: importId });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.importId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.importId));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.StartHistoryImport = StartHistoryImport;
        class GetExportedChatInvites extends index_js_1.TLObject {
            __response__;
            revoked;
            peer;
            adminId;
            offsetDate;
            offsetLink;
            limit;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetExportedChatInvites';
                this.constructorId = 0xa2b5a3f6;
                this.subclassOfId = 0x603d3871;
                this._slots = ['revoked', 'peer', 'adminId', 'offsetDate', 'offsetLink', 'limit'];
                this.revoked = params.revoked;
                this.peer = params.peer;
                this.adminId = params.adminId;
                this.offsetDate = params.offsetDate;
                this.offsetLink = params.offsetLink;
                this.limit = params.limit;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let revoked = flags & (1 << 3) ? true : false;
                let peer = await index_js_1.TLObject.read(_data);
                let adminId = await index_js_1.TLObject.read(_data);
                let offsetDate = flags & (1 << 2) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let offsetLink = flags & (1 << 2) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let limit = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.GetExportedChatInvites({
                    revoked: revoked,
                    peer: peer,
                    adminId: adminId,
                    offsetDate: offsetDate,
                    offsetLink: offsetLink,
                    limit: limit,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.revoked ? 1 << 3 : 0;
                flags |= this.offsetDate !== undefined ? 1 << 2 : 0;
                flags |= this.offsetLink !== undefined ? 1 << 2 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.adminId !== undefined) {
                    b.write(this.adminId.write());
                }
                if (this.offsetDate !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.offsetDate));
                }
                if (this.offsetLink !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.offsetLink));
                }
                if (this.limit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.limit));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetExportedChatInvites = GetExportedChatInvites;
        class GetExportedChatInvite extends index_js_1.TLObject {
            __response__;
            peer;
            link;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetExportedChatInvite';
                this.constructorId = 0x73746f5c;
                this.subclassOfId = 0x82dcd4ca;
                this._slots = ['peer', 'link'];
                this.peer = params.peer;
                this.link = params.link;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let link = await index_js_1.Primitive.String.read(_data);
                return new Raw.messages.GetExportedChatInvite({ peer: peer, link: link });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.link !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.link));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetExportedChatInvite = GetExportedChatInvite;
        class EditExportedChatInvite extends index_js_1.TLObject {
            __response__;
            revoked;
            peer;
            link;
            expireDate;
            usageLimit;
            requestNeeded;
            title;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.EditExportedChatInvite';
                this.constructorId = 0xbdca2f75;
                this.subclassOfId = 0x82dcd4ca;
                this._slots = [
                    'revoked',
                    'peer',
                    'link',
                    'expireDate',
                    'usageLimit',
                    'requestNeeded',
                    'title',
                ];
                this.revoked = params.revoked;
                this.peer = params.peer;
                this.link = params.link;
                this.expireDate = params.expireDate;
                this.usageLimit = params.usageLimit;
                this.requestNeeded = params.requestNeeded;
                this.title = params.title;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let revoked = flags & (1 << 2) ? true : false;
                let peer = await index_js_1.TLObject.read(_data);
                let link = await index_js_1.Primitive.String.read(_data);
                let expireDate = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let usageLimit = flags & (1 << 1) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let requestNeeded = flags & (1 << 3) ? await index_js_1.Primitive.Bool.read(_data) : undefined;
                let title = flags & (1 << 4) ? await index_js_1.Primitive.String.read(_data) : undefined;
                return new Raw.messages.EditExportedChatInvite({
                    revoked: revoked,
                    peer: peer,
                    link: link,
                    expireDate: expireDate,
                    usageLimit: usageLimit,
                    requestNeeded: requestNeeded,
                    title: title,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.revoked ? 1 << 2 : 0;
                flags |= this.expireDate !== undefined ? 1 << 0 : 0;
                flags |= this.usageLimit !== undefined ? 1 << 1 : 0;
                flags |= this.requestNeeded !== undefined ? 1 << 3 : 0;
                flags |= this.title !== undefined ? 1 << 4 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.link !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.link));
                }
                if (this.expireDate !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.expireDate));
                }
                if (this.usageLimit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.usageLimit));
                }
                if (this.requestNeeded !== undefined) {
                    b.write(index_js_1.Primitive.Bool.write(this.requestNeeded));
                }
                if (this.title !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.title));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.EditExportedChatInvite = EditExportedChatInvite;
        class DeleteRevokedExportedChatInvites extends index_js_1.TLObject {
            __response__;
            peer;
            adminId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.DeleteRevokedExportedChatInvites';
                this.constructorId = 0x56987bd5;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['peer', 'adminId'];
                this.peer = params.peer;
                this.adminId = params.adminId;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let adminId = await index_js_1.TLObject.read(_data);
                return new Raw.messages.DeleteRevokedExportedChatInvites({ peer: peer, adminId: adminId });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.adminId !== undefined) {
                    b.write(this.adminId.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.DeleteRevokedExportedChatInvites = DeleteRevokedExportedChatInvites;
        class DeleteExportedChatInvite extends index_js_1.TLObject {
            __response__;
            peer;
            link;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.DeleteExportedChatInvite';
                this.constructorId = 0xd464a42b;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['peer', 'link'];
                this.peer = params.peer;
                this.link = params.link;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let link = await index_js_1.Primitive.String.read(_data);
                return new Raw.messages.DeleteExportedChatInvite({ peer: peer, link: link });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.link !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.link));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.DeleteExportedChatInvite = DeleteExportedChatInvite;
        class GetAdminsWithInvites extends index_js_1.TLObject {
            __response__;
            peer;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetAdminsWithInvites';
                this.constructorId = 0x3920e6ef;
                this.subclassOfId = 0x8f5bad2b;
                this._slots = ['peer'];
                this.peer = params.peer;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                return new Raw.messages.GetAdminsWithInvites({ peer: peer });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetAdminsWithInvites = GetAdminsWithInvites;
        class GetChatInviteImporters extends index_js_1.TLObject {
            __response__;
            requested;
            peer;
            link;
            q;
            offsetDate;
            offsetUser;
            limit;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetChatInviteImporters';
                this.constructorId = 0xdf04dd4e;
                this.subclassOfId = 0xd9bc8aa6;
                this._slots = ['requested', 'peer', 'link', 'q', 'offsetDate', 'offsetUser', 'limit'];
                this.requested = params.requested;
                this.peer = params.peer;
                this.link = params.link;
                this.q = params.q;
                this.offsetDate = params.offsetDate;
                this.offsetUser = params.offsetUser;
                this.limit = params.limit;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let requested = flags & (1 << 0) ? true : false;
                let peer = await index_js_1.TLObject.read(_data);
                let link = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let q = flags & (1 << 2) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let offsetDate = await index_js_1.Primitive.Int.read(_data);
                let offsetUser = await index_js_1.TLObject.read(_data);
                let limit = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.GetChatInviteImporters({
                    requested: requested,
                    peer: peer,
                    link: link,
                    q: q,
                    offsetDate: offsetDate,
                    offsetUser: offsetUser,
                    limit: limit,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.requested ? 1 << 0 : 0;
                flags |= this.link !== undefined ? 1 << 1 : 0;
                flags |= this.q !== undefined ? 1 << 2 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.link !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.link));
                }
                if (this.q !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.q));
                }
                if (this.offsetDate !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.offsetDate));
                }
                if (this.offsetUser !== undefined) {
                    b.write(this.offsetUser.write());
                }
                if (this.limit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.limit));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetChatInviteImporters = GetChatInviteImporters;
        class SetHistoryTTL extends index_js_1.TLObject {
            __response__;
            peer;
            period;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.SetHistoryTTL';
                this.constructorId = 0xb80e5fe4;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['peer', 'period'];
                this.peer = params.peer;
                this.period = params.period;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let period = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.SetHistoryTTL({ peer: peer, period: period });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.period !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.period));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SetHistoryTTL = SetHistoryTTL;
        class CheckHistoryImportPeer extends index_js_1.TLObject {
            __response__;
            peer;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.CheckHistoryImportPeer';
                this.constructorId = 0x5dc60f03;
                this.subclassOfId = 0xb84bb337;
                this._slots = ['peer'];
                this.peer = params.peer;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                return new Raw.messages.CheckHistoryImportPeer({ peer: peer });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.CheckHistoryImportPeer = CheckHistoryImportPeer;
        class SetChatTheme extends index_js_1.TLObject {
            __response__;
            peer;
            emoticon;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.SetChatTheme';
                this.constructorId = 0xe63be13f;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['peer', 'emoticon'];
                this.peer = params.peer;
                this.emoticon = params.emoticon;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let emoticon = await index_js_1.Primitive.String.read(_data);
                return new Raw.messages.SetChatTheme({ peer: peer, emoticon: emoticon });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.emoticon !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.emoticon));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SetChatTheme = SetChatTheme;
        class GetMessageReadParticipants extends index_js_1.TLObject {
            __response__;
            peer;
            msgId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetMessageReadParticipants';
                this.constructorId = 0x31c1c44f;
                this.subclassOfId = 0x21ca455b;
                this._slots = ['peer', 'msgId'];
                this.peer = params.peer;
                this.msgId = params.msgId;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let msgId = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.GetMessageReadParticipants({ peer: peer, msgId: msgId });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.msgId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.msgId));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetMessageReadParticipants = GetMessageReadParticipants;
        class GetSearchResultsCalendar extends index_js_1.TLObject {
            __response__;
            peer;
            savedPeerId;
            filter;
            offsetId;
            offsetDate;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetSearchResultsCalendar';
                this.constructorId = 0x6aa3f6bd;
                this.subclassOfId = 0x92c5640f;
                this._slots = ['peer', 'savedPeerId', 'filter', 'offsetId', 'offsetDate'];
                this.peer = params.peer;
                this.savedPeerId = params.savedPeerId;
                this.filter = params.filter;
                this.offsetId = params.offsetId;
                this.offsetDate = params.offsetDate;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let peer = await index_js_1.TLObject.read(_data);
                let savedPeerId = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
                let filter = await index_js_1.TLObject.read(_data);
                let offsetId = await index_js_1.Primitive.Int.read(_data);
                let offsetDate = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.GetSearchResultsCalendar({
                    peer: peer,
                    savedPeerId: savedPeerId,
                    filter: filter,
                    offsetId: offsetId,
                    offsetDate: offsetDate,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.savedPeerId !== undefined ? 1 << 2 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.savedPeerId !== undefined) {
                    b.write(this.savedPeerId.write());
                }
                if (this.filter !== undefined) {
                    b.write(this.filter.write());
                }
                if (this.offsetId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.offsetId));
                }
                if (this.offsetDate !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.offsetDate));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetSearchResultsCalendar = GetSearchResultsCalendar;
        class GetSearchResultsPositions extends index_js_1.TLObject {
            __response__;
            peer;
            savedPeerId;
            filter;
            offsetId;
            limit;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetSearchResultsPositions';
                this.constructorId = 0x9c7f2f10;
                this.subclassOfId = 0xd963708d;
                this._slots = ['peer', 'savedPeerId', 'filter', 'offsetId', 'limit'];
                this.peer = params.peer;
                this.savedPeerId = params.savedPeerId;
                this.filter = params.filter;
                this.offsetId = params.offsetId;
                this.limit = params.limit;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let peer = await index_js_1.TLObject.read(_data);
                let savedPeerId = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
                let filter = await index_js_1.TLObject.read(_data);
                let offsetId = await index_js_1.Primitive.Int.read(_data);
                let limit = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.GetSearchResultsPositions({
                    peer: peer,
                    savedPeerId: savedPeerId,
                    filter: filter,
                    offsetId: offsetId,
                    limit: limit,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.savedPeerId !== undefined ? 1 << 2 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.savedPeerId !== undefined) {
                    b.write(this.savedPeerId.write());
                }
                if (this.filter !== undefined) {
                    b.write(this.filter.write());
                }
                if (this.offsetId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.offsetId));
                }
                if (this.limit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.limit));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetSearchResultsPositions = GetSearchResultsPositions;
        class HideChatJoinRequest extends index_js_1.TLObject {
            __response__;
            approved;
            peer;
            userId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.HideChatJoinRequest';
                this.constructorId = 0x7fe7e815;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['approved', 'peer', 'userId'];
                this.approved = params.approved;
                this.peer = params.peer;
                this.userId = params.userId;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let approved = flags & (1 << 0) ? true : false;
                let peer = await index_js_1.TLObject.read(_data);
                let userId = await index_js_1.TLObject.read(_data);
                return new Raw.messages.HideChatJoinRequest({
                    approved: approved,
                    peer: peer,
                    userId: userId,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.approved ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.userId !== undefined) {
                    b.write(this.userId.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.HideChatJoinRequest = HideChatJoinRequest;
        class HideAllChatJoinRequests extends index_js_1.TLObject {
            __response__;
            approved;
            peer;
            link;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.HideAllChatJoinRequests';
                this.constructorId = 0xe085f4ea;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['approved', 'peer', 'link'];
                this.approved = params.approved;
                this.peer = params.peer;
                this.link = params.link;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let approved = flags & (1 << 0) ? true : false;
                let peer = await index_js_1.TLObject.read(_data);
                let link = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
                return new Raw.messages.HideAllChatJoinRequests({
                    approved: approved,
                    peer: peer,
                    link: link,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.approved ? 1 << 0 : 0;
                flags |= this.link !== undefined ? 1 << 1 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.link !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.link));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.HideAllChatJoinRequests = HideAllChatJoinRequests;
        class ToggleNoForwards extends index_js_1.TLObject {
            __response__;
            peer;
            enabled;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.ToggleNoForwards';
                this.constructorId = 0xb11eafa2;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['peer', 'enabled'];
                this.peer = params.peer;
                this.enabled = params.enabled;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let enabled = await index_js_1.Primitive.Bool.read(_data);
                return new Raw.messages.ToggleNoForwards({ peer: peer, enabled: enabled });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.enabled !== undefined) {
                    b.write(index_js_1.Primitive.Bool.write(this.enabled));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.ToggleNoForwards = ToggleNoForwards;
        class SaveDefaultSendAs extends index_js_1.TLObject {
            __response__;
            peer;
            sendAs;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.SaveDefaultSendAs';
                this.constructorId = 0xccfddf96;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['peer', 'sendAs'];
                this.peer = params.peer;
                this.sendAs = params.sendAs;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let sendAs = await index_js_1.TLObject.read(_data);
                return new Raw.messages.SaveDefaultSendAs({ peer: peer, sendAs: sendAs });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.sendAs !== undefined) {
                    b.write(this.sendAs.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SaveDefaultSendAs = SaveDefaultSendAs;
        class SendReaction extends index_js_1.TLObject {
            __response__;
            big;
            addToRecent;
            peer;
            msgId;
            reaction;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.SendReaction';
                this.constructorId = 0xd30d78d4;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['big', 'addToRecent', 'peer', 'msgId', 'reaction'];
                this.big = params.big;
                this.addToRecent = params.addToRecent;
                this.peer = params.peer;
                this.msgId = params.msgId;
                this.reaction = params.reaction;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let big = flags & (1 << 1) ? true : false;
                let addToRecent = flags & (1 << 2) ? true : false;
                let peer = await index_js_1.TLObject.read(_data);
                let msgId = await index_js_1.Primitive.Int.read(_data);
                let reaction = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : [];
                return new Raw.messages.SendReaction({
                    big: big,
                    addToRecent: addToRecent,
                    peer: peer,
                    msgId: msgId,
                    reaction: reaction,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.big ? 1 << 1 : 0;
                flags |= this.addToRecent ? 1 << 2 : 0;
                flags |= this.reaction ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.msgId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.msgId));
                }
                if (this.reaction) {
                    b.write(index_js_1.Primitive.Vector.write(this.reaction));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SendReaction = SendReaction;
        class GetMessagesReactions extends index_js_1.TLObject {
            __response__;
            peer;
            id;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetMessagesReactions';
                this.constructorId = 0x8bba90e6;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['peer', 'id'];
                this.peer = params.peer;
                this.id = params.id;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let id = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int);
                return new Raw.messages.GetMessagesReactions({ peer: peer, id: id });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.id) {
                    b.write(index_js_1.Primitive.Vector.write(this.id, index_js_1.Primitive.Int));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetMessagesReactions = GetMessagesReactions;
        class GetMessageReactionsList extends index_js_1.TLObject {
            __response__;
            peer;
            id;
            reaction;
            offset;
            limit;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetMessageReactionsList';
                this.constructorId = 0x461b3f48;
                this.subclassOfId = 0x60fce5e6;
                this._slots = ['peer', 'id', 'reaction', 'offset', 'limit'];
                this.peer = params.peer;
                this.id = params.id;
                this.reaction = params.reaction;
                this.offset = params.offset;
                this.limit = params.limit;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let peer = await index_js_1.TLObject.read(_data);
                let id = await index_js_1.Primitive.Int.read(_data);
                let reaction = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
                let offset = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let limit = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.GetMessageReactionsList({
                    peer: peer,
                    id: id,
                    reaction: reaction,
                    offset: offset,
                    limit: limit,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.reaction !== undefined ? 1 << 0 : 0;
                flags |= this.offset !== undefined ? 1 << 1 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.id !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.id));
                }
                if (this.reaction !== undefined) {
                    b.write(this.reaction.write());
                }
                if (this.offset !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.offset));
                }
                if (this.limit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.limit));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetMessageReactionsList = GetMessageReactionsList;
        class SetChatAvailableReactions extends index_js_1.TLObject {
            __response__;
            peer;
            availableReactions;
            reactionsLimit;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.SetChatAvailableReactions';
                this.constructorId = 0x5a150bd4;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['peer', 'availableReactions', 'reactionsLimit'];
                this.peer = params.peer;
                this.availableReactions = params.availableReactions;
                this.reactionsLimit = params.reactionsLimit;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let peer = await index_js_1.TLObject.read(_data);
                let availableReactions = await index_js_1.TLObject.read(_data);
                let reactionsLimit = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                return new Raw.messages.SetChatAvailableReactions({
                    peer: peer,
                    availableReactions: availableReactions,
                    reactionsLimit: reactionsLimit,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.reactionsLimit !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.availableReactions !== undefined) {
                    b.write(this.availableReactions.write());
                }
                if (this.reactionsLimit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.reactionsLimit));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SetChatAvailableReactions = SetChatAvailableReactions;
        class GetAvailableReactions extends index_js_1.TLObject {
            __response__;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetAvailableReactions';
                this.constructorId = 0x18dea0ac;
                this.subclassOfId = 0xe426ad82;
                this._slots = ['hash'];
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.GetAvailableReactions({ hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetAvailableReactions = GetAvailableReactions;
        class SetDefaultReaction extends index_js_1.TLObject {
            __response__;
            reaction;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.SetDefaultReaction';
                this.constructorId = 0x4f47a016;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['reaction'];
                this.reaction = params.reaction;
            }
            static async read(_data, ..._args) {
                let reaction = await index_js_1.TLObject.read(_data);
                return new Raw.messages.SetDefaultReaction({ reaction: reaction });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.reaction !== undefined) {
                    b.write(this.reaction.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SetDefaultReaction = SetDefaultReaction;
        class TranslateText extends index_js_1.TLObject {
            __response__;
            peer;
            id;
            text;
            toLang;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.TranslateText';
                this.constructorId = 0x63183030;
                this.subclassOfId = 0x24243e8;
                this._slots = ['peer', 'id', 'text', 'toLang'];
                this.peer = params.peer;
                this.id = params.id;
                this.text = params.text;
                this.toLang = params.toLang;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let peer = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
                let id = flags & (1 << 0) ? await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int) : [];
                let text = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : [];
                let toLang = await index_js_1.Primitive.String.read(_data);
                return new Raw.messages.TranslateText({ peer: peer, id: id, text: text, toLang: toLang });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.peer !== undefined ? 1 << 0 : 0;
                flags |= this.id ? 1 << 0 : 0;
                flags |= this.text ? 1 << 1 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.id) {
                    b.write(index_js_1.Primitive.Vector.write(this.id, index_js_1.Primitive.Int));
                }
                if (this.text) {
                    b.write(index_js_1.Primitive.Vector.write(this.text));
                }
                if (this.toLang !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.toLang));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.TranslateText = TranslateText;
        class GetUnreadReactions extends index_js_1.TLObject {
            __response__;
            peer;
            topMsgId;
            offsetId;
            addOffset;
            limit;
            maxId;
            minId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetUnreadReactions';
                this.constructorId = 0x3223495b;
                this.subclassOfId = 0xd4b40b5e;
                this._slots = ['peer', 'topMsgId', 'offsetId', 'addOffset', 'limit', 'maxId', 'minId'];
                this.peer = params.peer;
                this.topMsgId = params.topMsgId;
                this.offsetId = params.offsetId;
                this.addOffset = params.addOffset;
                this.limit = params.limit;
                this.maxId = params.maxId;
                this.minId = params.minId;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let peer = await index_js_1.TLObject.read(_data);
                let topMsgId = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let offsetId = await index_js_1.Primitive.Int.read(_data);
                let addOffset = await index_js_1.Primitive.Int.read(_data);
                let limit = await index_js_1.Primitive.Int.read(_data);
                let maxId = await index_js_1.Primitive.Int.read(_data);
                let minId = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.GetUnreadReactions({
                    peer: peer,
                    topMsgId: topMsgId,
                    offsetId: offsetId,
                    addOffset: addOffset,
                    limit: limit,
                    maxId: maxId,
                    minId: minId,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.topMsgId !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.topMsgId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.topMsgId));
                }
                if (this.offsetId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.offsetId));
                }
                if (this.addOffset !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.addOffset));
                }
                if (this.limit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.limit));
                }
                if (this.maxId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.maxId));
                }
                if (this.minId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.minId));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetUnreadReactions = GetUnreadReactions;
        class ReadReactions extends index_js_1.TLObject {
            __response__;
            peer;
            topMsgId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.ReadReactions';
                this.constructorId = 0x54aa7f8e;
                this.subclassOfId = 0x2c49c116;
                this._slots = ['peer', 'topMsgId'];
                this.peer = params.peer;
                this.topMsgId = params.topMsgId;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let peer = await index_js_1.TLObject.read(_data);
                let topMsgId = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                return new Raw.messages.ReadReactions({ peer: peer, topMsgId: topMsgId });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.topMsgId !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.topMsgId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.topMsgId));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.ReadReactions = ReadReactions;
        class SearchSentMedia extends index_js_1.TLObject {
            __response__;
            q;
            filter;
            limit;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.SearchSentMedia';
                this.constructorId = 0x107e31a0;
                this.subclassOfId = 0xd4b40b5e;
                this._slots = ['q', 'filter', 'limit'];
                this.q = params.q;
                this.filter = params.filter;
                this.limit = params.limit;
            }
            static async read(_data, ..._args) {
                let q = await index_js_1.Primitive.String.read(_data);
                let filter = await index_js_1.TLObject.read(_data);
                let limit = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.SearchSentMedia({ q: q, filter: filter, limit: limit });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.q !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.q));
                }
                if (this.filter !== undefined) {
                    b.write(this.filter.write());
                }
                if (this.limit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.limit));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SearchSentMedia = SearchSentMedia;
        class GetAttachMenuBots extends index_js_1.TLObject {
            __response__;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetAttachMenuBots';
                this.constructorId = 0x16fcc2cb;
                this.subclassOfId = 0x842e23da;
                this._slots = ['hash'];
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Long.read(_data);
                return new Raw.messages.GetAttachMenuBots({ hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetAttachMenuBots = GetAttachMenuBots;
        class GetAttachMenuBot extends index_js_1.TLObject {
            __response__;
            bot;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetAttachMenuBot';
                this.constructorId = 0x77216192;
                this.subclassOfId = 0xdb33883d;
                this._slots = ['bot'];
                this.bot = params.bot;
            }
            static async read(_data, ..._args) {
                let bot = await index_js_1.TLObject.read(_data);
                return new Raw.messages.GetAttachMenuBot({ bot: bot });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.bot !== undefined) {
                    b.write(this.bot.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetAttachMenuBot = GetAttachMenuBot;
        class ToggleBotInAttachMenu extends index_js_1.TLObject {
            __response__;
            writeAllowed;
            bot;
            enabled;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.ToggleBotInAttachMenu';
                this.constructorId = 0x69f59d69;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['writeAllowed', 'bot', 'enabled'];
                this.writeAllowed = params.writeAllowed;
                this.bot = params.bot;
                this.enabled = params.enabled;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let writeAllowed = flags & (1 << 0) ? true : false;
                let bot = await index_js_1.TLObject.read(_data);
                let enabled = await index_js_1.Primitive.Bool.read(_data);
                return new Raw.messages.ToggleBotInAttachMenu({
                    writeAllowed: writeAllowed,
                    bot: bot,
                    enabled: enabled,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.writeAllowed ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.bot !== undefined) {
                    b.write(this.bot.write());
                }
                if (this.enabled !== undefined) {
                    b.write(index_js_1.Primitive.Bool.write(this.enabled));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.ToggleBotInAttachMenu = ToggleBotInAttachMenu;
        class RequestWebView extends index_js_1.TLObject {
            __response__;
            fromBotMenu;
            silent;
            peer;
            bot;
            url;
            startParam;
            themeParams;
            platform;
            replyTo;
            sendAs;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.RequestWebView';
                this.constructorId = 0x269dc2c1;
                this.subclassOfId = 0x93cea746;
                this._slots = [
                    'fromBotMenu',
                    'silent',
                    'peer',
                    'bot',
                    'url',
                    'startParam',
                    'themeParams',
                    'platform',
                    'replyTo',
                    'sendAs',
                ];
                this.fromBotMenu = params.fromBotMenu;
                this.silent = params.silent;
                this.peer = params.peer;
                this.bot = params.bot;
                this.url = params.url;
                this.startParam = params.startParam;
                this.themeParams = params.themeParams;
                this.platform = params.platform;
                this.replyTo = params.replyTo;
                this.sendAs = params.sendAs;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let fromBotMenu = flags & (1 << 4) ? true : false;
                let silent = flags & (1 << 5) ? true : false;
                let peer = await index_js_1.TLObject.read(_data);
                let bot = await index_js_1.TLObject.read(_data);
                let url = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let startParam = flags & (1 << 3) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let themeParams = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
                let platform = await index_js_1.Primitive.String.read(_data);
                let replyTo = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
                let sendAs = flags & (1 << 13) ? await index_js_1.TLObject.read(_data) : undefined;
                return new Raw.messages.RequestWebView({
                    fromBotMenu: fromBotMenu,
                    silent: silent,
                    peer: peer,
                    bot: bot,
                    url: url,
                    startParam: startParam,
                    themeParams: themeParams,
                    platform: platform,
                    replyTo: replyTo,
                    sendAs: sendAs,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.fromBotMenu ? 1 << 4 : 0;
                flags |= this.silent ? 1 << 5 : 0;
                flags |= this.url !== undefined ? 1 << 1 : 0;
                flags |= this.startParam !== undefined ? 1 << 3 : 0;
                flags |= this.themeParams !== undefined ? 1 << 2 : 0;
                flags |= this.replyTo !== undefined ? 1 << 0 : 0;
                flags |= this.sendAs !== undefined ? 1 << 13 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.bot !== undefined) {
                    b.write(this.bot.write());
                }
                if (this.url !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.url));
                }
                if (this.startParam !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.startParam));
                }
                if (this.themeParams !== undefined) {
                    b.write(this.themeParams.write());
                }
                if (this.platform !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.platform));
                }
                if (this.replyTo !== undefined) {
                    b.write(this.replyTo.write());
                }
                if (this.sendAs !== undefined) {
                    b.write(this.sendAs.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.RequestWebView = RequestWebView;
        class ProlongWebView extends index_js_1.TLObject {
            __response__;
            silent;
            peer;
            bot;
            queryId;
            replyTo;
            sendAs;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.ProlongWebView';
                this.constructorId = 0xb0d81a83;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['silent', 'peer', 'bot', 'queryId', 'replyTo', 'sendAs'];
                this.silent = params.silent;
                this.peer = params.peer;
                this.bot = params.bot;
                this.queryId = params.queryId;
                this.replyTo = params.replyTo;
                this.sendAs = params.sendAs;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let silent = flags & (1 << 5) ? true : false;
                let peer = await index_js_1.TLObject.read(_data);
                let bot = await index_js_1.TLObject.read(_data);
                let queryId = await index_js_1.Primitive.Long.read(_data);
                let replyTo = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
                let sendAs = flags & (1 << 13) ? await index_js_1.TLObject.read(_data) : undefined;
                return new Raw.messages.ProlongWebView({
                    silent: silent,
                    peer: peer,
                    bot: bot,
                    queryId: queryId,
                    replyTo: replyTo,
                    sendAs: sendAs,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.silent ? 1 << 5 : 0;
                flags |= this.replyTo !== undefined ? 1 << 0 : 0;
                flags |= this.sendAs !== undefined ? 1 << 13 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.bot !== undefined) {
                    b.write(this.bot.write());
                }
                if (this.queryId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.queryId));
                }
                if (this.replyTo !== undefined) {
                    b.write(this.replyTo.write());
                }
                if (this.sendAs !== undefined) {
                    b.write(this.sendAs.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.ProlongWebView = ProlongWebView;
        class RequestSimpleWebView extends index_js_1.TLObject {
            __response__;
            fromSwitchWebview;
            fromSideMenu;
            bot;
            url;
            startParam;
            themeParams;
            platform;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.RequestSimpleWebView';
                this.constructorId = 0x1a46500a;
                this.subclassOfId = 0x15eee3db;
                this._slots = [
                    'fromSwitchWebview',
                    'fromSideMenu',
                    'bot',
                    'url',
                    'startParam',
                    'themeParams',
                    'platform',
                ];
                this.fromSwitchWebview = params.fromSwitchWebview;
                this.fromSideMenu = params.fromSideMenu;
                this.bot = params.bot;
                this.url = params.url;
                this.startParam = params.startParam;
                this.themeParams = params.themeParams;
                this.platform = params.platform;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let fromSwitchWebview = flags & (1 << 1) ? true : false;
                let fromSideMenu = flags & (1 << 2) ? true : false;
                let bot = await index_js_1.TLObject.read(_data);
                let url = flags & (1 << 3) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let startParam = flags & (1 << 4) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let themeParams = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
                let platform = await index_js_1.Primitive.String.read(_data);
                return new Raw.messages.RequestSimpleWebView({
                    fromSwitchWebview: fromSwitchWebview,
                    fromSideMenu: fromSideMenu,
                    bot: bot,
                    url: url,
                    startParam: startParam,
                    themeParams: themeParams,
                    platform: platform,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.fromSwitchWebview ? 1 << 1 : 0;
                flags |= this.fromSideMenu ? 1 << 2 : 0;
                flags |= this.url !== undefined ? 1 << 3 : 0;
                flags |= this.startParam !== undefined ? 1 << 4 : 0;
                flags |= this.themeParams !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.bot !== undefined) {
                    b.write(this.bot.write());
                }
                if (this.url !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.url));
                }
                if (this.startParam !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.startParam));
                }
                if (this.themeParams !== undefined) {
                    b.write(this.themeParams.write());
                }
                if (this.platform !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.platform));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.RequestSimpleWebView = RequestSimpleWebView;
        class SendWebViewResultMessage extends index_js_1.TLObject {
            __response__;
            botQueryId;
            result;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.SendWebViewResultMessage';
                this.constructorId = 0xa4314f5;
                this.subclassOfId = 0x75e49312;
                this._slots = ['botQueryId', 'result'];
                this.botQueryId = params.botQueryId;
                this.result = params.result;
            }
            static async read(_data, ..._args) {
                let botQueryId = await index_js_1.Primitive.String.read(_data);
                let result = await index_js_1.TLObject.read(_data);
                return new Raw.messages.SendWebViewResultMessage({
                    botQueryId: botQueryId,
                    result: result,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.botQueryId !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.botQueryId));
                }
                if (this.result !== undefined) {
                    b.write(this.result.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SendWebViewResultMessage = SendWebViewResultMessage;
        class SendWebViewData extends index_js_1.TLObject {
            __response__;
            bot;
            randomId;
            buttonText;
            data;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.SendWebViewData';
                this.constructorId = 0xdc0242c8;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['bot', 'randomId', 'buttonText', 'data'];
                this.bot = params.bot;
                this.randomId = params.randomId;
                this.buttonText = params.buttonText;
                this.data = params.data;
            }
            static async read(_data, ..._args) {
                let bot = await index_js_1.TLObject.read(_data);
                let randomId = await index_js_1.Primitive.Long.read(_data);
                let buttonText = await index_js_1.Primitive.String.read(_data);
                let data = await index_js_1.Primitive.String.read(_data);
                return new Raw.messages.SendWebViewData({
                    bot: bot,
                    randomId: randomId,
                    buttonText: buttonText,
                    data: data,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.bot !== undefined) {
                    b.write(this.bot.write());
                }
                if (this.randomId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.randomId));
                }
                if (this.buttonText !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.buttonText));
                }
                if (this.data !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.data));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SendWebViewData = SendWebViewData;
        class TranscribeAudio extends index_js_1.TLObject {
            __response__;
            peer;
            msgId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.TranscribeAudio';
                this.constructorId = 0x269e9a49;
                this.subclassOfId = 0x21b24936;
                this._slots = ['peer', 'msgId'];
                this.peer = params.peer;
                this.msgId = params.msgId;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let msgId = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.TranscribeAudio({ peer: peer, msgId: msgId });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.msgId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.msgId));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.TranscribeAudio = TranscribeAudio;
        class RateTranscribedAudio extends index_js_1.TLObject {
            __response__;
            peer;
            msgId;
            transcriptionId;
            good;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.RateTranscribedAudio';
                this.constructorId = 0x7f1d072f;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['peer', 'msgId', 'transcriptionId', 'good'];
                this.peer = params.peer;
                this.msgId = params.msgId;
                this.transcriptionId = params.transcriptionId;
                this.good = params.good;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let msgId = await index_js_1.Primitive.Int.read(_data);
                let transcriptionId = await index_js_1.Primitive.Long.read(_data);
                let good = await index_js_1.Primitive.Bool.read(_data);
                return new Raw.messages.RateTranscribedAudio({
                    peer: peer,
                    msgId: msgId,
                    transcriptionId: transcriptionId,
                    good: good,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.msgId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.msgId));
                }
                if (this.transcriptionId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.transcriptionId));
                }
                if (this.good !== undefined) {
                    b.write(index_js_1.Primitive.Bool.write(this.good));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.RateTranscribedAudio = RateTranscribedAudio;
        class GetCustomEmojiDocuments extends index_js_1.TLObject {
            __response__;
            documentId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetCustomEmojiDocuments';
                this.constructorId = 0xd9ab0f54;
                this.subclassOfId = 0xcc590e08;
                this._slots = ['documentId'];
                this.documentId = params.documentId;
            }
            static async read(_data, ..._args) {
                let documentId = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Long);
                return new Raw.messages.GetCustomEmojiDocuments({ documentId: documentId });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.documentId) {
                    b.write(index_js_1.Primitive.Vector.write(this.documentId, index_js_1.Primitive.Long));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetCustomEmojiDocuments = GetCustomEmojiDocuments;
        class GetEmojiStickers extends index_js_1.TLObject {
            __response__;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetEmojiStickers';
                this.constructorId = 0xfbfca18f;
                this.subclassOfId = 0x45834829;
                this._slots = ['hash'];
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Long.read(_data);
                return new Raw.messages.GetEmojiStickers({ hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetEmojiStickers = GetEmojiStickers;
        class GetFeaturedEmojiStickers extends index_js_1.TLObject {
            __response__;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetFeaturedEmojiStickers';
                this.constructorId = 0xecf6736;
                this.subclassOfId = 0x2614b722;
                this._slots = ['hash'];
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Long.read(_data);
                return new Raw.messages.GetFeaturedEmojiStickers({ hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetFeaturedEmojiStickers = GetFeaturedEmojiStickers;
        class ReportReaction extends index_js_1.TLObject {
            __response__;
            peer;
            id;
            reactionPeer;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.ReportReaction';
                this.constructorId = 0x3f64c076;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['peer', 'id', 'reactionPeer'];
                this.peer = params.peer;
                this.id = params.id;
                this.reactionPeer = params.reactionPeer;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let id = await index_js_1.Primitive.Int.read(_data);
                let reactionPeer = await index_js_1.TLObject.read(_data);
                return new Raw.messages.ReportReaction({ peer: peer, id: id, reactionPeer: reactionPeer });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.id !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.id));
                }
                if (this.reactionPeer !== undefined) {
                    b.write(this.reactionPeer.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.ReportReaction = ReportReaction;
        class GetTopReactions extends index_js_1.TLObject {
            __response__;
            limit;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetTopReactions';
                this.constructorId = 0xbb8125ba;
                this.subclassOfId = 0xadc38324;
                this._slots = ['limit', 'hash'];
                this.limit = params.limit;
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let limit = await index_js_1.Primitive.Int.read(_data);
                let hash = await index_js_1.Primitive.Long.read(_data);
                return new Raw.messages.GetTopReactions({ limit: limit, hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.limit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.limit));
                }
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetTopReactions = GetTopReactions;
        class GetRecentReactions extends index_js_1.TLObject {
            __response__;
            limit;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetRecentReactions';
                this.constructorId = 0x39461db2;
                this.subclassOfId = 0xadc38324;
                this._slots = ['limit', 'hash'];
                this.limit = params.limit;
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let limit = await index_js_1.Primitive.Int.read(_data);
                let hash = await index_js_1.Primitive.Long.read(_data);
                return new Raw.messages.GetRecentReactions({ limit: limit, hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.limit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.limit));
                }
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetRecentReactions = GetRecentReactions;
        class ClearRecentReactions extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'messages.ClearRecentReactions';
                this.constructorId = 0x9dfeefb4;
                this.subclassOfId = 0xf5b399ac;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.messages.ClearRecentReactions();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.ClearRecentReactions = ClearRecentReactions;
        class GetExtendedMedia extends index_js_1.TLObject {
            __response__;
            peer;
            id;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetExtendedMedia';
                this.constructorId = 0x84f80814;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['peer', 'id'];
                this.peer = params.peer;
                this.id = params.id;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let id = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int);
                return new Raw.messages.GetExtendedMedia({ peer: peer, id: id });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.id) {
                    b.write(index_js_1.Primitive.Vector.write(this.id, index_js_1.Primitive.Int));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetExtendedMedia = GetExtendedMedia;
        class SetDefaultHistoryTTL extends index_js_1.TLObject {
            __response__;
            period;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.SetDefaultHistoryTTL';
                this.constructorId = 0x9eb51445;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['period'];
                this.period = params.period;
            }
            static async read(_data, ..._args) {
                let period = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.SetDefaultHistoryTTL({ period: period });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.period !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.period));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SetDefaultHistoryTTL = SetDefaultHistoryTTL;
        class GetDefaultHistoryTTL extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetDefaultHistoryTTL';
                this.constructorId = 0x658b7188;
                this.subclassOfId = 0xf00d3367;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.messages.GetDefaultHistoryTTL();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetDefaultHistoryTTL = GetDefaultHistoryTTL;
        class SendBotRequestedPeer extends index_js_1.TLObject {
            __response__;
            peer;
            msgId;
            buttonId;
            requestedPeers;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.SendBotRequestedPeer';
                this.constructorId = 0x91b2d060;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['peer', 'msgId', 'buttonId', 'requestedPeers'];
                this.peer = params.peer;
                this.msgId = params.msgId;
                this.buttonId = params.buttonId;
                this.requestedPeers = params.requestedPeers;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let msgId = await index_js_1.Primitive.Int.read(_data);
                let buttonId = await index_js_1.Primitive.Int.read(_data);
                let requestedPeers = await index_js_1.TLObject.read(_data);
                return new Raw.messages.SendBotRequestedPeer({
                    peer: peer,
                    msgId: msgId,
                    buttonId: buttonId,
                    requestedPeers: requestedPeers,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.msgId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.msgId));
                }
                if (this.buttonId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.buttonId));
                }
                if (this.requestedPeers) {
                    b.write(index_js_1.Primitive.Vector.write(this.requestedPeers));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SendBotRequestedPeer = SendBotRequestedPeer;
        class GetEmojiGroups extends index_js_1.TLObject {
            __response__;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetEmojiGroups';
                this.constructorId = 0x7488ce5b;
                this.subclassOfId = 0x7eca55d9;
                this._slots = ['hash'];
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.GetEmojiGroups({ hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetEmojiGroups = GetEmojiGroups;
        class GetEmojiStatusGroups extends index_js_1.TLObject {
            __response__;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetEmojiStatusGroups';
                this.constructorId = 0x2ecd56cd;
                this.subclassOfId = 0x7eca55d9;
                this._slots = ['hash'];
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.GetEmojiStatusGroups({ hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetEmojiStatusGroups = GetEmojiStatusGroups;
        class GetEmojiProfilePhotoGroups extends index_js_1.TLObject {
            __response__;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetEmojiProfilePhotoGroups';
                this.constructorId = 0x21a548f3;
                this.subclassOfId = 0x7eca55d9;
                this._slots = ['hash'];
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.GetEmojiProfilePhotoGroups({ hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetEmojiProfilePhotoGroups = GetEmojiProfilePhotoGroups;
        class SearchCustomEmoji extends index_js_1.TLObject {
            __response__;
            emoticon;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.SearchCustomEmoji';
                this.constructorId = 0x2c11c0d7;
                this.subclassOfId = 0xbcef6aba;
                this._slots = ['emoticon', 'hash'];
                this.emoticon = params.emoticon;
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let emoticon = await index_js_1.Primitive.String.read(_data);
                let hash = await index_js_1.Primitive.Long.read(_data);
                return new Raw.messages.SearchCustomEmoji({ emoticon: emoticon, hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.emoticon !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.emoticon));
                }
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SearchCustomEmoji = SearchCustomEmoji;
        class TogglePeerTranslations extends index_js_1.TLObject {
            __response__;
            disabled;
            peer;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.TogglePeerTranslations';
                this.constructorId = 0xe47cb579;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['disabled', 'peer'];
                this.disabled = params.disabled;
                this.peer = params.peer;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let disabled = flags & (1 << 0) ? true : false;
                let peer = await index_js_1.TLObject.read(_data);
                return new Raw.messages.TogglePeerTranslations({ disabled: disabled, peer: peer });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.disabled ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.TogglePeerTranslations = TogglePeerTranslations;
        class GetBotApp extends index_js_1.TLObject {
            __response__;
            app;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetBotApp';
                this.constructorId = 0x34fdc5c3;
                this.subclassOfId = 0x8f7243a7;
                this._slots = ['app', 'hash'];
                this.app = params.app;
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let app = await index_js_1.TLObject.read(_data);
                let hash = await index_js_1.Primitive.Long.read(_data);
                return new Raw.messages.GetBotApp({ app: app, hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.app !== undefined) {
                    b.write(this.app.write());
                }
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetBotApp = GetBotApp;
        class RequestAppWebView extends index_js_1.TLObject {
            __response__;
            writeAllowed;
            peer;
            app;
            startParam;
            themeParams;
            platform;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.RequestAppWebView';
                this.constructorId = 0x8c5a3b3c;
                this.subclassOfId = 0x1c24a413;
                this._slots = ['writeAllowed', 'peer', 'app', 'startParam', 'themeParams', 'platform'];
                this.writeAllowed = params.writeAllowed;
                this.peer = params.peer;
                this.app = params.app;
                this.startParam = params.startParam;
                this.themeParams = params.themeParams;
                this.platform = params.platform;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let writeAllowed = flags & (1 << 0) ? true : false;
                let peer = await index_js_1.TLObject.read(_data);
                let app = await index_js_1.TLObject.read(_data);
                let startParam = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let themeParams = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
                let platform = await index_js_1.Primitive.String.read(_data);
                return new Raw.messages.RequestAppWebView({
                    writeAllowed: writeAllowed,
                    peer: peer,
                    app: app,
                    startParam: startParam,
                    themeParams: themeParams,
                    platform: platform,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.writeAllowed ? 1 << 0 : 0;
                flags |= this.startParam !== undefined ? 1 << 1 : 0;
                flags |= this.themeParams !== undefined ? 1 << 2 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.app !== undefined) {
                    b.write(this.app.write());
                }
                if (this.startParam !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.startParam));
                }
                if (this.themeParams !== undefined) {
                    b.write(this.themeParams.write());
                }
                if (this.platform !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.platform));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.RequestAppWebView = RequestAppWebView;
        class SetChatWallPaper extends index_js_1.TLObject {
            __response__;
            forBoth;
            revert;
            peer;
            wallpaper;
            settings;
            id;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.SetChatWallPaper';
                this.constructorId = 0x8ffacae1;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['forBoth', 'revert', 'peer', 'wallpaper', 'settings', 'id'];
                this.forBoth = params.forBoth;
                this.revert = params.revert;
                this.peer = params.peer;
                this.wallpaper = params.wallpaper;
                this.settings = params.settings;
                this.id = params.id;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let forBoth = flags & (1 << 3) ? true : false;
                let revert = flags & (1 << 4) ? true : false;
                let peer = await index_js_1.TLObject.read(_data);
                let wallpaper = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
                let settings = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
                let id = flags & (1 << 1) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                return new Raw.messages.SetChatWallPaper({
                    forBoth: forBoth,
                    revert: revert,
                    peer: peer,
                    wallpaper: wallpaper,
                    settings: settings,
                    id: id,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.forBoth ? 1 << 3 : 0;
                flags |= this.revert ? 1 << 4 : 0;
                flags |= this.wallpaper !== undefined ? 1 << 0 : 0;
                flags |= this.settings !== undefined ? 1 << 2 : 0;
                flags |= this.id !== undefined ? 1 << 1 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.wallpaper !== undefined) {
                    b.write(this.wallpaper.write());
                }
                if (this.settings !== undefined) {
                    b.write(this.settings.write());
                }
                if (this.id !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.id));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SetChatWallPaper = SetChatWallPaper;
        class SearchEmojiStickerSets extends index_js_1.TLObject {
            __response__;
            excludeFeatured;
            q;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.SearchEmojiStickerSets';
                this.constructorId = 0x92b4494c;
                this.subclassOfId = 0x40df361;
                this._slots = ['excludeFeatured', 'q', 'hash'];
                this.excludeFeatured = params.excludeFeatured;
                this.q = params.q;
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let excludeFeatured = flags & (1 << 0) ? true : false;
                let q = await index_js_1.Primitive.String.read(_data);
                let hash = await index_js_1.Primitive.Long.read(_data);
                return new Raw.messages.SearchEmojiStickerSets({
                    excludeFeatured: excludeFeatured,
                    q: q,
                    hash: hash,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.excludeFeatured ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.q !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.q));
                }
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SearchEmojiStickerSets = SearchEmojiStickerSets;
        class GetSavedDialogs extends index_js_1.TLObject {
            __response__;
            excludePinned;
            offsetDate;
            offsetId;
            offsetPeer;
            limit;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetSavedDialogs';
                this.constructorId = 0x5381d21a;
                this.subclassOfId = 0x614bb87e;
                this._slots = ['excludePinned', 'offsetDate', 'offsetId', 'offsetPeer', 'limit', 'hash'];
                this.excludePinned = params.excludePinned;
                this.offsetDate = params.offsetDate;
                this.offsetId = params.offsetId;
                this.offsetPeer = params.offsetPeer;
                this.limit = params.limit;
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let excludePinned = flags & (1 << 0) ? true : false;
                let offsetDate = await index_js_1.Primitive.Int.read(_data);
                let offsetId = await index_js_1.Primitive.Int.read(_data);
                let offsetPeer = await index_js_1.TLObject.read(_data);
                let limit = await index_js_1.Primitive.Int.read(_data);
                let hash = await index_js_1.Primitive.Long.read(_data);
                return new Raw.messages.GetSavedDialogs({
                    excludePinned: excludePinned,
                    offsetDate: offsetDate,
                    offsetId: offsetId,
                    offsetPeer: offsetPeer,
                    limit: limit,
                    hash: hash,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.excludePinned ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.offsetDate !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.offsetDate));
                }
                if (this.offsetId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.offsetId));
                }
                if (this.offsetPeer !== undefined) {
                    b.write(this.offsetPeer.write());
                }
                if (this.limit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.limit));
                }
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetSavedDialogs = GetSavedDialogs;
        class GetSavedHistory extends index_js_1.TLObject {
            __response__;
            peer;
            offsetId;
            offsetDate;
            addOffset;
            limit;
            maxId;
            minId;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetSavedHistory';
                this.constructorId = 0x3d9a414d;
                this.subclassOfId = 0xd4b40b5e;
                this._slots = [
                    'peer',
                    'offsetId',
                    'offsetDate',
                    'addOffset',
                    'limit',
                    'maxId',
                    'minId',
                    'hash',
                ];
                this.peer = params.peer;
                this.offsetId = params.offsetId;
                this.offsetDate = params.offsetDate;
                this.addOffset = params.addOffset;
                this.limit = params.limit;
                this.maxId = params.maxId;
                this.minId = params.minId;
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let offsetId = await index_js_1.Primitive.Int.read(_data);
                let offsetDate = await index_js_1.Primitive.Int.read(_data);
                let addOffset = await index_js_1.Primitive.Int.read(_data);
                let limit = await index_js_1.Primitive.Int.read(_data);
                let maxId = await index_js_1.Primitive.Int.read(_data);
                let minId = await index_js_1.Primitive.Int.read(_data);
                let hash = await index_js_1.Primitive.Long.read(_data);
                return new Raw.messages.GetSavedHistory({
                    peer: peer,
                    offsetId: offsetId,
                    offsetDate: offsetDate,
                    addOffset: addOffset,
                    limit: limit,
                    maxId: maxId,
                    minId: minId,
                    hash: hash,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.offsetId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.offsetId));
                }
                if (this.offsetDate !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.offsetDate));
                }
                if (this.addOffset !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.addOffset));
                }
                if (this.limit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.limit));
                }
                if (this.maxId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.maxId));
                }
                if (this.minId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.minId));
                }
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetSavedHistory = GetSavedHistory;
        class DeleteSavedHistory extends index_js_1.TLObject {
            __response__;
            peer;
            maxId;
            minDate;
            maxDate;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.DeleteSavedHistory';
                this.constructorId = 0x6e98102b;
                this.subclassOfId = 0x2c49c116;
                this._slots = ['peer', 'maxId', 'minDate', 'maxDate'];
                this.peer = params.peer;
                this.maxId = params.maxId;
                this.minDate = params.minDate;
                this.maxDate = params.maxDate;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let peer = await index_js_1.TLObject.read(_data);
                let maxId = await index_js_1.Primitive.Int.read(_data);
                let minDate = flags & (1 << 2) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let maxDate = flags & (1 << 3) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                return new Raw.messages.DeleteSavedHistory({
                    peer: peer,
                    maxId: maxId,
                    minDate: minDate,
                    maxDate: maxDate,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.minDate !== undefined ? 1 << 2 : 0;
                flags |= this.maxDate !== undefined ? 1 << 3 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.maxId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.maxId));
                }
                if (this.minDate !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.minDate));
                }
                if (this.maxDate !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.maxDate));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.DeleteSavedHistory = DeleteSavedHistory;
        class GetPinnedSavedDialogs extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetPinnedSavedDialogs';
                this.constructorId = 0xd63d94e0;
                this.subclassOfId = 0x614bb87e;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.messages.GetPinnedSavedDialogs();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetPinnedSavedDialogs = GetPinnedSavedDialogs;
        class ToggleSavedDialogPin extends index_js_1.TLObject {
            __response__;
            pinned;
            peer;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.ToggleSavedDialogPin';
                this.constructorId = 0xac81bbde;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['pinned', 'peer'];
                this.pinned = params.pinned;
                this.peer = params.peer;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let pinned = flags & (1 << 0) ? true : false;
                let peer = await index_js_1.TLObject.read(_data);
                return new Raw.messages.ToggleSavedDialogPin({ pinned: pinned, peer: peer });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.pinned ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.ToggleSavedDialogPin = ToggleSavedDialogPin;
        class ReorderPinnedSavedDialogs extends index_js_1.TLObject {
            __response__;
            force;
            order;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.ReorderPinnedSavedDialogs';
                this.constructorId = 0x8b716587;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['force', 'order'];
                this.force = params.force;
                this.order = params.order;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let force = flags & (1 << 0) ? true : false;
                let order = await index_js_1.TLObject.read(_data);
                return new Raw.messages.ReorderPinnedSavedDialogs({ force: force, order: order });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.force ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.order) {
                    b.write(index_js_1.Primitive.Vector.write(this.order));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.ReorderPinnedSavedDialogs = ReorderPinnedSavedDialogs;
        class GetSavedReactionTags extends index_js_1.TLObject {
            __response__;
            peer;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetSavedReactionTags';
                this.constructorId = 0x3637e05b;
                this.subclassOfId = 0xa39b5be3;
                this._slots = ['peer', 'hash'];
                this.peer = params.peer;
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let peer = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
                let hash = await index_js_1.Primitive.Long.read(_data);
                return new Raw.messages.GetSavedReactionTags({ peer: peer, hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.peer !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetSavedReactionTags = GetSavedReactionTags;
        class UpdateSavedReactionTag extends index_js_1.TLObject {
            __response__;
            reaction;
            title;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.UpdateSavedReactionTag';
                this.constructorId = 0x60297dec;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['reaction', 'title'];
                this.reaction = params.reaction;
                this.title = params.title;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let reaction = await index_js_1.TLObject.read(_data);
                let title = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
                return new Raw.messages.UpdateSavedReactionTag({ reaction: reaction, title: title });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.title !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.reaction !== undefined) {
                    b.write(this.reaction.write());
                }
                if (this.title !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.title));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.UpdateSavedReactionTag = UpdateSavedReactionTag;
        class GetDefaultTagReactions extends index_js_1.TLObject {
            __response__;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetDefaultTagReactions';
                this.constructorId = 0xbdf93428;
                this.subclassOfId = 0xadc38324;
                this._slots = ['hash'];
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Long.read(_data);
                return new Raw.messages.GetDefaultTagReactions({ hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetDefaultTagReactions = GetDefaultTagReactions;
        class GetOutboxReadDate extends index_js_1.TLObject {
            __response__;
            peer;
            msgId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetOutboxReadDate';
                this.constructorId = 0x8c4bfe5d;
                this.subclassOfId = 0x6f5183c6;
                this._slots = ['peer', 'msgId'];
                this.peer = params.peer;
                this.msgId = params.msgId;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let msgId = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.GetOutboxReadDate({ peer: peer, msgId: msgId });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.msgId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.msgId));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetOutboxReadDate = GetOutboxReadDate;
        class GetQuickReplies extends index_js_1.TLObject {
            __response__;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetQuickReplies';
                this.constructorId = 0xd483f2a8;
                this.subclassOfId = 0xf737e966;
                this._slots = ['hash'];
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Long.read(_data);
                return new Raw.messages.GetQuickReplies({ hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetQuickReplies = GetQuickReplies;
        class ReorderQuickReplies extends index_js_1.TLObject {
            __response__;
            order;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.ReorderQuickReplies';
                this.constructorId = 0x60331907;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['order'];
                this.order = params.order;
            }
            static async read(_data, ..._args) {
                let order = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int);
                return new Raw.messages.ReorderQuickReplies({ order: order });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.order) {
                    b.write(index_js_1.Primitive.Vector.write(this.order, index_js_1.Primitive.Int));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.ReorderQuickReplies = ReorderQuickReplies;
        class CheckQuickReplyShortcut extends index_js_1.TLObject {
            __response__;
            shortcut;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.CheckQuickReplyShortcut';
                this.constructorId = 0xf1d0fbd3;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['shortcut'];
                this.shortcut = params.shortcut;
            }
            static async read(_data, ..._args) {
                let shortcut = await index_js_1.Primitive.String.read(_data);
                return new Raw.messages.CheckQuickReplyShortcut({ shortcut: shortcut });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.shortcut !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.shortcut));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.CheckQuickReplyShortcut = CheckQuickReplyShortcut;
        class EditQuickReplyShortcut extends index_js_1.TLObject {
            __response__;
            shortcutId;
            shortcut;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.EditQuickReplyShortcut';
                this.constructorId = 0x5c003cef;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['shortcutId', 'shortcut'];
                this.shortcutId = params.shortcutId;
                this.shortcut = params.shortcut;
            }
            static async read(_data, ..._args) {
                let shortcutId = await index_js_1.Primitive.Int.read(_data);
                let shortcut = await index_js_1.Primitive.String.read(_data);
                return new Raw.messages.EditQuickReplyShortcut({
                    shortcutId: shortcutId,
                    shortcut: shortcut,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.shortcutId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.shortcutId));
                }
                if (this.shortcut !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.shortcut));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.EditQuickReplyShortcut = EditQuickReplyShortcut;
        class DeleteQuickReplyShortcut extends index_js_1.TLObject {
            __response__;
            shortcutId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.DeleteQuickReplyShortcut';
                this.constructorId = 0x3cc04740;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['shortcutId'];
                this.shortcutId = params.shortcutId;
            }
            static async read(_data, ..._args) {
                let shortcutId = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.DeleteQuickReplyShortcut({ shortcutId: shortcutId });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.shortcutId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.shortcutId));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.DeleteQuickReplyShortcut = DeleteQuickReplyShortcut;
        class GetQuickReplyMessages extends index_js_1.TLObject {
            __response__;
            shortcutId;
            id;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetQuickReplyMessages';
                this.constructorId = 0x94a495c3;
                this.subclassOfId = 0xd4b40b5e;
                this._slots = ['shortcutId', 'id', 'hash'];
                this.shortcutId = params.shortcutId;
                this.id = params.id;
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let shortcutId = await index_js_1.Primitive.Int.read(_data);
                let id = flags & (1 << 0) ? await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int) : [];
                let hash = await index_js_1.Primitive.Long.read(_data);
                return new Raw.messages.GetQuickReplyMessages({
                    shortcutId: shortcutId,
                    id: id,
                    hash: hash,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.id ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.shortcutId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.shortcutId));
                }
                if (this.id) {
                    b.write(index_js_1.Primitive.Vector.write(this.id, index_js_1.Primitive.Int));
                }
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetQuickReplyMessages = GetQuickReplyMessages;
        class SendQuickReplyMessages extends index_js_1.TLObject {
            __response__;
            peer;
            shortcutId;
            id;
            randomId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.SendQuickReplyMessages';
                this.constructorId = 0x6c750de1;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['peer', 'shortcutId', 'id', 'randomId'];
                this.peer = params.peer;
                this.shortcutId = params.shortcutId;
                this.id = params.id;
                this.randomId = params.randomId;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let shortcutId = await index_js_1.Primitive.Int.read(_data);
                let id = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int);
                let randomId = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Long);
                return new Raw.messages.SendQuickReplyMessages({
                    peer: peer,
                    shortcutId: shortcutId,
                    id: id,
                    randomId: randomId,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.shortcutId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.shortcutId));
                }
                if (this.id) {
                    b.write(index_js_1.Primitive.Vector.write(this.id, index_js_1.Primitive.Int));
                }
                if (this.randomId) {
                    b.write(index_js_1.Primitive.Vector.write(this.randomId, index_js_1.Primitive.Long));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.SendQuickReplyMessages = SendQuickReplyMessages;
        class DeleteQuickReplyMessages extends index_js_1.TLObject {
            __response__;
            shortcutId;
            id;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.DeleteQuickReplyMessages';
                this.constructorId = 0xe105e910;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['shortcutId', 'id'];
                this.shortcutId = params.shortcutId;
                this.id = params.id;
            }
            static async read(_data, ..._args) {
                let shortcutId = await index_js_1.Primitive.Int.read(_data);
                let id = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int);
                return new Raw.messages.DeleteQuickReplyMessages({ shortcutId: shortcutId, id: id });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.shortcutId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.shortcutId));
                }
                if (this.id) {
                    b.write(index_js_1.Primitive.Vector.write(this.id, index_js_1.Primitive.Int));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.DeleteQuickReplyMessages = DeleteQuickReplyMessages;
        class ToggleDialogFilterTags extends index_js_1.TLObject {
            __response__;
            enabled;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.ToggleDialogFilterTags';
                this.constructorId = 0xfd2dda49;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['enabled'];
                this.enabled = params.enabled;
            }
            static async read(_data, ..._args) {
                let enabled = await index_js_1.Primitive.Bool.read(_data);
                return new Raw.messages.ToggleDialogFilterTags({ enabled: enabled });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.enabled !== undefined) {
                    b.write(index_js_1.Primitive.Bool.write(this.enabled));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.ToggleDialogFilterTags = ToggleDialogFilterTags;
        class GetMyStickers extends index_js_1.TLObject {
            __response__;
            offsetId;
            limit;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetMyStickers';
                this.constructorId = 0xd0b5e1fc;
                this.subclassOfId = 0xb1b4350a;
                this._slots = ['offsetId', 'limit'];
                this.offsetId = params.offsetId;
                this.limit = params.limit;
            }
            static async read(_data, ..._args) {
                let offsetId = await index_js_1.Primitive.Long.read(_data);
                let limit = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.GetMyStickers({ offsetId: offsetId, limit: limit });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.offsetId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.offsetId));
                }
                if (this.limit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.limit));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetMyStickers = GetMyStickers;
        class GetEmojiStickerGroups extends index_js_1.TLObject {
            __response__;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetEmojiStickerGroups';
                this.constructorId = 0x1dd840f5;
                this.subclassOfId = 0x7eca55d9;
                this._slots = ['hash'];
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.GetEmojiStickerGroups({ hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetEmojiStickerGroups = GetEmojiStickerGroups;
        class GetAvailableEffects extends index_js_1.TLObject {
            __response__;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetAvailableEffects';
                this.constructorId = 0xdea20a39;
                this.subclassOfId = 0x4470d5bd;
                this._slots = ['hash'];
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.GetAvailableEffects({ hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetAvailableEffects = GetAvailableEffects;
        class EditFactCheck extends index_js_1.TLObject {
            __response__;
            peer;
            msgId;
            text;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.EditFactCheck';
                this.constructorId = 0x589ee75;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['peer', 'msgId', 'text'];
                this.peer = params.peer;
                this.msgId = params.msgId;
                this.text = params.text;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let msgId = await index_js_1.Primitive.Int.read(_data);
                let text = await index_js_1.TLObject.read(_data);
                return new Raw.messages.EditFactCheck({ peer: peer, msgId: msgId, text: text });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.msgId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.msgId));
                }
                if (this.text !== undefined) {
                    b.write(this.text.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.EditFactCheck = EditFactCheck;
        class DeleteFactCheck extends index_js_1.TLObject {
            __response__;
            peer;
            msgId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.DeleteFactCheck';
                this.constructorId = 0xd1da940c;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['peer', 'msgId'];
                this.peer = params.peer;
                this.msgId = params.msgId;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let msgId = await index_js_1.Primitive.Int.read(_data);
                return new Raw.messages.DeleteFactCheck({ peer: peer, msgId: msgId });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.msgId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.msgId));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.DeleteFactCheck = DeleteFactCheck;
        class GetFactCheck extends index_js_1.TLObject {
            __response__;
            peer;
            msgId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'messages.GetFactCheck';
                this.constructorId = 0xb9cdc5ee;
                this.subclassOfId = 0xbba61813;
                this._slots = ['peer', 'msgId'];
                this.peer = params.peer;
                this.msgId = params.msgId;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let msgId = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int);
                return new Raw.messages.GetFactCheck({ peer: peer, msgId: msgId });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.msgId) {
                    b.write(index_js_1.Primitive.Vector.write(this.msgId, index_js_1.Primitive.Int));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        messages_1.GetFactCheck = GetFactCheck;
    })(messages = Raw.messages || (Raw.messages = {}));
    let updates;
    (function (updates) {
        class State extends index_js_1.TLObject {
            pts;
            qts;
            date;
            seq;
            unreadCount;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'updates.State';
                this.constructorId = 0xa56c2a3e;
                this.subclassOfId = 0x23df1a01;
                this._slots = ['pts', 'qts', 'date', 'seq', 'unreadCount'];
                this.pts = params.pts;
                this.qts = params.qts;
                this.date = params.date;
                this.seq = params.seq;
                this.unreadCount = params.unreadCount;
            }
            static async read(_data, ..._args) {
                let pts = await index_js_1.Primitive.Int.read(_data);
                let qts = await index_js_1.Primitive.Int.read(_data);
                let date = await index_js_1.Primitive.Int.read(_data);
                let seq = await index_js_1.Primitive.Int.read(_data);
                let unreadCount = await index_js_1.Primitive.Int.read(_data);
                return new Raw.updates.State({
                    pts: pts,
                    qts: qts,
                    date: date,
                    seq: seq,
                    unreadCount: unreadCount,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.pts !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.pts));
                }
                if (this.qts !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.qts));
                }
                if (this.date !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.date));
                }
                if (this.seq !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.seq));
                }
                if (this.unreadCount !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.unreadCount));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        updates.State = State;
        class DifferenceEmpty extends index_js_1.TLObject {
            date;
            seq;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'updates.DifferenceEmpty';
                this.constructorId = 0x5d75a138;
                this.subclassOfId = 0x20482874;
                this._slots = ['date', 'seq'];
                this.date = params.date;
                this.seq = params.seq;
            }
            static async read(_data, ..._args) {
                let date = await index_js_1.Primitive.Int.read(_data);
                let seq = await index_js_1.Primitive.Int.read(_data);
                return new Raw.updates.DifferenceEmpty({ date: date, seq: seq });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.date !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.date));
                }
                if (this.seq !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.seq));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        updates.DifferenceEmpty = DifferenceEmpty;
        class Difference extends index_js_1.TLObject {
            newMessages;
            newEncryptedMessages;
            otherUpdates;
            chats;
            users;
            state;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'updates.Difference';
                this.constructorId = 0xf49ca0;
                this.subclassOfId = 0x20482874;
                this._slots = [
                    'newMessages',
                    'newEncryptedMessages',
                    'otherUpdates',
                    'chats',
                    'users',
                    'state',
                ];
                this.newMessages = params.newMessages;
                this.newEncryptedMessages = params.newEncryptedMessages;
                this.otherUpdates = params.otherUpdates;
                this.chats = params.chats;
                this.users = params.users;
                this.state = params.state;
            }
            static async read(_data, ..._args) {
                let newMessages = await index_js_1.TLObject.read(_data);
                let newEncryptedMessages = await index_js_1.TLObject.read(_data);
                let otherUpdates = await index_js_1.TLObject.read(_data);
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                let state = await index_js_1.TLObject.read(_data);
                return new Raw.updates.Difference({
                    newMessages: newMessages,
                    newEncryptedMessages: newEncryptedMessages,
                    otherUpdates: otherUpdates,
                    chats: chats,
                    users: users,
                    state: state,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.newMessages) {
                    b.write(index_js_1.Primitive.Vector.write(this.newMessages));
                }
                if (this.newEncryptedMessages) {
                    b.write(index_js_1.Primitive.Vector.write(this.newEncryptedMessages));
                }
                if (this.otherUpdates) {
                    b.write(index_js_1.Primitive.Vector.write(this.otherUpdates));
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                if (this.state !== undefined) {
                    b.write(this.state.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        updates.Difference = Difference;
        class DifferenceSlice extends index_js_1.TLObject {
            newMessages;
            newEncryptedMessages;
            otherUpdates;
            chats;
            users;
            intermediateState;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'updates.DifferenceSlice';
                this.constructorId = 0xa8fb1981;
                this.subclassOfId = 0x20482874;
                this._slots = [
                    'newMessages',
                    'newEncryptedMessages',
                    'otherUpdates',
                    'chats',
                    'users',
                    'intermediateState',
                ];
                this.newMessages = params.newMessages;
                this.newEncryptedMessages = params.newEncryptedMessages;
                this.otherUpdates = params.otherUpdates;
                this.chats = params.chats;
                this.users = params.users;
                this.intermediateState = params.intermediateState;
            }
            static async read(_data, ..._args) {
                let newMessages = await index_js_1.TLObject.read(_data);
                let newEncryptedMessages = await index_js_1.TLObject.read(_data);
                let otherUpdates = await index_js_1.TLObject.read(_data);
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                let intermediateState = await index_js_1.TLObject.read(_data);
                return new Raw.updates.DifferenceSlice({
                    newMessages: newMessages,
                    newEncryptedMessages: newEncryptedMessages,
                    otherUpdates: otherUpdates,
                    chats: chats,
                    users: users,
                    intermediateState: intermediateState,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.newMessages) {
                    b.write(index_js_1.Primitive.Vector.write(this.newMessages));
                }
                if (this.newEncryptedMessages) {
                    b.write(index_js_1.Primitive.Vector.write(this.newEncryptedMessages));
                }
                if (this.otherUpdates) {
                    b.write(index_js_1.Primitive.Vector.write(this.otherUpdates));
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                if (this.intermediateState !== undefined) {
                    b.write(this.intermediateState.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        updates.DifferenceSlice = DifferenceSlice;
        class DifferenceTooLong extends index_js_1.TLObject {
            pts;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'updates.DifferenceTooLong';
                this.constructorId = 0x4afe8f6d;
                this.subclassOfId = 0x20482874;
                this._slots = ['pts'];
                this.pts = params.pts;
            }
            static async read(_data, ..._args) {
                let pts = await index_js_1.Primitive.Int.read(_data);
                return new Raw.updates.DifferenceTooLong({ pts: pts });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.pts !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.pts));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        updates.DifferenceTooLong = DifferenceTooLong;
        class ChannelDifferenceEmpty extends index_js_1.TLObject {
            final;
            pts;
            timeout;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'updates.ChannelDifferenceEmpty';
                this.constructorId = 0x3e11affb;
                this.subclassOfId = 0x29896f5d;
                this._slots = ['final', 'pts', 'timeout'];
                this.final = params.final;
                this.pts = params.pts;
                this.timeout = params.timeout;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let final = flags & (1 << 0) ? true : false;
                let pts = await index_js_1.Primitive.Int.read(_data);
                let timeout = flags & (1 << 1) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                return new Raw.updates.ChannelDifferenceEmpty({ final: final, pts: pts, timeout: timeout });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.final ? 1 << 0 : 0;
                flags |= this.timeout !== undefined ? 1 << 1 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.pts !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.pts));
                }
                if (this.timeout !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.timeout));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        updates.ChannelDifferenceEmpty = ChannelDifferenceEmpty;
        class ChannelDifferenceTooLong extends index_js_1.TLObject {
            final;
            timeout;
            dialog;
            messages;
            chats;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'updates.ChannelDifferenceTooLong';
                this.constructorId = 0xa4bcc6fe;
                this.subclassOfId = 0x29896f5d;
                this._slots = ['final', 'timeout', 'dialog', 'messages', 'chats', 'users'];
                this.final = params.final;
                this.timeout = params.timeout;
                this.dialog = params.dialog;
                this.messages = params.messages;
                this.chats = params.chats;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let final = flags & (1 << 0) ? true : false;
                let timeout = flags & (1 << 1) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let dialog = await index_js_1.TLObject.read(_data);
                let messages = await index_js_1.TLObject.read(_data);
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.updates.ChannelDifferenceTooLong({
                    final: final,
                    timeout: timeout,
                    dialog: dialog,
                    messages: messages,
                    chats: chats,
                    users: users,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.final ? 1 << 0 : 0;
                flags |= this.timeout !== undefined ? 1 << 1 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.timeout !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.timeout));
                }
                if (this.dialog !== undefined) {
                    b.write(this.dialog.write());
                }
                if (this.messages) {
                    b.write(index_js_1.Primitive.Vector.write(this.messages));
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        updates.ChannelDifferenceTooLong = ChannelDifferenceTooLong;
        class ChannelDifference extends index_js_1.TLObject {
            final;
            pts;
            timeout;
            newMessages;
            otherUpdates;
            chats;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'updates.ChannelDifference';
                this.constructorId = 0x2064674e;
                this.subclassOfId = 0x29896f5d;
                this._slots = ['final', 'pts', 'timeout', 'newMessages', 'otherUpdates', 'chats', 'users'];
                this.final = params.final;
                this.pts = params.pts;
                this.timeout = params.timeout;
                this.newMessages = params.newMessages;
                this.otherUpdates = params.otherUpdates;
                this.chats = params.chats;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let final = flags & (1 << 0) ? true : false;
                let pts = await index_js_1.Primitive.Int.read(_data);
                let timeout = flags & (1 << 1) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let newMessages = await index_js_1.TLObject.read(_data);
                let otherUpdates = await index_js_1.TLObject.read(_data);
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.updates.ChannelDifference({
                    final: final,
                    pts: pts,
                    timeout: timeout,
                    newMessages: newMessages,
                    otherUpdates: otherUpdates,
                    chats: chats,
                    users: users,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.final ? 1 << 0 : 0;
                flags |= this.timeout !== undefined ? 1 << 1 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.pts !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.pts));
                }
                if (this.timeout !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.timeout));
                }
                if (this.newMessages) {
                    b.write(index_js_1.Primitive.Vector.write(this.newMessages));
                }
                if (this.otherUpdates) {
                    b.write(index_js_1.Primitive.Vector.write(this.otherUpdates));
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        updates.ChannelDifference = ChannelDifference;
        class GetState extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'updates.GetState';
                this.constructorId = 0xedd4882a;
                this.subclassOfId = 0x23df1a01;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.updates.GetState();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        updates.GetState = GetState;
        class GetDifference extends index_js_1.TLObject {
            __response__;
            pts;
            ptsLimit;
            ptsTotalLimit;
            date;
            qts;
            qtsLimit;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'updates.GetDifference';
                this.constructorId = 0x19c2f763;
                this.subclassOfId = 0x20482874;
                this._slots = ['pts', 'ptsLimit', 'ptsTotalLimit', 'date', 'qts', 'qtsLimit'];
                this.pts = params.pts;
                this.ptsLimit = params.ptsLimit;
                this.ptsTotalLimit = params.ptsTotalLimit;
                this.date = params.date;
                this.qts = params.qts;
                this.qtsLimit = params.qtsLimit;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let pts = await index_js_1.Primitive.Int.read(_data);
                let ptsLimit = flags & (1 << 1) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let ptsTotalLimit = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let date = await index_js_1.Primitive.Int.read(_data);
                let qts = await index_js_1.Primitive.Int.read(_data);
                let qtsLimit = flags & (1 << 2) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                return new Raw.updates.GetDifference({
                    pts: pts,
                    ptsLimit: ptsLimit,
                    ptsTotalLimit: ptsTotalLimit,
                    date: date,
                    qts: qts,
                    qtsLimit: qtsLimit,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.ptsLimit !== undefined ? 1 << 1 : 0;
                flags |= this.ptsTotalLimit !== undefined ? 1 << 0 : 0;
                flags |= this.qtsLimit !== undefined ? 1 << 2 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.pts !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.pts));
                }
                if (this.ptsLimit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.ptsLimit));
                }
                if (this.ptsTotalLimit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.ptsTotalLimit));
                }
                if (this.date !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.date));
                }
                if (this.qts !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.qts));
                }
                if (this.qtsLimit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.qtsLimit));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        updates.GetDifference = GetDifference;
        class GetChannelDifference extends index_js_1.TLObject {
            __response__;
            force;
            channel;
            filter;
            pts;
            limit;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'updates.GetChannelDifference';
                this.constructorId = 0x3173d78;
                this.subclassOfId = 0x29896f5d;
                this._slots = ['force', 'channel', 'filter', 'pts', 'limit'];
                this.force = params.force;
                this.channel = params.channel;
                this.filter = params.filter;
                this.pts = params.pts;
                this.limit = params.limit;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let force = flags & (1 << 0) ? true : false;
                let channel = await index_js_1.TLObject.read(_data);
                let filter = await index_js_1.TLObject.read(_data);
                let pts = await index_js_1.Primitive.Int.read(_data);
                let limit = await index_js_1.Primitive.Int.read(_data);
                return new Raw.updates.GetChannelDifference({
                    force: force,
                    channel: channel,
                    filter: filter,
                    pts: pts,
                    limit: limit,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.force ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.filter !== undefined) {
                    b.write(this.filter.write());
                }
                if (this.pts !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.pts));
                }
                if (this.limit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.limit));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        updates.GetChannelDifference = GetChannelDifference;
    })(updates = Raw.updates || (Raw.updates = {}));
    let photos;
    (function (photos_1) {
        class Photos extends index_js_1.TLObject {
            photos;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'photos.Photos';
                this.constructorId = 0x8dca6aa5;
                this.subclassOfId = 0x27cfb967;
                this._slots = ['photos', 'users'];
                this.photos = params.photos;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let photos = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.photos.Photos({ photos: photos, users: users });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.photos) {
                    b.write(index_js_1.Primitive.Vector.write(this.photos));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        photos_1.Photos = Photos;
        class PhotosSlice extends index_js_1.TLObject {
            count;
            photos;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'photos.PhotosSlice';
                this.constructorId = 0x15051f54;
                this.subclassOfId = 0x27cfb967;
                this._slots = ['count', 'photos', 'users'];
                this.count = params.count;
                this.photos = params.photos;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let count = await index_js_1.Primitive.Int.read(_data);
                let photos = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.photos.PhotosSlice({ count: count, photos: photos, users: users });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.count !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.count));
                }
                if (this.photos) {
                    b.write(index_js_1.Primitive.Vector.write(this.photos));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        photos_1.PhotosSlice = PhotosSlice;
        class Photo extends index_js_1.TLObject {
            photo;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'photos.Photo';
                this.constructorId = 0x20212ca8;
                this.subclassOfId = 0xc292bd24;
                this._slots = ['photo', 'users'];
                this.photo = params.photo;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let photo = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.photos.Photo({ photo: photo, users: users });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.photo !== undefined) {
                    b.write(this.photo.write());
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        photos_1.Photo = Photo;
        class UpdateProfilePhoto extends index_js_1.TLObject {
            __response__;
            fallback;
            bot;
            id;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'photos.UpdateProfilePhoto';
                this.constructorId = 0x9e82039;
                this.subclassOfId = 0xc292bd24;
                this._slots = ['fallback', 'bot', 'id'];
                this.fallback = params.fallback;
                this.bot = params.bot;
                this.id = params.id;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let fallback = flags & (1 << 0) ? true : false;
                let bot = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : undefined;
                let id = await index_js_1.TLObject.read(_data);
                return new Raw.photos.UpdateProfilePhoto({ fallback: fallback, bot: bot, id: id });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.fallback ? 1 << 0 : 0;
                flags |= this.bot !== undefined ? 1 << 1 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.bot !== undefined) {
                    b.write(this.bot.write());
                }
                if (this.id !== undefined) {
                    b.write(this.id.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        photos_1.UpdateProfilePhoto = UpdateProfilePhoto;
        class UploadProfilePhoto extends index_js_1.TLObject {
            __response__;
            fallback;
            bot;
            file;
            video;
            videoStartTs;
            videoEmojiMarkup;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'photos.UploadProfilePhoto';
                this.constructorId = 0x388a3b5;
                this.subclassOfId = 0xc292bd24;
                this._slots = ['fallback', 'bot', 'file', 'video', 'videoStartTs', 'videoEmojiMarkup'];
                this.fallback = params.fallback;
                this.bot = params.bot;
                this.file = params.file;
                this.video = params.video;
                this.videoStartTs = params.videoStartTs;
                this.videoEmojiMarkup = params.videoEmojiMarkup;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let fallback = flags & (1 << 3) ? true : false;
                let bot = flags & (1 << 5) ? await index_js_1.TLObject.read(_data) : undefined;
                let file = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
                let video = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : undefined;
                let videoStartTs = flags & (1 << 2) ? await index_js_1.Primitive.Double.read(_data) : undefined;
                let videoEmojiMarkup = flags & (1 << 4) ? await index_js_1.TLObject.read(_data) : undefined;
                return new Raw.photos.UploadProfilePhoto({
                    fallback: fallback,
                    bot: bot,
                    file: file,
                    video: video,
                    videoStartTs: videoStartTs,
                    videoEmojiMarkup: videoEmojiMarkup,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.fallback ? 1 << 3 : 0;
                flags |= this.bot !== undefined ? 1 << 5 : 0;
                flags |= this.file !== undefined ? 1 << 0 : 0;
                flags |= this.video !== undefined ? 1 << 1 : 0;
                flags |= this.videoStartTs !== undefined ? 1 << 2 : 0;
                flags |= this.videoEmojiMarkup !== undefined ? 1 << 4 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.bot !== undefined) {
                    b.write(this.bot.write());
                }
                if (this.file !== undefined) {
                    b.write(this.file.write());
                }
                if (this.video !== undefined) {
                    b.write(this.video.write());
                }
                if (this.videoStartTs !== undefined) {
                    b.write(index_js_1.Primitive.Double.write(this.videoStartTs));
                }
                if (this.videoEmojiMarkup !== undefined) {
                    b.write(this.videoEmojiMarkup.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        photos_1.UploadProfilePhoto = UploadProfilePhoto;
        class DeletePhotos extends index_js_1.TLObject {
            __response__;
            id;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'photos.DeletePhotos';
                this.constructorId = 0x87cf7f2f;
                this.subclassOfId = 0x8918e168;
                this._slots = ['id'];
                this.id = params.id;
            }
            static async read(_data, ..._args) {
                let id = await index_js_1.TLObject.read(_data);
                return new Raw.photos.DeletePhotos({ id: id });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.id) {
                    b.write(index_js_1.Primitive.Vector.write(this.id));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        photos_1.DeletePhotos = DeletePhotos;
        class GetUserPhotos extends index_js_1.TLObject {
            __response__;
            userId;
            offset;
            maxId;
            limit;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'photos.GetUserPhotos';
                this.constructorId = 0x91cd32a8;
                this.subclassOfId = 0x27cfb967;
                this._slots = ['userId', 'offset', 'maxId', 'limit'];
                this.userId = params.userId;
                this.offset = params.offset;
                this.maxId = params.maxId;
                this.limit = params.limit;
            }
            static async read(_data, ..._args) {
                let userId = await index_js_1.TLObject.read(_data);
                let offset = await index_js_1.Primitive.Int.read(_data);
                let maxId = await index_js_1.Primitive.Long.read(_data);
                let limit = await index_js_1.Primitive.Int.read(_data);
                return new Raw.photos.GetUserPhotos({
                    userId: userId,
                    offset: offset,
                    maxId: maxId,
                    limit: limit,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.userId !== undefined) {
                    b.write(this.userId.write());
                }
                if (this.offset !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.offset));
                }
                if (this.maxId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.maxId));
                }
                if (this.limit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.limit));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        photos_1.GetUserPhotos = GetUserPhotos;
        class UploadContactProfilePhoto extends index_js_1.TLObject {
            __response__;
            suggest;
            save;
            userId;
            file;
            video;
            videoStartTs;
            videoEmojiMarkup;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'photos.UploadContactProfilePhoto';
                this.constructorId = 0xe14c4a71;
                this.subclassOfId = 0xc292bd24;
                this._slots = [
                    'suggest',
                    'save',
                    'userId',
                    'file',
                    'video',
                    'videoStartTs',
                    'videoEmojiMarkup',
                ];
                this.suggest = params.suggest;
                this.save = params.save;
                this.userId = params.userId;
                this.file = params.file;
                this.video = params.video;
                this.videoStartTs = params.videoStartTs;
                this.videoEmojiMarkup = params.videoEmojiMarkup;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let suggest = flags & (1 << 3) ? true : false;
                let save = flags & (1 << 4) ? true : false;
                let userId = await index_js_1.TLObject.read(_data);
                let file = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
                let video = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : undefined;
                let videoStartTs = flags & (1 << 2) ? await index_js_1.Primitive.Double.read(_data) : undefined;
                let videoEmojiMarkup = flags & (1 << 5) ? await index_js_1.TLObject.read(_data) : undefined;
                return new Raw.photos.UploadContactProfilePhoto({
                    suggest: suggest,
                    save: save,
                    userId: userId,
                    file: file,
                    video: video,
                    videoStartTs: videoStartTs,
                    videoEmojiMarkup: videoEmojiMarkup,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.suggest ? 1 << 3 : 0;
                flags |= this.save ? 1 << 4 : 0;
                flags |= this.file !== undefined ? 1 << 0 : 0;
                flags |= this.video !== undefined ? 1 << 1 : 0;
                flags |= this.videoStartTs !== undefined ? 1 << 2 : 0;
                flags |= this.videoEmojiMarkup !== undefined ? 1 << 5 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.userId !== undefined) {
                    b.write(this.userId.write());
                }
                if (this.file !== undefined) {
                    b.write(this.file.write());
                }
                if (this.video !== undefined) {
                    b.write(this.video.write());
                }
                if (this.videoStartTs !== undefined) {
                    b.write(index_js_1.Primitive.Double.write(this.videoStartTs));
                }
                if (this.videoEmojiMarkup !== undefined) {
                    b.write(this.videoEmojiMarkup.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        photos_1.UploadContactProfilePhoto = UploadContactProfilePhoto;
    })(photos = Raw.photos || (Raw.photos = {}));
    let upload;
    (function (upload) {
        class File extends index_js_1.TLObject {
            type;
            mtime;
            bytes;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'upload.File';
                this.constructorId = 0x96a18d5;
                this.subclassOfId = 0x6c9bd728;
                this._slots = ['type', 'mtime', 'bytes'];
                this.type = params.type;
                this.mtime = params.mtime;
                this.bytes = params.bytes;
            }
            static async read(_data, ..._args) {
                let type = await index_js_1.TLObject.read(_data);
                let mtime = await index_js_1.Primitive.Int.read(_data);
                let bytes = await index_js_1.Primitive.Bytes.read(_data);
                return new Raw.upload.File({ type: type, mtime: mtime, bytes: bytes });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.type !== undefined) {
                    b.write(this.type.write());
                }
                if (this.mtime !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.mtime));
                }
                if (this.bytes !== undefined) {
                    b.write(index_js_1.Primitive.Bytes.write(this.bytes));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        upload.File = File;
        class FileCdnRedirect extends index_js_1.TLObject {
            dcId;
            fileToken;
            encryptionKey;
            encryptionIv;
            fileHashes;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'upload.FileCdnRedirect';
                this.constructorId = 0xf18cda44;
                this.subclassOfId = 0x6c9bd728;
                this._slots = ['dcId', 'fileToken', 'encryptionKey', 'encryptionIv', 'fileHashes'];
                this.dcId = params.dcId;
                this.fileToken = params.fileToken;
                this.encryptionKey = params.encryptionKey;
                this.encryptionIv = params.encryptionIv;
                this.fileHashes = params.fileHashes;
            }
            static async read(_data, ..._args) {
                let dcId = await index_js_1.Primitive.Int.read(_data);
                let fileToken = await index_js_1.Primitive.Bytes.read(_data);
                let encryptionKey = await index_js_1.Primitive.Bytes.read(_data);
                let encryptionIv = await index_js_1.Primitive.Bytes.read(_data);
                let fileHashes = await index_js_1.TLObject.read(_data);
                return new Raw.upload.FileCdnRedirect({
                    dcId: dcId,
                    fileToken: fileToken,
                    encryptionKey: encryptionKey,
                    encryptionIv: encryptionIv,
                    fileHashes: fileHashes,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.dcId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.dcId));
                }
                if (this.fileToken !== undefined) {
                    b.write(index_js_1.Primitive.Bytes.write(this.fileToken));
                }
                if (this.encryptionKey !== undefined) {
                    b.write(index_js_1.Primitive.Bytes.write(this.encryptionKey));
                }
                if (this.encryptionIv !== undefined) {
                    b.write(index_js_1.Primitive.Bytes.write(this.encryptionIv));
                }
                if (this.fileHashes) {
                    b.write(index_js_1.Primitive.Vector.write(this.fileHashes));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        upload.FileCdnRedirect = FileCdnRedirect;
        class WebFile extends index_js_1.TLObject {
            size;
            mimeType;
            fileType;
            mtime;
            bytes;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'upload.WebFile';
                this.constructorId = 0x21e753bc;
                this.subclassOfId = 0x68f17f51;
                this._slots = ['size', 'mimeType', 'fileType', 'mtime', 'bytes'];
                this.size = params.size;
                this.mimeType = params.mimeType;
                this.fileType = params.fileType;
                this.mtime = params.mtime;
                this.bytes = params.bytes;
            }
            static async read(_data, ..._args) {
                let size = await index_js_1.Primitive.Int.read(_data);
                let mimeType = await index_js_1.Primitive.String.read(_data);
                let fileType = await index_js_1.TLObject.read(_data);
                let mtime = await index_js_1.Primitive.Int.read(_data);
                let bytes = await index_js_1.Primitive.Bytes.read(_data);
                return new Raw.upload.WebFile({
                    size: size,
                    mimeType: mimeType,
                    fileType: fileType,
                    mtime: mtime,
                    bytes: bytes,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.size !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.size));
                }
                if (this.mimeType !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.mimeType));
                }
                if (this.fileType !== undefined) {
                    b.write(this.fileType.write());
                }
                if (this.mtime !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.mtime));
                }
                if (this.bytes !== undefined) {
                    b.write(index_js_1.Primitive.Bytes.write(this.bytes));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        upload.WebFile = WebFile;
        class CdnFileReuploadNeeded extends index_js_1.TLObject {
            requestToken;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'upload.CdnFileReuploadNeeded';
                this.constructorId = 0xeea8e46e;
                this.subclassOfId = 0xf5ccf928;
                this._slots = ['requestToken'];
                this.requestToken = params.requestToken;
            }
            static async read(_data, ..._args) {
                let requestToken = await index_js_1.Primitive.Bytes.read(_data);
                return new Raw.upload.CdnFileReuploadNeeded({ requestToken: requestToken });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.requestToken !== undefined) {
                    b.write(index_js_1.Primitive.Bytes.write(this.requestToken));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        upload.CdnFileReuploadNeeded = CdnFileReuploadNeeded;
        class CdnFile extends index_js_1.TLObject {
            bytes;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'upload.CdnFile';
                this.constructorId = 0xa99fca4f;
                this.subclassOfId = 0xf5ccf928;
                this._slots = ['bytes'];
                this.bytes = params.bytes;
            }
            static async read(_data, ..._args) {
                let bytes = await index_js_1.Primitive.Bytes.read(_data);
                return new Raw.upload.CdnFile({ bytes: bytes });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.bytes !== undefined) {
                    b.write(index_js_1.Primitive.Bytes.write(this.bytes));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        upload.CdnFile = CdnFile;
        class SaveFilePart extends index_js_1.TLObject {
            __response__;
            fileId;
            filePart;
            bytes;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'upload.SaveFilePart';
                this.constructorId = 0xb304a621;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['fileId', 'filePart', 'bytes'];
                this.fileId = params.fileId;
                this.filePart = params.filePart;
                this.bytes = params.bytes;
            }
            static async read(_data, ..._args) {
                let fileId = await index_js_1.Primitive.Long.read(_data);
                let filePart = await index_js_1.Primitive.Int.read(_data);
                let bytes = await index_js_1.Primitive.Bytes.read(_data);
                return new Raw.upload.SaveFilePart({ fileId: fileId, filePart: filePart, bytes: bytes });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.fileId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.fileId));
                }
                if (this.filePart !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.filePart));
                }
                if (this.bytes !== undefined) {
                    b.write(index_js_1.Primitive.Bytes.write(this.bytes));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        upload.SaveFilePart = SaveFilePart;
        class GetFile extends index_js_1.TLObject {
            __response__;
            precise;
            cdnSupported;
            location;
            offset;
            limit;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'upload.GetFile';
                this.constructorId = 0xbe5335be;
                this.subclassOfId = 0x6c9bd728;
                this._slots = ['precise', 'cdnSupported', 'location', 'offset', 'limit'];
                this.precise = params.precise;
                this.cdnSupported = params.cdnSupported;
                this.location = params.location;
                this.offset = params.offset;
                this.limit = params.limit;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let precise = flags & (1 << 0) ? true : false;
                let cdnSupported = flags & (1 << 1) ? true : false;
                let location = await index_js_1.TLObject.read(_data);
                let offset = await index_js_1.Primitive.Long.read(_data);
                let limit = await index_js_1.Primitive.Int.read(_data);
                return new Raw.upload.GetFile({
                    precise: precise,
                    cdnSupported: cdnSupported,
                    location: location,
                    offset: offset,
                    limit: limit,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.precise ? 1 << 0 : 0;
                flags |= this.cdnSupported ? 1 << 1 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.location !== undefined) {
                    b.write(this.location.write());
                }
                if (this.offset !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.offset));
                }
                if (this.limit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.limit));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        upload.GetFile = GetFile;
        class SaveBigFilePart extends index_js_1.TLObject {
            __response__;
            fileId;
            filePart;
            fileTotalParts;
            bytes;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'upload.SaveBigFilePart';
                this.constructorId = 0xde7b673d;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['fileId', 'filePart', 'fileTotalParts', 'bytes'];
                this.fileId = params.fileId;
                this.filePart = params.filePart;
                this.fileTotalParts = params.fileTotalParts;
                this.bytes = params.bytes;
            }
            static async read(_data, ..._args) {
                let fileId = await index_js_1.Primitive.Long.read(_data);
                let filePart = await index_js_1.Primitive.Int.read(_data);
                let fileTotalParts = await index_js_1.Primitive.Int.read(_data);
                let bytes = await index_js_1.Primitive.Bytes.read(_data);
                return new Raw.upload.SaveBigFilePart({
                    fileId: fileId,
                    filePart: filePart,
                    fileTotalParts: fileTotalParts,
                    bytes: bytes,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.fileId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.fileId));
                }
                if (this.filePart !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.filePart));
                }
                if (this.fileTotalParts !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.fileTotalParts));
                }
                if (this.bytes !== undefined) {
                    b.write(index_js_1.Primitive.Bytes.write(this.bytes));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        upload.SaveBigFilePart = SaveBigFilePart;
        class GetWebFile extends index_js_1.TLObject {
            __response__;
            location;
            offset;
            limit;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'upload.GetWebFile';
                this.constructorId = 0x24e6818d;
                this.subclassOfId = 0x68f17f51;
                this._slots = ['location', 'offset', 'limit'];
                this.location = params.location;
                this.offset = params.offset;
                this.limit = params.limit;
            }
            static async read(_data, ..._args) {
                let location = await index_js_1.TLObject.read(_data);
                let offset = await index_js_1.Primitive.Int.read(_data);
                let limit = await index_js_1.Primitive.Int.read(_data);
                return new Raw.upload.GetWebFile({ location: location, offset: offset, limit: limit });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.location !== undefined) {
                    b.write(this.location.write());
                }
                if (this.offset !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.offset));
                }
                if (this.limit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.limit));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        upload.GetWebFile = GetWebFile;
        class GetCdnFile extends index_js_1.TLObject {
            __response__;
            fileToken;
            offset;
            limit;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'upload.GetCdnFile';
                this.constructorId = 0x395f69da;
                this.subclassOfId = 0xf5ccf928;
                this._slots = ['fileToken', 'offset', 'limit'];
                this.fileToken = params.fileToken;
                this.offset = params.offset;
                this.limit = params.limit;
            }
            static async read(_data, ..._args) {
                let fileToken = await index_js_1.Primitive.Bytes.read(_data);
                let offset = await index_js_1.Primitive.Long.read(_data);
                let limit = await index_js_1.Primitive.Int.read(_data);
                return new Raw.upload.GetCdnFile({ fileToken: fileToken, offset: offset, limit: limit });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.fileToken !== undefined) {
                    b.write(index_js_1.Primitive.Bytes.write(this.fileToken));
                }
                if (this.offset !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.offset));
                }
                if (this.limit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.limit));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        upload.GetCdnFile = GetCdnFile;
        class ReuploadCdnFile extends index_js_1.TLObject {
            __response__;
            fileToken;
            requestToken;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'upload.ReuploadCdnFile';
                this.constructorId = 0x9b2754a8;
                this.subclassOfId = 0xa5940726;
                this._slots = ['fileToken', 'requestToken'];
                this.fileToken = params.fileToken;
                this.requestToken = params.requestToken;
            }
            static async read(_data, ..._args) {
                let fileToken = await index_js_1.Primitive.Bytes.read(_data);
                let requestToken = await index_js_1.Primitive.Bytes.read(_data);
                return new Raw.upload.ReuploadCdnFile({ fileToken: fileToken, requestToken: requestToken });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.fileToken !== undefined) {
                    b.write(index_js_1.Primitive.Bytes.write(this.fileToken));
                }
                if (this.requestToken !== undefined) {
                    b.write(index_js_1.Primitive.Bytes.write(this.requestToken));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        upload.ReuploadCdnFile = ReuploadCdnFile;
        class GetCdnFileHashes extends index_js_1.TLObject {
            __response__;
            fileToken;
            offset;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'upload.GetCdnFileHashes';
                this.constructorId = 0x91dc3f31;
                this.subclassOfId = 0xa5940726;
                this._slots = ['fileToken', 'offset'];
                this.fileToken = params.fileToken;
                this.offset = params.offset;
            }
            static async read(_data, ..._args) {
                let fileToken = await index_js_1.Primitive.Bytes.read(_data);
                let offset = await index_js_1.Primitive.Long.read(_data);
                return new Raw.upload.GetCdnFileHashes({ fileToken: fileToken, offset: offset });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.fileToken !== undefined) {
                    b.write(index_js_1.Primitive.Bytes.write(this.fileToken));
                }
                if (this.offset !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.offset));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        upload.GetCdnFileHashes = GetCdnFileHashes;
        class GetFileHashes extends index_js_1.TLObject {
            __response__;
            location;
            offset;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'upload.GetFileHashes';
                this.constructorId = 0x9156982a;
                this.subclassOfId = 0xa5940726;
                this._slots = ['location', 'offset'];
                this.location = params.location;
                this.offset = params.offset;
            }
            static async read(_data, ..._args) {
                let location = await index_js_1.TLObject.read(_data);
                let offset = await index_js_1.Primitive.Long.read(_data);
                return new Raw.upload.GetFileHashes({ location: location, offset: offset });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.location !== undefined) {
                    b.write(this.location.write());
                }
                if (this.offset !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.offset));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        upload.GetFileHashes = GetFileHashes;
    })(upload = Raw.upload || (Raw.upload = {}));
    let account;
    (function (account) {
        class PrivacyRules extends index_js_1.TLObject {
            rules;
            chats;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'account.PrivacyRules';
                this.constructorId = 0x50a04e45;
                this.subclassOfId = 0xb55aba82;
                this._slots = ['rules', 'chats', 'users'];
                this.rules = params.rules;
                this.chats = params.chats;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let rules = await index_js_1.TLObject.read(_data);
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.account.PrivacyRules({ rules: rules, chats: chats, users: users });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.rules) {
                    b.write(index_js_1.Primitive.Vector.write(this.rules));
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.PrivacyRules = PrivacyRules;
        class Authorizations extends index_js_1.TLObject {
            authorizationTtlDays;
            authorizations;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'account.Authorizations';
                this.constructorId = 0x4bff8ea0;
                this.subclassOfId = 0xbf5e0ff;
                this._slots = ['authorizationTtlDays', 'authorizations'];
                this.authorizationTtlDays = params.authorizationTtlDays;
                this.authorizations = params.authorizations;
            }
            static async read(_data, ..._args) {
                let authorizationTtlDays = await index_js_1.Primitive.Int.read(_data);
                let authorizations = await index_js_1.TLObject.read(_data);
                return new Raw.account.Authorizations({
                    authorizationTtlDays: authorizationTtlDays,
                    authorizations: authorizations,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.authorizationTtlDays !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.authorizationTtlDays));
                }
                if (this.authorizations) {
                    b.write(index_js_1.Primitive.Vector.write(this.authorizations));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.Authorizations = Authorizations;
        class Password extends index_js_1.TLObject {
            hasRecovery;
            hasSecureValues;
            hasPassword;
            currentAlgo;
            srpB;
            srpId;
            hint;
            emailUnconfirmedPattern;
            newAlgo;
            newSecureAlgo;
            secureRandom;
            pendingResetDate;
            loginEmailPattern;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'account.Password';
                this.constructorId = 0x957b50fb;
                this.subclassOfId = 0x53a211a3;
                this._slots = [
                    'hasRecovery',
                    'hasSecureValues',
                    'hasPassword',
                    'currentAlgo',
                    'srpB',
                    'srpId',
                    'hint',
                    'emailUnconfirmedPattern',
                    'newAlgo',
                    'newSecureAlgo',
                    'secureRandom',
                    'pendingResetDate',
                    'loginEmailPattern',
                ];
                this.hasRecovery = params.hasRecovery;
                this.hasSecureValues = params.hasSecureValues;
                this.hasPassword = params.hasPassword;
                this.currentAlgo = params.currentAlgo;
                this.srpB = params.srpB;
                this.srpId = params.srpId;
                this.hint = params.hint;
                this.emailUnconfirmedPattern = params.emailUnconfirmedPattern;
                this.newAlgo = params.newAlgo;
                this.newSecureAlgo = params.newSecureAlgo;
                this.secureRandom = params.secureRandom;
                this.pendingResetDate = params.pendingResetDate;
                this.loginEmailPattern = params.loginEmailPattern;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let hasRecovery = flags & (1 << 0) ? true : false;
                let hasSecureValues = flags & (1 << 1) ? true : false;
                let hasPassword = flags & (1 << 2) ? true : false;
                let currentAlgo = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
                let srpB = flags & (1 << 2) ? await index_js_1.Primitive.Bytes.read(_data) : undefined;
                let srpId = flags & (1 << 2) ? await index_js_1.Primitive.Long.read(_data) : undefined;
                let hint = flags & (1 << 3) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let emailUnconfirmedPattern = flags & (1 << 4) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let newAlgo = await index_js_1.TLObject.read(_data);
                let newSecureAlgo = await index_js_1.TLObject.read(_data);
                let secureRandom = await index_js_1.Primitive.Bytes.read(_data);
                let pendingResetDate = flags & (1 << 5) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let loginEmailPattern = flags & (1 << 6) ? await index_js_1.Primitive.String.read(_data) : undefined;
                return new Raw.account.Password({
                    hasRecovery: hasRecovery,
                    hasSecureValues: hasSecureValues,
                    hasPassword: hasPassword,
                    currentAlgo: currentAlgo,
                    srpB: srpB,
                    srpId: srpId,
                    hint: hint,
                    emailUnconfirmedPattern: emailUnconfirmedPattern,
                    newAlgo: newAlgo,
                    newSecureAlgo: newSecureAlgo,
                    secureRandom: secureRandom,
                    pendingResetDate: pendingResetDate,
                    loginEmailPattern: loginEmailPattern,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.hasRecovery ? 1 << 0 : 0;
                flags |= this.hasSecureValues ? 1 << 1 : 0;
                flags |= this.hasPassword ? 1 << 2 : 0;
                flags |= this.currentAlgo !== undefined ? 1 << 2 : 0;
                flags |= this.srpB !== undefined ? 1 << 2 : 0;
                flags |= this.srpId !== undefined ? 1 << 2 : 0;
                flags |= this.hint !== undefined ? 1 << 3 : 0;
                flags |= this.emailUnconfirmedPattern !== undefined ? 1 << 4 : 0;
                flags |= this.pendingResetDate !== undefined ? 1 << 5 : 0;
                flags |= this.loginEmailPattern !== undefined ? 1 << 6 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.currentAlgo !== undefined) {
                    b.write(this.currentAlgo.write());
                }
                if (this.srpB !== undefined) {
                    b.write(index_js_1.Primitive.Bytes.write(this.srpB));
                }
                if (this.srpId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.srpId));
                }
                if (this.hint !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.hint));
                }
                if (this.emailUnconfirmedPattern !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.emailUnconfirmedPattern));
                }
                if (this.newAlgo !== undefined) {
                    b.write(this.newAlgo.write());
                }
                if (this.newSecureAlgo !== undefined) {
                    b.write(this.newSecureAlgo.write());
                }
                if (this.secureRandom !== undefined) {
                    b.write(index_js_1.Primitive.Bytes.write(this.secureRandom));
                }
                if (this.pendingResetDate !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.pendingResetDate));
                }
                if (this.loginEmailPattern !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.loginEmailPattern));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.Password = Password;
        class PasswordSettings extends index_js_1.TLObject {
            email;
            secureSettings;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'account.PasswordSettings';
                this.constructorId = 0x9a5c33e5;
                this.subclassOfId = 0xd23fb078;
                this._slots = ['email', 'secureSettings'];
                this.email = params.email;
                this.secureSettings = params.secureSettings;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let email = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let secureSettings = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : undefined;
                return new Raw.account.PasswordSettings({ email: email, secureSettings: secureSettings });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.email !== undefined ? 1 << 0 : 0;
                flags |= this.secureSettings !== undefined ? 1 << 1 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.email !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.email));
                }
                if (this.secureSettings !== undefined) {
                    b.write(this.secureSettings.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.PasswordSettings = PasswordSettings;
        class PasswordInputSettings extends index_js_1.TLObject {
            newAlgo;
            newPasswordHash;
            hint;
            email;
            newSecureSettings;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'account.PasswordInputSettings';
                this.constructorId = 0xc23727c9;
                this.subclassOfId = 0xc426ca6;
                this._slots = ['newAlgo', 'newPasswordHash', 'hint', 'email', 'newSecureSettings'];
                this.newAlgo = params.newAlgo;
                this.newPasswordHash = params.newPasswordHash;
                this.hint = params.hint;
                this.email = params.email;
                this.newSecureSettings = params.newSecureSettings;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let newAlgo = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
                let newPasswordHash = flags & (1 << 0) ? await index_js_1.Primitive.Bytes.read(_data) : undefined;
                let hint = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let email = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let newSecureSettings = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
                return new Raw.account.PasswordInputSettings({
                    newAlgo: newAlgo,
                    newPasswordHash: newPasswordHash,
                    hint: hint,
                    email: email,
                    newSecureSettings: newSecureSettings,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.newAlgo !== undefined ? 1 << 0 : 0;
                flags |= this.newPasswordHash !== undefined ? 1 << 0 : 0;
                flags |= this.hint !== undefined ? 1 << 0 : 0;
                flags |= this.email !== undefined ? 1 << 1 : 0;
                flags |= this.newSecureSettings !== undefined ? 1 << 2 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.newAlgo !== undefined) {
                    b.write(this.newAlgo.write());
                }
                if (this.newPasswordHash !== undefined) {
                    b.write(index_js_1.Primitive.Bytes.write(this.newPasswordHash));
                }
                if (this.hint !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.hint));
                }
                if (this.email !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.email));
                }
                if (this.newSecureSettings !== undefined) {
                    b.write(this.newSecureSettings.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.PasswordInputSettings = PasswordInputSettings;
        class TmpPassword extends index_js_1.TLObject {
            tmpPassword;
            validUntil;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'account.TmpPassword';
                this.constructorId = 0xdb64fd34;
                this.subclassOfId = 0xb064992d;
                this._slots = ['tmpPassword', 'validUntil'];
                this.tmpPassword = params.tmpPassword;
                this.validUntil = params.validUntil;
            }
            static async read(_data, ..._args) {
                let tmpPassword = await index_js_1.Primitive.Bytes.read(_data);
                let validUntil = await index_js_1.Primitive.Int.read(_data);
                return new Raw.account.TmpPassword({ tmpPassword: tmpPassword, validUntil: validUntil });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.tmpPassword !== undefined) {
                    b.write(index_js_1.Primitive.Bytes.write(this.tmpPassword));
                }
                if (this.validUntil !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.validUntil));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.TmpPassword = TmpPassword;
        class WebAuthorizations extends index_js_1.TLObject {
            authorizations;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'account.WebAuthorizations';
                this.constructorId = 0xed56c9fc;
                this.subclassOfId = 0x9a365b32;
                this._slots = ['authorizations', 'users'];
                this.authorizations = params.authorizations;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let authorizations = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.account.WebAuthorizations({ authorizations: authorizations, users: users });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.authorizations) {
                    b.write(index_js_1.Primitive.Vector.write(this.authorizations));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.WebAuthorizations = WebAuthorizations;
        class AuthorizationForm extends index_js_1.TLObject {
            requiredTypes;
            values;
            errors;
            users;
            privacyPolicyUrl;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'account.AuthorizationForm';
                this.constructorId = 0xad2e1cd8;
                this.subclassOfId = 0x78049a94;
                this._slots = ['requiredTypes', 'values', 'errors', 'users', 'privacyPolicyUrl'];
                this.requiredTypes = params.requiredTypes;
                this.values = params.values;
                this.errors = params.errors;
                this.users = params.users;
                this.privacyPolicyUrl = params.privacyPolicyUrl;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let requiredTypes = await index_js_1.TLObject.read(_data);
                let values = await index_js_1.TLObject.read(_data);
                let errors = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                let privacyPolicyUrl = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
                return new Raw.account.AuthorizationForm({
                    requiredTypes: requiredTypes,
                    values: values,
                    errors: errors,
                    users: users,
                    privacyPolicyUrl: privacyPolicyUrl,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.privacyPolicyUrl !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.requiredTypes) {
                    b.write(index_js_1.Primitive.Vector.write(this.requiredTypes));
                }
                if (this.values) {
                    b.write(index_js_1.Primitive.Vector.write(this.values));
                }
                if (this.errors) {
                    b.write(index_js_1.Primitive.Vector.write(this.errors));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                if (this.privacyPolicyUrl !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.privacyPolicyUrl));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.AuthorizationForm = AuthorizationForm;
        class SentEmailCode extends index_js_1.TLObject {
            emailPattern;
            length;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'account.SentEmailCode';
                this.constructorId = 0x811f854f;
                this.subclassOfId = 0x69f3c06e;
                this._slots = ['emailPattern', 'length'];
                this.emailPattern = params.emailPattern;
                this.length = params.length;
            }
            static async read(_data, ..._args) {
                let emailPattern = await index_js_1.Primitive.String.read(_data);
                let length = await index_js_1.Primitive.Int.read(_data);
                return new Raw.account.SentEmailCode({ emailPattern: emailPattern, length: length });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.emailPattern !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.emailPattern));
                }
                if (this.length !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.length));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.SentEmailCode = SentEmailCode;
        class Takeout extends index_js_1.TLObject {
            id;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'account.Takeout';
                this.constructorId = 0x4dba4501;
                this.subclassOfId = 0x843ebe85;
                this._slots = ['id'];
                this.id = params.id;
            }
            static async read(_data, ..._args) {
                let id = await index_js_1.Primitive.Long.read(_data);
                return new Raw.account.Takeout({ id: id });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.id !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.id));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.Takeout = Takeout;
        class WallPapersNotModified extends index_js_1.TLObject {
            constructor() {
                super();
                this.classType = 'types';
                this.className = 'account.WallPapersNotModified';
                this.constructorId = 0x1c199183;
                this.subclassOfId = 0xa2c548fd;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.account.WallPapersNotModified();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.WallPapersNotModified = WallPapersNotModified;
        class WallPapers extends index_js_1.TLObject {
            hash;
            wallpapers;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'account.WallPapers';
                this.constructorId = 0xcdc3858c;
                this.subclassOfId = 0xa2c548fd;
                this._slots = ['hash', 'wallpapers'];
                this.hash = params.hash;
                this.wallpapers = params.wallpapers;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Long.read(_data);
                let wallpapers = await index_js_1.TLObject.read(_data);
                return new Raw.account.WallPapers({ hash: hash, wallpapers: wallpapers });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                if (this.wallpapers) {
                    b.write(index_js_1.Primitive.Vector.write(this.wallpapers));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.WallPapers = WallPapers;
        class AutoDownloadSettings extends index_js_1.TLObject {
            low;
            medium;
            high;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'account.AutoDownloadSettings';
                this.constructorId = 0x63cacf26;
                this.subclassOfId = 0x2fb85921;
                this._slots = ['low', 'medium', 'high'];
                this.low = params.low;
                this.medium = params.medium;
                this.high = params.high;
            }
            static async read(_data, ..._args) {
                let low = await index_js_1.TLObject.read(_data);
                let medium = await index_js_1.TLObject.read(_data);
                let high = await index_js_1.TLObject.read(_data);
                return new Raw.account.AutoDownloadSettings({ low: low, medium: medium, high: high });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.low !== undefined) {
                    b.write(this.low.write());
                }
                if (this.medium !== undefined) {
                    b.write(this.medium.write());
                }
                if (this.high !== undefined) {
                    b.write(this.high.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.AutoDownloadSettings = AutoDownloadSettings;
        class ThemesNotModified extends index_js_1.TLObject {
            constructor() {
                super();
                this.classType = 'types';
                this.className = 'account.ThemesNotModified';
                this.constructorId = 0xf41eb622;
                this.subclassOfId = 0x7fc52204;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.account.ThemesNotModified();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.ThemesNotModified = ThemesNotModified;
        class Themes extends index_js_1.TLObject {
            hash;
            themes;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'account.Themes';
                this.constructorId = 0x9a3d8c6d;
                this.subclassOfId = 0x7fc52204;
                this._slots = ['hash', 'themes'];
                this.hash = params.hash;
                this.themes = params.themes;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Long.read(_data);
                let themes = await index_js_1.TLObject.read(_data);
                return new Raw.account.Themes({ hash: hash, themes: themes });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                if (this.themes) {
                    b.write(index_js_1.Primitive.Vector.write(this.themes));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.Themes = Themes;
        class ContentSettings extends index_js_1.TLObject {
            sensitiveEnabled;
            sensitiveCanChange;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'account.ContentSettings';
                this.constructorId = 0x57e28221;
                this.subclassOfId = 0xae3ff891;
                this._slots = ['sensitiveEnabled', 'sensitiveCanChange'];
                this.sensitiveEnabled = params.sensitiveEnabled;
                this.sensitiveCanChange = params.sensitiveCanChange;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let sensitiveEnabled = flags & (1 << 0) ? true : false;
                let sensitiveCanChange = flags & (1 << 1) ? true : false;
                return new Raw.account.ContentSettings({
                    sensitiveEnabled: sensitiveEnabled,
                    sensitiveCanChange: sensitiveCanChange,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.sensitiveEnabled ? 1 << 0 : 0;
                flags |= this.sensitiveCanChange ? 1 << 1 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.ContentSettings = ContentSettings;
        class ResetPasswordFailedWait extends index_js_1.TLObject {
            retryDate;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'account.ResetPasswordFailedWait';
                this.constructorId = 0xe3779861;
                this.subclassOfId = 0x49507416;
                this._slots = ['retryDate'];
                this.retryDate = params.retryDate;
            }
            static async read(_data, ..._args) {
                let retryDate = await index_js_1.Primitive.Int.read(_data);
                return new Raw.account.ResetPasswordFailedWait({ retryDate: retryDate });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.retryDate !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.retryDate));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.ResetPasswordFailedWait = ResetPasswordFailedWait;
        class ResetPasswordRequestedWait extends index_js_1.TLObject {
            untilDate;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'account.ResetPasswordRequestedWait';
                this.constructorId = 0xe9effc7d;
                this.subclassOfId = 0x49507416;
                this._slots = ['untilDate'];
                this.untilDate = params.untilDate;
            }
            static async read(_data, ..._args) {
                let untilDate = await index_js_1.Primitive.Int.read(_data);
                return new Raw.account.ResetPasswordRequestedWait({ untilDate: untilDate });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.untilDate !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.untilDate));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.ResetPasswordRequestedWait = ResetPasswordRequestedWait;
        class ResetPasswordOk extends index_js_1.TLObject {
            constructor() {
                super();
                this.classType = 'types';
                this.className = 'account.ResetPasswordOk';
                this.constructorId = 0xe926d63e;
                this.subclassOfId = 0x49507416;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.account.ResetPasswordOk();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.ResetPasswordOk = ResetPasswordOk;
        class SavedRingtonesNotModified extends index_js_1.TLObject {
            constructor() {
                super();
                this.classType = 'types';
                this.className = 'account.SavedRingtonesNotModified';
                this.constructorId = 0xfbf6e8b1;
                this.subclassOfId = 0x27bcc95e;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.account.SavedRingtonesNotModified();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.SavedRingtonesNotModified = SavedRingtonesNotModified;
        class SavedRingtones extends index_js_1.TLObject {
            hash;
            ringtones;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'account.SavedRingtones';
                this.constructorId = 0xc1e92cc5;
                this.subclassOfId = 0x27bcc95e;
                this._slots = ['hash', 'ringtones'];
                this.hash = params.hash;
                this.ringtones = params.ringtones;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Long.read(_data);
                let ringtones = await index_js_1.TLObject.read(_data);
                return new Raw.account.SavedRingtones({ hash: hash, ringtones: ringtones });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                if (this.ringtones) {
                    b.write(index_js_1.Primitive.Vector.write(this.ringtones));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.SavedRingtones = SavedRingtones;
        class SavedRingtone extends index_js_1.TLObject {
            constructor() {
                super();
                this.classType = 'types';
                this.className = 'account.SavedRingtone';
                this.constructorId = 0xb7263f6d;
                this.subclassOfId = 0xb1e28424;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.account.SavedRingtone();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.SavedRingtone = SavedRingtone;
        class SavedRingtoneConverted extends index_js_1.TLObject {
            document;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'account.SavedRingtoneConverted';
                this.constructorId = 0x1f307eb7;
                this.subclassOfId = 0xb1e28424;
                this._slots = ['document'];
                this.document = params.document;
            }
            static async read(_data, ..._args) {
                let document = await index_js_1.TLObject.read(_data);
                return new Raw.account.SavedRingtoneConverted({ document: document });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.document !== undefined) {
                    b.write(this.document.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.SavedRingtoneConverted = SavedRingtoneConverted;
        class EmojiStatusesNotModified extends index_js_1.TLObject {
            constructor() {
                super();
                this.classType = 'types';
                this.className = 'account.EmojiStatusesNotModified';
                this.constructorId = 0xd08ce645;
                this.subclassOfId = 0xd3e005ca;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.account.EmojiStatusesNotModified();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.EmojiStatusesNotModified = EmojiStatusesNotModified;
        class EmojiStatuses extends index_js_1.TLObject {
            hash;
            statuses;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'account.EmojiStatuses';
                this.constructorId = 0x90c467d1;
                this.subclassOfId = 0xd3e005ca;
                this._slots = ['hash', 'statuses'];
                this.hash = params.hash;
                this.statuses = params.statuses;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Long.read(_data);
                let statuses = await index_js_1.TLObject.read(_data);
                return new Raw.account.EmojiStatuses({ hash: hash, statuses: statuses });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                if (this.statuses) {
                    b.write(index_js_1.Primitive.Vector.write(this.statuses));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.EmojiStatuses = EmojiStatuses;
        class EmailVerified extends index_js_1.TLObject {
            email;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'account.EmailVerified';
                this.constructorId = 0x2b96cd1b;
                this.subclassOfId = 0x64833188;
                this._slots = ['email'];
                this.email = params.email;
            }
            static async read(_data, ..._args) {
                let email = await index_js_1.Primitive.String.read(_data);
                return new Raw.account.EmailVerified({ email: email });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.email !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.email));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.EmailVerified = EmailVerified;
        class EmailVerifiedLogin extends index_js_1.TLObject {
            email;
            sentCode;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'account.EmailVerifiedLogin';
                this.constructorId = 0xe1bb0d61;
                this.subclassOfId = 0x64833188;
                this._slots = ['email', 'sentCode'];
                this.email = params.email;
                this.sentCode = params.sentCode;
            }
            static async read(_data, ..._args) {
                let email = await index_js_1.Primitive.String.read(_data);
                let sentCode = await index_js_1.TLObject.read(_data);
                return new Raw.account.EmailVerifiedLogin({ email: email, sentCode: sentCode });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.email !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.email));
                }
                if (this.sentCode !== undefined) {
                    b.write(this.sentCode.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.EmailVerifiedLogin = EmailVerifiedLogin;
        class AutoSaveSettings extends index_js_1.TLObject {
            usersSettings;
            chatsSettings;
            broadcastsSettings;
            exceptions;
            chats;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'account.AutoSaveSettings';
                this.constructorId = 0x4c3e069d;
                this.subclassOfId = 0x48cf2f02;
                this._slots = [
                    'usersSettings',
                    'chatsSettings',
                    'broadcastsSettings',
                    'exceptions',
                    'chats',
                    'users',
                ];
                this.usersSettings = params.usersSettings;
                this.chatsSettings = params.chatsSettings;
                this.broadcastsSettings = params.broadcastsSettings;
                this.exceptions = params.exceptions;
                this.chats = params.chats;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let usersSettings = await index_js_1.TLObject.read(_data);
                let chatsSettings = await index_js_1.TLObject.read(_data);
                let broadcastsSettings = await index_js_1.TLObject.read(_data);
                let exceptions = await index_js_1.TLObject.read(_data);
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.account.AutoSaveSettings({
                    usersSettings: usersSettings,
                    chatsSettings: chatsSettings,
                    broadcastsSettings: broadcastsSettings,
                    exceptions: exceptions,
                    chats: chats,
                    users: users,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.usersSettings !== undefined) {
                    b.write(this.usersSettings.write());
                }
                if (this.chatsSettings !== undefined) {
                    b.write(this.chatsSettings.write());
                }
                if (this.broadcastsSettings !== undefined) {
                    b.write(this.broadcastsSettings.write());
                }
                if (this.exceptions) {
                    b.write(index_js_1.Primitive.Vector.write(this.exceptions));
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.AutoSaveSettings = AutoSaveSettings;
        class ConnectedBots extends index_js_1.TLObject {
            connectedBots;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'account.ConnectedBots';
                this.constructorId = 0x17d7f87b;
                this.subclassOfId = 0xe4caf7d3;
                this._slots = ['connectedBots', 'users'];
                this.connectedBots = params.connectedBots;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let connectedBots = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.account.ConnectedBots({ connectedBots: connectedBots, users: users });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.connectedBots) {
                    b.write(index_js_1.Primitive.Vector.write(this.connectedBots));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.ConnectedBots = ConnectedBots;
        class BusinessChatLinks extends index_js_1.TLObject {
            links;
            chats;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'account.BusinessChatLinks';
                this.constructorId = 0xec43a2d1;
                this.subclassOfId = 0xc6ba4a31;
                this._slots = ['links', 'chats', 'users'];
                this.links = params.links;
                this.chats = params.chats;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let links = await index_js_1.TLObject.read(_data);
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.account.BusinessChatLinks({ links: links, chats: chats, users: users });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.links) {
                    b.write(index_js_1.Primitive.Vector.write(this.links));
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.BusinessChatLinks = BusinessChatLinks;
        class ResolvedBusinessChatLinks extends index_js_1.TLObject {
            peer;
            message;
            entities;
            chats;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'account.ResolvedBusinessChatLinks';
                this.constructorId = 0x9a23af21;
                this.subclassOfId = 0x3a772c28;
                this._slots = ['peer', 'message', 'entities', 'chats', 'users'];
                this.peer = params.peer;
                this.message = params.message;
                this.entities = params.entities;
                this.chats = params.chats;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let peer = await index_js_1.TLObject.read(_data);
                let message = await index_js_1.Primitive.String.read(_data);
                let entities = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : [];
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.account.ResolvedBusinessChatLinks({
                    peer: peer,
                    message: message,
                    entities: entities,
                    chats: chats,
                    users: users,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.entities ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.message !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.message));
                }
                if (this.entities) {
                    b.write(index_js_1.Primitive.Vector.write(this.entities));
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.ResolvedBusinessChatLinks = ResolvedBusinessChatLinks;
        class RegisterDevice extends index_js_1.TLObject {
            __response__;
            noMuted;
            tokenType;
            token;
            appSandbox;
            secret;
            otherUids;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.RegisterDevice';
                this.constructorId = 0xec86017a;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['noMuted', 'tokenType', 'token', 'appSandbox', 'secret', 'otherUids'];
                this.noMuted = params.noMuted;
                this.tokenType = params.tokenType;
                this.token = params.token;
                this.appSandbox = params.appSandbox;
                this.secret = params.secret;
                this.otherUids = params.otherUids;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let noMuted = flags & (1 << 0) ? true : false;
                let tokenType = await index_js_1.Primitive.Int.read(_data);
                let token = await index_js_1.Primitive.String.read(_data);
                let appSandbox = await index_js_1.Primitive.Bool.read(_data);
                let secret = await index_js_1.Primitive.Bytes.read(_data);
                let otherUids = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Long);
                return new Raw.account.RegisterDevice({
                    noMuted: noMuted,
                    tokenType: tokenType,
                    token: token,
                    appSandbox: appSandbox,
                    secret: secret,
                    otherUids: otherUids,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.noMuted ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.tokenType !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.tokenType));
                }
                if (this.token !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.token));
                }
                if (this.appSandbox !== undefined) {
                    b.write(index_js_1.Primitive.Bool.write(this.appSandbox));
                }
                if (this.secret !== undefined) {
                    b.write(index_js_1.Primitive.Bytes.write(this.secret));
                }
                if (this.otherUids) {
                    b.write(index_js_1.Primitive.Vector.write(this.otherUids, index_js_1.Primitive.Long));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.RegisterDevice = RegisterDevice;
        class UnregisterDevice extends index_js_1.TLObject {
            __response__;
            tokenType;
            token;
            otherUids;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.UnregisterDevice';
                this.constructorId = 0x6a0d3206;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['tokenType', 'token', 'otherUids'];
                this.tokenType = params.tokenType;
                this.token = params.token;
                this.otherUids = params.otherUids;
            }
            static async read(_data, ..._args) {
                let tokenType = await index_js_1.Primitive.Int.read(_data);
                let token = await index_js_1.Primitive.String.read(_data);
                let otherUids = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Long);
                return new Raw.account.UnregisterDevice({
                    tokenType: tokenType,
                    token: token,
                    otherUids: otherUids,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.tokenType !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.tokenType));
                }
                if (this.token !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.token));
                }
                if (this.otherUids) {
                    b.write(index_js_1.Primitive.Vector.write(this.otherUids, index_js_1.Primitive.Long));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.UnregisterDevice = UnregisterDevice;
        class UpdateNotifySettings extends index_js_1.TLObject {
            __response__;
            peer;
            settings;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.UpdateNotifySettings';
                this.constructorId = 0x84be5b93;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['peer', 'settings'];
                this.peer = params.peer;
                this.settings = params.settings;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let settings = await index_js_1.TLObject.read(_data);
                return new Raw.account.UpdateNotifySettings({ peer: peer, settings: settings });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.settings !== undefined) {
                    b.write(this.settings.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.UpdateNotifySettings = UpdateNotifySettings;
        class GetNotifySettings extends index_js_1.TLObject {
            __response__;
            peer;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.GetNotifySettings';
                this.constructorId = 0x12b3ad31;
                this.subclassOfId = 0xcf20c074;
                this._slots = ['peer'];
                this.peer = params.peer;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                return new Raw.account.GetNotifySettings({ peer: peer });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.GetNotifySettings = GetNotifySettings;
        class ResetNotifySettings extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'account.ResetNotifySettings';
                this.constructorId = 0xdb7e1747;
                this.subclassOfId = 0xf5b399ac;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.account.ResetNotifySettings();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.ResetNotifySettings = ResetNotifySettings;
        class UpdateProfile extends index_js_1.TLObject {
            __response__;
            firstName;
            lastName;
            about;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.UpdateProfile';
                this.constructorId = 0x78515775;
                this.subclassOfId = 0x2da17977;
                this._slots = ['firstName', 'lastName', 'about'];
                this.firstName = params.firstName;
                this.lastName = params.lastName;
                this.about = params.about;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let firstName = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let lastName = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let about = flags & (1 << 2) ? await index_js_1.Primitive.String.read(_data) : undefined;
                return new Raw.account.UpdateProfile({
                    firstName: firstName,
                    lastName: lastName,
                    about: about,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.firstName !== undefined ? 1 << 0 : 0;
                flags |= this.lastName !== undefined ? 1 << 1 : 0;
                flags |= this.about !== undefined ? 1 << 2 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.firstName !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.firstName));
                }
                if (this.lastName !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.lastName));
                }
                if (this.about !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.about));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.UpdateProfile = UpdateProfile;
        class UpdateStatus extends index_js_1.TLObject {
            __response__;
            offline;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.UpdateStatus';
                this.constructorId = 0x6628562c;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['offline'];
                this.offline = params.offline;
            }
            static async read(_data, ..._args) {
                let offline = await index_js_1.Primitive.Bool.read(_data);
                return new Raw.account.UpdateStatus({ offline: offline });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.offline !== undefined) {
                    b.write(index_js_1.Primitive.Bool.write(this.offline));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.UpdateStatus = UpdateStatus;
        class GetWallPapers extends index_js_1.TLObject {
            __response__;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.GetWallPapers';
                this.constructorId = 0x7967d36;
                this.subclassOfId = 0xa2c548fd;
                this._slots = ['hash'];
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Long.read(_data);
                return new Raw.account.GetWallPapers({ hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.GetWallPapers = GetWallPapers;
        class ReportPeer extends index_js_1.TLObject {
            __response__;
            peer;
            reason;
            message;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.ReportPeer';
                this.constructorId = 0xc5ba3d86;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['peer', 'reason', 'message'];
                this.peer = params.peer;
                this.reason = params.reason;
                this.message = params.message;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let reason = await index_js_1.TLObject.read(_data);
                let message = await index_js_1.Primitive.String.read(_data);
                return new Raw.account.ReportPeer({ peer: peer, reason: reason, message: message });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.reason !== undefined) {
                    b.write(this.reason.write());
                }
                if (this.message !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.message));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.ReportPeer = ReportPeer;
        class CheckUsername extends index_js_1.TLObject {
            __response__;
            username;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.CheckUsername';
                this.constructorId = 0x2714d86c;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['username'];
                this.username = params.username;
            }
            static async read(_data, ..._args) {
                let username = await index_js_1.Primitive.String.read(_data);
                return new Raw.account.CheckUsername({ username: username });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.username !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.username));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.CheckUsername = CheckUsername;
        class UpdateUsername extends index_js_1.TLObject {
            __response__;
            username;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.UpdateUsername';
                this.constructorId = 0x3e0bdd7c;
                this.subclassOfId = 0x2da17977;
                this._slots = ['username'];
                this.username = params.username;
            }
            static async read(_data, ..._args) {
                let username = await index_js_1.Primitive.String.read(_data);
                return new Raw.account.UpdateUsername({ username: username });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.username !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.username));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.UpdateUsername = UpdateUsername;
        class GetPrivacy extends index_js_1.TLObject {
            __response__;
            key;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.GetPrivacy';
                this.constructorId = 0xdadbc950;
                this.subclassOfId = 0xb55aba82;
                this._slots = ['key'];
                this.key = params.key;
            }
            static async read(_data, ..._args) {
                let key = await index_js_1.TLObject.read(_data);
                return new Raw.account.GetPrivacy({ key: key });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.key !== undefined) {
                    b.write(this.key.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.GetPrivacy = GetPrivacy;
        class SetPrivacy extends index_js_1.TLObject {
            __response__;
            key;
            rules;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.SetPrivacy';
                this.constructorId = 0xc9f81ce8;
                this.subclassOfId = 0xb55aba82;
                this._slots = ['key', 'rules'];
                this.key = params.key;
                this.rules = params.rules;
            }
            static async read(_data, ..._args) {
                let key = await index_js_1.TLObject.read(_data);
                let rules = await index_js_1.TLObject.read(_data);
                return new Raw.account.SetPrivacy({ key: key, rules: rules });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.key !== undefined) {
                    b.write(this.key.write());
                }
                if (this.rules) {
                    b.write(index_js_1.Primitive.Vector.write(this.rules));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.SetPrivacy = SetPrivacy;
        class DeleteAccount extends index_js_1.TLObject {
            __response__;
            reason;
            password;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.DeleteAccount';
                this.constructorId = 0xa2c0cf74;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['reason', 'password'];
                this.reason = params.reason;
                this.password = params.password;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let reason = await index_js_1.Primitive.String.read(_data);
                let password = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
                return new Raw.account.DeleteAccount({ reason: reason, password: password });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.password !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.reason !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.reason));
                }
                if (this.password !== undefined) {
                    b.write(this.password.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.DeleteAccount = DeleteAccount;
        class GetAccountTTL extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'account.GetAccountTTL';
                this.constructorId = 0x8fc711d;
                this.subclassOfId = 0xbaa39d88;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.account.GetAccountTTL();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.GetAccountTTL = GetAccountTTL;
        class SetAccountTTL extends index_js_1.TLObject {
            __response__;
            ttl;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.SetAccountTTL';
                this.constructorId = 0x2442485e;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['ttl'];
                this.ttl = params.ttl;
            }
            static async read(_data, ..._args) {
                let ttl = await index_js_1.TLObject.read(_data);
                return new Raw.account.SetAccountTTL({ ttl: ttl });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.ttl !== undefined) {
                    b.write(this.ttl.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.SetAccountTTL = SetAccountTTL;
        class SendChangePhoneCode extends index_js_1.TLObject {
            __response__;
            phoneNumber;
            settings;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.SendChangePhoneCode';
                this.constructorId = 0x82574ae5;
                this.subclassOfId = 0x6ce87081;
                this._slots = ['phoneNumber', 'settings'];
                this.phoneNumber = params.phoneNumber;
                this.settings = params.settings;
            }
            static async read(_data, ..._args) {
                let phoneNumber = await index_js_1.Primitive.String.read(_data);
                let settings = await index_js_1.TLObject.read(_data);
                return new Raw.account.SendChangePhoneCode({
                    phoneNumber: phoneNumber,
                    settings: settings,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.phoneNumber !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.phoneNumber));
                }
                if (this.settings !== undefined) {
                    b.write(this.settings.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.SendChangePhoneCode = SendChangePhoneCode;
        class ChangePhone extends index_js_1.TLObject {
            __response__;
            phoneNumber;
            phoneCodeHash;
            phoneCode;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.ChangePhone';
                this.constructorId = 0x70c32edb;
                this.subclassOfId = 0x2da17977;
                this._slots = ['phoneNumber', 'phoneCodeHash', 'phoneCode'];
                this.phoneNumber = params.phoneNumber;
                this.phoneCodeHash = params.phoneCodeHash;
                this.phoneCode = params.phoneCode;
            }
            static async read(_data, ..._args) {
                let phoneNumber = await index_js_1.Primitive.String.read(_data);
                let phoneCodeHash = await index_js_1.Primitive.String.read(_data);
                let phoneCode = await index_js_1.Primitive.String.read(_data);
                return new Raw.account.ChangePhone({
                    phoneNumber: phoneNumber,
                    phoneCodeHash: phoneCodeHash,
                    phoneCode: phoneCode,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.phoneNumber !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.phoneNumber));
                }
                if (this.phoneCodeHash !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.phoneCodeHash));
                }
                if (this.phoneCode !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.phoneCode));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.ChangePhone = ChangePhone;
        class UpdateDeviceLocked extends index_js_1.TLObject {
            __response__;
            period;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.UpdateDeviceLocked';
                this.constructorId = 0x38df3532;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['period'];
                this.period = params.period;
            }
            static async read(_data, ..._args) {
                let period = await index_js_1.Primitive.Int.read(_data);
                return new Raw.account.UpdateDeviceLocked({ period: period });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.period !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.period));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.UpdateDeviceLocked = UpdateDeviceLocked;
        class GetAuthorizations extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'account.GetAuthorizations';
                this.constructorId = 0xe320c158;
                this.subclassOfId = 0xbf5e0ff;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.account.GetAuthorizations();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.GetAuthorizations = GetAuthorizations;
        class ResetAuthorization extends index_js_1.TLObject {
            __response__;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.ResetAuthorization';
                this.constructorId = 0xdf77f3bc;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['hash'];
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Long.read(_data);
                return new Raw.account.ResetAuthorization({ hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.ResetAuthorization = ResetAuthorization;
        class GetPassword extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'account.GetPassword';
                this.constructorId = 0x548a30f5;
                this.subclassOfId = 0x53a211a3;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.account.GetPassword();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.GetPassword = GetPassword;
        class GetPasswordSettings extends index_js_1.TLObject {
            __response__;
            password;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.GetPasswordSettings';
                this.constructorId = 0x9cd4eaf9;
                this.subclassOfId = 0xd23fb078;
                this._slots = ['password'];
                this.password = params.password;
            }
            static async read(_data, ..._args) {
                let password = await index_js_1.TLObject.read(_data);
                return new Raw.account.GetPasswordSettings({ password: password });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.password !== undefined) {
                    b.write(this.password.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.GetPasswordSettings = GetPasswordSettings;
        class UpdatePasswordSettings extends index_js_1.TLObject {
            __response__;
            password;
            newSettings;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.UpdatePasswordSettings';
                this.constructorId = 0xa59b102f;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['password', 'newSettings'];
                this.password = params.password;
                this.newSettings = params.newSettings;
            }
            static async read(_data, ..._args) {
                let password = await index_js_1.TLObject.read(_data);
                let newSettings = await index_js_1.TLObject.read(_data);
                return new Raw.account.UpdatePasswordSettings({
                    password: password,
                    newSettings: newSettings,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.password !== undefined) {
                    b.write(this.password.write());
                }
                if (this.newSettings !== undefined) {
                    b.write(this.newSettings.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.UpdatePasswordSettings = UpdatePasswordSettings;
        class SendConfirmPhoneCode extends index_js_1.TLObject {
            __response__;
            hash;
            settings;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.SendConfirmPhoneCode';
                this.constructorId = 0x1b3faa88;
                this.subclassOfId = 0x6ce87081;
                this._slots = ['hash', 'settings'];
                this.hash = params.hash;
                this.settings = params.settings;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.String.read(_data);
                let settings = await index_js_1.TLObject.read(_data);
                return new Raw.account.SendConfirmPhoneCode({ hash: hash, settings: settings });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.hash));
                }
                if (this.settings !== undefined) {
                    b.write(this.settings.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.SendConfirmPhoneCode = SendConfirmPhoneCode;
        class ConfirmPhone extends index_js_1.TLObject {
            __response__;
            phoneCodeHash;
            phoneCode;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.ConfirmPhone';
                this.constructorId = 0x5f2178c3;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['phoneCodeHash', 'phoneCode'];
                this.phoneCodeHash = params.phoneCodeHash;
                this.phoneCode = params.phoneCode;
            }
            static async read(_data, ..._args) {
                let phoneCodeHash = await index_js_1.Primitive.String.read(_data);
                let phoneCode = await index_js_1.Primitive.String.read(_data);
                return new Raw.account.ConfirmPhone({ phoneCodeHash: phoneCodeHash, phoneCode: phoneCode });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.phoneCodeHash !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.phoneCodeHash));
                }
                if (this.phoneCode !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.phoneCode));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.ConfirmPhone = ConfirmPhone;
        class GetTmpPassword extends index_js_1.TLObject {
            __response__;
            password;
            period;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.GetTmpPassword';
                this.constructorId = 0x449e0b51;
                this.subclassOfId = 0xb064992d;
                this._slots = ['password', 'period'];
                this.password = params.password;
                this.period = params.period;
            }
            static async read(_data, ..._args) {
                let password = await index_js_1.TLObject.read(_data);
                let period = await index_js_1.Primitive.Int.read(_data);
                return new Raw.account.GetTmpPassword({ password: password, period: period });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.password !== undefined) {
                    b.write(this.password.write());
                }
                if (this.period !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.period));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.GetTmpPassword = GetTmpPassword;
        class GetWebAuthorizations extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'account.GetWebAuthorizations';
                this.constructorId = 0x182e6d6f;
                this.subclassOfId = 0x9a365b32;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.account.GetWebAuthorizations();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.GetWebAuthorizations = GetWebAuthorizations;
        class ResetWebAuthorization extends index_js_1.TLObject {
            __response__;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.ResetWebAuthorization';
                this.constructorId = 0x2d01b9ef;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['hash'];
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Long.read(_data);
                return new Raw.account.ResetWebAuthorization({ hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.ResetWebAuthorization = ResetWebAuthorization;
        class ResetWebAuthorizations extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'account.ResetWebAuthorizations';
                this.constructorId = 0x682d2594;
                this.subclassOfId = 0xf5b399ac;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.account.ResetWebAuthorizations();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.ResetWebAuthorizations = ResetWebAuthorizations;
        class GetAllSecureValues extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'account.GetAllSecureValues';
                this.constructorId = 0xb288bc7d;
                this.subclassOfId = 0xe82e4121;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.account.GetAllSecureValues();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.GetAllSecureValues = GetAllSecureValues;
        class GetSecureValue extends index_js_1.TLObject {
            __response__;
            types;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.GetSecureValue';
                this.constructorId = 0x73665bc2;
                this.subclassOfId = 0xe82e4121;
                this._slots = ['types'];
                this.types = params.types;
            }
            static async read(_data, ..._args) {
                let types = await index_js_1.TLObject.read(_data);
                return new Raw.account.GetSecureValue({ types: types });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.types) {
                    b.write(index_js_1.Primitive.Vector.write(this.types));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.GetSecureValue = GetSecureValue;
        class SaveSecureValue extends index_js_1.TLObject {
            __response__;
            value;
            secureSecretId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.SaveSecureValue';
                this.constructorId = 0x899fe31d;
                this.subclassOfId = 0x51138ae;
                this._slots = ['value', 'secureSecretId'];
                this.value = params.value;
                this.secureSecretId = params.secureSecretId;
            }
            static async read(_data, ..._args) {
                let value = await index_js_1.TLObject.read(_data);
                let secureSecretId = await index_js_1.Primitive.Long.read(_data);
                return new Raw.account.SaveSecureValue({ value: value, secureSecretId: secureSecretId });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.value !== undefined) {
                    b.write(this.value.write());
                }
                if (this.secureSecretId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.secureSecretId));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.SaveSecureValue = SaveSecureValue;
        class DeleteSecureValue extends index_js_1.TLObject {
            __response__;
            types;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.DeleteSecureValue';
                this.constructorId = 0xb880bc4b;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['types'];
                this.types = params.types;
            }
            static async read(_data, ..._args) {
                let types = await index_js_1.TLObject.read(_data);
                return new Raw.account.DeleteSecureValue({ types: types });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.types) {
                    b.write(index_js_1.Primitive.Vector.write(this.types));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.DeleteSecureValue = DeleteSecureValue;
        class GetAuthorizationForm extends index_js_1.TLObject {
            __response__;
            botId;
            scope;
            publicKey;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.GetAuthorizationForm';
                this.constructorId = 0xa929597a;
                this.subclassOfId = 0x78049a94;
                this._slots = ['botId', 'scope', 'publicKey'];
                this.botId = params.botId;
                this.scope = params.scope;
                this.publicKey = params.publicKey;
            }
            static async read(_data, ..._args) {
                let botId = await index_js_1.Primitive.Long.read(_data);
                let scope = await index_js_1.Primitive.String.read(_data);
                let publicKey = await index_js_1.Primitive.String.read(_data);
                return new Raw.account.GetAuthorizationForm({
                    botId: botId,
                    scope: scope,
                    publicKey: publicKey,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.botId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.botId));
                }
                if (this.scope !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.scope));
                }
                if (this.publicKey !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.publicKey));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.GetAuthorizationForm = GetAuthorizationForm;
        class AcceptAuthorization extends index_js_1.TLObject {
            __response__;
            botId;
            scope;
            publicKey;
            valueHashes;
            credentials;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.AcceptAuthorization';
                this.constructorId = 0xf3ed4c73;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['botId', 'scope', 'publicKey', 'valueHashes', 'credentials'];
                this.botId = params.botId;
                this.scope = params.scope;
                this.publicKey = params.publicKey;
                this.valueHashes = params.valueHashes;
                this.credentials = params.credentials;
            }
            static async read(_data, ..._args) {
                let botId = await index_js_1.Primitive.Long.read(_data);
                let scope = await index_js_1.Primitive.String.read(_data);
                let publicKey = await index_js_1.Primitive.String.read(_data);
                let valueHashes = await index_js_1.TLObject.read(_data);
                let credentials = await index_js_1.TLObject.read(_data);
                return new Raw.account.AcceptAuthorization({
                    botId: botId,
                    scope: scope,
                    publicKey: publicKey,
                    valueHashes: valueHashes,
                    credentials: credentials,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.botId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.botId));
                }
                if (this.scope !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.scope));
                }
                if (this.publicKey !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.publicKey));
                }
                if (this.valueHashes) {
                    b.write(index_js_1.Primitive.Vector.write(this.valueHashes));
                }
                if (this.credentials !== undefined) {
                    b.write(this.credentials.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.AcceptAuthorization = AcceptAuthorization;
        class SendVerifyPhoneCode extends index_js_1.TLObject {
            __response__;
            phoneNumber;
            settings;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.SendVerifyPhoneCode';
                this.constructorId = 0xa5a356f9;
                this.subclassOfId = 0x6ce87081;
                this._slots = ['phoneNumber', 'settings'];
                this.phoneNumber = params.phoneNumber;
                this.settings = params.settings;
            }
            static async read(_data, ..._args) {
                let phoneNumber = await index_js_1.Primitive.String.read(_data);
                let settings = await index_js_1.TLObject.read(_data);
                return new Raw.account.SendVerifyPhoneCode({
                    phoneNumber: phoneNumber,
                    settings: settings,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.phoneNumber !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.phoneNumber));
                }
                if (this.settings !== undefined) {
                    b.write(this.settings.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.SendVerifyPhoneCode = SendVerifyPhoneCode;
        class VerifyPhone extends index_js_1.TLObject {
            __response__;
            phoneNumber;
            phoneCodeHash;
            phoneCode;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.VerifyPhone';
                this.constructorId = 0x4dd3a7f6;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['phoneNumber', 'phoneCodeHash', 'phoneCode'];
                this.phoneNumber = params.phoneNumber;
                this.phoneCodeHash = params.phoneCodeHash;
                this.phoneCode = params.phoneCode;
            }
            static async read(_data, ..._args) {
                let phoneNumber = await index_js_1.Primitive.String.read(_data);
                let phoneCodeHash = await index_js_1.Primitive.String.read(_data);
                let phoneCode = await index_js_1.Primitive.String.read(_data);
                return new Raw.account.VerifyPhone({
                    phoneNumber: phoneNumber,
                    phoneCodeHash: phoneCodeHash,
                    phoneCode: phoneCode,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.phoneNumber !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.phoneNumber));
                }
                if (this.phoneCodeHash !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.phoneCodeHash));
                }
                if (this.phoneCode !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.phoneCode));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.VerifyPhone = VerifyPhone;
        class SendVerifyEmailCode extends index_js_1.TLObject {
            __response__;
            purpose;
            email;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.SendVerifyEmailCode';
                this.constructorId = 0x98e037bb;
                this.subclassOfId = 0x69f3c06e;
                this._slots = ['purpose', 'email'];
                this.purpose = params.purpose;
                this.email = params.email;
            }
            static async read(_data, ..._args) {
                let purpose = await index_js_1.TLObject.read(_data);
                let email = await index_js_1.Primitive.String.read(_data);
                return new Raw.account.SendVerifyEmailCode({ purpose: purpose, email: email });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.purpose !== undefined) {
                    b.write(this.purpose.write());
                }
                if (this.email !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.email));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.SendVerifyEmailCode = SendVerifyEmailCode;
        class VerifyEmail extends index_js_1.TLObject {
            __response__;
            purpose;
            verification;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.VerifyEmail';
                this.constructorId = 0x32da4cf;
                this.subclassOfId = 0x64833188;
                this._slots = ['purpose', 'verification'];
                this.purpose = params.purpose;
                this.verification = params.verification;
            }
            static async read(_data, ..._args) {
                let purpose = await index_js_1.TLObject.read(_data);
                let verification = await index_js_1.TLObject.read(_data);
                return new Raw.account.VerifyEmail({ purpose: purpose, verification: verification });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.purpose !== undefined) {
                    b.write(this.purpose.write());
                }
                if (this.verification !== undefined) {
                    b.write(this.verification.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.VerifyEmail = VerifyEmail;
        class InitTakeoutSession extends index_js_1.TLObject {
            __response__;
            contacts;
            messageUsers;
            messageChats;
            messageMegagroups;
            messageChannels;
            files;
            fileMaxSize;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.InitTakeoutSession';
                this.constructorId = 0x8ef3eab0;
                this.subclassOfId = 0x843ebe85;
                this._slots = [
                    'contacts',
                    'messageUsers',
                    'messageChats',
                    'messageMegagroups',
                    'messageChannels',
                    'files',
                    'fileMaxSize',
                ];
                this.contacts = params.contacts;
                this.messageUsers = params.messageUsers;
                this.messageChats = params.messageChats;
                this.messageMegagroups = params.messageMegagroups;
                this.messageChannels = params.messageChannels;
                this.files = params.files;
                this.fileMaxSize = params.fileMaxSize;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let contacts = flags & (1 << 0) ? true : false;
                let messageUsers = flags & (1 << 1) ? true : false;
                let messageChats = flags & (1 << 2) ? true : false;
                let messageMegagroups = flags & (1 << 3) ? true : false;
                let messageChannels = flags & (1 << 4) ? true : false;
                let files = flags & (1 << 5) ? true : false;
                let fileMaxSize = flags & (1 << 5) ? await index_js_1.Primitive.Long.read(_data) : undefined;
                return new Raw.account.InitTakeoutSession({
                    contacts: contacts,
                    messageUsers: messageUsers,
                    messageChats: messageChats,
                    messageMegagroups: messageMegagroups,
                    messageChannels: messageChannels,
                    files: files,
                    fileMaxSize: fileMaxSize,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.contacts ? 1 << 0 : 0;
                flags |= this.messageUsers ? 1 << 1 : 0;
                flags |= this.messageChats ? 1 << 2 : 0;
                flags |= this.messageMegagroups ? 1 << 3 : 0;
                flags |= this.messageChannels ? 1 << 4 : 0;
                flags |= this.files ? 1 << 5 : 0;
                flags |= this.fileMaxSize !== undefined ? 1 << 5 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.fileMaxSize !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.fileMaxSize));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.InitTakeoutSession = InitTakeoutSession;
        class FinishTakeoutSession extends index_js_1.TLObject {
            __response__;
            success;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.FinishTakeoutSession';
                this.constructorId = 0x1d2652ee;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['success'];
                this.success = params.success;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let success = flags & (1 << 0) ? true : false;
                return new Raw.account.FinishTakeoutSession({ success: success });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.success ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.FinishTakeoutSession = FinishTakeoutSession;
        class ConfirmPasswordEmail extends index_js_1.TLObject {
            __response__;
            code;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.ConfirmPasswordEmail';
                this.constructorId = 0x8fdf1920;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['code'];
                this.code = params.code;
            }
            static async read(_data, ..._args) {
                let code = await index_js_1.Primitive.String.read(_data);
                return new Raw.account.ConfirmPasswordEmail({ code: code });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.code !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.code));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.ConfirmPasswordEmail = ConfirmPasswordEmail;
        class ResendPasswordEmail extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'account.ResendPasswordEmail';
                this.constructorId = 0x7a7f2a15;
                this.subclassOfId = 0xf5b399ac;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.account.ResendPasswordEmail();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.ResendPasswordEmail = ResendPasswordEmail;
        class CancelPasswordEmail extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'account.CancelPasswordEmail';
                this.constructorId = 0xc1cbd5b6;
                this.subclassOfId = 0xf5b399ac;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.account.CancelPasswordEmail();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.CancelPasswordEmail = CancelPasswordEmail;
        class GetContactSignUpNotification extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'account.GetContactSignUpNotification';
                this.constructorId = 0x9f07c728;
                this.subclassOfId = 0xf5b399ac;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.account.GetContactSignUpNotification();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.GetContactSignUpNotification = GetContactSignUpNotification;
        class SetContactSignUpNotification extends index_js_1.TLObject {
            __response__;
            silent;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.SetContactSignUpNotification';
                this.constructorId = 0xcff43f61;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['silent'];
                this.silent = params.silent;
            }
            static async read(_data, ..._args) {
                let silent = await index_js_1.Primitive.Bool.read(_data);
                return new Raw.account.SetContactSignUpNotification({ silent: silent });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.silent !== undefined) {
                    b.write(index_js_1.Primitive.Bool.write(this.silent));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.SetContactSignUpNotification = SetContactSignUpNotification;
        class GetNotifyExceptions extends index_js_1.TLObject {
            __response__;
            compareSound;
            compareStories;
            peer;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.GetNotifyExceptions';
                this.constructorId = 0x53577479;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['compareSound', 'compareStories', 'peer'];
                this.compareSound = params.compareSound;
                this.compareStories = params.compareStories;
                this.peer = params.peer;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let compareSound = flags & (1 << 1) ? true : false;
                let compareStories = flags & (1 << 2) ? true : false;
                let peer = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
                return new Raw.account.GetNotifyExceptions({
                    compareSound: compareSound,
                    compareStories: compareStories,
                    peer: peer,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.compareSound ? 1 << 1 : 0;
                flags |= this.compareStories ? 1 << 2 : 0;
                flags |= this.peer !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.GetNotifyExceptions = GetNotifyExceptions;
        class GetWallPaper extends index_js_1.TLObject {
            __response__;
            wallpaper;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.GetWallPaper';
                this.constructorId = 0xfc8ddbea;
                this.subclassOfId = 0x96a2c98b;
                this._slots = ['wallpaper'];
                this.wallpaper = params.wallpaper;
            }
            static async read(_data, ..._args) {
                let wallpaper = await index_js_1.TLObject.read(_data);
                return new Raw.account.GetWallPaper({ wallpaper: wallpaper });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.wallpaper !== undefined) {
                    b.write(this.wallpaper.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.GetWallPaper = GetWallPaper;
        class UploadWallPaper extends index_js_1.TLObject {
            __response__;
            forChat;
            file;
            mimeType;
            settings;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.UploadWallPaper';
                this.constructorId = 0xe39a8f03;
                this.subclassOfId = 0x96a2c98b;
                this._slots = ['forChat', 'file', 'mimeType', 'settings'];
                this.forChat = params.forChat;
                this.file = params.file;
                this.mimeType = params.mimeType;
                this.settings = params.settings;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let forChat = flags & (1 << 0) ? true : false;
                let file = await index_js_1.TLObject.read(_data);
                let mimeType = await index_js_1.Primitive.String.read(_data);
                let settings = await index_js_1.TLObject.read(_data);
                return new Raw.account.UploadWallPaper({
                    forChat: forChat,
                    file: file,
                    mimeType: mimeType,
                    settings: settings,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.forChat ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.file !== undefined) {
                    b.write(this.file.write());
                }
                if (this.mimeType !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.mimeType));
                }
                if (this.settings !== undefined) {
                    b.write(this.settings.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.UploadWallPaper = UploadWallPaper;
        class SaveWallPaper extends index_js_1.TLObject {
            __response__;
            wallpaper;
            unsave;
            settings;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.SaveWallPaper';
                this.constructorId = 0x6c5a5b37;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['wallpaper', 'unsave', 'settings'];
                this.wallpaper = params.wallpaper;
                this.unsave = params.unsave;
                this.settings = params.settings;
            }
            static async read(_data, ..._args) {
                let wallpaper = await index_js_1.TLObject.read(_data);
                let unsave = await index_js_1.Primitive.Bool.read(_data);
                let settings = await index_js_1.TLObject.read(_data);
                return new Raw.account.SaveWallPaper({
                    wallpaper: wallpaper,
                    unsave: unsave,
                    settings: settings,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.wallpaper !== undefined) {
                    b.write(this.wallpaper.write());
                }
                if (this.unsave !== undefined) {
                    b.write(index_js_1.Primitive.Bool.write(this.unsave));
                }
                if (this.settings !== undefined) {
                    b.write(this.settings.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.SaveWallPaper = SaveWallPaper;
        class InstallWallPaper extends index_js_1.TLObject {
            __response__;
            wallpaper;
            settings;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.InstallWallPaper';
                this.constructorId = 0xfeed5769;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['wallpaper', 'settings'];
                this.wallpaper = params.wallpaper;
                this.settings = params.settings;
            }
            static async read(_data, ..._args) {
                let wallpaper = await index_js_1.TLObject.read(_data);
                let settings = await index_js_1.TLObject.read(_data);
                return new Raw.account.InstallWallPaper({ wallpaper: wallpaper, settings: settings });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.wallpaper !== undefined) {
                    b.write(this.wallpaper.write());
                }
                if (this.settings !== undefined) {
                    b.write(this.settings.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.InstallWallPaper = InstallWallPaper;
        class ResetWallPapers extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'account.ResetWallPapers';
                this.constructorId = 0xbb3b9804;
                this.subclassOfId = 0xf5b399ac;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.account.ResetWallPapers();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.ResetWallPapers = ResetWallPapers;
        class GetAutoDownloadSettings extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'account.GetAutoDownloadSettings';
                this.constructorId = 0x56da0b3f;
                this.subclassOfId = 0x2fb85921;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.account.GetAutoDownloadSettings();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.GetAutoDownloadSettings = GetAutoDownloadSettings;
        class SaveAutoDownloadSettings extends index_js_1.TLObject {
            __response__;
            low;
            high;
            settings;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.SaveAutoDownloadSettings';
                this.constructorId = 0x76f36233;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['low', 'high', 'settings'];
                this.low = params.low;
                this.high = params.high;
                this.settings = params.settings;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let low = flags & (1 << 0) ? true : false;
                let high = flags & (1 << 1) ? true : false;
                let settings = await index_js_1.TLObject.read(_data);
                return new Raw.account.SaveAutoDownloadSettings({
                    low: low,
                    high: high,
                    settings: settings,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.low ? 1 << 0 : 0;
                flags |= this.high ? 1 << 1 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.settings !== undefined) {
                    b.write(this.settings.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.SaveAutoDownloadSettings = SaveAutoDownloadSettings;
        class UploadTheme extends index_js_1.TLObject {
            __response__;
            file;
            thumb;
            fileName;
            mimeType;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.UploadTheme';
                this.constructorId = 0x1c3db333;
                this.subclassOfId = 0x211fe820;
                this._slots = ['file', 'thumb', 'fileName', 'mimeType'];
                this.file = params.file;
                this.thumb = params.thumb;
                this.fileName = params.fileName;
                this.mimeType = params.mimeType;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let file = await index_js_1.TLObject.read(_data);
                let thumb = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
                let fileName = await index_js_1.Primitive.String.read(_data);
                let mimeType = await index_js_1.Primitive.String.read(_data);
                return new Raw.account.UploadTheme({
                    file: file,
                    thumb: thumb,
                    fileName: fileName,
                    mimeType: mimeType,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.thumb !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.file !== undefined) {
                    b.write(this.file.write());
                }
                if (this.thumb !== undefined) {
                    b.write(this.thumb.write());
                }
                if (this.fileName !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.fileName));
                }
                if (this.mimeType !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.mimeType));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.UploadTheme = UploadTheme;
        class CreateTheme extends index_js_1.TLObject {
            __response__;
            slug;
            title;
            document;
            settings;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.CreateTheme';
                this.constructorId = 0x652e4400;
                this.subclassOfId = 0x56b4c80c;
                this._slots = ['slug', 'title', 'document', 'settings'];
                this.slug = params.slug;
                this.title = params.title;
                this.document = params.document;
                this.settings = params.settings;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let slug = await index_js_1.Primitive.String.read(_data);
                let title = await index_js_1.Primitive.String.read(_data);
                let document = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
                let settings = flags & (1 << 3) ? await index_js_1.TLObject.read(_data) : [];
                return new Raw.account.CreateTheme({
                    slug: slug,
                    title: title,
                    document: document,
                    settings: settings,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.document !== undefined ? 1 << 2 : 0;
                flags |= this.settings ? 1 << 3 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.slug !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.slug));
                }
                if (this.title !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.title));
                }
                if (this.document !== undefined) {
                    b.write(this.document.write());
                }
                if (this.settings) {
                    b.write(index_js_1.Primitive.Vector.write(this.settings));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.CreateTheme = CreateTheme;
        class UpdateTheme extends index_js_1.TLObject {
            __response__;
            format;
            theme;
            slug;
            title;
            document;
            settings;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.UpdateTheme';
                this.constructorId = 0x2bf40ccc;
                this.subclassOfId = 0x56b4c80c;
                this._slots = ['format', 'theme', 'slug', 'title', 'document', 'settings'];
                this.format = params.format;
                this.theme = params.theme;
                this.slug = params.slug;
                this.title = params.title;
                this.document = params.document;
                this.settings = params.settings;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let format = await index_js_1.Primitive.String.read(_data);
                let theme = await index_js_1.TLObject.read(_data);
                let slug = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let title = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let document = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
                let settings = flags & (1 << 3) ? await index_js_1.TLObject.read(_data) : [];
                return new Raw.account.UpdateTheme({
                    format: format,
                    theme: theme,
                    slug: slug,
                    title: title,
                    document: document,
                    settings: settings,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.slug !== undefined ? 1 << 0 : 0;
                flags |= this.title !== undefined ? 1 << 1 : 0;
                flags |= this.document !== undefined ? 1 << 2 : 0;
                flags |= this.settings ? 1 << 3 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.format !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.format));
                }
                if (this.theme !== undefined) {
                    b.write(this.theme.write());
                }
                if (this.slug !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.slug));
                }
                if (this.title !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.title));
                }
                if (this.document !== undefined) {
                    b.write(this.document.write());
                }
                if (this.settings) {
                    b.write(index_js_1.Primitive.Vector.write(this.settings));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.UpdateTheme = UpdateTheme;
        class SaveTheme extends index_js_1.TLObject {
            __response__;
            theme;
            unsave;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.SaveTheme';
                this.constructorId = 0xf257106c;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['theme', 'unsave'];
                this.theme = params.theme;
                this.unsave = params.unsave;
            }
            static async read(_data, ..._args) {
                let theme = await index_js_1.TLObject.read(_data);
                let unsave = await index_js_1.Primitive.Bool.read(_data);
                return new Raw.account.SaveTheme({ theme: theme, unsave: unsave });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.theme !== undefined) {
                    b.write(this.theme.write());
                }
                if (this.unsave !== undefined) {
                    b.write(index_js_1.Primitive.Bool.write(this.unsave));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.SaveTheme = SaveTheme;
        class InstallTheme extends index_js_1.TLObject {
            __response__;
            dark;
            theme;
            format;
            baseTheme;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.InstallTheme';
                this.constructorId = 0xc727bb3b;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['dark', 'theme', 'format', 'baseTheme'];
                this.dark = params.dark;
                this.theme = params.theme;
                this.format = params.format;
                this.baseTheme = params.baseTheme;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let dark = flags & (1 << 0) ? true : false;
                let theme = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : undefined;
                let format = flags & (1 << 2) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let baseTheme = flags & (1 << 3) ? await index_js_1.TLObject.read(_data) : undefined;
                return new Raw.account.InstallTheme({
                    dark: dark,
                    theme: theme,
                    format: format,
                    baseTheme: baseTheme,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.dark ? 1 << 0 : 0;
                flags |= this.theme !== undefined ? 1 << 1 : 0;
                flags |= this.format !== undefined ? 1 << 2 : 0;
                flags |= this.baseTheme !== undefined ? 1 << 3 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.theme !== undefined) {
                    b.write(this.theme.write());
                }
                if (this.format !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.format));
                }
                if (this.baseTheme !== undefined) {
                    b.write(this.baseTheme.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.InstallTheme = InstallTheme;
        class GetTheme extends index_js_1.TLObject {
            __response__;
            format;
            theme;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.GetTheme';
                this.constructorId = 0x3a5869ec;
                this.subclassOfId = 0x56b4c80c;
                this._slots = ['format', 'theme'];
                this.format = params.format;
                this.theme = params.theme;
            }
            static async read(_data, ..._args) {
                let format = await index_js_1.Primitive.String.read(_data);
                let theme = await index_js_1.TLObject.read(_data);
                return new Raw.account.GetTheme({ format: format, theme: theme });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.format !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.format));
                }
                if (this.theme !== undefined) {
                    b.write(this.theme.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.GetTheme = GetTheme;
        class GetThemes extends index_js_1.TLObject {
            __response__;
            format;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.GetThemes';
                this.constructorId = 0x7206e458;
                this.subclassOfId = 0x7fc52204;
                this._slots = ['format', 'hash'];
                this.format = params.format;
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let format = await index_js_1.Primitive.String.read(_data);
                let hash = await index_js_1.Primitive.Long.read(_data);
                return new Raw.account.GetThemes({ format: format, hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.format !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.format));
                }
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.GetThemes = GetThemes;
        class SetContentSettings extends index_js_1.TLObject {
            __response__;
            sensitiveEnabled;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.SetContentSettings';
                this.constructorId = 0xb574b16b;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['sensitiveEnabled'];
                this.sensitiveEnabled = params.sensitiveEnabled;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let sensitiveEnabled = flags & (1 << 0) ? true : false;
                return new Raw.account.SetContentSettings({ sensitiveEnabled: sensitiveEnabled });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.sensitiveEnabled ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.SetContentSettings = SetContentSettings;
        class GetContentSettings extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'account.GetContentSettings';
                this.constructorId = 0x8b9b4dae;
                this.subclassOfId = 0xae3ff891;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.account.GetContentSettings();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.GetContentSettings = GetContentSettings;
        class GetMultiWallPapers extends index_js_1.TLObject {
            __response__;
            wallpapers;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.GetMultiWallPapers';
                this.constructorId = 0x65ad71dc;
                this.subclassOfId = 0x8ec35283;
                this._slots = ['wallpapers'];
                this.wallpapers = params.wallpapers;
            }
            static async read(_data, ..._args) {
                let wallpapers = await index_js_1.TLObject.read(_data);
                return new Raw.account.GetMultiWallPapers({ wallpapers: wallpapers });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.wallpapers) {
                    b.write(index_js_1.Primitive.Vector.write(this.wallpapers));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.GetMultiWallPapers = GetMultiWallPapers;
        class GetGlobalPrivacySettings extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'account.GetGlobalPrivacySettings';
                this.constructorId = 0xeb2b4cf6;
                this.subclassOfId = 0xc90e5770;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.account.GetGlobalPrivacySettings();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.GetGlobalPrivacySettings = GetGlobalPrivacySettings;
        class SetGlobalPrivacySettings extends index_js_1.TLObject {
            __response__;
            settings;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.SetGlobalPrivacySettings';
                this.constructorId = 0x1edaaac2;
                this.subclassOfId = 0xc90e5770;
                this._slots = ['settings'];
                this.settings = params.settings;
            }
            static async read(_data, ..._args) {
                let settings = await index_js_1.TLObject.read(_data);
                return new Raw.account.SetGlobalPrivacySettings({ settings: settings });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.settings !== undefined) {
                    b.write(this.settings.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.SetGlobalPrivacySettings = SetGlobalPrivacySettings;
        class ReportProfilePhoto extends index_js_1.TLObject {
            __response__;
            peer;
            photoId;
            reason;
            message;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.ReportProfilePhoto';
                this.constructorId = 0xfa8cc6f5;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['peer', 'photoId', 'reason', 'message'];
                this.peer = params.peer;
                this.photoId = params.photoId;
                this.reason = params.reason;
                this.message = params.message;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let photoId = await index_js_1.TLObject.read(_data);
                let reason = await index_js_1.TLObject.read(_data);
                let message = await index_js_1.Primitive.String.read(_data);
                return new Raw.account.ReportProfilePhoto({
                    peer: peer,
                    photoId: photoId,
                    reason: reason,
                    message: message,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.photoId !== undefined) {
                    b.write(this.photoId.write());
                }
                if (this.reason !== undefined) {
                    b.write(this.reason.write());
                }
                if (this.message !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.message));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.ReportProfilePhoto = ReportProfilePhoto;
        class ResetPassword extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'account.ResetPassword';
                this.constructorId = 0x9308ce1b;
                this.subclassOfId = 0x49507416;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.account.ResetPassword();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.ResetPassword = ResetPassword;
        class DeclinePasswordReset extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'account.DeclinePasswordReset';
                this.constructorId = 0x4c9409f6;
                this.subclassOfId = 0xf5b399ac;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.account.DeclinePasswordReset();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.DeclinePasswordReset = DeclinePasswordReset;
        class GetChatThemes extends index_js_1.TLObject {
            __response__;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.GetChatThemes';
                this.constructorId = 0xd638de89;
                this.subclassOfId = 0x7fc52204;
                this._slots = ['hash'];
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Long.read(_data);
                return new Raw.account.GetChatThemes({ hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.GetChatThemes = GetChatThemes;
        class SetAuthorizationTTL extends index_js_1.TLObject {
            __response__;
            authorizationTtlDays;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.SetAuthorizationTTL';
                this.constructorId = 0xbf899aa0;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['authorizationTtlDays'];
                this.authorizationTtlDays = params.authorizationTtlDays;
            }
            static async read(_data, ..._args) {
                let authorizationTtlDays = await index_js_1.Primitive.Int.read(_data);
                return new Raw.account.SetAuthorizationTTL({ authorizationTtlDays: authorizationTtlDays });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.authorizationTtlDays !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.authorizationTtlDays));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.SetAuthorizationTTL = SetAuthorizationTTL;
        class ChangeAuthorizationSettings extends index_js_1.TLObject {
            __response__;
            confirmed;
            hash;
            encryptedRequestsDisabled;
            callRequestsDisabled;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.ChangeAuthorizationSettings';
                this.constructorId = 0x40f48462;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['confirmed', 'hash', 'encryptedRequestsDisabled', 'callRequestsDisabled'];
                this.confirmed = params.confirmed;
                this.hash = params.hash;
                this.encryptedRequestsDisabled = params.encryptedRequestsDisabled;
                this.callRequestsDisabled = params.callRequestsDisabled;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let confirmed = flags & (1 << 3) ? true : false;
                let hash = await index_js_1.Primitive.Long.read(_data);
                let encryptedRequestsDisabled = flags & (1 << 0) ? await index_js_1.Primitive.Bool.read(_data) : undefined;
                let callRequestsDisabled = flags & (1 << 1) ? await index_js_1.Primitive.Bool.read(_data) : undefined;
                return new Raw.account.ChangeAuthorizationSettings({
                    confirmed: confirmed,
                    hash: hash,
                    encryptedRequestsDisabled: encryptedRequestsDisabled,
                    callRequestsDisabled: callRequestsDisabled,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.confirmed ? 1 << 3 : 0;
                flags |= this.encryptedRequestsDisabled !== undefined ? 1 << 0 : 0;
                flags |= this.callRequestsDisabled !== undefined ? 1 << 1 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                if (this.encryptedRequestsDisabled !== undefined) {
                    b.write(index_js_1.Primitive.Bool.write(this.encryptedRequestsDisabled));
                }
                if (this.callRequestsDisabled !== undefined) {
                    b.write(index_js_1.Primitive.Bool.write(this.callRequestsDisabled));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.ChangeAuthorizationSettings = ChangeAuthorizationSettings;
        class GetSavedRingtones extends index_js_1.TLObject {
            __response__;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.GetSavedRingtones';
                this.constructorId = 0xe1902288;
                this.subclassOfId = 0x27bcc95e;
                this._slots = ['hash'];
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Long.read(_data);
                return new Raw.account.GetSavedRingtones({ hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.GetSavedRingtones = GetSavedRingtones;
        class SaveRingtone extends index_js_1.TLObject {
            __response__;
            id;
            unsave;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.SaveRingtone';
                this.constructorId = 0x3dea5b03;
                this.subclassOfId = 0xb1e28424;
                this._slots = ['id', 'unsave'];
                this.id = params.id;
                this.unsave = params.unsave;
            }
            static async read(_data, ..._args) {
                let id = await index_js_1.TLObject.read(_data);
                let unsave = await index_js_1.Primitive.Bool.read(_data);
                return new Raw.account.SaveRingtone({ id: id, unsave: unsave });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.id !== undefined) {
                    b.write(this.id.write());
                }
                if (this.unsave !== undefined) {
                    b.write(index_js_1.Primitive.Bool.write(this.unsave));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.SaveRingtone = SaveRingtone;
        class UploadRingtone extends index_js_1.TLObject {
            __response__;
            file;
            fileName;
            mimeType;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.UploadRingtone';
                this.constructorId = 0x831a83a2;
                this.subclassOfId = 0x211fe820;
                this._slots = ['file', 'fileName', 'mimeType'];
                this.file = params.file;
                this.fileName = params.fileName;
                this.mimeType = params.mimeType;
            }
            static async read(_data, ..._args) {
                let file = await index_js_1.TLObject.read(_data);
                let fileName = await index_js_1.Primitive.String.read(_data);
                let mimeType = await index_js_1.Primitive.String.read(_data);
                return new Raw.account.UploadRingtone({
                    file: file,
                    fileName: fileName,
                    mimeType: mimeType,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.file !== undefined) {
                    b.write(this.file.write());
                }
                if (this.fileName !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.fileName));
                }
                if (this.mimeType !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.mimeType));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.UploadRingtone = UploadRingtone;
        class UpdateEmojiStatus extends index_js_1.TLObject {
            __response__;
            emojiStatus;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.UpdateEmojiStatus';
                this.constructorId = 0xfbd3de6b;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['emojiStatus'];
                this.emojiStatus = params.emojiStatus;
            }
            static async read(_data, ..._args) {
                let emojiStatus = await index_js_1.TLObject.read(_data);
                return new Raw.account.UpdateEmojiStatus({ emojiStatus: emojiStatus });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.emojiStatus !== undefined) {
                    b.write(this.emojiStatus.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.UpdateEmojiStatus = UpdateEmojiStatus;
        class GetDefaultEmojiStatuses extends index_js_1.TLObject {
            __response__;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.GetDefaultEmojiStatuses';
                this.constructorId = 0xd6753386;
                this.subclassOfId = 0xd3e005ca;
                this._slots = ['hash'];
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Long.read(_data);
                return new Raw.account.GetDefaultEmojiStatuses({ hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.GetDefaultEmojiStatuses = GetDefaultEmojiStatuses;
        class GetRecentEmojiStatuses extends index_js_1.TLObject {
            __response__;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.GetRecentEmojiStatuses';
                this.constructorId = 0xf578105;
                this.subclassOfId = 0xd3e005ca;
                this._slots = ['hash'];
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Long.read(_data);
                return new Raw.account.GetRecentEmojiStatuses({ hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.GetRecentEmojiStatuses = GetRecentEmojiStatuses;
        class ClearRecentEmojiStatuses extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'account.ClearRecentEmojiStatuses';
                this.constructorId = 0x18201aae;
                this.subclassOfId = 0xf5b399ac;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.account.ClearRecentEmojiStatuses();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.ClearRecentEmojiStatuses = ClearRecentEmojiStatuses;
        class ReorderUsernames extends index_js_1.TLObject {
            __response__;
            order;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.ReorderUsernames';
                this.constructorId = 0xef500eab;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['order'];
                this.order = params.order;
            }
            static async read(_data, ..._args) {
                let order = await index_js_1.TLObject.read(_data, index_js_1.Primitive.String);
                return new Raw.account.ReorderUsernames({ order: order });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.order) {
                    b.write(index_js_1.Primitive.Vector.write(this.order, index_js_1.Primitive.String));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.ReorderUsernames = ReorderUsernames;
        class ToggleUsername extends index_js_1.TLObject {
            __response__;
            username;
            active;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.ToggleUsername';
                this.constructorId = 0x58d6b376;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['username', 'active'];
                this.username = params.username;
                this.active = params.active;
            }
            static async read(_data, ..._args) {
                let username = await index_js_1.Primitive.String.read(_data);
                let active = await index_js_1.Primitive.Bool.read(_data);
                return new Raw.account.ToggleUsername({ username: username, active: active });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.username !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.username));
                }
                if (this.active !== undefined) {
                    b.write(index_js_1.Primitive.Bool.write(this.active));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.ToggleUsername = ToggleUsername;
        class GetDefaultProfilePhotoEmojis extends index_js_1.TLObject {
            __response__;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.GetDefaultProfilePhotoEmojis';
                this.constructorId = 0xe2750328;
                this.subclassOfId = 0xbcef6aba;
                this._slots = ['hash'];
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Long.read(_data);
                return new Raw.account.GetDefaultProfilePhotoEmojis({ hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.GetDefaultProfilePhotoEmojis = GetDefaultProfilePhotoEmojis;
        class GetDefaultGroupPhotoEmojis extends index_js_1.TLObject {
            __response__;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.GetDefaultGroupPhotoEmojis';
                this.constructorId = 0x915860ae;
                this.subclassOfId = 0xbcef6aba;
                this._slots = ['hash'];
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Long.read(_data);
                return new Raw.account.GetDefaultGroupPhotoEmojis({ hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.GetDefaultGroupPhotoEmojis = GetDefaultGroupPhotoEmojis;
        class GetAutoSaveSettings extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'account.GetAutoSaveSettings';
                this.constructorId = 0xadcbbcda;
                this.subclassOfId = 0x48cf2f02;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.account.GetAutoSaveSettings();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.GetAutoSaveSettings = GetAutoSaveSettings;
        class SaveAutoSaveSettings extends index_js_1.TLObject {
            __response__;
            users;
            chats;
            broadcasts;
            peer;
            settings;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.SaveAutoSaveSettings';
                this.constructorId = 0xd69b8361;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['users', 'chats', 'broadcasts', 'peer', 'settings'];
                this.users = params.users;
                this.chats = params.chats;
                this.broadcasts = params.broadcasts;
                this.peer = params.peer;
                this.settings = params.settings;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let users = flags & (1 << 0) ? true : false;
                let chats = flags & (1 << 1) ? true : false;
                let broadcasts = flags & (1 << 2) ? true : false;
                let peer = flags & (1 << 3) ? await index_js_1.TLObject.read(_data) : undefined;
                let settings = await index_js_1.TLObject.read(_data);
                return new Raw.account.SaveAutoSaveSettings({
                    users: users,
                    chats: chats,
                    broadcasts: broadcasts,
                    peer: peer,
                    settings: settings,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.users ? 1 << 0 : 0;
                flags |= this.chats ? 1 << 1 : 0;
                flags |= this.broadcasts ? 1 << 2 : 0;
                flags |= this.peer !== undefined ? 1 << 3 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.settings !== undefined) {
                    b.write(this.settings.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.SaveAutoSaveSettings = SaveAutoSaveSettings;
        class DeleteAutoSaveExceptions extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'account.DeleteAutoSaveExceptions';
                this.constructorId = 0x53bc0020;
                this.subclassOfId = 0xf5b399ac;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.account.DeleteAutoSaveExceptions();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.DeleteAutoSaveExceptions = DeleteAutoSaveExceptions;
        class InvalidateSignInCodes extends index_js_1.TLObject {
            __response__;
            codes;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.InvalidateSignInCodes';
                this.constructorId = 0xca8ae8ba;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['codes'];
                this.codes = params.codes;
            }
            static async read(_data, ..._args) {
                let codes = await index_js_1.TLObject.read(_data, index_js_1.Primitive.String);
                return new Raw.account.InvalidateSignInCodes({ codes: codes });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.codes) {
                    b.write(index_js_1.Primitive.Vector.write(this.codes, index_js_1.Primitive.String));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.InvalidateSignInCodes = InvalidateSignInCodes;
        class UpdateColor extends index_js_1.TLObject {
            __response__;
            forProfile;
            color;
            backgroundEmojiId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.UpdateColor';
                this.constructorId = 0x7cefa15d;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['forProfile', 'color', 'backgroundEmojiId'];
                this.forProfile = params.forProfile;
                this.color = params.color;
                this.backgroundEmojiId = params.backgroundEmojiId;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let forProfile = flags & (1 << 1) ? true : false;
                let color = flags & (1 << 2) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let backgroundEmojiId = flags & (1 << 0) ? await index_js_1.Primitive.Long.read(_data) : undefined;
                return new Raw.account.UpdateColor({
                    forProfile: forProfile,
                    color: color,
                    backgroundEmojiId: backgroundEmojiId,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.forProfile ? 1 << 1 : 0;
                flags |= this.color !== undefined ? 1 << 2 : 0;
                flags |= this.backgroundEmojiId !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.color !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.color));
                }
                if (this.backgroundEmojiId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.backgroundEmojiId));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.UpdateColor = UpdateColor;
        class GetDefaultBackgroundEmojis extends index_js_1.TLObject {
            __response__;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.GetDefaultBackgroundEmojis';
                this.constructorId = 0xa60ab9ce;
                this.subclassOfId = 0xbcef6aba;
                this._slots = ['hash'];
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Long.read(_data);
                return new Raw.account.GetDefaultBackgroundEmojis({ hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.GetDefaultBackgroundEmojis = GetDefaultBackgroundEmojis;
        class GetChannelDefaultEmojiStatuses extends index_js_1.TLObject {
            __response__;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.GetChannelDefaultEmojiStatuses';
                this.constructorId = 0x7727a7d5;
                this.subclassOfId = 0xd3e005ca;
                this._slots = ['hash'];
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Long.read(_data);
                return new Raw.account.GetChannelDefaultEmojiStatuses({ hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.GetChannelDefaultEmojiStatuses = GetChannelDefaultEmojiStatuses;
        class GetChannelRestrictedStatusEmojis extends index_js_1.TLObject {
            __response__;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.GetChannelRestrictedStatusEmojis';
                this.constructorId = 0x35a9e0d5;
                this.subclassOfId = 0xbcef6aba;
                this._slots = ['hash'];
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let hash = await index_js_1.Primitive.Long.read(_data);
                return new Raw.account.GetChannelRestrictedStatusEmojis({ hash: hash });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.GetChannelRestrictedStatusEmojis = GetChannelRestrictedStatusEmojis;
        class UpdateBusinessWorkHours extends index_js_1.TLObject {
            __response__;
            businessWorkHours;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.UpdateBusinessWorkHours';
                this.constructorId = 0x4b00e066;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['businessWorkHours'];
                this.businessWorkHours = params.businessWorkHours;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let businessWorkHours = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
                return new Raw.account.UpdateBusinessWorkHours({ businessWorkHours: businessWorkHours });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.businessWorkHours !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.businessWorkHours !== undefined) {
                    b.write(this.businessWorkHours.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.UpdateBusinessWorkHours = UpdateBusinessWorkHours;
        class UpdateBusinessLocation extends index_js_1.TLObject {
            __response__;
            geoPoint;
            address;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.UpdateBusinessLocation';
                this.constructorId = 0x9e6b131a;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['geoPoint', 'address'];
                this.geoPoint = params.geoPoint;
                this.address = params.address;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let geoPoint = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : undefined;
                let address = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
                return new Raw.account.UpdateBusinessLocation({ geoPoint: geoPoint, address: address });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.geoPoint !== undefined ? 1 << 1 : 0;
                flags |= this.address !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.geoPoint !== undefined) {
                    b.write(this.geoPoint.write());
                }
                if (this.address !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.address));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.UpdateBusinessLocation = UpdateBusinessLocation;
        class UpdateBusinessGreetingMessage extends index_js_1.TLObject {
            __response__;
            message;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.UpdateBusinessGreetingMessage';
                this.constructorId = 0x66cdafc4;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['message'];
                this.message = params.message;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let message = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
                return new Raw.account.UpdateBusinessGreetingMessage({ message: message });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.message !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.message !== undefined) {
                    b.write(this.message.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.UpdateBusinessGreetingMessage = UpdateBusinessGreetingMessage;
        class UpdateBusinessAwayMessage extends index_js_1.TLObject {
            __response__;
            message;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.UpdateBusinessAwayMessage';
                this.constructorId = 0xa26a7fa5;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['message'];
                this.message = params.message;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let message = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
                return new Raw.account.UpdateBusinessAwayMessage({ message: message });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.message !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.message !== undefined) {
                    b.write(this.message.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.UpdateBusinessAwayMessage = UpdateBusinessAwayMessage;
        class UpdateConnectedBot extends index_js_1.TLObject {
            __response__;
            canReply;
            deleted;
            bot;
            recipients;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.UpdateConnectedBot';
                this.constructorId = 0x43d8521d;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['canReply', 'deleted', 'bot', 'recipients'];
                this.canReply = params.canReply;
                this.deleted = params.deleted;
                this.bot = params.bot;
                this.recipients = params.recipients;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let canReply = flags & (1 << 0) ? true : false;
                let deleted = flags & (1 << 1) ? true : false;
                let bot = await index_js_1.TLObject.read(_data);
                let recipients = await index_js_1.TLObject.read(_data);
                return new Raw.account.UpdateConnectedBot({
                    canReply: canReply,
                    deleted: deleted,
                    bot: bot,
                    recipients: recipients,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.canReply ? 1 << 0 : 0;
                flags |= this.deleted ? 1 << 1 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.bot !== undefined) {
                    b.write(this.bot.write());
                }
                if (this.recipients !== undefined) {
                    b.write(this.recipients.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.UpdateConnectedBot = UpdateConnectedBot;
        class GetConnectedBots extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'account.GetConnectedBots';
                this.constructorId = 0x4ea4c80f;
                this.subclassOfId = 0xe4caf7d3;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.account.GetConnectedBots();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.GetConnectedBots = GetConnectedBots;
        class GetBotBusinessConnection extends index_js_1.TLObject {
            __response__;
            connectionId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.GetBotBusinessConnection';
                this.constructorId = 0x76a86270;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['connectionId'];
                this.connectionId = params.connectionId;
            }
            static async read(_data, ..._args) {
                let connectionId = await index_js_1.Primitive.String.read(_data);
                return new Raw.account.GetBotBusinessConnection({ connectionId: connectionId });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.connectionId !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.connectionId));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.GetBotBusinessConnection = GetBotBusinessConnection;
        class UpdateBusinessIntro extends index_js_1.TLObject {
            __response__;
            intro;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.UpdateBusinessIntro';
                this.constructorId = 0xa614d034;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['intro'];
                this.intro = params.intro;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let intro = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
                return new Raw.account.UpdateBusinessIntro({ intro: intro });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.intro !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.intro !== undefined) {
                    b.write(this.intro.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.UpdateBusinessIntro = UpdateBusinessIntro;
        class ToggleConnectedBotPaused extends index_js_1.TLObject {
            __response__;
            peer;
            paused;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.ToggleConnectedBotPaused';
                this.constructorId = 0x646e1097;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['peer', 'paused'];
                this.peer = params.peer;
                this.paused = params.paused;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let paused = await index_js_1.Primitive.Bool.read(_data);
                return new Raw.account.ToggleConnectedBotPaused({ peer: peer, paused: paused });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.paused !== undefined) {
                    b.write(index_js_1.Primitive.Bool.write(this.paused));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.ToggleConnectedBotPaused = ToggleConnectedBotPaused;
        class DisablePeerConnectedBot extends index_js_1.TLObject {
            __response__;
            peer;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.DisablePeerConnectedBot';
                this.constructorId = 0x5e437ed9;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['peer'];
                this.peer = params.peer;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                return new Raw.account.DisablePeerConnectedBot({ peer: peer });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.DisablePeerConnectedBot = DisablePeerConnectedBot;
        class UpdateBirthday extends index_js_1.TLObject {
            __response__;
            birthday;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.UpdateBirthday';
                this.constructorId = 0xcc6e0c11;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['birthday'];
                this.birthday = params.birthday;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let birthday = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
                return new Raw.account.UpdateBirthday({ birthday: birthday });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.birthday !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.birthday !== undefined) {
                    b.write(this.birthday.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.UpdateBirthday = UpdateBirthday;
        class CreateBusinessChatLink extends index_js_1.TLObject {
            __response__;
            link;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.CreateBusinessChatLink';
                this.constructorId = 0x8851e68e;
                this.subclassOfId = 0x3c0d4a8b;
                this._slots = ['link'];
                this.link = params.link;
            }
            static async read(_data, ..._args) {
                let link = await index_js_1.TLObject.read(_data);
                return new Raw.account.CreateBusinessChatLink({ link: link });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.link !== undefined) {
                    b.write(this.link.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.CreateBusinessChatLink = CreateBusinessChatLink;
        class EditBusinessChatLink extends index_js_1.TLObject {
            __response__;
            slug;
            link;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.EditBusinessChatLink';
                this.constructorId = 0x8c3410af;
                this.subclassOfId = 0x3c0d4a8b;
                this._slots = ['slug', 'link'];
                this.slug = params.slug;
                this.link = params.link;
            }
            static async read(_data, ..._args) {
                let slug = await index_js_1.Primitive.String.read(_data);
                let link = await index_js_1.TLObject.read(_data);
                return new Raw.account.EditBusinessChatLink({ slug: slug, link: link });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.slug !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.slug));
                }
                if (this.link !== undefined) {
                    b.write(this.link.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.EditBusinessChatLink = EditBusinessChatLink;
        class DeleteBusinessChatLink extends index_js_1.TLObject {
            __response__;
            slug;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.DeleteBusinessChatLink';
                this.constructorId = 0x60073674;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['slug'];
                this.slug = params.slug;
            }
            static async read(_data, ..._args) {
                let slug = await index_js_1.Primitive.String.read(_data);
                return new Raw.account.DeleteBusinessChatLink({ slug: slug });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.slug !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.slug));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.DeleteBusinessChatLink = DeleteBusinessChatLink;
        class GetBusinessChatLinks extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'account.GetBusinessChatLinks';
                this.constructorId = 0x6f70dde1;
                this.subclassOfId = 0xc6ba4a31;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.account.GetBusinessChatLinks();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.GetBusinessChatLinks = GetBusinessChatLinks;
        class ResolveBusinessChatLink extends index_js_1.TLObject {
            __response__;
            slug;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.ResolveBusinessChatLink';
                this.constructorId = 0x5492e5ee;
                this.subclassOfId = 0x3a772c28;
                this._slots = ['slug'];
                this.slug = params.slug;
            }
            static async read(_data, ..._args) {
                let slug = await index_js_1.Primitive.String.read(_data);
                return new Raw.account.ResolveBusinessChatLink({ slug: slug });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.slug !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.slug));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.ResolveBusinessChatLink = ResolveBusinessChatLink;
        class UpdatePersonalChannel extends index_js_1.TLObject {
            __response__;
            channel;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.UpdatePersonalChannel';
                this.constructorId = 0xd94305e0;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['channel'];
                this.channel = params.channel;
            }
            static async read(_data, ..._args) {
                let channel = await index_js_1.TLObject.read(_data);
                return new Raw.account.UpdatePersonalChannel({ channel: channel });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.UpdatePersonalChannel = UpdatePersonalChannel;
        class ToggleSponsoredMessages extends index_js_1.TLObject {
            __response__;
            enabled;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.ToggleSponsoredMessages';
                this.constructorId = 0xb9d9a38d;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['enabled'];
                this.enabled = params.enabled;
            }
            static async read(_data, ..._args) {
                let enabled = await index_js_1.Primitive.Bool.read(_data);
                return new Raw.account.ToggleSponsoredMessages({ enabled: enabled });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.enabled !== undefined) {
                    b.write(index_js_1.Primitive.Bool.write(this.enabled));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.ToggleSponsoredMessages = ToggleSponsoredMessages;
        class GetReactionsNotifySettings extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'account.GetReactionsNotifySettings';
                this.constructorId = 0x6dd654c;
                this.subclassOfId = 0x8dff0851;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.account.GetReactionsNotifySettings();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.GetReactionsNotifySettings = GetReactionsNotifySettings;
        class SetReactionsNotifySettings extends index_js_1.TLObject {
            __response__;
            settings;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'account.SetReactionsNotifySettings';
                this.constructorId = 0x316ce548;
                this.subclassOfId = 0x8dff0851;
                this._slots = ['settings'];
                this.settings = params.settings;
            }
            static async read(_data, ..._args) {
                let settings = await index_js_1.TLObject.read(_data);
                return new Raw.account.SetReactionsNotifySettings({ settings: settings });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.settings !== undefined) {
                    b.write(this.settings.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        account.SetReactionsNotifySettings = SetReactionsNotifySettings;
    })(account = Raw.account || (Raw.account = {}));
    let channels;
    (function (channels) {
        class ChannelParticipants extends index_js_1.TLObject {
            count;
            participants;
            chats;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'channels.ChannelParticipants';
                this.constructorId = 0x9ab0feaf;
                this.subclassOfId = 0xe60a6e64;
                this._slots = ['count', 'participants', 'chats', 'users'];
                this.count = params.count;
                this.participants = params.participants;
                this.chats = params.chats;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let count = await index_js_1.Primitive.Int.read(_data);
                let participants = await index_js_1.TLObject.read(_data);
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.channels.ChannelParticipants({
                    count: count,
                    participants: participants,
                    chats: chats,
                    users: users,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.count !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.count));
                }
                if (this.participants) {
                    b.write(index_js_1.Primitive.Vector.write(this.participants));
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.ChannelParticipants = ChannelParticipants;
        class ChannelParticipantsNotModified extends index_js_1.TLObject {
            constructor() {
                super();
                this.classType = 'types';
                this.className = 'channels.ChannelParticipantsNotModified';
                this.constructorId = 0xf0173fe9;
                this.subclassOfId = 0xe60a6e64;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.channels.ChannelParticipantsNotModified();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.ChannelParticipantsNotModified = ChannelParticipantsNotModified;
        class ChannelParticipant extends index_js_1.TLObject {
            participant;
            chats;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'channels.ChannelParticipant';
                this.constructorId = 0xdfb80317;
                this.subclassOfId = 0x6658151a;
                this._slots = ['participant', 'chats', 'users'];
                this.participant = params.participant;
                this.chats = params.chats;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let participant = await index_js_1.TLObject.read(_data);
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.channels.ChannelParticipant({
                    participant: participant,
                    chats: chats,
                    users: users,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.participant !== undefined) {
                    b.write(this.participant.write());
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.ChannelParticipant = ChannelParticipant;
        class AdminLogResults extends index_js_1.TLObject {
            events;
            chats;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'channels.AdminLogResults';
                this.constructorId = 0xed8af74d;
                this.subclassOfId = 0x51f076bc;
                this._slots = ['events', 'chats', 'users'];
                this.events = params.events;
                this.chats = params.chats;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let events = await index_js_1.TLObject.read(_data);
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.channels.AdminLogResults({ events: events, chats: chats, users: users });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.events) {
                    b.write(index_js_1.Primitive.Vector.write(this.events));
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.AdminLogResults = AdminLogResults;
        class SendAsPeers extends index_js_1.TLObject {
            peers;
            chats;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'channels.SendAsPeers';
                this.constructorId = 0xf496b0c6;
                this.subclassOfId = 0x38cb8d21;
                this._slots = ['peers', 'chats', 'users'];
                this.peers = params.peers;
                this.chats = params.chats;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let peers = await index_js_1.TLObject.read(_data);
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.channels.SendAsPeers({ peers: peers, chats: chats, users: users });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peers) {
                    b.write(index_js_1.Primitive.Vector.write(this.peers));
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.SendAsPeers = SendAsPeers;
        class SponsoredMessageReportResultChooseOption extends index_js_1.TLObject {
            title;
            options;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'channels.SponsoredMessageReportResultChooseOption';
                this.constructorId = 0x846f9e42;
                this.subclassOfId = 0x26231822;
                this._slots = ['title', 'options'];
                this.title = params.title;
                this.options = params.options;
            }
            static async read(_data, ..._args) {
                let title = await index_js_1.Primitive.String.read(_data);
                let options = await index_js_1.TLObject.read(_data);
                return new Raw.channels.SponsoredMessageReportResultChooseOption({
                    title: title,
                    options: options,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.title !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.title));
                }
                if (this.options) {
                    b.write(index_js_1.Primitive.Vector.write(this.options));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.SponsoredMessageReportResultChooseOption = SponsoredMessageReportResultChooseOption;
        class SponsoredMessageReportResultAdsHidden extends index_js_1.TLObject {
            constructor() {
                super();
                this.classType = 'types';
                this.className = 'channels.SponsoredMessageReportResultAdsHidden';
                this.constructorId = 0x3e3bcf2f;
                this.subclassOfId = 0x26231822;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.channels.SponsoredMessageReportResultAdsHidden();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.SponsoredMessageReportResultAdsHidden = SponsoredMessageReportResultAdsHidden;
        class SponsoredMessageReportResultReported extends index_js_1.TLObject {
            constructor() {
                super();
                this.classType = 'types';
                this.className = 'channels.SponsoredMessageReportResultReported';
                this.constructorId = 0xad798849;
                this.subclassOfId = 0x26231822;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.channels.SponsoredMessageReportResultReported();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.SponsoredMessageReportResultReported = SponsoredMessageReportResultReported;
        class ReadHistory extends index_js_1.TLObject {
            __response__;
            channel;
            maxId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.ReadHistory';
                this.constructorId = 0xcc104937;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['channel', 'maxId'];
                this.channel = params.channel;
                this.maxId = params.maxId;
            }
            static async read(_data, ..._args) {
                let channel = await index_js_1.TLObject.read(_data);
                let maxId = await index_js_1.Primitive.Int.read(_data);
                return new Raw.channels.ReadHistory({ channel: channel, maxId: maxId });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.maxId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.maxId));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.ReadHistory = ReadHistory;
        class DeleteMessages extends index_js_1.TLObject {
            __response__;
            channel;
            id;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.DeleteMessages';
                this.constructorId = 0x84c1fd4e;
                this.subclassOfId = 0xced3c06e;
                this._slots = ['channel', 'id'];
                this.channel = params.channel;
                this.id = params.id;
            }
            static async read(_data, ..._args) {
                let channel = await index_js_1.TLObject.read(_data);
                let id = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int);
                return new Raw.channels.DeleteMessages({ channel: channel, id: id });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.id) {
                    b.write(index_js_1.Primitive.Vector.write(this.id, index_js_1.Primitive.Int));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.DeleteMessages = DeleteMessages;
        class ReportSpam extends index_js_1.TLObject {
            __response__;
            channel;
            participant;
            id;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.ReportSpam';
                this.constructorId = 0xf44a8315;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['channel', 'participant', 'id'];
                this.channel = params.channel;
                this.participant = params.participant;
                this.id = params.id;
            }
            static async read(_data, ..._args) {
                let channel = await index_js_1.TLObject.read(_data);
                let participant = await index_js_1.TLObject.read(_data);
                let id = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int);
                return new Raw.channels.ReportSpam({ channel: channel, participant: participant, id: id });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.participant !== undefined) {
                    b.write(this.participant.write());
                }
                if (this.id) {
                    b.write(index_js_1.Primitive.Vector.write(this.id, index_js_1.Primitive.Int));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.ReportSpam = ReportSpam;
        class GetMessages extends index_js_1.TLObject {
            __response__;
            channel;
            id;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.GetMessages';
                this.constructorId = 0xad8c9a23;
                this.subclassOfId = 0xd4b40b5e;
                this._slots = ['channel', 'id'];
                this.channel = params.channel;
                this.id = params.id;
            }
            static async read(_data, ..._args) {
                let channel = await index_js_1.TLObject.read(_data);
                let id = await index_js_1.TLObject.read(_data);
                return new Raw.channels.GetMessages({ channel: channel, id: id });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.id) {
                    b.write(index_js_1.Primitive.Vector.write(this.id));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.GetMessages = GetMessages;
        class GetParticipants extends index_js_1.TLObject {
            __response__;
            channel;
            filter;
            offset;
            limit;
            hash;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.GetParticipants';
                this.constructorId = 0x77ced9d0;
                this.subclassOfId = 0xe60a6e64;
                this._slots = ['channel', 'filter', 'offset', 'limit', 'hash'];
                this.channel = params.channel;
                this.filter = params.filter;
                this.offset = params.offset;
                this.limit = params.limit;
                this.hash = params.hash;
            }
            static async read(_data, ..._args) {
                let channel = await index_js_1.TLObject.read(_data);
                let filter = await index_js_1.TLObject.read(_data);
                let offset = await index_js_1.Primitive.Int.read(_data);
                let limit = await index_js_1.Primitive.Int.read(_data);
                let hash = await index_js_1.Primitive.Long.read(_data);
                return new Raw.channels.GetParticipants({
                    channel: channel,
                    filter: filter,
                    offset: offset,
                    limit: limit,
                    hash: hash,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.filter !== undefined) {
                    b.write(this.filter.write());
                }
                if (this.offset !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.offset));
                }
                if (this.limit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.limit));
                }
                if (this.hash !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.hash));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.GetParticipants = GetParticipants;
        class GetParticipant extends index_js_1.TLObject {
            __response__;
            channel;
            participant;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.GetParticipant';
                this.constructorId = 0xa0ab6cc6;
                this.subclassOfId = 0x6658151a;
                this._slots = ['channel', 'participant'];
                this.channel = params.channel;
                this.participant = params.participant;
            }
            static async read(_data, ..._args) {
                let channel = await index_js_1.TLObject.read(_data);
                let participant = await index_js_1.TLObject.read(_data);
                return new Raw.channels.GetParticipant({ channel: channel, participant: participant });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.participant !== undefined) {
                    b.write(this.participant.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.GetParticipant = GetParticipant;
        class GetChannels extends index_js_1.TLObject {
            __response__;
            id;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.GetChannels';
                this.constructorId = 0xa7f6bbb;
                this.subclassOfId = 0x99d5cb14;
                this._slots = ['id'];
                this.id = params.id;
            }
            static async read(_data, ..._args) {
                let id = await index_js_1.TLObject.read(_data);
                return new Raw.channels.GetChannels({ id: id });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.id) {
                    b.write(index_js_1.Primitive.Vector.write(this.id));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.GetChannels = GetChannels;
        class GetFullChannel extends index_js_1.TLObject {
            __response__;
            channel;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.GetFullChannel';
                this.constructorId = 0x8736a09;
                this.subclassOfId = 0x225a5109;
                this._slots = ['channel'];
                this.channel = params.channel;
            }
            static async read(_data, ..._args) {
                let channel = await index_js_1.TLObject.read(_data);
                return new Raw.channels.GetFullChannel({ channel: channel });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.GetFullChannel = GetFullChannel;
        class CreateChannel extends index_js_1.TLObject {
            __response__;
            broadcast;
            megagroup;
            forImport;
            forum;
            title;
            about;
            geoPoint;
            address;
            ttlPeriod;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.CreateChannel';
                this.constructorId = 0x91006707;
                this.subclassOfId = 0x8af52aac;
                this._slots = [
                    'broadcast',
                    'megagroup',
                    'forImport',
                    'forum',
                    'title',
                    'about',
                    'geoPoint',
                    'address',
                    'ttlPeriod',
                ];
                this.broadcast = params.broadcast;
                this.megagroup = params.megagroup;
                this.forImport = params.forImport;
                this.forum = params.forum;
                this.title = params.title;
                this.about = params.about;
                this.geoPoint = params.geoPoint;
                this.address = params.address;
                this.ttlPeriod = params.ttlPeriod;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let broadcast = flags & (1 << 0) ? true : false;
                let megagroup = flags & (1 << 1) ? true : false;
                let forImport = flags & (1 << 3) ? true : false;
                let forum = flags & (1 << 5) ? true : false;
                let title = await index_js_1.Primitive.String.read(_data);
                let about = await index_js_1.Primitive.String.read(_data);
                let geoPoint = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
                let address = flags & (1 << 2) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let ttlPeriod = flags & (1 << 4) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                return new Raw.channels.CreateChannel({
                    broadcast: broadcast,
                    megagroup: megagroup,
                    forImport: forImport,
                    forum: forum,
                    title: title,
                    about: about,
                    geoPoint: geoPoint,
                    address: address,
                    ttlPeriod: ttlPeriod,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.broadcast ? 1 << 0 : 0;
                flags |= this.megagroup ? 1 << 1 : 0;
                flags |= this.forImport ? 1 << 3 : 0;
                flags |= this.forum ? 1 << 5 : 0;
                flags |= this.geoPoint !== undefined ? 1 << 2 : 0;
                flags |= this.address !== undefined ? 1 << 2 : 0;
                flags |= this.ttlPeriod !== undefined ? 1 << 4 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.title !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.title));
                }
                if (this.about !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.about));
                }
                if (this.geoPoint !== undefined) {
                    b.write(this.geoPoint.write());
                }
                if (this.address !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.address));
                }
                if (this.ttlPeriod !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.ttlPeriod));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.CreateChannel = CreateChannel;
        class EditAdmin extends index_js_1.TLObject {
            __response__;
            channel;
            userId;
            adminRights;
            rank;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.EditAdmin';
                this.constructorId = 0xd33c8902;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['channel', 'userId', 'adminRights', 'rank'];
                this.channel = params.channel;
                this.userId = params.userId;
                this.adminRights = params.adminRights;
                this.rank = params.rank;
            }
            static async read(_data, ..._args) {
                let channel = await index_js_1.TLObject.read(_data);
                let userId = await index_js_1.TLObject.read(_data);
                let adminRights = await index_js_1.TLObject.read(_data);
                let rank = await index_js_1.Primitive.String.read(_data);
                return new Raw.channels.EditAdmin({
                    channel: channel,
                    userId: userId,
                    adminRights: adminRights,
                    rank: rank,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.userId !== undefined) {
                    b.write(this.userId.write());
                }
                if (this.adminRights !== undefined) {
                    b.write(this.adminRights.write());
                }
                if (this.rank !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.rank));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.EditAdmin = EditAdmin;
        class EditTitle extends index_js_1.TLObject {
            __response__;
            channel;
            title;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.EditTitle';
                this.constructorId = 0x566decd0;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['channel', 'title'];
                this.channel = params.channel;
                this.title = params.title;
            }
            static async read(_data, ..._args) {
                let channel = await index_js_1.TLObject.read(_data);
                let title = await index_js_1.Primitive.String.read(_data);
                return new Raw.channels.EditTitle({ channel: channel, title: title });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.title !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.title));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.EditTitle = EditTitle;
        class EditPhoto extends index_js_1.TLObject {
            __response__;
            channel;
            photo;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.EditPhoto';
                this.constructorId = 0xf12e57c9;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['channel', 'photo'];
                this.channel = params.channel;
                this.photo = params.photo;
            }
            static async read(_data, ..._args) {
                let channel = await index_js_1.TLObject.read(_data);
                let photo = await index_js_1.TLObject.read(_data);
                return new Raw.channels.EditPhoto({ channel: channel, photo: photo });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.photo !== undefined) {
                    b.write(this.photo.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.EditPhoto = EditPhoto;
        class CheckUsername extends index_js_1.TLObject {
            __response__;
            channel;
            username;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.CheckUsername';
                this.constructorId = 0x10e6bd2c;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['channel', 'username'];
                this.channel = params.channel;
                this.username = params.username;
            }
            static async read(_data, ..._args) {
                let channel = await index_js_1.TLObject.read(_data);
                let username = await index_js_1.Primitive.String.read(_data);
                return new Raw.channels.CheckUsername({ channel: channel, username: username });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.username !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.username));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.CheckUsername = CheckUsername;
        class UpdateUsername extends index_js_1.TLObject {
            __response__;
            channel;
            username;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.UpdateUsername';
                this.constructorId = 0x3514b3de;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['channel', 'username'];
                this.channel = params.channel;
                this.username = params.username;
            }
            static async read(_data, ..._args) {
                let channel = await index_js_1.TLObject.read(_data);
                let username = await index_js_1.Primitive.String.read(_data);
                return new Raw.channels.UpdateUsername({ channel: channel, username: username });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.username !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.username));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.UpdateUsername = UpdateUsername;
        class JoinChannel extends index_js_1.TLObject {
            __response__;
            channel;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.JoinChannel';
                this.constructorId = 0x24b524c5;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['channel'];
                this.channel = params.channel;
            }
            static async read(_data, ..._args) {
                let channel = await index_js_1.TLObject.read(_data);
                return new Raw.channels.JoinChannel({ channel: channel });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.JoinChannel = JoinChannel;
        class LeaveChannel extends index_js_1.TLObject {
            __response__;
            channel;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.LeaveChannel';
                this.constructorId = 0xf836aa95;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['channel'];
                this.channel = params.channel;
            }
            static async read(_data, ..._args) {
                let channel = await index_js_1.TLObject.read(_data);
                return new Raw.channels.LeaveChannel({ channel: channel });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.LeaveChannel = LeaveChannel;
        class InviteToChannel extends index_js_1.TLObject {
            __response__;
            channel;
            users;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.InviteToChannel';
                this.constructorId = 0xc9e33d54;
                this.subclassOfId = 0x3dbe90a1;
                this._slots = ['channel', 'users'];
                this.channel = params.channel;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let channel = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.channels.InviteToChannel({ channel: channel, users: users });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.InviteToChannel = InviteToChannel;
        class DeleteChannel extends index_js_1.TLObject {
            __response__;
            channel;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.DeleteChannel';
                this.constructorId = 0xc0111fe3;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['channel'];
                this.channel = params.channel;
            }
            static async read(_data, ..._args) {
                let channel = await index_js_1.TLObject.read(_data);
                return new Raw.channels.DeleteChannel({ channel: channel });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.DeleteChannel = DeleteChannel;
        class ExportMessageLink extends index_js_1.TLObject {
            __response__;
            grouped;
            thread;
            channel;
            id;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.ExportMessageLink';
                this.constructorId = 0xe63fadeb;
                this.subclassOfId = 0xdee644cc;
                this._slots = ['grouped', 'thread', 'channel', 'id'];
                this.grouped = params.grouped;
                this.thread = params.thread;
                this.channel = params.channel;
                this.id = params.id;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let grouped = flags & (1 << 0) ? true : false;
                let thread = flags & (1 << 1) ? true : false;
                let channel = await index_js_1.TLObject.read(_data);
                let id = await index_js_1.Primitive.Int.read(_data);
                return new Raw.channels.ExportMessageLink({
                    grouped: grouped,
                    thread: thread,
                    channel: channel,
                    id: id,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.grouped ? 1 << 0 : 0;
                flags |= this.thread ? 1 << 1 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.id !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.id));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.ExportMessageLink = ExportMessageLink;
        class ToggleSignatures extends index_js_1.TLObject {
            __response__;
            channel;
            enabled;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.ToggleSignatures';
                this.constructorId = 0x1f69b606;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['channel', 'enabled'];
                this.channel = params.channel;
                this.enabled = params.enabled;
            }
            static async read(_data, ..._args) {
                let channel = await index_js_1.TLObject.read(_data);
                let enabled = await index_js_1.Primitive.Bool.read(_data);
                return new Raw.channels.ToggleSignatures({ channel: channel, enabled: enabled });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.enabled !== undefined) {
                    b.write(index_js_1.Primitive.Bool.write(this.enabled));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.ToggleSignatures = ToggleSignatures;
        class GetAdminedPublicChannels extends index_js_1.TLObject {
            __response__;
            byLocation;
            checkLimit;
            forPersonal;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.GetAdminedPublicChannels';
                this.constructorId = 0xf8b036af;
                this.subclassOfId = 0x99d5cb14;
                this._slots = ['byLocation', 'checkLimit', 'forPersonal'];
                this.byLocation = params.byLocation;
                this.checkLimit = params.checkLimit;
                this.forPersonal = params.forPersonal;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let byLocation = flags & (1 << 0) ? true : false;
                let checkLimit = flags & (1 << 1) ? true : false;
                let forPersonal = flags & (1 << 2) ? true : false;
                return new Raw.channels.GetAdminedPublicChannels({
                    byLocation: byLocation,
                    checkLimit: checkLimit,
                    forPersonal: forPersonal,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.byLocation ? 1 << 0 : 0;
                flags |= this.checkLimit ? 1 << 1 : 0;
                flags |= this.forPersonal ? 1 << 2 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.GetAdminedPublicChannels = GetAdminedPublicChannels;
        class EditBanned extends index_js_1.TLObject {
            __response__;
            channel;
            participant;
            bannedRights;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.EditBanned';
                this.constructorId = 0x96e6cd81;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['channel', 'participant', 'bannedRights'];
                this.channel = params.channel;
                this.participant = params.participant;
                this.bannedRights = params.bannedRights;
            }
            static async read(_data, ..._args) {
                let channel = await index_js_1.TLObject.read(_data);
                let participant = await index_js_1.TLObject.read(_data);
                let bannedRights = await index_js_1.TLObject.read(_data);
                return new Raw.channels.EditBanned({
                    channel: channel,
                    participant: participant,
                    bannedRights: bannedRights,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.participant !== undefined) {
                    b.write(this.participant.write());
                }
                if (this.bannedRights !== undefined) {
                    b.write(this.bannedRights.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.EditBanned = EditBanned;
        class GetAdminLog extends index_js_1.TLObject {
            __response__;
            channel;
            q;
            eventsFilter;
            admins;
            maxId;
            minId;
            limit;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.GetAdminLog';
                this.constructorId = 0x33ddf480;
                this.subclassOfId = 0x51f076bc;
                this._slots = ['channel', 'q', 'eventsFilter', 'admins', 'maxId', 'minId', 'limit'];
                this.channel = params.channel;
                this.q = params.q;
                this.eventsFilter = params.eventsFilter;
                this.admins = params.admins;
                this.maxId = params.maxId;
                this.minId = params.minId;
                this.limit = params.limit;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let channel = await index_js_1.TLObject.read(_data);
                let q = await index_js_1.Primitive.String.read(_data);
                let eventsFilter = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
                let admins = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : [];
                let maxId = await index_js_1.Primitive.Long.read(_data);
                let minId = await index_js_1.Primitive.Long.read(_data);
                let limit = await index_js_1.Primitive.Int.read(_data);
                return new Raw.channels.GetAdminLog({
                    channel: channel,
                    q: q,
                    eventsFilter: eventsFilter,
                    admins: admins,
                    maxId: maxId,
                    minId: minId,
                    limit: limit,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.eventsFilter !== undefined ? 1 << 0 : 0;
                flags |= this.admins ? 1 << 1 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.q !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.q));
                }
                if (this.eventsFilter !== undefined) {
                    b.write(this.eventsFilter.write());
                }
                if (this.admins) {
                    b.write(index_js_1.Primitive.Vector.write(this.admins));
                }
                if (this.maxId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.maxId));
                }
                if (this.minId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.minId));
                }
                if (this.limit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.limit));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.GetAdminLog = GetAdminLog;
        class SetStickers extends index_js_1.TLObject {
            __response__;
            channel;
            stickerset;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.SetStickers';
                this.constructorId = 0xea8ca4f9;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['channel', 'stickerset'];
                this.channel = params.channel;
                this.stickerset = params.stickerset;
            }
            static async read(_data, ..._args) {
                let channel = await index_js_1.TLObject.read(_data);
                let stickerset = await index_js_1.TLObject.read(_data);
                return new Raw.channels.SetStickers({ channel: channel, stickerset: stickerset });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.stickerset !== undefined) {
                    b.write(this.stickerset.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.SetStickers = SetStickers;
        class ReadMessageContents extends index_js_1.TLObject {
            __response__;
            channel;
            id;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.ReadMessageContents';
                this.constructorId = 0xeab5dc38;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['channel', 'id'];
                this.channel = params.channel;
                this.id = params.id;
            }
            static async read(_data, ..._args) {
                let channel = await index_js_1.TLObject.read(_data);
                let id = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int);
                return new Raw.channels.ReadMessageContents({ channel: channel, id: id });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.id) {
                    b.write(index_js_1.Primitive.Vector.write(this.id, index_js_1.Primitive.Int));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.ReadMessageContents = ReadMessageContents;
        class DeleteHistory extends index_js_1.TLObject {
            __response__;
            forEveryone;
            channel;
            maxId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.DeleteHistory';
                this.constructorId = 0x9baa9647;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['forEveryone', 'channel', 'maxId'];
                this.forEveryone = params.forEveryone;
                this.channel = params.channel;
                this.maxId = params.maxId;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let forEveryone = flags & (1 << 0) ? true : false;
                let channel = await index_js_1.TLObject.read(_data);
                let maxId = await index_js_1.Primitive.Int.read(_data);
                return new Raw.channels.DeleteHistory({
                    forEveryone: forEveryone,
                    channel: channel,
                    maxId: maxId,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.forEveryone ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.maxId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.maxId));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.DeleteHistory = DeleteHistory;
        class TogglePreHistoryHidden extends index_js_1.TLObject {
            __response__;
            channel;
            enabled;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.TogglePreHistoryHidden';
                this.constructorId = 0xeabbb94c;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['channel', 'enabled'];
                this.channel = params.channel;
                this.enabled = params.enabled;
            }
            static async read(_data, ..._args) {
                let channel = await index_js_1.TLObject.read(_data);
                let enabled = await index_js_1.Primitive.Bool.read(_data);
                return new Raw.channels.TogglePreHistoryHidden({ channel: channel, enabled: enabled });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.enabled !== undefined) {
                    b.write(index_js_1.Primitive.Bool.write(this.enabled));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.TogglePreHistoryHidden = TogglePreHistoryHidden;
        class GetLeftChannels extends index_js_1.TLObject {
            __response__;
            offset;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.GetLeftChannels';
                this.constructorId = 0x8341ecc0;
                this.subclassOfId = 0x99d5cb14;
                this._slots = ['offset'];
                this.offset = params.offset;
            }
            static async read(_data, ..._args) {
                let offset = await index_js_1.Primitive.Int.read(_data);
                return new Raw.channels.GetLeftChannels({ offset: offset });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.offset !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.offset));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.GetLeftChannels = GetLeftChannels;
        class GetGroupsForDiscussion extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'channels.GetGroupsForDiscussion';
                this.constructorId = 0xf5dad378;
                this.subclassOfId = 0x99d5cb14;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.channels.GetGroupsForDiscussion();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.GetGroupsForDiscussion = GetGroupsForDiscussion;
        class SetDiscussionGroup extends index_js_1.TLObject {
            __response__;
            broadcast;
            group;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.SetDiscussionGroup';
                this.constructorId = 0x40582bb2;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['broadcast', 'group'];
                this.broadcast = params.broadcast;
                this.group = params.group;
            }
            static async read(_data, ..._args) {
                let broadcast = await index_js_1.TLObject.read(_data);
                let group = await index_js_1.TLObject.read(_data);
                return new Raw.channels.SetDiscussionGroup({ broadcast: broadcast, group: group });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.broadcast !== undefined) {
                    b.write(this.broadcast.write());
                }
                if (this.group !== undefined) {
                    b.write(this.group.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.SetDiscussionGroup = SetDiscussionGroup;
        class EditCreator extends index_js_1.TLObject {
            __response__;
            channel;
            userId;
            password;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.EditCreator';
                this.constructorId = 0x8f38cd1f;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['channel', 'userId', 'password'];
                this.channel = params.channel;
                this.userId = params.userId;
                this.password = params.password;
            }
            static async read(_data, ..._args) {
                let channel = await index_js_1.TLObject.read(_data);
                let userId = await index_js_1.TLObject.read(_data);
                let password = await index_js_1.TLObject.read(_data);
                return new Raw.channels.EditCreator({
                    channel: channel,
                    userId: userId,
                    password: password,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.userId !== undefined) {
                    b.write(this.userId.write());
                }
                if (this.password !== undefined) {
                    b.write(this.password.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.EditCreator = EditCreator;
        class EditLocation extends index_js_1.TLObject {
            __response__;
            channel;
            geoPoint;
            address;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.EditLocation';
                this.constructorId = 0x58e63f6d;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['channel', 'geoPoint', 'address'];
                this.channel = params.channel;
                this.geoPoint = params.geoPoint;
                this.address = params.address;
            }
            static async read(_data, ..._args) {
                let channel = await index_js_1.TLObject.read(_data);
                let geoPoint = await index_js_1.TLObject.read(_data);
                let address = await index_js_1.Primitive.String.read(_data);
                return new Raw.channels.EditLocation({
                    channel: channel,
                    geoPoint: geoPoint,
                    address: address,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.geoPoint !== undefined) {
                    b.write(this.geoPoint.write());
                }
                if (this.address !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.address));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.EditLocation = EditLocation;
        class ToggleSlowMode extends index_js_1.TLObject {
            __response__;
            channel;
            seconds;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.ToggleSlowMode';
                this.constructorId = 0xedd49ef0;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['channel', 'seconds'];
                this.channel = params.channel;
                this.seconds = params.seconds;
            }
            static async read(_data, ..._args) {
                let channel = await index_js_1.TLObject.read(_data);
                let seconds = await index_js_1.Primitive.Int.read(_data);
                return new Raw.channels.ToggleSlowMode({ channel: channel, seconds: seconds });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.seconds !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.seconds));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.ToggleSlowMode = ToggleSlowMode;
        class GetInactiveChannels extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'channels.GetInactiveChannels';
                this.constructorId = 0x11e831ee;
                this.subclassOfId = 0x8bf3d7d4;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.channels.GetInactiveChannels();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.GetInactiveChannels = GetInactiveChannels;
        class ConvertToGigagroup extends index_js_1.TLObject {
            __response__;
            channel;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.ConvertToGigagroup';
                this.constructorId = 0xb290c69;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['channel'];
                this.channel = params.channel;
            }
            static async read(_data, ..._args) {
                let channel = await index_js_1.TLObject.read(_data);
                return new Raw.channels.ConvertToGigagroup({ channel: channel });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.ConvertToGigagroup = ConvertToGigagroup;
        class ViewSponsoredMessage extends index_js_1.TLObject {
            __response__;
            channel;
            randomId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.ViewSponsoredMessage';
                this.constructorId = 0xbeaedb94;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['channel', 'randomId'];
                this.channel = params.channel;
                this.randomId = params.randomId;
            }
            static async read(_data, ..._args) {
                let channel = await index_js_1.TLObject.read(_data);
                let randomId = await index_js_1.Primitive.Bytes.read(_data);
                return new Raw.channels.ViewSponsoredMessage({ channel: channel, randomId: randomId });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.randomId !== undefined) {
                    b.write(index_js_1.Primitive.Bytes.write(this.randomId));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.ViewSponsoredMessage = ViewSponsoredMessage;
        class GetSponsoredMessages extends index_js_1.TLObject {
            __response__;
            channel;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.GetSponsoredMessages';
                this.constructorId = 0xec210fbf;
                this.subclassOfId = 0x7f4169e0;
                this._slots = ['channel'];
                this.channel = params.channel;
            }
            static async read(_data, ..._args) {
                let channel = await index_js_1.TLObject.read(_data);
                return new Raw.channels.GetSponsoredMessages({ channel: channel });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.GetSponsoredMessages = GetSponsoredMessages;
        class GetSendAs extends index_js_1.TLObject {
            __response__;
            peer;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.GetSendAs';
                this.constructorId = 0xdc770ee;
                this.subclassOfId = 0x38cb8d21;
                this._slots = ['peer'];
                this.peer = params.peer;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                return new Raw.channels.GetSendAs({ peer: peer });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.GetSendAs = GetSendAs;
        class DeleteParticipantHistory extends index_js_1.TLObject {
            __response__;
            channel;
            participant;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.DeleteParticipantHistory';
                this.constructorId = 0x367544db;
                this.subclassOfId = 0x2c49c116;
                this._slots = ['channel', 'participant'];
                this.channel = params.channel;
                this.participant = params.participant;
            }
            static async read(_data, ..._args) {
                let channel = await index_js_1.TLObject.read(_data);
                let participant = await index_js_1.TLObject.read(_data);
                return new Raw.channels.DeleteParticipantHistory({
                    channel: channel,
                    participant: participant,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.participant !== undefined) {
                    b.write(this.participant.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.DeleteParticipantHistory = DeleteParticipantHistory;
        class ToggleJoinToSend extends index_js_1.TLObject {
            __response__;
            channel;
            enabled;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.ToggleJoinToSend';
                this.constructorId = 0xe4cb9580;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['channel', 'enabled'];
                this.channel = params.channel;
                this.enabled = params.enabled;
            }
            static async read(_data, ..._args) {
                let channel = await index_js_1.TLObject.read(_data);
                let enabled = await index_js_1.Primitive.Bool.read(_data);
                return new Raw.channels.ToggleJoinToSend({ channel: channel, enabled: enabled });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.enabled !== undefined) {
                    b.write(index_js_1.Primitive.Bool.write(this.enabled));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.ToggleJoinToSend = ToggleJoinToSend;
        class ToggleJoinRequest extends index_js_1.TLObject {
            __response__;
            channel;
            enabled;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.ToggleJoinRequest';
                this.constructorId = 0x4c2985b6;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['channel', 'enabled'];
                this.channel = params.channel;
                this.enabled = params.enabled;
            }
            static async read(_data, ..._args) {
                let channel = await index_js_1.TLObject.read(_data);
                let enabled = await index_js_1.Primitive.Bool.read(_data);
                return new Raw.channels.ToggleJoinRequest({ channel: channel, enabled: enabled });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.enabled !== undefined) {
                    b.write(index_js_1.Primitive.Bool.write(this.enabled));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.ToggleJoinRequest = ToggleJoinRequest;
        class ReorderUsernames extends index_js_1.TLObject {
            __response__;
            channel;
            order;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.ReorderUsernames';
                this.constructorId = 0xb45ced1d;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['channel', 'order'];
                this.channel = params.channel;
                this.order = params.order;
            }
            static async read(_data, ..._args) {
                let channel = await index_js_1.TLObject.read(_data);
                let order = await index_js_1.TLObject.read(_data, index_js_1.Primitive.String);
                return new Raw.channels.ReorderUsernames({ channel: channel, order: order });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.order) {
                    b.write(index_js_1.Primitive.Vector.write(this.order, index_js_1.Primitive.String));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.ReorderUsernames = ReorderUsernames;
        class ToggleUsername extends index_js_1.TLObject {
            __response__;
            channel;
            username;
            active;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.ToggleUsername';
                this.constructorId = 0x50f24105;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['channel', 'username', 'active'];
                this.channel = params.channel;
                this.username = params.username;
                this.active = params.active;
            }
            static async read(_data, ..._args) {
                let channel = await index_js_1.TLObject.read(_data);
                let username = await index_js_1.Primitive.String.read(_data);
                let active = await index_js_1.Primitive.Bool.read(_data);
                return new Raw.channels.ToggleUsername({
                    channel: channel,
                    username: username,
                    active: active,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.username !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.username));
                }
                if (this.active !== undefined) {
                    b.write(index_js_1.Primitive.Bool.write(this.active));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.ToggleUsername = ToggleUsername;
        class DeactivateAllUsernames extends index_js_1.TLObject {
            __response__;
            channel;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.DeactivateAllUsernames';
                this.constructorId = 0xa245dd3;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['channel'];
                this.channel = params.channel;
            }
            static async read(_data, ..._args) {
                let channel = await index_js_1.TLObject.read(_data);
                return new Raw.channels.DeactivateAllUsernames({ channel: channel });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.DeactivateAllUsernames = DeactivateAllUsernames;
        class ToggleForum extends index_js_1.TLObject {
            __response__;
            channel;
            enabled;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.ToggleForum';
                this.constructorId = 0xa4298b29;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['channel', 'enabled'];
                this.channel = params.channel;
                this.enabled = params.enabled;
            }
            static async read(_data, ..._args) {
                let channel = await index_js_1.TLObject.read(_data);
                let enabled = await index_js_1.Primitive.Bool.read(_data);
                return new Raw.channels.ToggleForum({ channel: channel, enabled: enabled });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.enabled !== undefined) {
                    b.write(index_js_1.Primitive.Bool.write(this.enabled));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.ToggleForum = ToggleForum;
        class CreateForumTopic extends index_js_1.TLObject {
            __response__;
            channel;
            title;
            iconColor;
            iconEmojiId;
            randomId;
            sendAs;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.CreateForumTopic';
                this.constructorId = 0xf40c0224;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['channel', 'title', 'iconColor', 'iconEmojiId', 'randomId', 'sendAs'];
                this.channel = params.channel;
                this.title = params.title;
                this.iconColor = params.iconColor;
                this.iconEmojiId = params.iconEmojiId;
                this.randomId = params.randomId;
                this.sendAs = params.sendAs;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let channel = await index_js_1.TLObject.read(_data);
                let title = await index_js_1.Primitive.String.read(_data);
                let iconColor = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let iconEmojiId = flags & (1 << 3) ? await index_js_1.Primitive.Long.read(_data) : undefined;
                let randomId = await index_js_1.Primitive.Long.read(_data);
                let sendAs = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
                return new Raw.channels.CreateForumTopic({
                    channel: channel,
                    title: title,
                    iconColor: iconColor,
                    iconEmojiId: iconEmojiId,
                    randomId: randomId,
                    sendAs: sendAs,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.iconColor !== undefined ? 1 << 0 : 0;
                flags |= this.iconEmojiId !== undefined ? 1 << 3 : 0;
                flags |= this.sendAs !== undefined ? 1 << 2 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.title !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.title));
                }
                if (this.iconColor !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.iconColor));
                }
                if (this.iconEmojiId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.iconEmojiId));
                }
                if (this.randomId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.randomId));
                }
                if (this.sendAs !== undefined) {
                    b.write(this.sendAs.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.CreateForumTopic = CreateForumTopic;
        class GetForumTopics extends index_js_1.TLObject {
            __response__;
            channel;
            q;
            offsetDate;
            offsetId;
            offsetTopic;
            limit;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.GetForumTopics';
                this.constructorId = 0xde560d1;
                this.subclassOfId = 0x8e1d3e1e;
                this._slots = ['channel', 'q', 'offsetDate', 'offsetId', 'offsetTopic', 'limit'];
                this.channel = params.channel;
                this.q = params.q;
                this.offsetDate = params.offsetDate;
                this.offsetId = params.offsetId;
                this.offsetTopic = params.offsetTopic;
                this.limit = params.limit;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let channel = await index_js_1.TLObject.read(_data);
                let q = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let offsetDate = await index_js_1.Primitive.Int.read(_data);
                let offsetId = await index_js_1.Primitive.Int.read(_data);
                let offsetTopic = await index_js_1.Primitive.Int.read(_data);
                let limit = await index_js_1.Primitive.Int.read(_data);
                return new Raw.channels.GetForumTopics({
                    channel: channel,
                    q: q,
                    offsetDate: offsetDate,
                    offsetId: offsetId,
                    offsetTopic: offsetTopic,
                    limit: limit,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.q !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.q !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.q));
                }
                if (this.offsetDate !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.offsetDate));
                }
                if (this.offsetId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.offsetId));
                }
                if (this.offsetTopic !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.offsetTopic));
                }
                if (this.limit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.limit));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.GetForumTopics = GetForumTopics;
        class GetForumTopicsByID extends index_js_1.TLObject {
            __response__;
            channel;
            topics;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.GetForumTopicsByID';
                this.constructorId = 0xb0831eb9;
                this.subclassOfId = 0x8e1d3e1e;
                this._slots = ['channel', 'topics'];
                this.channel = params.channel;
                this.topics = params.topics;
            }
            static async read(_data, ..._args) {
                let channel = await index_js_1.TLObject.read(_data);
                let topics = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int);
                return new Raw.channels.GetForumTopicsByID({ channel: channel, topics: topics });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.topics) {
                    b.write(index_js_1.Primitive.Vector.write(this.topics, index_js_1.Primitive.Int));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.GetForumTopicsByID = GetForumTopicsByID;
        class EditForumTopic extends index_js_1.TLObject {
            __response__;
            channel;
            topicId;
            title;
            iconEmojiId;
            closed;
            hidden;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.EditForumTopic';
                this.constructorId = 0xf4dfa185;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['channel', 'topicId', 'title', 'iconEmojiId', 'closed', 'hidden'];
                this.channel = params.channel;
                this.topicId = params.topicId;
                this.title = params.title;
                this.iconEmojiId = params.iconEmojiId;
                this.closed = params.closed;
                this.hidden = params.hidden;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let channel = await index_js_1.TLObject.read(_data);
                let topicId = await index_js_1.Primitive.Int.read(_data);
                let title = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let iconEmojiId = flags & (1 << 1) ? await index_js_1.Primitive.Long.read(_data) : undefined;
                let closed = flags & (1 << 2) ? await index_js_1.Primitive.Bool.read(_data) : undefined;
                let hidden = flags & (1 << 3) ? await index_js_1.Primitive.Bool.read(_data) : undefined;
                return new Raw.channels.EditForumTopic({
                    channel: channel,
                    topicId: topicId,
                    title: title,
                    iconEmojiId: iconEmojiId,
                    closed: closed,
                    hidden: hidden,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.title !== undefined ? 1 << 0 : 0;
                flags |= this.iconEmojiId !== undefined ? 1 << 1 : 0;
                flags |= this.closed !== undefined ? 1 << 2 : 0;
                flags |= this.hidden !== undefined ? 1 << 3 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.topicId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.topicId));
                }
                if (this.title !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.title));
                }
                if (this.iconEmojiId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.iconEmojiId));
                }
                if (this.closed !== undefined) {
                    b.write(index_js_1.Primitive.Bool.write(this.closed));
                }
                if (this.hidden !== undefined) {
                    b.write(index_js_1.Primitive.Bool.write(this.hidden));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.EditForumTopic = EditForumTopic;
        class UpdatePinnedForumTopic extends index_js_1.TLObject {
            __response__;
            channel;
            topicId;
            pinned;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.UpdatePinnedForumTopic';
                this.constructorId = 0x6c2d9026;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['channel', 'topicId', 'pinned'];
                this.channel = params.channel;
                this.topicId = params.topicId;
                this.pinned = params.pinned;
            }
            static async read(_data, ..._args) {
                let channel = await index_js_1.TLObject.read(_data);
                let topicId = await index_js_1.Primitive.Int.read(_data);
                let pinned = await index_js_1.Primitive.Bool.read(_data);
                return new Raw.channels.UpdatePinnedForumTopic({
                    channel: channel,
                    topicId: topicId,
                    pinned: pinned,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.topicId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.topicId));
                }
                if (this.pinned !== undefined) {
                    b.write(index_js_1.Primitive.Bool.write(this.pinned));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.UpdatePinnedForumTopic = UpdatePinnedForumTopic;
        class DeleteTopicHistory extends index_js_1.TLObject {
            __response__;
            channel;
            topMsgId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.DeleteTopicHistory';
                this.constructorId = 0x34435f2d;
                this.subclassOfId = 0x2c49c116;
                this._slots = ['channel', 'topMsgId'];
                this.channel = params.channel;
                this.topMsgId = params.topMsgId;
            }
            static async read(_data, ..._args) {
                let channel = await index_js_1.TLObject.read(_data);
                let topMsgId = await index_js_1.Primitive.Int.read(_data);
                return new Raw.channels.DeleteTopicHistory({ channel: channel, topMsgId: topMsgId });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.topMsgId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.topMsgId));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.DeleteTopicHistory = DeleteTopicHistory;
        class ReorderPinnedForumTopics extends index_js_1.TLObject {
            __response__;
            force;
            channel;
            order;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.ReorderPinnedForumTopics';
                this.constructorId = 0x2950a18f;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['force', 'channel', 'order'];
                this.force = params.force;
                this.channel = params.channel;
                this.order = params.order;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let force = flags & (1 << 0) ? true : false;
                let channel = await index_js_1.TLObject.read(_data);
                let order = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int);
                return new Raw.channels.ReorderPinnedForumTopics({
                    force: force,
                    channel: channel,
                    order: order,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.force ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.order) {
                    b.write(index_js_1.Primitive.Vector.write(this.order, index_js_1.Primitive.Int));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.ReorderPinnedForumTopics = ReorderPinnedForumTopics;
        class ToggleAntiSpam extends index_js_1.TLObject {
            __response__;
            channel;
            enabled;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.ToggleAntiSpam';
                this.constructorId = 0x68f3e4eb;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['channel', 'enabled'];
                this.channel = params.channel;
                this.enabled = params.enabled;
            }
            static async read(_data, ..._args) {
                let channel = await index_js_1.TLObject.read(_data);
                let enabled = await index_js_1.Primitive.Bool.read(_data);
                return new Raw.channels.ToggleAntiSpam({ channel: channel, enabled: enabled });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.enabled !== undefined) {
                    b.write(index_js_1.Primitive.Bool.write(this.enabled));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.ToggleAntiSpam = ToggleAntiSpam;
        class ReportAntiSpamFalsePositive extends index_js_1.TLObject {
            __response__;
            channel;
            msgId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.ReportAntiSpamFalsePositive';
                this.constructorId = 0xa850a693;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['channel', 'msgId'];
                this.channel = params.channel;
                this.msgId = params.msgId;
            }
            static async read(_data, ..._args) {
                let channel = await index_js_1.TLObject.read(_data);
                let msgId = await index_js_1.Primitive.Int.read(_data);
                return new Raw.channels.ReportAntiSpamFalsePositive({ channel: channel, msgId: msgId });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.msgId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.msgId));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.ReportAntiSpamFalsePositive = ReportAntiSpamFalsePositive;
        class ToggleParticipantsHidden extends index_js_1.TLObject {
            __response__;
            channel;
            enabled;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.ToggleParticipantsHidden';
                this.constructorId = 0x6a6e7854;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['channel', 'enabled'];
                this.channel = params.channel;
                this.enabled = params.enabled;
            }
            static async read(_data, ..._args) {
                let channel = await index_js_1.TLObject.read(_data);
                let enabled = await index_js_1.Primitive.Bool.read(_data);
                return new Raw.channels.ToggleParticipantsHidden({ channel: channel, enabled: enabled });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.enabled !== undefined) {
                    b.write(index_js_1.Primitive.Bool.write(this.enabled));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.ToggleParticipantsHidden = ToggleParticipantsHidden;
        class ClickSponsoredMessage extends index_js_1.TLObject {
            __response__;
            channel;
            randomId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.ClickSponsoredMessage';
                this.constructorId = 0x18afbc93;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['channel', 'randomId'];
                this.channel = params.channel;
                this.randomId = params.randomId;
            }
            static async read(_data, ..._args) {
                let channel = await index_js_1.TLObject.read(_data);
                let randomId = await index_js_1.Primitive.Bytes.read(_data);
                return new Raw.channels.ClickSponsoredMessage({ channel: channel, randomId: randomId });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.randomId !== undefined) {
                    b.write(index_js_1.Primitive.Bytes.write(this.randomId));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.ClickSponsoredMessage = ClickSponsoredMessage;
        class UpdateColor extends index_js_1.TLObject {
            __response__;
            forProfile;
            channel;
            color;
            backgroundEmojiId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.UpdateColor';
                this.constructorId = 0xd8aa3671;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['forProfile', 'channel', 'color', 'backgroundEmojiId'];
                this.forProfile = params.forProfile;
                this.channel = params.channel;
                this.color = params.color;
                this.backgroundEmojiId = params.backgroundEmojiId;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let forProfile = flags & (1 << 1) ? true : false;
                let channel = await index_js_1.TLObject.read(_data);
                let color = flags & (1 << 2) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let backgroundEmojiId = flags & (1 << 0) ? await index_js_1.Primitive.Long.read(_data) : undefined;
                return new Raw.channels.UpdateColor({
                    forProfile: forProfile,
                    channel: channel,
                    color: color,
                    backgroundEmojiId: backgroundEmojiId,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.forProfile ? 1 << 1 : 0;
                flags |= this.color !== undefined ? 1 << 2 : 0;
                flags |= this.backgroundEmojiId !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.color !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.color));
                }
                if (this.backgroundEmojiId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.backgroundEmojiId));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.UpdateColor = UpdateColor;
        class ToggleViewForumAsMessages extends index_js_1.TLObject {
            __response__;
            channel;
            enabled;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.ToggleViewForumAsMessages';
                this.constructorId = 0x9738bb15;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['channel', 'enabled'];
                this.channel = params.channel;
                this.enabled = params.enabled;
            }
            static async read(_data, ..._args) {
                let channel = await index_js_1.TLObject.read(_data);
                let enabled = await index_js_1.Primitive.Bool.read(_data);
                return new Raw.channels.ToggleViewForumAsMessages({ channel: channel, enabled: enabled });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.enabled !== undefined) {
                    b.write(index_js_1.Primitive.Bool.write(this.enabled));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.ToggleViewForumAsMessages = ToggleViewForumAsMessages;
        class GetChannelRecommendations extends index_js_1.TLObject {
            __response__;
            channel;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.GetChannelRecommendations';
                this.constructorId = 0x25a71742;
                this.subclassOfId = 0x99d5cb14;
                this._slots = ['channel'];
                this.channel = params.channel;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let channel = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
                return new Raw.channels.GetChannelRecommendations({ channel: channel });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.channel !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.GetChannelRecommendations = GetChannelRecommendations;
        class UpdateEmojiStatus extends index_js_1.TLObject {
            __response__;
            channel;
            emojiStatus;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.UpdateEmojiStatus';
                this.constructorId = 0xf0d3e6a8;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['channel', 'emojiStatus'];
                this.channel = params.channel;
                this.emojiStatus = params.emojiStatus;
            }
            static async read(_data, ..._args) {
                let channel = await index_js_1.TLObject.read(_data);
                let emojiStatus = await index_js_1.TLObject.read(_data);
                return new Raw.channels.UpdateEmojiStatus({ channel: channel, emojiStatus: emojiStatus });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.emojiStatus !== undefined) {
                    b.write(this.emojiStatus.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.UpdateEmojiStatus = UpdateEmojiStatus;
        class SetBoostsToUnblockRestrictions extends index_js_1.TLObject {
            __response__;
            channel;
            boosts;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.SetBoostsToUnblockRestrictions';
                this.constructorId = 0xad399cee;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['channel', 'boosts'];
                this.channel = params.channel;
                this.boosts = params.boosts;
            }
            static async read(_data, ..._args) {
                let channel = await index_js_1.TLObject.read(_data);
                let boosts = await index_js_1.Primitive.Int.read(_data);
                return new Raw.channels.SetBoostsToUnblockRestrictions({
                    channel: channel,
                    boosts: boosts,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.boosts !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.boosts));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.SetBoostsToUnblockRestrictions = SetBoostsToUnblockRestrictions;
        class SetEmojiStickers extends index_js_1.TLObject {
            __response__;
            channel;
            stickerset;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.SetEmojiStickers';
                this.constructorId = 0x3cd930b7;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['channel', 'stickerset'];
                this.channel = params.channel;
                this.stickerset = params.stickerset;
            }
            static async read(_data, ..._args) {
                let channel = await index_js_1.TLObject.read(_data);
                let stickerset = await index_js_1.TLObject.read(_data);
                return new Raw.channels.SetEmojiStickers({ channel: channel, stickerset: stickerset });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.stickerset !== undefined) {
                    b.write(this.stickerset.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.SetEmojiStickers = SetEmojiStickers;
        class ReportSponsoredMessage extends index_js_1.TLObject {
            __response__;
            channel;
            randomId;
            option;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.ReportSponsoredMessage';
                this.constructorId = 0xaf8ff6b9;
                this.subclassOfId = 0x26231822;
                this._slots = ['channel', 'randomId', 'option'];
                this.channel = params.channel;
                this.randomId = params.randomId;
                this.option = params.option;
            }
            static async read(_data, ..._args) {
                let channel = await index_js_1.TLObject.read(_data);
                let randomId = await index_js_1.Primitive.Bytes.read(_data);
                let option = await index_js_1.Primitive.Bytes.read(_data);
                return new Raw.channels.ReportSponsoredMessage({
                    channel: channel,
                    randomId: randomId,
                    option: option,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.randomId !== undefined) {
                    b.write(index_js_1.Primitive.Bytes.write(this.randomId));
                }
                if (this.option !== undefined) {
                    b.write(index_js_1.Primitive.Bytes.write(this.option));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.ReportSponsoredMessage = ReportSponsoredMessage;
        class RestrictSponsoredMessages extends index_js_1.TLObject {
            __response__;
            channel;
            restricted;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.RestrictSponsoredMessages';
                this.constructorId = 0x9ae91519;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['channel', 'restricted'];
                this.channel = params.channel;
                this.restricted = params.restricted;
            }
            static async read(_data, ..._args) {
                let channel = await index_js_1.TLObject.read(_data);
                let restricted = await index_js_1.Primitive.Bool.read(_data);
                return new Raw.channels.RestrictSponsoredMessages({
                    channel: channel,
                    restricted: restricted,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.restricted !== undefined) {
                    b.write(index_js_1.Primitive.Bool.write(this.restricted));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.RestrictSponsoredMessages = RestrictSponsoredMessages;
        class SearchPosts extends index_js_1.TLObject {
            __response__;
            hashtag;
            offsetRate;
            offsetPeer;
            offsetId;
            limit;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'channels.SearchPosts';
                this.constructorId = 0xd19f987b;
                this.subclassOfId = 0xd4b40b5e;
                this._slots = ['hashtag', 'offsetRate', 'offsetPeer', 'offsetId', 'limit'];
                this.hashtag = params.hashtag;
                this.offsetRate = params.offsetRate;
                this.offsetPeer = params.offsetPeer;
                this.offsetId = params.offsetId;
                this.limit = params.limit;
            }
            static async read(_data, ..._args) {
                let hashtag = await index_js_1.Primitive.String.read(_data);
                let offsetRate = await index_js_1.Primitive.Int.read(_data);
                let offsetPeer = await index_js_1.TLObject.read(_data);
                let offsetId = await index_js_1.Primitive.Int.read(_data);
                let limit = await index_js_1.Primitive.Int.read(_data);
                return new Raw.channels.SearchPosts({
                    hashtag: hashtag,
                    offsetRate: offsetRate,
                    offsetPeer: offsetPeer,
                    offsetId: offsetId,
                    limit: limit,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hashtag !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.hashtag));
                }
                if (this.offsetRate !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.offsetRate));
                }
                if (this.offsetPeer !== undefined) {
                    b.write(this.offsetPeer.write());
                }
                if (this.offsetId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.offsetId));
                }
                if (this.limit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.limit));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        channels.SearchPosts = SearchPosts;
    })(channels = Raw.channels || (Raw.channels = {}));
    let payments;
    (function (payments) {
        class PaymentForm extends index_js_1.TLObject {
            canSaveCredentials;
            passwordMissing;
            formId;
            botId;
            title;
            description;
            photo;
            invoice;
            providerId;
            url;
            nativeProvider;
            nativeParams;
            additionalMethods;
            savedInfo;
            savedCredentials;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'payments.PaymentForm';
                this.constructorId = 0xa0058751;
                this.subclassOfId = 0xa0483f19;
                this._slots = [
                    'canSaveCredentials',
                    'passwordMissing',
                    'formId',
                    'botId',
                    'title',
                    'description',
                    'photo',
                    'invoice',
                    'providerId',
                    'url',
                    'nativeProvider',
                    'nativeParams',
                    'additionalMethods',
                    'savedInfo',
                    'savedCredentials',
                    'users',
                ];
                this.canSaveCredentials = params.canSaveCredentials;
                this.passwordMissing = params.passwordMissing;
                this.formId = params.formId;
                this.botId = params.botId;
                this.title = params.title;
                this.description = params.description;
                this.photo = params.photo;
                this.invoice = params.invoice;
                this.providerId = params.providerId;
                this.url = params.url;
                this.nativeProvider = params.nativeProvider;
                this.nativeParams = params.nativeParams;
                this.additionalMethods = params.additionalMethods;
                this.savedInfo = params.savedInfo;
                this.savedCredentials = params.savedCredentials;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let canSaveCredentials = flags & (1 << 2) ? true : false;
                let passwordMissing = flags & (1 << 3) ? true : false;
                let formId = await index_js_1.Primitive.Long.read(_data);
                let botId = await index_js_1.Primitive.Long.read(_data);
                let title = await index_js_1.Primitive.String.read(_data);
                let description = await index_js_1.Primitive.String.read(_data);
                let photo = flags & (1 << 5) ? await index_js_1.TLObject.read(_data) : undefined;
                let invoice = await index_js_1.TLObject.read(_data);
                let providerId = await index_js_1.Primitive.Long.read(_data);
                let url = await index_js_1.Primitive.String.read(_data);
                let nativeProvider = flags & (1 << 4) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let nativeParams = flags & (1 << 4) ? await index_js_1.TLObject.read(_data) : undefined;
                let additionalMethods = flags & (1 << 6) ? await index_js_1.TLObject.read(_data) : [];
                let savedInfo = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
                let savedCredentials = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : [];
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.payments.PaymentForm({
                    canSaveCredentials: canSaveCredentials,
                    passwordMissing: passwordMissing,
                    formId: formId,
                    botId: botId,
                    title: title,
                    description: description,
                    photo: photo,
                    invoice: invoice,
                    providerId: providerId,
                    url: url,
                    nativeProvider: nativeProvider,
                    nativeParams: nativeParams,
                    additionalMethods: additionalMethods,
                    savedInfo: savedInfo,
                    savedCredentials: savedCredentials,
                    users: users,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.canSaveCredentials ? 1 << 2 : 0;
                flags |= this.passwordMissing ? 1 << 3 : 0;
                flags |= this.photo !== undefined ? 1 << 5 : 0;
                flags |= this.nativeProvider !== undefined ? 1 << 4 : 0;
                flags |= this.nativeParams !== undefined ? 1 << 4 : 0;
                flags |= this.additionalMethods ? 1 << 6 : 0;
                flags |= this.savedInfo !== undefined ? 1 << 0 : 0;
                flags |= this.savedCredentials ? 1 << 1 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.formId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.formId));
                }
                if (this.botId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.botId));
                }
                if (this.title !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.title));
                }
                if (this.description !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.description));
                }
                if (this.photo !== undefined) {
                    b.write(this.photo.write());
                }
                if (this.invoice !== undefined) {
                    b.write(this.invoice.write());
                }
                if (this.providerId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.providerId));
                }
                if (this.url !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.url));
                }
                if (this.nativeProvider !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.nativeProvider));
                }
                if (this.nativeParams !== undefined) {
                    b.write(this.nativeParams.write());
                }
                if (this.additionalMethods) {
                    b.write(index_js_1.Primitive.Vector.write(this.additionalMethods));
                }
                if (this.savedInfo !== undefined) {
                    b.write(this.savedInfo.write());
                }
                if (this.savedCredentials) {
                    b.write(index_js_1.Primitive.Vector.write(this.savedCredentials));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        payments.PaymentForm = PaymentForm;
        class PaymentFormStars extends index_js_1.TLObject {
            formId;
            botId;
            title;
            description;
            photo;
            invoice;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'payments.PaymentFormStars';
                this.constructorId = 0x7bf6b15c;
                this.subclassOfId = 0xa0483f19;
                this._slots = ['formId', 'botId', 'title', 'description', 'photo', 'invoice', 'users'];
                this.formId = params.formId;
                this.botId = params.botId;
                this.title = params.title;
                this.description = params.description;
                this.photo = params.photo;
                this.invoice = params.invoice;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let formId = await index_js_1.Primitive.Long.read(_data);
                let botId = await index_js_1.Primitive.Long.read(_data);
                let title = await index_js_1.Primitive.String.read(_data);
                let description = await index_js_1.Primitive.String.read(_data);
                let photo = flags & (1 << 5) ? await index_js_1.TLObject.read(_data) : undefined;
                let invoice = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.payments.PaymentFormStars({
                    formId: formId,
                    botId: botId,
                    title: title,
                    description: description,
                    photo: photo,
                    invoice: invoice,
                    users: users,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.photo !== undefined ? 1 << 5 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.formId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.formId));
                }
                if (this.botId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.botId));
                }
                if (this.title !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.title));
                }
                if (this.description !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.description));
                }
                if (this.photo !== undefined) {
                    b.write(this.photo.write());
                }
                if (this.invoice !== undefined) {
                    b.write(this.invoice.write());
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        payments.PaymentFormStars = PaymentFormStars;
        class ValidatedRequestedInfo extends index_js_1.TLObject {
            id;
            shippingOptions;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'payments.ValidatedRequestedInfo';
                this.constructorId = 0xd1451883;
                this.subclassOfId = 0x8f8044b7;
                this._slots = ['id', 'shippingOptions'];
                this.id = params.id;
                this.shippingOptions = params.shippingOptions;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let id = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let shippingOptions = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : [];
                return new Raw.payments.ValidatedRequestedInfo({
                    id: id,
                    shippingOptions: shippingOptions,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.id !== undefined ? 1 << 0 : 0;
                flags |= this.shippingOptions ? 1 << 1 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.id !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.id));
                }
                if (this.shippingOptions) {
                    b.write(index_js_1.Primitive.Vector.write(this.shippingOptions));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        payments.ValidatedRequestedInfo = ValidatedRequestedInfo;
        class PaymentResult extends index_js_1.TLObject {
            updates;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'payments.PaymentResult';
                this.constructorId = 0x4e5f810d;
                this.subclassOfId = 0x8ae16a9d;
                this._slots = ['updates'];
                this.updates = params.updates;
            }
            static async read(_data, ..._args) {
                let updates = await index_js_1.TLObject.read(_data);
                return new Raw.payments.PaymentResult({ updates: updates });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.updates !== undefined) {
                    b.write(this.updates.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        payments.PaymentResult = PaymentResult;
        class PaymentVerificationNeeded extends index_js_1.TLObject {
            url;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'payments.PaymentVerificationNeeded';
                this.constructorId = 0xd8411139;
                this.subclassOfId = 0x8ae16a9d;
                this._slots = ['url'];
                this.url = params.url;
            }
            static async read(_data, ..._args) {
                let url = await index_js_1.Primitive.String.read(_data);
                return new Raw.payments.PaymentVerificationNeeded({ url: url });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.url !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.url));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        payments.PaymentVerificationNeeded = PaymentVerificationNeeded;
        class PaymentReceipt extends index_js_1.TLObject {
            date;
            botId;
            providerId;
            title;
            description;
            photo;
            invoice;
            info;
            shipping;
            tipAmount;
            currency;
            totalAmount;
            credentialsTitle;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'payments.PaymentReceipt';
                this.constructorId = 0x70c4fe03;
                this.subclassOfId = 0x590093c9;
                this._slots = [
                    'date',
                    'botId',
                    'providerId',
                    'title',
                    'description',
                    'photo',
                    'invoice',
                    'info',
                    'shipping',
                    'tipAmount',
                    'currency',
                    'totalAmount',
                    'credentialsTitle',
                    'users',
                ];
                this.date = params.date;
                this.botId = params.botId;
                this.providerId = params.providerId;
                this.title = params.title;
                this.description = params.description;
                this.photo = params.photo;
                this.invoice = params.invoice;
                this.info = params.info;
                this.shipping = params.shipping;
                this.tipAmount = params.tipAmount;
                this.currency = params.currency;
                this.totalAmount = params.totalAmount;
                this.credentialsTitle = params.credentialsTitle;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let date = await index_js_1.Primitive.Int.read(_data);
                let botId = await index_js_1.Primitive.Long.read(_data);
                let providerId = await index_js_1.Primitive.Long.read(_data);
                let title = await index_js_1.Primitive.String.read(_data);
                let description = await index_js_1.Primitive.String.read(_data);
                let photo = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
                let invoice = await index_js_1.TLObject.read(_data);
                let info = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
                let shipping = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : undefined;
                let tipAmount = flags & (1 << 3) ? await index_js_1.Primitive.Long.read(_data) : undefined;
                let currency = await index_js_1.Primitive.String.read(_data);
                let totalAmount = await index_js_1.Primitive.Long.read(_data);
                let credentialsTitle = await index_js_1.Primitive.String.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.payments.PaymentReceipt({
                    date: date,
                    botId: botId,
                    providerId: providerId,
                    title: title,
                    description: description,
                    photo: photo,
                    invoice: invoice,
                    info: info,
                    shipping: shipping,
                    tipAmount: tipAmount,
                    currency: currency,
                    totalAmount: totalAmount,
                    credentialsTitle: credentialsTitle,
                    users: users,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.photo !== undefined ? 1 << 2 : 0;
                flags |= this.info !== undefined ? 1 << 0 : 0;
                flags |= this.shipping !== undefined ? 1 << 1 : 0;
                flags |= this.tipAmount !== undefined ? 1 << 3 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.date !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.date));
                }
                if (this.botId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.botId));
                }
                if (this.providerId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.providerId));
                }
                if (this.title !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.title));
                }
                if (this.description !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.description));
                }
                if (this.photo !== undefined) {
                    b.write(this.photo.write());
                }
                if (this.invoice !== undefined) {
                    b.write(this.invoice.write());
                }
                if (this.info !== undefined) {
                    b.write(this.info.write());
                }
                if (this.shipping !== undefined) {
                    b.write(this.shipping.write());
                }
                if (this.tipAmount !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.tipAmount));
                }
                if (this.currency !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.currency));
                }
                if (this.totalAmount !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.totalAmount));
                }
                if (this.credentialsTitle !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.credentialsTitle));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        payments.PaymentReceipt = PaymentReceipt;
        class PaymentReceiptStars extends index_js_1.TLObject {
            date;
            botId;
            title;
            description;
            photo;
            invoice;
            currency;
            totalAmount;
            transactionId;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'payments.PaymentReceiptStars';
                this.constructorId = 0xdabbf83a;
                this.subclassOfId = 0x590093c9;
                this._slots = [
                    'date',
                    'botId',
                    'title',
                    'description',
                    'photo',
                    'invoice',
                    'currency',
                    'totalAmount',
                    'transactionId',
                    'users',
                ];
                this.date = params.date;
                this.botId = params.botId;
                this.title = params.title;
                this.description = params.description;
                this.photo = params.photo;
                this.invoice = params.invoice;
                this.currency = params.currency;
                this.totalAmount = params.totalAmount;
                this.transactionId = params.transactionId;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let date = await index_js_1.Primitive.Int.read(_data);
                let botId = await index_js_1.Primitive.Long.read(_data);
                let title = await index_js_1.Primitive.String.read(_data);
                let description = await index_js_1.Primitive.String.read(_data);
                let photo = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
                let invoice = await index_js_1.TLObject.read(_data);
                let currency = await index_js_1.Primitive.String.read(_data);
                let totalAmount = await index_js_1.Primitive.Long.read(_data);
                let transactionId = await index_js_1.Primitive.String.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.payments.PaymentReceiptStars({
                    date: date,
                    botId: botId,
                    title: title,
                    description: description,
                    photo: photo,
                    invoice: invoice,
                    currency: currency,
                    totalAmount: totalAmount,
                    transactionId: transactionId,
                    users: users,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.photo !== undefined ? 1 << 2 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.date !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.date));
                }
                if (this.botId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.botId));
                }
                if (this.title !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.title));
                }
                if (this.description !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.description));
                }
                if (this.photo !== undefined) {
                    b.write(this.photo.write());
                }
                if (this.invoice !== undefined) {
                    b.write(this.invoice.write());
                }
                if (this.currency !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.currency));
                }
                if (this.totalAmount !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.totalAmount));
                }
                if (this.transactionId !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.transactionId));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        payments.PaymentReceiptStars = PaymentReceiptStars;
        class SavedInfo extends index_js_1.TLObject {
            hasSavedCredentials;
            savedInfo;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'payments.SavedInfo';
                this.constructorId = 0xfb8fe43c;
                this.subclassOfId = 0xad3cf146;
                this._slots = ['hasSavedCredentials', 'savedInfo'];
                this.hasSavedCredentials = params.hasSavedCredentials;
                this.savedInfo = params.savedInfo;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let hasSavedCredentials = flags & (1 << 1) ? true : false;
                let savedInfo = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
                return new Raw.payments.SavedInfo({
                    hasSavedCredentials: hasSavedCredentials,
                    savedInfo: savedInfo,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.hasSavedCredentials ? 1 << 1 : 0;
                flags |= this.savedInfo !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.savedInfo !== undefined) {
                    b.write(this.savedInfo.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        payments.SavedInfo = SavedInfo;
        class BankCardData extends index_js_1.TLObject {
            title;
            openUrls;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'payments.BankCardData';
                this.constructorId = 0x3e24e573;
                this.subclassOfId = 0x8c6dd68b;
                this._slots = ['title', 'openUrls'];
                this.title = params.title;
                this.openUrls = params.openUrls;
            }
            static async read(_data, ..._args) {
                let title = await index_js_1.Primitive.String.read(_data);
                let openUrls = await index_js_1.TLObject.read(_data);
                return new Raw.payments.BankCardData({ title: title, openUrls: openUrls });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.title !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.title));
                }
                if (this.openUrls) {
                    b.write(index_js_1.Primitive.Vector.write(this.openUrls));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        payments.BankCardData = BankCardData;
        class ExportedInvoice extends index_js_1.TLObject {
            url;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'payments.ExportedInvoice';
                this.constructorId = 0xaed0cbd9;
                this.subclassOfId = 0x36105432;
                this._slots = ['url'];
                this.url = params.url;
            }
            static async read(_data, ..._args) {
                let url = await index_js_1.Primitive.String.read(_data);
                return new Raw.payments.ExportedInvoice({ url: url });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.url !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.url));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        payments.ExportedInvoice = ExportedInvoice;
        class CheckedGiftCode extends index_js_1.TLObject {
            viaGiveaway;
            fromId;
            giveawayMsgId;
            toId;
            date;
            months;
            usedDate;
            chats;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'payments.CheckedGiftCode';
                this.constructorId = 0x284a1096;
                this.subclassOfId = 0x5b2997e8;
                this._slots = [
                    'viaGiveaway',
                    'fromId',
                    'giveawayMsgId',
                    'toId',
                    'date',
                    'months',
                    'usedDate',
                    'chats',
                    'users',
                ];
                this.viaGiveaway = params.viaGiveaway;
                this.fromId = params.fromId;
                this.giveawayMsgId = params.giveawayMsgId;
                this.toId = params.toId;
                this.date = params.date;
                this.months = params.months;
                this.usedDate = params.usedDate;
                this.chats = params.chats;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let viaGiveaway = flags & (1 << 2) ? true : false;
                let fromId = flags & (1 << 4) ? await index_js_1.TLObject.read(_data) : undefined;
                let giveawayMsgId = flags & (1 << 3) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let toId = flags & (1 << 0) ? await index_js_1.Primitive.Long.read(_data) : undefined;
                let date = await index_js_1.Primitive.Int.read(_data);
                let months = await index_js_1.Primitive.Int.read(_data);
                let usedDate = flags & (1 << 1) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.payments.CheckedGiftCode({
                    viaGiveaway: viaGiveaway,
                    fromId: fromId,
                    giveawayMsgId: giveawayMsgId,
                    toId: toId,
                    date: date,
                    months: months,
                    usedDate: usedDate,
                    chats: chats,
                    users: users,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.viaGiveaway ? 1 << 2 : 0;
                flags |= this.fromId !== undefined ? 1 << 4 : 0;
                flags |= this.giveawayMsgId !== undefined ? 1 << 3 : 0;
                flags |= this.toId !== undefined ? 1 << 0 : 0;
                flags |= this.usedDate !== undefined ? 1 << 1 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.fromId !== undefined) {
                    b.write(this.fromId.write());
                }
                if (this.giveawayMsgId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.giveawayMsgId));
                }
                if (this.toId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.toId));
                }
                if (this.date !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.date));
                }
                if (this.months !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.months));
                }
                if (this.usedDate !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.usedDate));
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        payments.CheckedGiftCode = CheckedGiftCode;
        class GiveawayInfo extends index_js_1.TLObject {
            participating;
            preparingResults;
            startDate;
            joinedTooEarlyDate;
            adminDisallowedChatId;
            disallowedCountry;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'payments.GiveawayInfo';
                this.constructorId = 0x4367daa0;
                this.subclassOfId = 0x96a377bd;
                this._slots = [
                    'participating',
                    'preparingResults',
                    'startDate',
                    'joinedTooEarlyDate',
                    'adminDisallowedChatId',
                    'disallowedCountry',
                ];
                this.participating = params.participating;
                this.preparingResults = params.preparingResults;
                this.startDate = params.startDate;
                this.joinedTooEarlyDate = params.joinedTooEarlyDate;
                this.adminDisallowedChatId = params.adminDisallowedChatId;
                this.disallowedCountry = params.disallowedCountry;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let participating = flags & (1 << 0) ? true : false;
                let preparingResults = flags & (1 << 3) ? true : false;
                let startDate = await index_js_1.Primitive.Int.read(_data);
                let joinedTooEarlyDate = flags & (1 << 1) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let adminDisallowedChatId = flags & (1 << 2) ? await index_js_1.Primitive.Long.read(_data) : undefined;
                let disallowedCountry = flags & (1 << 4) ? await index_js_1.Primitive.String.read(_data) : undefined;
                return new Raw.payments.GiveawayInfo({
                    participating: participating,
                    preparingResults: preparingResults,
                    startDate: startDate,
                    joinedTooEarlyDate: joinedTooEarlyDate,
                    adminDisallowedChatId: adminDisallowedChatId,
                    disallowedCountry: disallowedCountry,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.participating ? 1 << 0 : 0;
                flags |= this.preparingResults ? 1 << 3 : 0;
                flags |= this.joinedTooEarlyDate !== undefined ? 1 << 1 : 0;
                flags |= this.adminDisallowedChatId !== undefined ? 1 << 2 : 0;
                flags |= this.disallowedCountry !== undefined ? 1 << 4 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.startDate !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.startDate));
                }
                if (this.joinedTooEarlyDate !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.joinedTooEarlyDate));
                }
                if (this.adminDisallowedChatId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.adminDisallowedChatId));
                }
                if (this.disallowedCountry !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.disallowedCountry));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        payments.GiveawayInfo = GiveawayInfo;
        class GiveawayInfoResults extends index_js_1.TLObject {
            winner;
            refunded;
            startDate;
            giftCodeSlug;
            finishDate;
            winnersCount;
            activatedCount;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'payments.GiveawayInfoResults';
                this.constructorId = 0xcd5570;
                this.subclassOfId = 0x96a377bd;
                this._slots = [
                    'winner',
                    'refunded',
                    'startDate',
                    'giftCodeSlug',
                    'finishDate',
                    'winnersCount',
                    'activatedCount',
                ];
                this.winner = params.winner;
                this.refunded = params.refunded;
                this.startDate = params.startDate;
                this.giftCodeSlug = params.giftCodeSlug;
                this.finishDate = params.finishDate;
                this.winnersCount = params.winnersCount;
                this.activatedCount = params.activatedCount;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let winner = flags & (1 << 0) ? true : false;
                let refunded = flags & (1 << 1) ? true : false;
                let startDate = await index_js_1.Primitive.Int.read(_data);
                let giftCodeSlug = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let finishDate = await index_js_1.Primitive.Int.read(_data);
                let winnersCount = await index_js_1.Primitive.Int.read(_data);
                let activatedCount = await index_js_1.Primitive.Int.read(_data);
                return new Raw.payments.GiveawayInfoResults({
                    winner: winner,
                    refunded: refunded,
                    startDate: startDate,
                    giftCodeSlug: giftCodeSlug,
                    finishDate: finishDate,
                    winnersCount: winnersCount,
                    activatedCount: activatedCount,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.winner ? 1 << 0 : 0;
                flags |= this.refunded ? 1 << 1 : 0;
                flags |= this.giftCodeSlug !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.startDate !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.startDate));
                }
                if (this.giftCodeSlug !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.giftCodeSlug));
                }
                if (this.finishDate !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.finishDate));
                }
                if (this.winnersCount !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.winnersCount));
                }
                if (this.activatedCount !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.activatedCount));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        payments.GiveawayInfoResults = GiveawayInfoResults;
        class StarsStatus extends index_js_1.TLObject {
            balance;
            history;
            nextOffset;
            chats;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'payments.StarsStatus';
                this.constructorId = 0x8cf4ee60;
                this.subclassOfId = 0x6e9c1d6f;
                this._slots = ['balance', 'history', 'nextOffset', 'chats', 'users'];
                this.balance = params.balance;
                this.history = params.history;
                this.nextOffset = params.nextOffset;
                this.chats = params.chats;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let balance = await index_js_1.Primitive.Long.read(_data);
                let history = await index_js_1.TLObject.read(_data);
                let nextOffset = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.payments.StarsStatus({
                    balance: balance,
                    history: history,
                    nextOffset: nextOffset,
                    chats: chats,
                    users: users,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.nextOffset !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.balance !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.balance));
                }
                if (this.history) {
                    b.write(index_js_1.Primitive.Vector.write(this.history));
                }
                if (this.nextOffset !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.nextOffset));
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        payments.StarsStatus = StarsStatus;
        class GetPaymentForm extends index_js_1.TLObject {
            __response__;
            invoice;
            themeParams;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'payments.GetPaymentForm';
                this.constructorId = 0x37148dbb;
                this.subclassOfId = 0xa0483f19;
                this._slots = ['invoice', 'themeParams'];
                this.invoice = params.invoice;
                this.themeParams = params.themeParams;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let invoice = await index_js_1.TLObject.read(_data);
                let themeParams = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
                return new Raw.payments.GetPaymentForm({ invoice: invoice, themeParams: themeParams });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.themeParams !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.invoice !== undefined) {
                    b.write(this.invoice.write());
                }
                if (this.themeParams !== undefined) {
                    b.write(this.themeParams.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        payments.GetPaymentForm = GetPaymentForm;
        class GetPaymentReceipt extends index_js_1.TLObject {
            __response__;
            peer;
            msgId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'payments.GetPaymentReceipt';
                this.constructorId = 0x2478d1cc;
                this.subclassOfId = 0x590093c9;
                this._slots = ['peer', 'msgId'];
                this.peer = params.peer;
                this.msgId = params.msgId;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let msgId = await index_js_1.Primitive.Int.read(_data);
                return new Raw.payments.GetPaymentReceipt({ peer: peer, msgId: msgId });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.msgId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.msgId));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        payments.GetPaymentReceipt = GetPaymentReceipt;
        class ValidateRequestedInfo extends index_js_1.TLObject {
            __response__;
            save;
            invoice;
            info;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'payments.ValidateRequestedInfo';
                this.constructorId = 0xb6c8f12b;
                this.subclassOfId = 0x8f8044b7;
                this._slots = ['save', 'invoice', 'info'];
                this.save = params.save;
                this.invoice = params.invoice;
                this.info = params.info;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let save = flags & (1 << 0) ? true : false;
                let invoice = await index_js_1.TLObject.read(_data);
                let info = await index_js_1.TLObject.read(_data);
                return new Raw.payments.ValidateRequestedInfo({ save: save, invoice: invoice, info: info });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.save ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.invoice !== undefined) {
                    b.write(this.invoice.write());
                }
                if (this.info !== undefined) {
                    b.write(this.info.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        payments.ValidateRequestedInfo = ValidateRequestedInfo;
        class SendPaymentForm extends index_js_1.TLObject {
            __response__;
            formId;
            invoice;
            requestedInfoId;
            shippingOptionId;
            credentials;
            tipAmount;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'payments.SendPaymentForm';
                this.constructorId = 0x2d03522f;
                this.subclassOfId = 0x8ae16a9d;
                this._slots = [
                    'formId',
                    'invoice',
                    'requestedInfoId',
                    'shippingOptionId',
                    'credentials',
                    'tipAmount',
                ];
                this.formId = params.formId;
                this.invoice = params.invoice;
                this.requestedInfoId = params.requestedInfoId;
                this.shippingOptionId = params.shippingOptionId;
                this.credentials = params.credentials;
                this.tipAmount = params.tipAmount;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let formId = await index_js_1.Primitive.Long.read(_data);
                let invoice = await index_js_1.TLObject.read(_data);
                let requestedInfoId = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let shippingOptionId = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let credentials = await index_js_1.TLObject.read(_data);
                let tipAmount = flags & (1 << 2) ? await index_js_1.Primitive.Long.read(_data) : undefined;
                return new Raw.payments.SendPaymentForm({
                    formId: formId,
                    invoice: invoice,
                    requestedInfoId: requestedInfoId,
                    shippingOptionId: shippingOptionId,
                    credentials: credentials,
                    tipAmount: tipAmount,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.requestedInfoId !== undefined ? 1 << 0 : 0;
                flags |= this.shippingOptionId !== undefined ? 1 << 1 : 0;
                flags |= this.tipAmount !== undefined ? 1 << 2 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.formId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.formId));
                }
                if (this.invoice !== undefined) {
                    b.write(this.invoice.write());
                }
                if (this.requestedInfoId !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.requestedInfoId));
                }
                if (this.shippingOptionId !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.shippingOptionId));
                }
                if (this.credentials !== undefined) {
                    b.write(this.credentials.write());
                }
                if (this.tipAmount !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.tipAmount));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        payments.SendPaymentForm = SendPaymentForm;
        class GetSavedInfo extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'payments.GetSavedInfo';
                this.constructorId = 0x227d824b;
                this.subclassOfId = 0xad3cf146;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.payments.GetSavedInfo();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        payments.GetSavedInfo = GetSavedInfo;
        class ClearSavedInfo extends index_js_1.TLObject {
            __response__;
            credentials;
            info;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'payments.ClearSavedInfo';
                this.constructorId = 0xd83d70c1;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['credentials', 'info'];
                this.credentials = params.credentials;
                this.info = params.info;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let credentials = flags & (1 << 0) ? true : false;
                let info = flags & (1 << 1) ? true : false;
                return new Raw.payments.ClearSavedInfo({ credentials: credentials, info: info });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.credentials ? 1 << 0 : 0;
                flags |= this.info ? 1 << 1 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        payments.ClearSavedInfo = ClearSavedInfo;
        class GetBankCardData extends index_js_1.TLObject {
            __response__;
            number;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'payments.GetBankCardData';
                this.constructorId = 0x2e79d779;
                this.subclassOfId = 0x8c6dd68b;
                this._slots = ['number'];
                this.number = params.number;
            }
            static async read(_data, ..._args) {
                let number = await index_js_1.Primitive.String.read(_data);
                return new Raw.payments.GetBankCardData({ number: number });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.number !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.number));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        payments.GetBankCardData = GetBankCardData;
        class ExportInvoice extends index_js_1.TLObject {
            __response__;
            invoiceMedia;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'payments.ExportInvoice';
                this.constructorId = 0xf91b065;
                this.subclassOfId = 0x36105432;
                this._slots = ['invoiceMedia'];
                this.invoiceMedia = params.invoiceMedia;
            }
            static async read(_data, ..._args) {
                let invoiceMedia = await index_js_1.TLObject.read(_data);
                return new Raw.payments.ExportInvoice({ invoiceMedia: invoiceMedia });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.invoiceMedia !== undefined) {
                    b.write(this.invoiceMedia.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        payments.ExportInvoice = ExportInvoice;
        class AssignAppStoreTransaction extends index_js_1.TLObject {
            __response__;
            receipt;
            purpose;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'payments.AssignAppStoreTransaction';
                this.constructorId = 0x80ed747d;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['receipt', 'purpose'];
                this.receipt = params.receipt;
                this.purpose = params.purpose;
            }
            static async read(_data, ..._args) {
                let receipt = await index_js_1.Primitive.Bytes.read(_data);
                let purpose = await index_js_1.TLObject.read(_data);
                return new Raw.payments.AssignAppStoreTransaction({ receipt: receipt, purpose: purpose });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.receipt !== undefined) {
                    b.write(index_js_1.Primitive.Bytes.write(this.receipt));
                }
                if (this.purpose !== undefined) {
                    b.write(this.purpose.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        payments.AssignAppStoreTransaction = AssignAppStoreTransaction;
        class AssignPlayMarketTransaction extends index_js_1.TLObject {
            __response__;
            receipt;
            purpose;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'payments.AssignPlayMarketTransaction';
                this.constructorId = 0xdffd50d3;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['receipt', 'purpose'];
                this.receipt = params.receipt;
                this.purpose = params.purpose;
            }
            static async read(_data, ..._args) {
                let receipt = await index_js_1.TLObject.read(_data);
                let purpose = await index_js_1.TLObject.read(_data);
                return new Raw.payments.AssignPlayMarketTransaction({ receipt: receipt, purpose: purpose });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.receipt !== undefined) {
                    b.write(this.receipt.write());
                }
                if (this.purpose !== undefined) {
                    b.write(this.purpose.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        payments.AssignPlayMarketTransaction = AssignPlayMarketTransaction;
        class CanPurchasePremium extends index_js_1.TLObject {
            __response__;
            purpose;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'payments.CanPurchasePremium';
                this.constructorId = 0x9fc19eb6;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['purpose'];
                this.purpose = params.purpose;
            }
            static async read(_data, ..._args) {
                let purpose = await index_js_1.TLObject.read(_data);
                return new Raw.payments.CanPurchasePremium({ purpose: purpose });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.purpose !== undefined) {
                    b.write(this.purpose.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        payments.CanPurchasePremium = CanPurchasePremium;
        class GetPremiumGiftCodeOptions extends index_js_1.TLObject {
            __response__;
            boostPeer;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'payments.GetPremiumGiftCodeOptions';
                this.constructorId = 0x2757ba54;
                this.subclassOfId = 0xaa92583;
                this._slots = ['boostPeer'];
                this.boostPeer = params.boostPeer;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let boostPeer = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
                return new Raw.payments.GetPremiumGiftCodeOptions({ boostPeer: boostPeer });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.boostPeer !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.boostPeer !== undefined) {
                    b.write(this.boostPeer.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        payments.GetPremiumGiftCodeOptions = GetPremiumGiftCodeOptions;
        class CheckGiftCode extends index_js_1.TLObject {
            __response__;
            slug;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'payments.CheckGiftCode';
                this.constructorId = 0x8e51b4c1;
                this.subclassOfId = 0x5b2997e8;
                this._slots = ['slug'];
                this.slug = params.slug;
            }
            static async read(_data, ..._args) {
                let slug = await index_js_1.Primitive.String.read(_data);
                return new Raw.payments.CheckGiftCode({ slug: slug });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.slug !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.slug));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        payments.CheckGiftCode = CheckGiftCode;
        class ApplyGiftCode extends index_js_1.TLObject {
            __response__;
            slug;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'payments.ApplyGiftCode';
                this.constructorId = 0xf6e26854;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['slug'];
                this.slug = params.slug;
            }
            static async read(_data, ..._args) {
                let slug = await index_js_1.Primitive.String.read(_data);
                return new Raw.payments.ApplyGiftCode({ slug: slug });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.slug !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.slug));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        payments.ApplyGiftCode = ApplyGiftCode;
        class GetGiveawayInfo extends index_js_1.TLObject {
            __response__;
            peer;
            msgId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'payments.GetGiveawayInfo';
                this.constructorId = 0xf4239425;
                this.subclassOfId = 0x96a377bd;
                this._slots = ['peer', 'msgId'];
                this.peer = params.peer;
                this.msgId = params.msgId;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let msgId = await index_js_1.Primitive.Int.read(_data);
                return new Raw.payments.GetGiveawayInfo({ peer: peer, msgId: msgId });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.msgId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.msgId));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        payments.GetGiveawayInfo = GetGiveawayInfo;
        class LaunchPrepaidGiveaway extends index_js_1.TLObject {
            __response__;
            peer;
            giveawayId;
            purpose;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'payments.LaunchPrepaidGiveaway';
                this.constructorId = 0x5ff58f20;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['peer', 'giveawayId', 'purpose'];
                this.peer = params.peer;
                this.giveawayId = params.giveawayId;
                this.purpose = params.purpose;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let giveawayId = await index_js_1.Primitive.Long.read(_data);
                let purpose = await index_js_1.TLObject.read(_data);
                return new Raw.payments.LaunchPrepaidGiveaway({
                    peer: peer,
                    giveawayId: giveawayId,
                    purpose: purpose,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.giveawayId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.giveawayId));
                }
                if (this.purpose !== undefined) {
                    b.write(this.purpose.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        payments.LaunchPrepaidGiveaway = LaunchPrepaidGiveaway;
        class GetStarsTopupOptions extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'payments.GetStarsTopupOptions';
                this.constructorId = 0xc00ec7d3;
                this.subclassOfId = 0xd4fe8a99;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.payments.GetStarsTopupOptions();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        payments.GetStarsTopupOptions = GetStarsTopupOptions;
        class GetStarsStatus extends index_js_1.TLObject {
            __response__;
            peer;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'payments.GetStarsStatus';
                this.constructorId = 0x104fcfa7;
                this.subclassOfId = 0x6e9c1d6f;
                this._slots = ['peer'];
                this.peer = params.peer;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                return new Raw.payments.GetStarsStatus({ peer: peer });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        payments.GetStarsStatus = GetStarsStatus;
        class GetStarsTransactions extends index_js_1.TLObject {
            __response__;
            inbound;
            outbound;
            peer;
            offset;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'payments.GetStarsTransactions';
                this.constructorId = 0x673ac2f9;
                this.subclassOfId = 0x6e9c1d6f;
                this._slots = ['inbound', 'outbound', 'peer', 'offset'];
                this.inbound = params.inbound;
                this.outbound = params.outbound;
                this.peer = params.peer;
                this.offset = params.offset;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let inbound = flags & (1 << 0) ? true : false;
                let outbound = flags & (1 << 1) ? true : false;
                let peer = await index_js_1.TLObject.read(_data);
                let offset = await index_js_1.Primitive.String.read(_data);
                return new Raw.payments.GetStarsTransactions({
                    inbound: inbound,
                    outbound: outbound,
                    peer: peer,
                    offset: offset,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.inbound ? 1 << 0 : 0;
                flags |= this.outbound ? 1 << 1 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.offset !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.offset));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        payments.GetStarsTransactions = GetStarsTransactions;
        class SendStarsForm extends index_js_1.TLObject {
            __response__;
            formId;
            invoice;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'payments.SendStarsForm';
                this.constructorId = 0x2bb731d;
                this.subclassOfId = 0x8ae16a9d;
                this._slots = ['formId', 'invoice'];
                this.formId = params.formId;
                this.invoice = params.invoice;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let formId = await index_js_1.Primitive.Long.read(_data);
                let invoice = await index_js_1.TLObject.read(_data);
                return new Raw.payments.SendStarsForm({ formId: formId, invoice: invoice });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.formId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.formId));
                }
                if (this.invoice !== undefined) {
                    b.write(this.invoice.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        payments.SendStarsForm = SendStarsForm;
        class RefundStarsCharge extends index_js_1.TLObject {
            __response__;
            userId;
            chargeId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'payments.RefundStarsCharge';
                this.constructorId = 0x25ae8f4a;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['userId', 'chargeId'];
                this.userId = params.userId;
                this.chargeId = params.chargeId;
            }
            static async read(_data, ..._args) {
                let userId = await index_js_1.TLObject.read(_data);
                let chargeId = await index_js_1.Primitive.String.read(_data);
                return new Raw.payments.RefundStarsCharge({ userId: userId, chargeId: chargeId });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.userId !== undefined) {
                    b.write(this.userId.write());
                }
                if (this.chargeId !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.chargeId));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        payments.RefundStarsCharge = RefundStarsCharge;
    })(payments = Raw.payments || (Raw.payments = {}));
    let phone;
    (function (phone) {
        class PhoneCall extends index_js_1.TLObject {
            phoneCall;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'phone.PhoneCall';
                this.constructorId = 0xec82e140;
                this.subclassOfId = 0xd48afe4f;
                this._slots = ['phoneCall', 'users'];
                this.phoneCall = params.phoneCall;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let phoneCall = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.phone.PhoneCall({ phoneCall: phoneCall, users: users });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.phoneCall !== undefined) {
                    b.write(this.phoneCall.write());
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        phone.PhoneCall = PhoneCall;
        class GroupCall extends index_js_1.TLObject {
            call;
            participants;
            participantsNextOffset;
            chats;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'phone.GroupCall';
                this.constructorId = 0x9e727aad;
                this.subclassOfId = 0x304116be;
                this._slots = ['call', 'participants', 'participantsNextOffset', 'chats', 'users'];
                this.call = params.call;
                this.participants = params.participants;
                this.participantsNextOffset = params.participantsNextOffset;
                this.chats = params.chats;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let call = await index_js_1.TLObject.read(_data);
                let participants = await index_js_1.TLObject.read(_data);
                let participantsNextOffset = await index_js_1.Primitive.String.read(_data);
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.phone.GroupCall({
                    call: call,
                    participants: participants,
                    participantsNextOffset: participantsNextOffset,
                    chats: chats,
                    users: users,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.call !== undefined) {
                    b.write(this.call.write());
                }
                if (this.participants) {
                    b.write(index_js_1.Primitive.Vector.write(this.participants));
                }
                if (this.participantsNextOffset !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.participantsNextOffset));
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        phone.GroupCall = GroupCall;
        class GroupParticipants extends index_js_1.TLObject {
            count;
            participants;
            nextOffset;
            chats;
            users;
            version;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'phone.GroupParticipants';
                this.constructorId = 0xf47751b6;
                this.subclassOfId = 0x72d304f4;
                this._slots = ['count', 'participants', 'nextOffset', 'chats', 'users', 'version'];
                this.count = params.count;
                this.participants = params.participants;
                this.nextOffset = params.nextOffset;
                this.chats = params.chats;
                this.users = params.users;
                this.version = params.version;
            }
            static async read(_data, ..._args) {
                let count = await index_js_1.Primitive.Int.read(_data);
                let participants = await index_js_1.TLObject.read(_data);
                let nextOffset = await index_js_1.Primitive.String.read(_data);
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                let version = await index_js_1.Primitive.Int.read(_data);
                return new Raw.phone.GroupParticipants({
                    count: count,
                    participants: participants,
                    nextOffset: nextOffset,
                    chats: chats,
                    users: users,
                    version: version,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.count !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.count));
                }
                if (this.participants) {
                    b.write(index_js_1.Primitive.Vector.write(this.participants));
                }
                if (this.nextOffset !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.nextOffset));
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                if (this.version !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.version));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        phone.GroupParticipants = GroupParticipants;
        class JoinAsPeers extends index_js_1.TLObject {
            peers;
            chats;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'phone.JoinAsPeers';
                this.constructorId = 0xafe5623f;
                this.subclassOfId = 0xb4b770fb;
                this._slots = ['peers', 'chats', 'users'];
                this.peers = params.peers;
                this.chats = params.chats;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let peers = await index_js_1.TLObject.read(_data);
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.phone.JoinAsPeers({ peers: peers, chats: chats, users: users });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peers) {
                    b.write(index_js_1.Primitive.Vector.write(this.peers));
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        phone.JoinAsPeers = JoinAsPeers;
        class ExportedGroupCallInvite extends index_js_1.TLObject {
            link;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'phone.ExportedGroupCallInvite';
                this.constructorId = 0x204bd158;
                this.subclassOfId = 0x3b3bfe8f;
                this._slots = ['link'];
                this.link = params.link;
            }
            static async read(_data, ..._args) {
                let link = await index_js_1.Primitive.String.read(_data);
                return new Raw.phone.ExportedGroupCallInvite({ link: link });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.link !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.link));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        phone.ExportedGroupCallInvite = ExportedGroupCallInvite;
        class GroupCallStreamChannels extends index_js_1.TLObject {
            channels;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'phone.GroupCallStreamChannels';
                this.constructorId = 0xd0e482b2;
                this.subclassOfId = 0x9157c5e4;
                this._slots = ['channels'];
                this.channels = params.channels;
            }
            static async read(_data, ..._args) {
                let channels = await index_js_1.TLObject.read(_data);
                return new Raw.phone.GroupCallStreamChannels({ channels: channels });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channels) {
                    b.write(index_js_1.Primitive.Vector.write(this.channels));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        phone.GroupCallStreamChannels = GroupCallStreamChannels;
        class GroupCallStreamRtmpUrl extends index_js_1.TLObject {
            url;
            key;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'phone.GroupCallStreamRtmpUrl';
                this.constructorId = 0x2dbf3432;
                this.subclassOfId = 0xd1f515cb;
                this._slots = ['url', 'key'];
                this.url = params.url;
                this.key = params.key;
            }
            static async read(_data, ..._args) {
                let url = await index_js_1.Primitive.String.read(_data);
                let key = await index_js_1.Primitive.String.read(_data);
                return new Raw.phone.GroupCallStreamRtmpUrl({ url: url, key: key });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.url !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.url));
                }
                if (this.key !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.key));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        phone.GroupCallStreamRtmpUrl = GroupCallStreamRtmpUrl;
        class GetCallConfig extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'phone.GetCallConfig';
                this.constructorId = 0x55451fa9;
                this.subclassOfId = 0xad0352e8;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.phone.GetCallConfig();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        phone.GetCallConfig = GetCallConfig;
        class RequestCall extends index_js_1.TLObject {
            __response__;
            video;
            userId;
            randomId;
            gAHash;
            protocol;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'phone.RequestCall';
                this.constructorId = 0x42ff96ed;
                this.subclassOfId = 0xd48afe4f;
                this._slots = ['video', 'userId', 'randomId', 'gAHash', 'protocol'];
                this.video = params.video;
                this.userId = params.userId;
                this.randomId = params.randomId;
                this.gAHash = params.gAHash;
                this.protocol = params.protocol;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let video = flags & (1 << 0) ? true : false;
                let userId = await index_js_1.TLObject.read(_data);
                let randomId = await index_js_1.Primitive.Int.read(_data);
                let gAHash = await index_js_1.Primitive.Bytes.read(_data);
                let protocol = await index_js_1.TLObject.read(_data);
                return new Raw.phone.RequestCall({
                    video: video,
                    userId: userId,
                    randomId: randomId,
                    gAHash: gAHash,
                    protocol: protocol,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.video ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.userId !== undefined) {
                    b.write(this.userId.write());
                }
                if (this.randomId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.randomId));
                }
                if (this.gAHash !== undefined) {
                    b.write(index_js_1.Primitive.Bytes.write(this.gAHash));
                }
                if (this.protocol !== undefined) {
                    b.write(this.protocol.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        phone.RequestCall = RequestCall;
        class AcceptCall extends index_js_1.TLObject {
            __response__;
            peer;
            gB;
            protocol;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'phone.AcceptCall';
                this.constructorId = 0x3bd2b4a0;
                this.subclassOfId = 0xd48afe4f;
                this._slots = ['peer', 'gB', 'protocol'];
                this.peer = params.peer;
                this.gB = params.gB;
                this.protocol = params.protocol;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let gB = await index_js_1.Primitive.Bytes.read(_data);
                let protocol = await index_js_1.TLObject.read(_data);
                return new Raw.phone.AcceptCall({ peer: peer, gB: gB, protocol: protocol });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.gB !== undefined) {
                    b.write(index_js_1.Primitive.Bytes.write(this.gB));
                }
                if (this.protocol !== undefined) {
                    b.write(this.protocol.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        phone.AcceptCall = AcceptCall;
        class ConfirmCall extends index_js_1.TLObject {
            __response__;
            peer;
            gA;
            keyFingerprint;
            protocol;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'phone.ConfirmCall';
                this.constructorId = 0x2efe1722;
                this.subclassOfId = 0xd48afe4f;
                this._slots = ['peer', 'gA', 'keyFingerprint', 'protocol'];
                this.peer = params.peer;
                this.gA = params.gA;
                this.keyFingerprint = params.keyFingerprint;
                this.protocol = params.protocol;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let gA = await index_js_1.Primitive.Bytes.read(_data);
                let keyFingerprint = await index_js_1.Primitive.Long.read(_data);
                let protocol = await index_js_1.TLObject.read(_data);
                return new Raw.phone.ConfirmCall({
                    peer: peer,
                    gA: gA,
                    keyFingerprint: keyFingerprint,
                    protocol: protocol,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.gA !== undefined) {
                    b.write(index_js_1.Primitive.Bytes.write(this.gA));
                }
                if (this.keyFingerprint !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.keyFingerprint));
                }
                if (this.protocol !== undefined) {
                    b.write(this.protocol.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        phone.ConfirmCall = ConfirmCall;
        class ReceivedCall extends index_js_1.TLObject {
            __response__;
            peer;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'phone.ReceivedCall';
                this.constructorId = 0x17d54f61;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['peer'];
                this.peer = params.peer;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                return new Raw.phone.ReceivedCall({ peer: peer });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        phone.ReceivedCall = ReceivedCall;
        class DiscardCall extends index_js_1.TLObject {
            __response__;
            video;
            peer;
            duration;
            reason;
            connectionId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'phone.DiscardCall';
                this.constructorId = 0xb2cbc1c0;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['video', 'peer', 'duration', 'reason', 'connectionId'];
                this.video = params.video;
                this.peer = params.peer;
                this.duration = params.duration;
                this.reason = params.reason;
                this.connectionId = params.connectionId;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let video = flags & (1 << 0) ? true : false;
                let peer = await index_js_1.TLObject.read(_data);
                let duration = await index_js_1.Primitive.Int.read(_data);
                let reason = await index_js_1.TLObject.read(_data);
                let connectionId = await index_js_1.Primitive.Long.read(_data);
                return new Raw.phone.DiscardCall({
                    video: video,
                    peer: peer,
                    duration: duration,
                    reason: reason,
                    connectionId: connectionId,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.video ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.duration !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.duration));
                }
                if (this.reason !== undefined) {
                    b.write(this.reason.write());
                }
                if (this.connectionId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.connectionId));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        phone.DiscardCall = DiscardCall;
        class SetCallRating extends index_js_1.TLObject {
            __response__;
            userInitiative;
            peer;
            rating;
            comment;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'phone.SetCallRating';
                this.constructorId = 0x59ead627;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['userInitiative', 'peer', 'rating', 'comment'];
                this.userInitiative = params.userInitiative;
                this.peer = params.peer;
                this.rating = params.rating;
                this.comment = params.comment;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let userInitiative = flags & (1 << 0) ? true : false;
                let peer = await index_js_1.TLObject.read(_data);
                let rating = await index_js_1.Primitive.Int.read(_data);
                let comment = await index_js_1.Primitive.String.read(_data);
                return new Raw.phone.SetCallRating({
                    userInitiative: userInitiative,
                    peer: peer,
                    rating: rating,
                    comment: comment,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.userInitiative ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.rating !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.rating));
                }
                if (this.comment !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.comment));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        phone.SetCallRating = SetCallRating;
        class SaveCallDebug extends index_js_1.TLObject {
            __response__;
            peer;
            debug;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'phone.SaveCallDebug';
                this.constructorId = 0x277add7e;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['peer', 'debug'];
                this.peer = params.peer;
                this.debug = params.debug;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let debug = await index_js_1.TLObject.read(_data);
                return new Raw.phone.SaveCallDebug({ peer: peer, debug: debug });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.debug !== undefined) {
                    b.write(this.debug.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        phone.SaveCallDebug = SaveCallDebug;
        class SendSignalingData extends index_js_1.TLObject {
            __response__;
            peer;
            data;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'phone.SendSignalingData';
                this.constructorId = 0xff7a9383;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['peer', 'data'];
                this.peer = params.peer;
                this.data = params.data;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let data = await index_js_1.Primitive.Bytes.read(_data);
                return new Raw.phone.SendSignalingData({ peer: peer, data: data });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.data !== undefined) {
                    b.write(index_js_1.Primitive.Bytes.write(this.data));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        phone.SendSignalingData = SendSignalingData;
        class CreateGroupCall extends index_js_1.TLObject {
            __response__;
            rtmpStream;
            peer;
            randomId;
            title;
            scheduleDate;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'phone.CreateGroupCall';
                this.constructorId = 0x48cdc6d8;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['rtmpStream', 'peer', 'randomId', 'title', 'scheduleDate'];
                this.rtmpStream = params.rtmpStream;
                this.peer = params.peer;
                this.randomId = params.randomId;
                this.title = params.title;
                this.scheduleDate = params.scheduleDate;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let rtmpStream = flags & (1 << 2) ? true : false;
                let peer = await index_js_1.TLObject.read(_data);
                let randomId = await index_js_1.Primitive.Int.read(_data);
                let title = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let scheduleDate = flags & (1 << 1) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                return new Raw.phone.CreateGroupCall({
                    rtmpStream: rtmpStream,
                    peer: peer,
                    randomId: randomId,
                    title: title,
                    scheduleDate: scheduleDate,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.rtmpStream ? 1 << 2 : 0;
                flags |= this.title !== undefined ? 1 << 0 : 0;
                flags |= this.scheduleDate !== undefined ? 1 << 1 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.randomId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.randomId));
                }
                if (this.title !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.title));
                }
                if (this.scheduleDate !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.scheduleDate));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        phone.CreateGroupCall = CreateGroupCall;
        class JoinGroupCall extends index_js_1.TLObject {
            __response__;
            muted;
            videoStopped;
            call;
            joinAs;
            inviteHash;
            params;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'phone.JoinGroupCall';
                this.constructorId = 0xb132ff7b;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['muted', 'videoStopped', 'call', 'joinAs', 'inviteHash', 'params'];
                this.muted = params.muted;
                this.videoStopped = params.videoStopped;
                this.call = params.call;
                this.joinAs = params.joinAs;
                this.inviteHash = params.inviteHash;
                this.params = params.params;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let muted = flags & (1 << 0) ? true : false;
                let videoStopped = flags & (1 << 2) ? true : false;
                let call = await index_js_1.TLObject.read(_data);
                let joinAs = await index_js_1.TLObject.read(_data);
                let inviteHash = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let params = await index_js_1.TLObject.read(_data);
                return new Raw.phone.JoinGroupCall({
                    muted: muted,
                    videoStopped: videoStopped,
                    call: call,
                    joinAs: joinAs,
                    inviteHash: inviteHash,
                    params: params,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.muted ? 1 << 0 : 0;
                flags |= this.videoStopped ? 1 << 2 : 0;
                flags |= this.inviteHash !== undefined ? 1 << 1 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.call !== undefined) {
                    b.write(this.call.write());
                }
                if (this.joinAs !== undefined) {
                    b.write(this.joinAs.write());
                }
                if (this.inviteHash !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.inviteHash));
                }
                if (this.params !== undefined) {
                    b.write(this.params.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        phone.JoinGroupCall = JoinGroupCall;
        class LeaveGroupCall extends index_js_1.TLObject {
            __response__;
            call;
            source;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'phone.LeaveGroupCall';
                this.constructorId = 0x500377f9;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['call', 'source'];
                this.call = params.call;
                this.source = params.source;
            }
            static async read(_data, ..._args) {
                let call = await index_js_1.TLObject.read(_data);
                let source = await index_js_1.Primitive.Int.read(_data);
                return new Raw.phone.LeaveGroupCall({ call: call, source: source });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.call !== undefined) {
                    b.write(this.call.write());
                }
                if (this.source !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.source));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        phone.LeaveGroupCall = LeaveGroupCall;
        class InviteToGroupCall extends index_js_1.TLObject {
            __response__;
            call;
            users;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'phone.InviteToGroupCall';
                this.constructorId = 0x7b393160;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['call', 'users'];
                this.call = params.call;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let call = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.phone.InviteToGroupCall({ call: call, users: users });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.call !== undefined) {
                    b.write(this.call.write());
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        phone.InviteToGroupCall = InviteToGroupCall;
        class DiscardGroupCall extends index_js_1.TLObject {
            __response__;
            call;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'phone.DiscardGroupCall';
                this.constructorId = 0x7a777135;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['call'];
                this.call = params.call;
            }
            static async read(_data, ..._args) {
                let call = await index_js_1.TLObject.read(_data);
                return new Raw.phone.DiscardGroupCall({ call: call });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.call !== undefined) {
                    b.write(this.call.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        phone.DiscardGroupCall = DiscardGroupCall;
        class ToggleGroupCallSettings extends index_js_1.TLObject {
            __response__;
            resetInviteHash;
            call;
            joinMuted;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'phone.ToggleGroupCallSettings';
                this.constructorId = 0x74bbb43d;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['resetInviteHash', 'call', 'joinMuted'];
                this.resetInviteHash = params.resetInviteHash;
                this.call = params.call;
                this.joinMuted = params.joinMuted;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let resetInviteHash = flags & (1 << 1) ? true : false;
                let call = await index_js_1.TLObject.read(_data);
                let joinMuted = flags & (1 << 0) ? await index_js_1.Primitive.Bool.read(_data) : undefined;
                return new Raw.phone.ToggleGroupCallSettings({
                    resetInviteHash: resetInviteHash,
                    call: call,
                    joinMuted: joinMuted,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.resetInviteHash ? 1 << 1 : 0;
                flags |= this.joinMuted !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.call !== undefined) {
                    b.write(this.call.write());
                }
                if (this.joinMuted !== undefined) {
                    b.write(index_js_1.Primitive.Bool.write(this.joinMuted));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        phone.ToggleGroupCallSettings = ToggleGroupCallSettings;
        class GetGroupCall extends index_js_1.TLObject {
            __response__;
            call;
            limit;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'phone.GetGroupCall';
                this.constructorId = 0x41845db;
                this.subclassOfId = 0x304116be;
                this._slots = ['call', 'limit'];
                this.call = params.call;
                this.limit = params.limit;
            }
            static async read(_data, ..._args) {
                let call = await index_js_1.TLObject.read(_data);
                let limit = await index_js_1.Primitive.Int.read(_data);
                return new Raw.phone.GetGroupCall({ call: call, limit: limit });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.call !== undefined) {
                    b.write(this.call.write());
                }
                if (this.limit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.limit));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        phone.GetGroupCall = GetGroupCall;
        class GetGroupParticipants extends index_js_1.TLObject {
            __response__;
            call;
            ids;
            sources;
            offset;
            limit;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'phone.GetGroupParticipants';
                this.constructorId = 0xc558d8ab;
                this.subclassOfId = 0x72d304f4;
                this._slots = ['call', 'ids', 'sources', 'offset', 'limit'];
                this.call = params.call;
                this.ids = params.ids;
                this.sources = params.sources;
                this.offset = params.offset;
                this.limit = params.limit;
            }
            static async read(_data, ..._args) {
                let call = await index_js_1.TLObject.read(_data);
                let ids = await index_js_1.TLObject.read(_data);
                let sources = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int);
                let offset = await index_js_1.Primitive.String.read(_data);
                let limit = await index_js_1.Primitive.Int.read(_data);
                return new Raw.phone.GetGroupParticipants({
                    call: call,
                    ids: ids,
                    sources: sources,
                    offset: offset,
                    limit: limit,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.call !== undefined) {
                    b.write(this.call.write());
                }
                if (this.ids) {
                    b.write(index_js_1.Primitive.Vector.write(this.ids));
                }
                if (this.sources) {
                    b.write(index_js_1.Primitive.Vector.write(this.sources, index_js_1.Primitive.Int));
                }
                if (this.offset !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.offset));
                }
                if (this.limit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.limit));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        phone.GetGroupParticipants = GetGroupParticipants;
        class CheckGroupCall extends index_js_1.TLObject {
            __response__;
            call;
            sources;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'phone.CheckGroupCall';
                this.constructorId = 0xb59cf977;
                this.subclassOfId = 0x5026710f;
                this._slots = ['call', 'sources'];
                this.call = params.call;
                this.sources = params.sources;
            }
            static async read(_data, ..._args) {
                let call = await index_js_1.TLObject.read(_data);
                let sources = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int);
                return new Raw.phone.CheckGroupCall({ call: call, sources: sources });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.call !== undefined) {
                    b.write(this.call.write());
                }
                if (this.sources) {
                    b.write(index_js_1.Primitive.Vector.write(this.sources, index_js_1.Primitive.Int));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        phone.CheckGroupCall = CheckGroupCall;
        class ToggleGroupCallRecord extends index_js_1.TLObject {
            __response__;
            start;
            video;
            call;
            title;
            videoPortrait;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'phone.ToggleGroupCallRecord';
                this.constructorId = 0xf128c708;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['start', 'video', 'call', 'title', 'videoPortrait'];
                this.start = params.start;
                this.video = params.video;
                this.call = params.call;
                this.title = params.title;
                this.videoPortrait = params.videoPortrait;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let start = flags & (1 << 0) ? true : false;
                let video = flags & (1 << 2) ? true : false;
                let call = await index_js_1.TLObject.read(_data);
                let title = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let videoPortrait = flags & (1 << 2) ? await index_js_1.Primitive.Bool.read(_data) : undefined;
                return new Raw.phone.ToggleGroupCallRecord({
                    start: start,
                    video: video,
                    call: call,
                    title: title,
                    videoPortrait: videoPortrait,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.start ? 1 << 0 : 0;
                flags |= this.video ? 1 << 2 : 0;
                flags |= this.title !== undefined ? 1 << 1 : 0;
                flags |= this.videoPortrait !== undefined ? 1 << 2 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.call !== undefined) {
                    b.write(this.call.write());
                }
                if (this.title !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.title));
                }
                if (this.videoPortrait !== undefined) {
                    b.write(index_js_1.Primitive.Bool.write(this.videoPortrait));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        phone.ToggleGroupCallRecord = ToggleGroupCallRecord;
        class EditGroupCallParticipant extends index_js_1.TLObject {
            __response__;
            call;
            participant;
            muted;
            volume;
            raiseHand;
            videoStopped;
            videoPaused;
            presentationPaused;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'phone.EditGroupCallParticipant';
                this.constructorId = 0xa5273abf;
                this.subclassOfId = 0x8af52aac;
                this._slots = [
                    'call',
                    'participant',
                    'muted',
                    'volume',
                    'raiseHand',
                    'videoStopped',
                    'videoPaused',
                    'presentationPaused',
                ];
                this.call = params.call;
                this.participant = params.participant;
                this.muted = params.muted;
                this.volume = params.volume;
                this.raiseHand = params.raiseHand;
                this.videoStopped = params.videoStopped;
                this.videoPaused = params.videoPaused;
                this.presentationPaused = params.presentationPaused;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let call = await index_js_1.TLObject.read(_data);
                let participant = await index_js_1.TLObject.read(_data);
                let muted = flags & (1 << 0) ? await index_js_1.Primitive.Bool.read(_data) : undefined;
                let volume = flags & (1 << 1) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let raiseHand = flags & (1 << 2) ? await index_js_1.Primitive.Bool.read(_data) : undefined;
                let videoStopped = flags & (1 << 3) ? await index_js_1.Primitive.Bool.read(_data) : undefined;
                let videoPaused = flags & (1 << 4) ? await index_js_1.Primitive.Bool.read(_data) : undefined;
                let presentationPaused = flags & (1 << 5) ? await index_js_1.Primitive.Bool.read(_data) : undefined;
                return new Raw.phone.EditGroupCallParticipant({
                    call: call,
                    participant: participant,
                    muted: muted,
                    volume: volume,
                    raiseHand: raiseHand,
                    videoStopped: videoStopped,
                    videoPaused: videoPaused,
                    presentationPaused: presentationPaused,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.muted !== undefined ? 1 << 0 : 0;
                flags |= this.volume !== undefined ? 1 << 1 : 0;
                flags |= this.raiseHand !== undefined ? 1 << 2 : 0;
                flags |= this.videoStopped !== undefined ? 1 << 3 : 0;
                flags |= this.videoPaused !== undefined ? 1 << 4 : 0;
                flags |= this.presentationPaused !== undefined ? 1 << 5 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.call !== undefined) {
                    b.write(this.call.write());
                }
                if (this.participant !== undefined) {
                    b.write(this.participant.write());
                }
                if (this.muted !== undefined) {
                    b.write(index_js_1.Primitive.Bool.write(this.muted));
                }
                if (this.volume !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.volume));
                }
                if (this.raiseHand !== undefined) {
                    b.write(index_js_1.Primitive.Bool.write(this.raiseHand));
                }
                if (this.videoStopped !== undefined) {
                    b.write(index_js_1.Primitive.Bool.write(this.videoStopped));
                }
                if (this.videoPaused !== undefined) {
                    b.write(index_js_1.Primitive.Bool.write(this.videoPaused));
                }
                if (this.presentationPaused !== undefined) {
                    b.write(index_js_1.Primitive.Bool.write(this.presentationPaused));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        phone.EditGroupCallParticipant = EditGroupCallParticipant;
        class EditGroupCallTitle extends index_js_1.TLObject {
            __response__;
            call;
            title;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'phone.EditGroupCallTitle';
                this.constructorId = 0x1ca6ac0a;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['call', 'title'];
                this.call = params.call;
                this.title = params.title;
            }
            static async read(_data, ..._args) {
                let call = await index_js_1.TLObject.read(_data);
                let title = await index_js_1.Primitive.String.read(_data);
                return new Raw.phone.EditGroupCallTitle({ call: call, title: title });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.call !== undefined) {
                    b.write(this.call.write());
                }
                if (this.title !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.title));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        phone.EditGroupCallTitle = EditGroupCallTitle;
        class GetGroupCallJoinAs extends index_js_1.TLObject {
            __response__;
            peer;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'phone.GetGroupCallJoinAs';
                this.constructorId = 0xef7c213a;
                this.subclassOfId = 0xb4b770fb;
                this._slots = ['peer'];
                this.peer = params.peer;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                return new Raw.phone.GetGroupCallJoinAs({ peer: peer });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        phone.GetGroupCallJoinAs = GetGroupCallJoinAs;
        class ExportGroupCallInvite extends index_js_1.TLObject {
            __response__;
            canSelfUnmute;
            call;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'phone.ExportGroupCallInvite';
                this.constructorId = 0xe6aa647f;
                this.subclassOfId = 0x3b3bfe8f;
                this._slots = ['canSelfUnmute', 'call'];
                this.canSelfUnmute = params.canSelfUnmute;
                this.call = params.call;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let canSelfUnmute = flags & (1 << 0) ? true : false;
                let call = await index_js_1.TLObject.read(_data);
                return new Raw.phone.ExportGroupCallInvite({ canSelfUnmute: canSelfUnmute, call: call });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.canSelfUnmute ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.call !== undefined) {
                    b.write(this.call.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        phone.ExportGroupCallInvite = ExportGroupCallInvite;
        class ToggleGroupCallStartSubscription extends index_js_1.TLObject {
            __response__;
            call;
            subscribed;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'phone.ToggleGroupCallStartSubscription';
                this.constructorId = 0x219c34e6;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['call', 'subscribed'];
                this.call = params.call;
                this.subscribed = params.subscribed;
            }
            static async read(_data, ..._args) {
                let call = await index_js_1.TLObject.read(_data);
                let subscribed = await index_js_1.Primitive.Bool.read(_data);
                return new Raw.phone.ToggleGroupCallStartSubscription({
                    call: call,
                    subscribed: subscribed,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.call !== undefined) {
                    b.write(this.call.write());
                }
                if (this.subscribed !== undefined) {
                    b.write(index_js_1.Primitive.Bool.write(this.subscribed));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        phone.ToggleGroupCallStartSubscription = ToggleGroupCallStartSubscription;
        class StartScheduledGroupCall extends index_js_1.TLObject {
            __response__;
            call;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'phone.StartScheduledGroupCall';
                this.constructorId = 0x5680e342;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['call'];
                this.call = params.call;
            }
            static async read(_data, ..._args) {
                let call = await index_js_1.TLObject.read(_data);
                return new Raw.phone.StartScheduledGroupCall({ call: call });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.call !== undefined) {
                    b.write(this.call.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        phone.StartScheduledGroupCall = StartScheduledGroupCall;
        class SaveDefaultGroupCallJoinAs extends index_js_1.TLObject {
            __response__;
            peer;
            joinAs;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'phone.SaveDefaultGroupCallJoinAs';
                this.constructorId = 0x575e1f8c;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['peer', 'joinAs'];
                this.peer = params.peer;
                this.joinAs = params.joinAs;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let joinAs = await index_js_1.TLObject.read(_data);
                return new Raw.phone.SaveDefaultGroupCallJoinAs({ peer: peer, joinAs: joinAs });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.joinAs !== undefined) {
                    b.write(this.joinAs.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        phone.SaveDefaultGroupCallJoinAs = SaveDefaultGroupCallJoinAs;
        class JoinGroupCallPresentation extends index_js_1.TLObject {
            __response__;
            call;
            params;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'phone.JoinGroupCallPresentation';
                this.constructorId = 0xcbea6bc4;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['call', 'params'];
                this.call = params.call;
                this.params = params.params;
            }
            static async read(_data, ..._args) {
                let call = await index_js_1.TLObject.read(_data);
                let params = await index_js_1.TLObject.read(_data);
                return new Raw.phone.JoinGroupCallPresentation({ call: call, params: params });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.call !== undefined) {
                    b.write(this.call.write());
                }
                if (this.params !== undefined) {
                    b.write(this.params.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        phone.JoinGroupCallPresentation = JoinGroupCallPresentation;
        class LeaveGroupCallPresentation extends index_js_1.TLObject {
            __response__;
            call;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'phone.LeaveGroupCallPresentation';
                this.constructorId = 0x1c50d144;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['call'];
                this.call = params.call;
            }
            static async read(_data, ..._args) {
                let call = await index_js_1.TLObject.read(_data);
                return new Raw.phone.LeaveGroupCallPresentation({ call: call });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.call !== undefined) {
                    b.write(this.call.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        phone.LeaveGroupCallPresentation = LeaveGroupCallPresentation;
        class GetGroupCallStreamChannels extends index_js_1.TLObject {
            __response__;
            call;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'phone.GetGroupCallStreamChannels';
                this.constructorId = 0x1ab21940;
                this.subclassOfId = 0x9157c5e4;
                this._slots = ['call'];
                this.call = params.call;
            }
            static async read(_data, ..._args) {
                let call = await index_js_1.TLObject.read(_data);
                return new Raw.phone.GetGroupCallStreamChannels({ call: call });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.call !== undefined) {
                    b.write(this.call.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        phone.GetGroupCallStreamChannels = GetGroupCallStreamChannels;
        class GetGroupCallStreamRtmpUrl extends index_js_1.TLObject {
            __response__;
            peer;
            revoke;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'phone.GetGroupCallStreamRtmpUrl';
                this.constructorId = 0xdeb3abbf;
                this.subclassOfId = 0xd1f515cb;
                this._slots = ['peer', 'revoke'];
                this.peer = params.peer;
                this.revoke = params.revoke;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let revoke = await index_js_1.Primitive.Bool.read(_data);
                return new Raw.phone.GetGroupCallStreamRtmpUrl({ peer: peer, revoke: revoke });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.revoke !== undefined) {
                    b.write(index_js_1.Primitive.Bool.write(this.revoke));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        phone.GetGroupCallStreamRtmpUrl = GetGroupCallStreamRtmpUrl;
        class SaveCallLog extends index_js_1.TLObject {
            __response__;
            peer;
            file;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'phone.SaveCallLog';
                this.constructorId = 0x41248786;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['peer', 'file'];
                this.peer = params.peer;
                this.file = params.file;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let file = await index_js_1.TLObject.read(_data);
                return new Raw.phone.SaveCallLog({ peer: peer, file: file });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.file !== undefined) {
                    b.write(this.file.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        phone.SaveCallLog = SaveCallLog;
    })(phone = Raw.phone || (Raw.phone = {}));
    let stats;
    (function (stats) {
        class BroadcastStats extends index_js_1.TLObject {
            period;
            followers;
            viewsPerPost;
            sharesPerPost;
            reactionsPerPost;
            viewsPerStory;
            sharesPerStory;
            reactionsPerStory;
            enabledNotifications;
            growthGraph;
            followersGraph;
            muteGraph;
            topHoursGraph;
            interactionsGraph;
            ivInteractionsGraph;
            viewsBySourceGraph;
            newFollowersBySourceGraph;
            languagesGraph;
            reactionsByEmotionGraph;
            storyInteractionsGraph;
            storyReactionsByEmotionGraph;
            recentPostsInteractions;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'stats.BroadcastStats';
                this.constructorId = 0x396ca5fc;
                this.subclassOfId = 0x7ff25428;
                this._slots = [
                    'period',
                    'followers',
                    'viewsPerPost',
                    'sharesPerPost',
                    'reactionsPerPost',
                    'viewsPerStory',
                    'sharesPerStory',
                    'reactionsPerStory',
                    'enabledNotifications',
                    'growthGraph',
                    'followersGraph',
                    'muteGraph',
                    'topHoursGraph',
                    'interactionsGraph',
                    'ivInteractionsGraph',
                    'viewsBySourceGraph',
                    'newFollowersBySourceGraph',
                    'languagesGraph',
                    'reactionsByEmotionGraph',
                    'storyInteractionsGraph',
                    'storyReactionsByEmotionGraph',
                    'recentPostsInteractions',
                ];
                this.period = params.period;
                this.followers = params.followers;
                this.viewsPerPost = params.viewsPerPost;
                this.sharesPerPost = params.sharesPerPost;
                this.reactionsPerPost = params.reactionsPerPost;
                this.viewsPerStory = params.viewsPerStory;
                this.sharesPerStory = params.sharesPerStory;
                this.reactionsPerStory = params.reactionsPerStory;
                this.enabledNotifications = params.enabledNotifications;
                this.growthGraph = params.growthGraph;
                this.followersGraph = params.followersGraph;
                this.muteGraph = params.muteGraph;
                this.topHoursGraph = params.topHoursGraph;
                this.interactionsGraph = params.interactionsGraph;
                this.ivInteractionsGraph = params.ivInteractionsGraph;
                this.viewsBySourceGraph = params.viewsBySourceGraph;
                this.newFollowersBySourceGraph = params.newFollowersBySourceGraph;
                this.languagesGraph = params.languagesGraph;
                this.reactionsByEmotionGraph = params.reactionsByEmotionGraph;
                this.storyInteractionsGraph = params.storyInteractionsGraph;
                this.storyReactionsByEmotionGraph = params.storyReactionsByEmotionGraph;
                this.recentPostsInteractions = params.recentPostsInteractions;
            }
            static async read(_data, ..._args) {
                let period = await index_js_1.TLObject.read(_data);
                let followers = await index_js_1.TLObject.read(_data);
                let viewsPerPost = await index_js_1.TLObject.read(_data);
                let sharesPerPost = await index_js_1.TLObject.read(_data);
                let reactionsPerPost = await index_js_1.TLObject.read(_data);
                let viewsPerStory = await index_js_1.TLObject.read(_data);
                let sharesPerStory = await index_js_1.TLObject.read(_data);
                let reactionsPerStory = await index_js_1.TLObject.read(_data);
                let enabledNotifications = await index_js_1.TLObject.read(_data);
                let growthGraph = await index_js_1.TLObject.read(_data);
                let followersGraph = await index_js_1.TLObject.read(_data);
                let muteGraph = await index_js_1.TLObject.read(_data);
                let topHoursGraph = await index_js_1.TLObject.read(_data);
                let interactionsGraph = await index_js_1.TLObject.read(_data);
                let ivInteractionsGraph = await index_js_1.TLObject.read(_data);
                let viewsBySourceGraph = await index_js_1.TLObject.read(_data);
                let newFollowersBySourceGraph = await index_js_1.TLObject.read(_data);
                let languagesGraph = await index_js_1.TLObject.read(_data);
                let reactionsByEmotionGraph = await index_js_1.TLObject.read(_data);
                let storyInteractionsGraph = await index_js_1.TLObject.read(_data);
                let storyReactionsByEmotionGraph = await index_js_1.TLObject.read(_data);
                let recentPostsInteractions = await index_js_1.TLObject.read(_data);
                return new Raw.stats.BroadcastStats({
                    period: period,
                    followers: followers,
                    viewsPerPost: viewsPerPost,
                    sharesPerPost: sharesPerPost,
                    reactionsPerPost: reactionsPerPost,
                    viewsPerStory: viewsPerStory,
                    sharesPerStory: sharesPerStory,
                    reactionsPerStory: reactionsPerStory,
                    enabledNotifications: enabledNotifications,
                    growthGraph: growthGraph,
                    followersGraph: followersGraph,
                    muteGraph: muteGraph,
                    topHoursGraph: topHoursGraph,
                    interactionsGraph: interactionsGraph,
                    ivInteractionsGraph: ivInteractionsGraph,
                    viewsBySourceGraph: viewsBySourceGraph,
                    newFollowersBySourceGraph: newFollowersBySourceGraph,
                    languagesGraph: languagesGraph,
                    reactionsByEmotionGraph: reactionsByEmotionGraph,
                    storyInteractionsGraph: storyInteractionsGraph,
                    storyReactionsByEmotionGraph: storyReactionsByEmotionGraph,
                    recentPostsInteractions: recentPostsInteractions,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.period !== undefined) {
                    b.write(this.period.write());
                }
                if (this.followers !== undefined) {
                    b.write(this.followers.write());
                }
                if (this.viewsPerPost !== undefined) {
                    b.write(this.viewsPerPost.write());
                }
                if (this.sharesPerPost !== undefined) {
                    b.write(this.sharesPerPost.write());
                }
                if (this.reactionsPerPost !== undefined) {
                    b.write(this.reactionsPerPost.write());
                }
                if (this.viewsPerStory !== undefined) {
                    b.write(this.viewsPerStory.write());
                }
                if (this.sharesPerStory !== undefined) {
                    b.write(this.sharesPerStory.write());
                }
                if (this.reactionsPerStory !== undefined) {
                    b.write(this.reactionsPerStory.write());
                }
                if (this.enabledNotifications !== undefined) {
                    b.write(this.enabledNotifications.write());
                }
                if (this.growthGraph !== undefined) {
                    b.write(this.growthGraph.write());
                }
                if (this.followersGraph !== undefined) {
                    b.write(this.followersGraph.write());
                }
                if (this.muteGraph !== undefined) {
                    b.write(this.muteGraph.write());
                }
                if (this.topHoursGraph !== undefined) {
                    b.write(this.topHoursGraph.write());
                }
                if (this.interactionsGraph !== undefined) {
                    b.write(this.interactionsGraph.write());
                }
                if (this.ivInteractionsGraph !== undefined) {
                    b.write(this.ivInteractionsGraph.write());
                }
                if (this.viewsBySourceGraph !== undefined) {
                    b.write(this.viewsBySourceGraph.write());
                }
                if (this.newFollowersBySourceGraph !== undefined) {
                    b.write(this.newFollowersBySourceGraph.write());
                }
                if (this.languagesGraph !== undefined) {
                    b.write(this.languagesGraph.write());
                }
                if (this.reactionsByEmotionGraph !== undefined) {
                    b.write(this.reactionsByEmotionGraph.write());
                }
                if (this.storyInteractionsGraph !== undefined) {
                    b.write(this.storyInteractionsGraph.write());
                }
                if (this.storyReactionsByEmotionGraph !== undefined) {
                    b.write(this.storyReactionsByEmotionGraph.write());
                }
                if (this.recentPostsInteractions) {
                    b.write(index_js_1.Primitive.Vector.write(this.recentPostsInteractions));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stats.BroadcastStats = BroadcastStats;
        class MegagroupStats extends index_js_1.TLObject {
            period;
            members;
            messages;
            viewers;
            posters;
            growthGraph;
            membersGraph;
            newMembersBySourceGraph;
            languagesGraph;
            messagesGraph;
            actionsGraph;
            topHoursGraph;
            weekdaysGraph;
            topPosters;
            topAdmins;
            topInviters;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'stats.MegagroupStats';
                this.constructorId = 0xef7ff916;
                this.subclassOfId = 0x5b59be8d;
                this._slots = [
                    'period',
                    'members',
                    'messages',
                    'viewers',
                    'posters',
                    'growthGraph',
                    'membersGraph',
                    'newMembersBySourceGraph',
                    'languagesGraph',
                    'messagesGraph',
                    'actionsGraph',
                    'topHoursGraph',
                    'weekdaysGraph',
                    'topPosters',
                    'topAdmins',
                    'topInviters',
                    'users',
                ];
                this.period = params.period;
                this.members = params.members;
                this.messages = params.messages;
                this.viewers = params.viewers;
                this.posters = params.posters;
                this.growthGraph = params.growthGraph;
                this.membersGraph = params.membersGraph;
                this.newMembersBySourceGraph = params.newMembersBySourceGraph;
                this.languagesGraph = params.languagesGraph;
                this.messagesGraph = params.messagesGraph;
                this.actionsGraph = params.actionsGraph;
                this.topHoursGraph = params.topHoursGraph;
                this.weekdaysGraph = params.weekdaysGraph;
                this.topPosters = params.topPosters;
                this.topAdmins = params.topAdmins;
                this.topInviters = params.topInviters;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let period = await index_js_1.TLObject.read(_data);
                let members = await index_js_1.TLObject.read(_data);
                let messages = await index_js_1.TLObject.read(_data);
                let viewers = await index_js_1.TLObject.read(_data);
                let posters = await index_js_1.TLObject.read(_data);
                let growthGraph = await index_js_1.TLObject.read(_data);
                let membersGraph = await index_js_1.TLObject.read(_data);
                let newMembersBySourceGraph = await index_js_1.TLObject.read(_data);
                let languagesGraph = await index_js_1.TLObject.read(_data);
                let messagesGraph = await index_js_1.TLObject.read(_data);
                let actionsGraph = await index_js_1.TLObject.read(_data);
                let topHoursGraph = await index_js_1.TLObject.read(_data);
                let weekdaysGraph = await index_js_1.TLObject.read(_data);
                let topPosters = await index_js_1.TLObject.read(_data);
                let topAdmins = await index_js_1.TLObject.read(_data);
                let topInviters = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.stats.MegagroupStats({
                    period: period,
                    members: members,
                    messages: messages,
                    viewers: viewers,
                    posters: posters,
                    growthGraph: growthGraph,
                    membersGraph: membersGraph,
                    newMembersBySourceGraph: newMembersBySourceGraph,
                    languagesGraph: languagesGraph,
                    messagesGraph: messagesGraph,
                    actionsGraph: actionsGraph,
                    topHoursGraph: topHoursGraph,
                    weekdaysGraph: weekdaysGraph,
                    topPosters: topPosters,
                    topAdmins: topAdmins,
                    topInviters: topInviters,
                    users: users,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.period !== undefined) {
                    b.write(this.period.write());
                }
                if (this.members !== undefined) {
                    b.write(this.members.write());
                }
                if (this.messages !== undefined) {
                    b.write(this.messages.write());
                }
                if (this.viewers !== undefined) {
                    b.write(this.viewers.write());
                }
                if (this.posters !== undefined) {
                    b.write(this.posters.write());
                }
                if (this.growthGraph !== undefined) {
                    b.write(this.growthGraph.write());
                }
                if (this.membersGraph !== undefined) {
                    b.write(this.membersGraph.write());
                }
                if (this.newMembersBySourceGraph !== undefined) {
                    b.write(this.newMembersBySourceGraph.write());
                }
                if (this.languagesGraph !== undefined) {
                    b.write(this.languagesGraph.write());
                }
                if (this.messagesGraph !== undefined) {
                    b.write(this.messagesGraph.write());
                }
                if (this.actionsGraph !== undefined) {
                    b.write(this.actionsGraph.write());
                }
                if (this.topHoursGraph !== undefined) {
                    b.write(this.topHoursGraph.write());
                }
                if (this.weekdaysGraph !== undefined) {
                    b.write(this.weekdaysGraph.write());
                }
                if (this.topPosters) {
                    b.write(index_js_1.Primitive.Vector.write(this.topPosters));
                }
                if (this.topAdmins) {
                    b.write(index_js_1.Primitive.Vector.write(this.topAdmins));
                }
                if (this.topInviters) {
                    b.write(index_js_1.Primitive.Vector.write(this.topInviters));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stats.MegagroupStats = MegagroupStats;
        class MessageStats extends index_js_1.TLObject {
            viewsGraph;
            reactionsByEmotionGraph;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'stats.MessageStats';
                this.constructorId = 0x7fe91c14;
                this.subclassOfId = 0x9604a322;
                this._slots = ['viewsGraph', 'reactionsByEmotionGraph'];
                this.viewsGraph = params.viewsGraph;
                this.reactionsByEmotionGraph = params.reactionsByEmotionGraph;
            }
            static async read(_data, ..._args) {
                let viewsGraph = await index_js_1.TLObject.read(_data);
                let reactionsByEmotionGraph = await index_js_1.TLObject.read(_data);
                return new Raw.stats.MessageStats({
                    viewsGraph: viewsGraph,
                    reactionsByEmotionGraph: reactionsByEmotionGraph,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.viewsGraph !== undefined) {
                    b.write(this.viewsGraph.write());
                }
                if (this.reactionsByEmotionGraph !== undefined) {
                    b.write(this.reactionsByEmotionGraph.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stats.MessageStats = MessageStats;
        class StoryStats extends index_js_1.TLObject {
            viewsGraph;
            reactionsByEmotionGraph;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'stats.StoryStats';
                this.constructorId = 0x50cd067c;
                this.subclassOfId = 0x8b4d43d4;
                this._slots = ['viewsGraph', 'reactionsByEmotionGraph'];
                this.viewsGraph = params.viewsGraph;
                this.reactionsByEmotionGraph = params.reactionsByEmotionGraph;
            }
            static async read(_data, ..._args) {
                let viewsGraph = await index_js_1.TLObject.read(_data);
                let reactionsByEmotionGraph = await index_js_1.TLObject.read(_data);
                return new Raw.stats.StoryStats({
                    viewsGraph: viewsGraph,
                    reactionsByEmotionGraph: reactionsByEmotionGraph,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.viewsGraph !== undefined) {
                    b.write(this.viewsGraph.write());
                }
                if (this.reactionsByEmotionGraph !== undefined) {
                    b.write(this.reactionsByEmotionGraph.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stats.StoryStats = StoryStats;
        class PublicForwards extends index_js_1.TLObject {
            count;
            forwards;
            nextOffset;
            chats;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'stats.PublicForwards';
                this.constructorId = 0x93037e20;
                this.subclassOfId = 0xa7283211;
                this._slots = ['count', 'forwards', 'nextOffset', 'chats', 'users'];
                this.count = params.count;
                this.forwards = params.forwards;
                this.nextOffset = params.nextOffset;
                this.chats = params.chats;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let count = await index_js_1.Primitive.Int.read(_data);
                let forwards = await index_js_1.TLObject.read(_data);
                let nextOffset = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.stats.PublicForwards({
                    count: count,
                    forwards: forwards,
                    nextOffset: nextOffset,
                    chats: chats,
                    users: users,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.nextOffset !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.count !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.count));
                }
                if (this.forwards) {
                    b.write(index_js_1.Primitive.Vector.write(this.forwards));
                }
                if (this.nextOffset !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.nextOffset));
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stats.PublicForwards = PublicForwards;
        class BroadcastRevenueStats extends index_js_1.TLObject {
            topHoursGraph;
            revenueGraph;
            balances;
            usdRate;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'stats.BroadcastRevenueStats';
                this.constructorId = 0x5407e297;
                this.subclassOfId = 0x2cee3078;
                this._slots = ['topHoursGraph', 'revenueGraph', 'balances', 'usdRate'];
                this.topHoursGraph = params.topHoursGraph;
                this.revenueGraph = params.revenueGraph;
                this.balances = params.balances;
                this.usdRate = params.usdRate;
            }
            static async read(_data, ..._args) {
                let topHoursGraph = await index_js_1.TLObject.read(_data);
                let revenueGraph = await index_js_1.TLObject.read(_data);
                let balances = await index_js_1.TLObject.read(_data);
                let usdRate = await index_js_1.Primitive.Double.read(_data);
                return new Raw.stats.BroadcastRevenueStats({
                    topHoursGraph: topHoursGraph,
                    revenueGraph: revenueGraph,
                    balances: balances,
                    usdRate: usdRate,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.topHoursGraph !== undefined) {
                    b.write(this.topHoursGraph.write());
                }
                if (this.revenueGraph !== undefined) {
                    b.write(this.revenueGraph.write());
                }
                if (this.balances !== undefined) {
                    b.write(this.balances.write());
                }
                if (this.usdRate !== undefined) {
                    b.write(index_js_1.Primitive.Double.write(this.usdRate));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stats.BroadcastRevenueStats = BroadcastRevenueStats;
        class BroadcastRevenueWithdrawalUrl extends index_js_1.TLObject {
            url;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'stats.BroadcastRevenueWithdrawalUrl';
                this.constructorId = 0xec659737;
                this.subclassOfId = 0xd15cc8e5;
                this._slots = ['url'];
                this.url = params.url;
            }
            static async read(_data, ..._args) {
                let url = await index_js_1.Primitive.String.read(_data);
                return new Raw.stats.BroadcastRevenueWithdrawalUrl({ url: url });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.url !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.url));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stats.BroadcastRevenueWithdrawalUrl = BroadcastRevenueWithdrawalUrl;
        class BroadcastRevenueTransactions extends index_js_1.TLObject {
            count;
            transactions;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'stats.BroadcastRevenueTransactions';
                this.constructorId = 0x87158466;
                this.subclassOfId = 0x676ea15;
                this._slots = ['count', 'transactions'];
                this.count = params.count;
                this.transactions = params.transactions;
            }
            static async read(_data, ..._args) {
                let count = await index_js_1.Primitive.Int.read(_data);
                let transactions = await index_js_1.TLObject.read(_data);
                return new Raw.stats.BroadcastRevenueTransactions({
                    count: count,
                    transactions: transactions,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.count !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.count));
                }
                if (this.transactions) {
                    b.write(index_js_1.Primitive.Vector.write(this.transactions));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stats.BroadcastRevenueTransactions = BroadcastRevenueTransactions;
        class GetBroadcastStats extends index_js_1.TLObject {
            __response__;
            dark;
            channel;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'stats.GetBroadcastStats';
                this.constructorId = 0xab42441a;
                this.subclassOfId = 0x7ff25428;
                this._slots = ['dark', 'channel'];
                this.dark = params.dark;
                this.channel = params.channel;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let dark = flags & (1 << 0) ? true : false;
                let channel = await index_js_1.TLObject.read(_data);
                return new Raw.stats.GetBroadcastStats({ dark: dark, channel: channel });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.dark ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stats.GetBroadcastStats = GetBroadcastStats;
        class LoadAsyncGraph extends index_js_1.TLObject {
            __response__;
            token;
            x;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'stats.LoadAsyncGraph';
                this.constructorId = 0x621d5fa0;
                this.subclassOfId = 0x9b903153;
                this._slots = ['token', 'x'];
                this.token = params.token;
                this.x = params.x;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let token = await index_js_1.Primitive.String.read(_data);
                let x = flags & (1 << 0) ? await index_js_1.Primitive.Long.read(_data) : undefined;
                return new Raw.stats.LoadAsyncGraph({ token: token, x: x });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.x !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.token !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.token));
                }
                if (this.x !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.x));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stats.LoadAsyncGraph = LoadAsyncGraph;
        class GetMegagroupStats extends index_js_1.TLObject {
            __response__;
            dark;
            channel;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'stats.GetMegagroupStats';
                this.constructorId = 0xdcdf8607;
                this.subclassOfId = 0x5b59be8d;
                this._slots = ['dark', 'channel'];
                this.dark = params.dark;
                this.channel = params.channel;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let dark = flags & (1 << 0) ? true : false;
                let channel = await index_js_1.TLObject.read(_data);
                return new Raw.stats.GetMegagroupStats({ dark: dark, channel: channel });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.dark ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stats.GetMegagroupStats = GetMegagroupStats;
        class GetMessagePublicForwards extends index_js_1.TLObject {
            __response__;
            channel;
            msgId;
            offset;
            limit;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'stats.GetMessagePublicForwards';
                this.constructorId = 0x5f150144;
                this.subclassOfId = 0xa7283211;
                this._slots = ['channel', 'msgId', 'offset', 'limit'];
                this.channel = params.channel;
                this.msgId = params.msgId;
                this.offset = params.offset;
                this.limit = params.limit;
            }
            static async read(_data, ..._args) {
                let channel = await index_js_1.TLObject.read(_data);
                let msgId = await index_js_1.Primitive.Int.read(_data);
                let offset = await index_js_1.Primitive.String.read(_data);
                let limit = await index_js_1.Primitive.Int.read(_data);
                return new Raw.stats.GetMessagePublicForwards({
                    channel: channel,
                    msgId: msgId,
                    offset: offset,
                    limit: limit,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.msgId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.msgId));
                }
                if (this.offset !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.offset));
                }
                if (this.limit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.limit));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stats.GetMessagePublicForwards = GetMessagePublicForwards;
        class GetMessageStats extends index_js_1.TLObject {
            __response__;
            dark;
            channel;
            msgId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'stats.GetMessageStats';
                this.constructorId = 0xb6e0a3f5;
                this.subclassOfId = 0x9604a322;
                this._slots = ['dark', 'channel', 'msgId'];
                this.dark = params.dark;
                this.channel = params.channel;
                this.msgId = params.msgId;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let dark = flags & (1 << 0) ? true : false;
                let channel = await index_js_1.TLObject.read(_data);
                let msgId = await index_js_1.Primitive.Int.read(_data);
                return new Raw.stats.GetMessageStats({ dark: dark, channel: channel, msgId: msgId });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.dark ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.msgId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.msgId));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stats.GetMessageStats = GetMessageStats;
        class GetStoryStats extends index_js_1.TLObject {
            __response__;
            dark;
            peer;
            id;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'stats.GetStoryStats';
                this.constructorId = 0x374fef40;
                this.subclassOfId = 0x8b4d43d4;
                this._slots = ['dark', 'peer', 'id'];
                this.dark = params.dark;
                this.peer = params.peer;
                this.id = params.id;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let dark = flags & (1 << 0) ? true : false;
                let peer = await index_js_1.TLObject.read(_data);
                let id = await index_js_1.Primitive.Int.read(_data);
                return new Raw.stats.GetStoryStats({ dark: dark, peer: peer, id: id });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.dark ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.id !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.id));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stats.GetStoryStats = GetStoryStats;
        class GetStoryPublicForwards extends index_js_1.TLObject {
            __response__;
            peer;
            id;
            offset;
            limit;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'stats.GetStoryPublicForwards';
                this.constructorId = 0xa6437ef6;
                this.subclassOfId = 0xa7283211;
                this._slots = ['peer', 'id', 'offset', 'limit'];
                this.peer = params.peer;
                this.id = params.id;
                this.offset = params.offset;
                this.limit = params.limit;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let id = await index_js_1.Primitive.Int.read(_data);
                let offset = await index_js_1.Primitive.String.read(_data);
                let limit = await index_js_1.Primitive.Int.read(_data);
                return new Raw.stats.GetStoryPublicForwards({
                    peer: peer,
                    id: id,
                    offset: offset,
                    limit: limit,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.id !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.id));
                }
                if (this.offset !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.offset));
                }
                if (this.limit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.limit));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stats.GetStoryPublicForwards = GetStoryPublicForwards;
        class GetBroadcastRevenueStats extends index_js_1.TLObject {
            __response__;
            dark;
            channel;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'stats.GetBroadcastRevenueStats';
                this.constructorId = 0x75dfb671;
                this.subclassOfId = 0x2cee3078;
                this._slots = ['dark', 'channel'];
                this.dark = params.dark;
                this.channel = params.channel;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let dark = flags & (1 << 0) ? true : false;
                let channel = await index_js_1.TLObject.read(_data);
                return new Raw.stats.GetBroadcastRevenueStats({ dark: dark, channel: channel });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.dark ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stats.GetBroadcastRevenueStats = GetBroadcastRevenueStats;
        class GetBroadcastRevenueWithdrawalUrl extends index_js_1.TLObject {
            __response__;
            channel;
            password;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'stats.GetBroadcastRevenueWithdrawalUrl';
                this.constructorId = 0x2a65ef73;
                this.subclassOfId = 0xd15cc8e5;
                this._slots = ['channel', 'password'];
                this.channel = params.channel;
                this.password = params.password;
            }
            static async read(_data, ..._args) {
                let channel = await index_js_1.TLObject.read(_data);
                let password = await index_js_1.TLObject.read(_data);
                return new Raw.stats.GetBroadcastRevenueWithdrawalUrl({
                    channel: channel,
                    password: password,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.password !== undefined) {
                    b.write(this.password.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stats.GetBroadcastRevenueWithdrawalUrl = GetBroadcastRevenueWithdrawalUrl;
        class GetBroadcastRevenueTransactions extends index_js_1.TLObject {
            __response__;
            channel;
            offset;
            limit;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'stats.GetBroadcastRevenueTransactions';
                this.constructorId = 0x69280f;
                this.subclassOfId = 0x676ea15;
                this._slots = ['channel', 'offset', 'limit'];
                this.channel = params.channel;
                this.offset = params.offset;
                this.limit = params.limit;
            }
            static async read(_data, ..._args) {
                let channel = await index_js_1.TLObject.read(_data);
                let offset = await index_js_1.Primitive.Int.read(_data);
                let limit = await index_js_1.Primitive.Int.read(_data);
                return new Raw.stats.GetBroadcastRevenueTransactions({
                    channel: channel,
                    offset: offset,
                    limit: limit,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.channel !== undefined) {
                    b.write(this.channel.write());
                }
                if (this.offset !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.offset));
                }
                if (this.limit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.limit));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stats.GetBroadcastRevenueTransactions = GetBroadcastRevenueTransactions;
    })(stats = Raw.stats || (Raw.stats = {}));
    let stickers;
    (function (stickers_1) {
        class SuggestedShortName extends index_js_1.TLObject {
            shortName;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'stickers.SuggestedShortName';
                this.constructorId = 0x85fea03f;
                this.subclassOfId = 0xc44a4b21;
                this._slots = ['shortName'];
                this.shortName = params.shortName;
            }
            static async read(_data, ..._args) {
                let shortName = await index_js_1.Primitive.String.read(_data);
                return new Raw.stickers.SuggestedShortName({ shortName: shortName });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.shortName !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.shortName));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stickers_1.SuggestedShortName = SuggestedShortName;
        class CreateStickerSet extends index_js_1.TLObject {
            __response__;
            masks;
            emojis;
            textColor;
            userId;
            title;
            shortName;
            thumb;
            stickers;
            software;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'stickers.CreateStickerSet';
                this.constructorId = 0x9021ab67;
                this.subclassOfId = 0x9b704a5a;
                this._slots = [
                    'masks',
                    'emojis',
                    'textColor',
                    'userId',
                    'title',
                    'shortName',
                    'thumb',
                    'stickers',
                    'software',
                ];
                this.masks = params.masks;
                this.emojis = params.emojis;
                this.textColor = params.textColor;
                this.userId = params.userId;
                this.title = params.title;
                this.shortName = params.shortName;
                this.thumb = params.thumb;
                this.stickers = params.stickers;
                this.software = params.software;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let masks = flags & (1 << 0) ? true : false;
                let emojis = flags & (1 << 5) ? true : false;
                let textColor = flags & (1 << 6) ? true : false;
                let userId = await index_js_1.TLObject.read(_data);
                let title = await index_js_1.Primitive.String.read(_data);
                let shortName = await index_js_1.Primitive.String.read(_data);
                let thumb = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
                let stickers = await index_js_1.TLObject.read(_data);
                let software = flags & (1 << 3) ? await index_js_1.Primitive.String.read(_data) : undefined;
                return new Raw.stickers.CreateStickerSet({
                    masks: masks,
                    emojis: emojis,
                    textColor: textColor,
                    userId: userId,
                    title: title,
                    shortName: shortName,
                    thumb: thumb,
                    stickers: stickers,
                    software: software,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.masks ? 1 << 0 : 0;
                flags |= this.emojis ? 1 << 5 : 0;
                flags |= this.textColor ? 1 << 6 : 0;
                flags |= this.thumb !== undefined ? 1 << 2 : 0;
                flags |= this.software !== undefined ? 1 << 3 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.userId !== undefined) {
                    b.write(this.userId.write());
                }
                if (this.title !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.title));
                }
                if (this.shortName !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.shortName));
                }
                if (this.thumb !== undefined) {
                    b.write(this.thumb.write());
                }
                if (this.stickers) {
                    b.write(index_js_1.Primitive.Vector.write(this.stickers));
                }
                if (this.software !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.software));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stickers_1.CreateStickerSet = CreateStickerSet;
        class RemoveStickerFromSet extends index_js_1.TLObject {
            __response__;
            sticker;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'stickers.RemoveStickerFromSet';
                this.constructorId = 0xf7760f51;
                this.subclassOfId = 0x9b704a5a;
                this._slots = ['sticker'];
                this.sticker = params.sticker;
            }
            static async read(_data, ..._args) {
                let sticker = await index_js_1.TLObject.read(_data);
                return new Raw.stickers.RemoveStickerFromSet({ sticker: sticker });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.sticker !== undefined) {
                    b.write(this.sticker.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stickers_1.RemoveStickerFromSet = RemoveStickerFromSet;
        class ChangeStickerPosition extends index_js_1.TLObject {
            __response__;
            sticker;
            position;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'stickers.ChangeStickerPosition';
                this.constructorId = 0xffb6d4ca;
                this.subclassOfId = 0x9b704a5a;
                this._slots = ['sticker', 'position'];
                this.sticker = params.sticker;
                this.position = params.position;
            }
            static async read(_data, ..._args) {
                let sticker = await index_js_1.TLObject.read(_data);
                let position = await index_js_1.Primitive.Int.read(_data);
                return new Raw.stickers.ChangeStickerPosition({ sticker: sticker, position: position });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.sticker !== undefined) {
                    b.write(this.sticker.write());
                }
                if (this.position !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.position));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stickers_1.ChangeStickerPosition = ChangeStickerPosition;
        class AddStickerToSet extends index_js_1.TLObject {
            __response__;
            stickerset;
            sticker;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'stickers.AddStickerToSet';
                this.constructorId = 0x8653febe;
                this.subclassOfId = 0x9b704a5a;
                this._slots = ['stickerset', 'sticker'];
                this.stickerset = params.stickerset;
                this.sticker = params.sticker;
            }
            static async read(_data, ..._args) {
                let stickerset = await index_js_1.TLObject.read(_data);
                let sticker = await index_js_1.TLObject.read(_data);
                return new Raw.stickers.AddStickerToSet({ stickerset: stickerset, sticker: sticker });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.stickerset !== undefined) {
                    b.write(this.stickerset.write());
                }
                if (this.sticker !== undefined) {
                    b.write(this.sticker.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stickers_1.AddStickerToSet = AddStickerToSet;
        class SetStickerSetThumb extends index_js_1.TLObject {
            __response__;
            stickerset;
            thumb;
            thumbDocumentId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'stickers.SetStickerSetThumb';
                this.constructorId = 0xa76a5392;
                this.subclassOfId = 0x9b704a5a;
                this._slots = ['stickerset', 'thumb', 'thumbDocumentId'];
                this.stickerset = params.stickerset;
                this.thumb = params.thumb;
                this.thumbDocumentId = params.thumbDocumentId;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let stickerset = await index_js_1.TLObject.read(_data);
                let thumb = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
                let thumbDocumentId = flags & (1 << 1) ? await index_js_1.Primitive.Long.read(_data) : undefined;
                return new Raw.stickers.SetStickerSetThumb({
                    stickerset: stickerset,
                    thumb: thumb,
                    thumbDocumentId: thumbDocumentId,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.thumb !== undefined ? 1 << 0 : 0;
                flags |= this.thumbDocumentId !== undefined ? 1 << 1 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.stickerset !== undefined) {
                    b.write(this.stickerset.write());
                }
                if (this.thumb !== undefined) {
                    b.write(this.thumb.write());
                }
                if (this.thumbDocumentId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.thumbDocumentId));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stickers_1.SetStickerSetThumb = SetStickerSetThumb;
        class CheckShortName extends index_js_1.TLObject {
            __response__;
            shortName;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'stickers.CheckShortName';
                this.constructorId = 0x284b3639;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['shortName'];
                this.shortName = params.shortName;
            }
            static async read(_data, ..._args) {
                let shortName = await index_js_1.Primitive.String.read(_data);
                return new Raw.stickers.CheckShortName({ shortName: shortName });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.shortName !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.shortName));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stickers_1.CheckShortName = CheckShortName;
        class SuggestShortName extends index_js_1.TLObject {
            __response__;
            title;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'stickers.SuggestShortName';
                this.constructorId = 0x4dafc503;
                this.subclassOfId = 0xc44a4b21;
                this._slots = ['title'];
                this.title = params.title;
            }
            static async read(_data, ..._args) {
                let title = await index_js_1.Primitive.String.read(_data);
                return new Raw.stickers.SuggestShortName({ title: title });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.title !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.title));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stickers_1.SuggestShortName = SuggestShortName;
        class ChangeSticker extends index_js_1.TLObject {
            __response__;
            sticker;
            emoji;
            maskCoords;
            keywords;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'stickers.ChangeSticker';
                this.constructorId = 0xf5537ebc;
                this.subclassOfId = 0x9b704a5a;
                this._slots = ['sticker', 'emoji', 'maskCoords', 'keywords'];
                this.sticker = params.sticker;
                this.emoji = params.emoji;
                this.maskCoords = params.maskCoords;
                this.keywords = params.keywords;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let sticker = await index_js_1.TLObject.read(_data);
                let emoji = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let maskCoords = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : undefined;
                let keywords = flags & (1 << 2) ? await index_js_1.Primitive.String.read(_data) : undefined;
                return new Raw.stickers.ChangeSticker({
                    sticker: sticker,
                    emoji: emoji,
                    maskCoords: maskCoords,
                    keywords: keywords,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.emoji !== undefined ? 1 << 0 : 0;
                flags |= this.maskCoords !== undefined ? 1 << 1 : 0;
                flags |= this.keywords !== undefined ? 1 << 2 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.sticker !== undefined) {
                    b.write(this.sticker.write());
                }
                if (this.emoji !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.emoji));
                }
                if (this.maskCoords !== undefined) {
                    b.write(this.maskCoords.write());
                }
                if (this.keywords !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.keywords));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stickers_1.ChangeSticker = ChangeSticker;
        class RenameStickerSet extends index_js_1.TLObject {
            __response__;
            stickerset;
            title;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'stickers.RenameStickerSet';
                this.constructorId = 0x124b1c00;
                this.subclassOfId = 0x9b704a5a;
                this._slots = ['stickerset', 'title'];
                this.stickerset = params.stickerset;
                this.title = params.title;
            }
            static async read(_data, ..._args) {
                let stickerset = await index_js_1.TLObject.read(_data);
                let title = await index_js_1.Primitive.String.read(_data);
                return new Raw.stickers.RenameStickerSet({ stickerset: stickerset, title: title });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.stickerset !== undefined) {
                    b.write(this.stickerset.write());
                }
                if (this.title !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.title));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stickers_1.RenameStickerSet = RenameStickerSet;
        class DeleteStickerSet extends index_js_1.TLObject {
            __response__;
            stickerset;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'stickers.DeleteStickerSet';
                this.constructorId = 0x87704394;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['stickerset'];
                this.stickerset = params.stickerset;
            }
            static async read(_data, ..._args) {
                let stickerset = await index_js_1.TLObject.read(_data);
                return new Raw.stickers.DeleteStickerSet({ stickerset: stickerset });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.stickerset !== undefined) {
                    b.write(this.stickerset.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stickers_1.DeleteStickerSet = DeleteStickerSet;
        class ReplaceSticker extends index_js_1.TLObject {
            __response__;
            sticker;
            newSticker;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'stickers.ReplaceSticker';
                this.constructorId = 0x4696459a;
                this.subclassOfId = 0x9b704a5a;
                this._slots = ['sticker', 'newSticker'];
                this.sticker = params.sticker;
                this.newSticker = params.newSticker;
            }
            static async read(_data, ..._args) {
                let sticker = await index_js_1.TLObject.read(_data);
                let newSticker = await index_js_1.TLObject.read(_data);
                return new Raw.stickers.ReplaceSticker({ sticker: sticker, newSticker: newSticker });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.sticker !== undefined) {
                    b.write(this.sticker.write());
                }
                if (this.newSticker !== undefined) {
                    b.write(this.newSticker.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stickers_1.ReplaceSticker = ReplaceSticker;
    })(stickers = Raw.stickers || (Raw.stickers = {}));
    let users;
    (function (users_1) {
        class UserFull extends index_js_1.TLObject {
            fullUser;
            chats;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'users.UserFull';
                this.constructorId = 0x3b6d152e;
                this.subclassOfId = 0x83df9df5;
                this._slots = ['fullUser', 'chats', 'users'];
                this.fullUser = params.fullUser;
                this.chats = params.chats;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let fullUser = await index_js_1.TLObject.read(_data);
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.users.UserFull({ fullUser: fullUser, chats: chats, users: users });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.fullUser !== undefined) {
                    b.write(this.fullUser.write());
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        users_1.UserFull = UserFull;
        class GetUsers extends index_js_1.TLObject {
            __response__;
            id;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'users.GetUsers';
                this.constructorId = 0xd91a548;
                this.subclassOfId = 0x406da4d;
                this._slots = ['id'];
                this.id = params.id;
            }
            static async read(_data, ..._args) {
                let id = await index_js_1.TLObject.read(_data);
                return new Raw.users.GetUsers({ id: id });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.id) {
                    b.write(index_js_1.Primitive.Vector.write(this.id));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        users_1.GetUsers = GetUsers;
        class GetFullUser extends index_js_1.TLObject {
            __response__;
            id;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'users.GetFullUser';
                this.constructorId = 0xb60f5918;
                this.subclassOfId = 0x83df9df5;
                this._slots = ['id'];
                this.id = params.id;
            }
            static async read(_data, ..._args) {
                let id = await index_js_1.TLObject.read(_data);
                return new Raw.users.GetFullUser({ id: id });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.id !== undefined) {
                    b.write(this.id.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        users_1.GetFullUser = GetFullUser;
        class SetSecureValueErrors extends index_js_1.TLObject {
            __response__;
            id;
            errors;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'users.SetSecureValueErrors';
                this.constructorId = 0x90c894b5;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['id', 'errors'];
                this.id = params.id;
                this.errors = params.errors;
            }
            static async read(_data, ..._args) {
                let id = await index_js_1.TLObject.read(_data);
                let errors = await index_js_1.TLObject.read(_data);
                return new Raw.users.SetSecureValueErrors({ id: id, errors: errors });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.id !== undefined) {
                    b.write(this.id.write());
                }
                if (this.errors) {
                    b.write(index_js_1.Primitive.Vector.write(this.errors));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        users_1.SetSecureValueErrors = SetSecureValueErrors;
        class GetIsPremiumRequiredToContact extends index_js_1.TLObject {
            __response__;
            id;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'users.GetIsPremiumRequiredToContact';
                this.constructorId = 0xa622aa10;
                this.subclassOfId = 0x15dfc3f1;
                this._slots = ['id'];
                this.id = params.id;
            }
            static async read(_data, ..._args) {
                let id = await index_js_1.TLObject.read(_data);
                return new Raw.users.GetIsPremiumRequiredToContact({ id: id });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.id) {
                    b.write(index_js_1.Primitive.Vector.write(this.id));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        users_1.GetIsPremiumRequiredToContact = GetIsPremiumRequiredToContact;
    })(users = Raw.users || (Raw.users = {}));
    let chatlists;
    (function (chatlists) {
        class ExportedChatlistInvite extends index_js_1.TLObject {
            filter;
            invite;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'chatlists.ExportedChatlistInvite';
                this.constructorId = 0x10e6e3a6;
                this.subclassOfId = 0xc2694ee9;
                this._slots = ['filter', 'invite'];
                this.filter = params.filter;
                this.invite = params.invite;
            }
            static async read(_data, ..._args) {
                let filter = await index_js_1.TLObject.read(_data);
                let invite = await index_js_1.TLObject.read(_data);
                return new Raw.chatlists.ExportedChatlistInvite({ filter: filter, invite: invite });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.filter !== undefined) {
                    b.write(this.filter.write());
                }
                if (this.invite !== undefined) {
                    b.write(this.invite.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        chatlists.ExportedChatlistInvite = ExportedChatlistInvite;
        class ExportedInvites extends index_js_1.TLObject {
            invites;
            chats;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'chatlists.ExportedInvites';
                this.constructorId = 0x10ab6dc7;
                this.subclassOfId = 0xe6c209c0;
                this._slots = ['invites', 'chats', 'users'];
                this.invites = params.invites;
                this.chats = params.chats;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let invites = await index_js_1.TLObject.read(_data);
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.chatlists.ExportedInvites({ invites: invites, chats: chats, users: users });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.invites) {
                    b.write(index_js_1.Primitive.Vector.write(this.invites));
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        chatlists.ExportedInvites = ExportedInvites;
        class ChatlistInviteAlready extends index_js_1.TLObject {
            filterId;
            missingPeers;
            alreadyPeers;
            chats;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'chatlists.ChatlistInviteAlready';
                this.constructorId = 0xfa87f659;
                this.subclassOfId = 0x41720e75;
                this._slots = ['filterId', 'missingPeers', 'alreadyPeers', 'chats', 'users'];
                this.filterId = params.filterId;
                this.missingPeers = params.missingPeers;
                this.alreadyPeers = params.alreadyPeers;
                this.chats = params.chats;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let filterId = await index_js_1.Primitive.Int.read(_data);
                let missingPeers = await index_js_1.TLObject.read(_data);
                let alreadyPeers = await index_js_1.TLObject.read(_data);
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.chatlists.ChatlistInviteAlready({
                    filterId: filterId,
                    missingPeers: missingPeers,
                    alreadyPeers: alreadyPeers,
                    chats: chats,
                    users: users,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.filterId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.filterId));
                }
                if (this.missingPeers) {
                    b.write(index_js_1.Primitive.Vector.write(this.missingPeers));
                }
                if (this.alreadyPeers) {
                    b.write(index_js_1.Primitive.Vector.write(this.alreadyPeers));
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        chatlists.ChatlistInviteAlready = ChatlistInviteAlready;
        class ChatlistInvite extends index_js_1.TLObject {
            title;
            emoticon;
            peers;
            chats;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'chatlists.ChatlistInvite';
                this.constructorId = 0x1dcd839d;
                this.subclassOfId = 0x41720e75;
                this._slots = ['title', 'emoticon', 'peers', 'chats', 'users'];
                this.title = params.title;
                this.emoticon = params.emoticon;
                this.peers = params.peers;
                this.chats = params.chats;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let title = await index_js_1.Primitive.String.read(_data);
                let emoticon = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let peers = await index_js_1.TLObject.read(_data);
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.chatlists.ChatlistInvite({
                    title: title,
                    emoticon: emoticon,
                    peers: peers,
                    chats: chats,
                    users: users,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.emoticon !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.title !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.title));
                }
                if (this.emoticon !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.emoticon));
                }
                if (this.peers) {
                    b.write(index_js_1.Primitive.Vector.write(this.peers));
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        chatlists.ChatlistInvite = ChatlistInvite;
        class ChatlistUpdates extends index_js_1.TLObject {
            missingPeers;
            chats;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'chatlists.ChatlistUpdates';
                this.constructorId = 0x93bd878d;
                this.subclassOfId = 0x7d1641ea;
                this._slots = ['missingPeers', 'chats', 'users'];
                this.missingPeers = params.missingPeers;
                this.chats = params.chats;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let missingPeers = await index_js_1.TLObject.read(_data);
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.chatlists.ChatlistUpdates({
                    missingPeers: missingPeers,
                    chats: chats,
                    users: users,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.missingPeers) {
                    b.write(index_js_1.Primitive.Vector.write(this.missingPeers));
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        chatlists.ChatlistUpdates = ChatlistUpdates;
        class ExportChatlistInvite extends index_js_1.TLObject {
            __response__;
            chatlist;
            title;
            peers;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'chatlists.ExportChatlistInvite';
                this.constructorId = 0x8472478e;
                this.subclassOfId = 0xc2694ee9;
                this._slots = ['chatlist', 'title', 'peers'];
                this.chatlist = params.chatlist;
                this.title = params.title;
                this.peers = params.peers;
            }
            static async read(_data, ..._args) {
                let chatlist = await index_js_1.TLObject.read(_data);
                let title = await index_js_1.Primitive.String.read(_data);
                let peers = await index_js_1.TLObject.read(_data);
                return new Raw.chatlists.ExportChatlistInvite({
                    chatlist: chatlist,
                    title: title,
                    peers: peers,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.chatlist !== undefined) {
                    b.write(this.chatlist.write());
                }
                if (this.title !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.title));
                }
                if (this.peers) {
                    b.write(index_js_1.Primitive.Vector.write(this.peers));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        chatlists.ExportChatlistInvite = ExportChatlistInvite;
        class DeleteExportedInvite extends index_js_1.TLObject {
            __response__;
            chatlist;
            slug;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'chatlists.DeleteExportedInvite';
                this.constructorId = 0x719c5c5e;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['chatlist', 'slug'];
                this.chatlist = params.chatlist;
                this.slug = params.slug;
            }
            static async read(_data, ..._args) {
                let chatlist = await index_js_1.TLObject.read(_data);
                let slug = await index_js_1.Primitive.String.read(_data);
                return new Raw.chatlists.DeleteExportedInvite({ chatlist: chatlist, slug: slug });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.chatlist !== undefined) {
                    b.write(this.chatlist.write());
                }
                if (this.slug !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.slug));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        chatlists.DeleteExportedInvite = DeleteExportedInvite;
        class EditExportedInvite extends index_js_1.TLObject {
            __response__;
            chatlist;
            slug;
            title;
            peers;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'chatlists.EditExportedInvite';
                this.constructorId = 0x653db63d;
                this.subclassOfId = 0x7711f8ff;
                this._slots = ['chatlist', 'slug', 'title', 'peers'];
                this.chatlist = params.chatlist;
                this.slug = params.slug;
                this.title = params.title;
                this.peers = params.peers;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let chatlist = await index_js_1.TLObject.read(_data);
                let slug = await index_js_1.Primitive.String.read(_data);
                let title = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let peers = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : [];
                return new Raw.chatlists.EditExportedInvite({
                    chatlist: chatlist,
                    slug: slug,
                    title: title,
                    peers: peers,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.title !== undefined ? 1 << 1 : 0;
                flags |= this.peers ? 1 << 2 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.chatlist !== undefined) {
                    b.write(this.chatlist.write());
                }
                if (this.slug !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.slug));
                }
                if (this.title !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.title));
                }
                if (this.peers) {
                    b.write(index_js_1.Primitive.Vector.write(this.peers));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        chatlists.EditExportedInvite = EditExportedInvite;
        class GetExportedInvites extends index_js_1.TLObject {
            __response__;
            chatlist;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'chatlists.GetExportedInvites';
                this.constructorId = 0xce03da83;
                this.subclassOfId = 0xe6c209c0;
                this._slots = ['chatlist'];
                this.chatlist = params.chatlist;
            }
            static async read(_data, ..._args) {
                let chatlist = await index_js_1.TLObject.read(_data);
                return new Raw.chatlists.GetExportedInvites({ chatlist: chatlist });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.chatlist !== undefined) {
                    b.write(this.chatlist.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        chatlists.GetExportedInvites = GetExportedInvites;
        class CheckChatlistInvite extends index_js_1.TLObject {
            __response__;
            slug;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'chatlists.CheckChatlistInvite';
                this.constructorId = 0x41c10fff;
                this.subclassOfId = 0x41720e75;
                this._slots = ['slug'];
                this.slug = params.slug;
            }
            static async read(_data, ..._args) {
                let slug = await index_js_1.Primitive.String.read(_data);
                return new Raw.chatlists.CheckChatlistInvite({ slug: slug });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.slug !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.slug));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        chatlists.CheckChatlistInvite = CheckChatlistInvite;
        class JoinChatlistInvite extends index_js_1.TLObject {
            __response__;
            slug;
            peers;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'chatlists.JoinChatlistInvite';
                this.constructorId = 0xa6b1e39a;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['slug', 'peers'];
                this.slug = params.slug;
                this.peers = params.peers;
            }
            static async read(_data, ..._args) {
                let slug = await index_js_1.Primitive.String.read(_data);
                let peers = await index_js_1.TLObject.read(_data);
                return new Raw.chatlists.JoinChatlistInvite({ slug: slug, peers: peers });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.slug !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.slug));
                }
                if (this.peers) {
                    b.write(index_js_1.Primitive.Vector.write(this.peers));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        chatlists.JoinChatlistInvite = JoinChatlistInvite;
        class GetChatlistUpdates extends index_js_1.TLObject {
            __response__;
            chatlist;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'chatlists.GetChatlistUpdates';
                this.constructorId = 0x89419521;
                this.subclassOfId = 0x7d1641ea;
                this._slots = ['chatlist'];
                this.chatlist = params.chatlist;
            }
            static async read(_data, ..._args) {
                let chatlist = await index_js_1.TLObject.read(_data);
                return new Raw.chatlists.GetChatlistUpdates({ chatlist: chatlist });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.chatlist !== undefined) {
                    b.write(this.chatlist.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        chatlists.GetChatlistUpdates = GetChatlistUpdates;
        class JoinChatlistUpdates extends index_js_1.TLObject {
            __response__;
            chatlist;
            peers;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'chatlists.JoinChatlistUpdates';
                this.constructorId = 0xe089f8f5;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['chatlist', 'peers'];
                this.chatlist = params.chatlist;
                this.peers = params.peers;
            }
            static async read(_data, ..._args) {
                let chatlist = await index_js_1.TLObject.read(_data);
                let peers = await index_js_1.TLObject.read(_data);
                return new Raw.chatlists.JoinChatlistUpdates({ chatlist: chatlist, peers: peers });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.chatlist !== undefined) {
                    b.write(this.chatlist.write());
                }
                if (this.peers) {
                    b.write(index_js_1.Primitive.Vector.write(this.peers));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        chatlists.JoinChatlistUpdates = JoinChatlistUpdates;
        class HideChatlistUpdates extends index_js_1.TLObject {
            __response__;
            chatlist;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'chatlists.HideChatlistUpdates';
                this.constructorId = 0x66e486fb;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['chatlist'];
                this.chatlist = params.chatlist;
            }
            static async read(_data, ..._args) {
                let chatlist = await index_js_1.TLObject.read(_data);
                return new Raw.chatlists.HideChatlistUpdates({ chatlist: chatlist });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.chatlist !== undefined) {
                    b.write(this.chatlist.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        chatlists.HideChatlistUpdates = HideChatlistUpdates;
        class GetLeaveChatlistSuggestions extends index_js_1.TLObject {
            __response__;
            chatlist;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'chatlists.GetLeaveChatlistSuggestions';
                this.constructorId = 0xfdbcd714;
                this.subclassOfId = 0xb9945d7e;
                this._slots = ['chatlist'];
                this.chatlist = params.chatlist;
            }
            static async read(_data, ..._args) {
                let chatlist = await index_js_1.TLObject.read(_data);
                return new Raw.chatlists.GetLeaveChatlistSuggestions({ chatlist: chatlist });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.chatlist !== undefined) {
                    b.write(this.chatlist.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        chatlists.GetLeaveChatlistSuggestions = GetLeaveChatlistSuggestions;
        class LeaveChatlist extends index_js_1.TLObject {
            __response__;
            chatlist;
            peers;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'chatlists.LeaveChatlist';
                this.constructorId = 0x74fae13a;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['chatlist', 'peers'];
                this.chatlist = params.chatlist;
                this.peers = params.peers;
            }
            static async read(_data, ..._args) {
                let chatlist = await index_js_1.TLObject.read(_data);
                let peers = await index_js_1.TLObject.read(_data);
                return new Raw.chatlists.LeaveChatlist({ chatlist: chatlist, peers: peers });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.chatlist !== undefined) {
                    b.write(this.chatlist.write());
                }
                if (this.peers) {
                    b.write(index_js_1.Primitive.Vector.write(this.peers));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        chatlists.LeaveChatlist = LeaveChatlist;
    })(chatlists = Raw.chatlists || (Raw.chatlists = {}));
    let bots;
    (function (bots) {
        class BotInfo extends index_js_1.TLObject {
            name;
            about;
            description;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'bots.BotInfo';
                this.constructorId = 0xe8a775b0;
                this.subclassOfId = 0xca7b2235;
                this._slots = ['name', 'about', 'description'];
                this.name = params.name;
                this.about = params.about;
                this.description = params.description;
            }
            static async read(_data, ..._args) {
                let name = await index_js_1.Primitive.String.read(_data);
                let about = await index_js_1.Primitive.String.read(_data);
                let description = await index_js_1.Primitive.String.read(_data);
                return new Raw.bots.BotInfo({ name: name, about: about, description: description });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.name !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.name));
                }
                if (this.about !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.about));
                }
                if (this.description !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.description));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        bots.BotInfo = BotInfo;
        class SendCustomRequest extends index_js_1.TLObject {
            __response__;
            customMethod;
            params;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'bots.SendCustomRequest';
                this.constructorId = 0xaa2769ed;
                this.subclassOfId = 0xad0352e8;
                this._slots = ['customMethod', 'params'];
                this.customMethod = params.customMethod;
                this.params = params.params;
            }
            static async read(_data, ..._args) {
                let customMethod = await index_js_1.Primitive.String.read(_data);
                let params = await index_js_1.TLObject.read(_data);
                return new Raw.bots.SendCustomRequest({ customMethod: customMethod, params: params });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.customMethod !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.customMethod));
                }
                if (this.params !== undefined) {
                    b.write(this.params.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        bots.SendCustomRequest = SendCustomRequest;
        class AnswerWebhookJSONQuery extends index_js_1.TLObject {
            __response__;
            queryId;
            data;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'bots.AnswerWebhookJSONQuery';
                this.constructorId = 0xe6213f4d;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['queryId', 'data'];
                this.queryId = params.queryId;
                this.data = params.data;
            }
            static async read(_data, ..._args) {
                let queryId = await index_js_1.Primitive.Long.read(_data);
                let data = await index_js_1.TLObject.read(_data);
                return new Raw.bots.AnswerWebhookJSONQuery({ queryId: queryId, data: data });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.queryId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.queryId));
                }
                if (this.data !== undefined) {
                    b.write(this.data.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        bots.AnswerWebhookJSONQuery = AnswerWebhookJSONQuery;
        class SetBotCommands extends index_js_1.TLObject {
            __response__;
            scope;
            langCode;
            commands;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'bots.SetBotCommands';
                this.constructorId = 0x517165a;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['scope', 'langCode', 'commands'];
                this.scope = params.scope;
                this.langCode = params.langCode;
                this.commands = params.commands;
            }
            static async read(_data, ..._args) {
                let scope = await index_js_1.TLObject.read(_data);
                let langCode = await index_js_1.Primitive.String.read(_data);
                let commands = await index_js_1.TLObject.read(_data);
                return new Raw.bots.SetBotCommands({
                    scope: scope,
                    langCode: langCode,
                    commands: commands,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.scope !== undefined) {
                    b.write(this.scope.write());
                }
                if (this.langCode !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.langCode));
                }
                if (this.commands) {
                    b.write(index_js_1.Primitive.Vector.write(this.commands));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        bots.SetBotCommands = SetBotCommands;
        class ResetBotCommands extends index_js_1.TLObject {
            __response__;
            scope;
            langCode;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'bots.ResetBotCommands';
                this.constructorId = 0x3d8de0f9;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['scope', 'langCode'];
                this.scope = params.scope;
                this.langCode = params.langCode;
            }
            static async read(_data, ..._args) {
                let scope = await index_js_1.TLObject.read(_data);
                let langCode = await index_js_1.Primitive.String.read(_data);
                return new Raw.bots.ResetBotCommands({ scope: scope, langCode: langCode });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.scope !== undefined) {
                    b.write(this.scope.write());
                }
                if (this.langCode !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.langCode));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        bots.ResetBotCommands = ResetBotCommands;
        class GetBotCommands extends index_js_1.TLObject {
            __response__;
            scope;
            langCode;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'bots.GetBotCommands';
                this.constructorId = 0xe34c0dd6;
                this.subclassOfId = 0xfae91529;
                this._slots = ['scope', 'langCode'];
                this.scope = params.scope;
                this.langCode = params.langCode;
            }
            static async read(_data, ..._args) {
                let scope = await index_js_1.TLObject.read(_data);
                let langCode = await index_js_1.Primitive.String.read(_data);
                return new Raw.bots.GetBotCommands({ scope: scope, langCode: langCode });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.scope !== undefined) {
                    b.write(this.scope.write());
                }
                if (this.langCode !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.langCode));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        bots.GetBotCommands = GetBotCommands;
        class SetBotMenuButton extends index_js_1.TLObject {
            __response__;
            userId;
            button;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'bots.SetBotMenuButton';
                this.constructorId = 0x4504d54f;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['userId', 'button'];
                this.userId = params.userId;
                this.button = params.button;
            }
            static async read(_data, ..._args) {
                let userId = await index_js_1.TLObject.read(_data);
                let button = await index_js_1.TLObject.read(_data);
                return new Raw.bots.SetBotMenuButton({ userId: userId, button: button });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.userId !== undefined) {
                    b.write(this.userId.write());
                }
                if (this.button !== undefined) {
                    b.write(this.button.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        bots.SetBotMenuButton = SetBotMenuButton;
        class GetBotMenuButton extends index_js_1.TLObject {
            __response__;
            userId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'bots.GetBotMenuButton';
                this.constructorId = 0x9c60eb28;
                this.subclassOfId = 0x4c71bd3c;
                this._slots = ['userId'];
                this.userId = params.userId;
            }
            static async read(_data, ..._args) {
                let userId = await index_js_1.TLObject.read(_data);
                return new Raw.bots.GetBotMenuButton({ userId: userId });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.userId !== undefined) {
                    b.write(this.userId.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        bots.GetBotMenuButton = GetBotMenuButton;
        class SetBotBroadcastDefaultAdminRights extends index_js_1.TLObject {
            __response__;
            adminRights;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'bots.SetBotBroadcastDefaultAdminRights';
                this.constructorId = 0x788464e1;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['adminRights'];
                this.adminRights = params.adminRights;
            }
            static async read(_data, ..._args) {
                let adminRights = await index_js_1.TLObject.read(_data);
                return new Raw.bots.SetBotBroadcastDefaultAdminRights({ adminRights: adminRights });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.adminRights !== undefined) {
                    b.write(this.adminRights.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        bots.SetBotBroadcastDefaultAdminRights = SetBotBroadcastDefaultAdminRights;
        class SetBotGroupDefaultAdminRights extends index_js_1.TLObject {
            __response__;
            adminRights;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'bots.SetBotGroupDefaultAdminRights';
                this.constructorId = 0x925ec9ea;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['adminRights'];
                this.adminRights = params.adminRights;
            }
            static async read(_data, ..._args) {
                let adminRights = await index_js_1.TLObject.read(_data);
                return new Raw.bots.SetBotGroupDefaultAdminRights({ adminRights: adminRights });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.adminRights !== undefined) {
                    b.write(this.adminRights.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        bots.SetBotGroupDefaultAdminRights = SetBotGroupDefaultAdminRights;
        class SetBotInfo extends index_js_1.TLObject {
            __response__;
            bot;
            langCode;
            name;
            about;
            description;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'bots.SetBotInfo';
                this.constructorId = 0x10cf3123;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['bot', 'langCode', 'name', 'about', 'description'];
                this.bot = params.bot;
                this.langCode = params.langCode;
                this.name = params.name;
                this.about = params.about;
                this.description = params.description;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let bot = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : undefined;
                let langCode = await index_js_1.Primitive.String.read(_data);
                let name = flags & (1 << 3) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let about = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let description = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
                return new Raw.bots.SetBotInfo({
                    bot: bot,
                    langCode: langCode,
                    name: name,
                    about: about,
                    description: description,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.bot !== undefined ? 1 << 2 : 0;
                flags |= this.name !== undefined ? 1 << 3 : 0;
                flags |= this.about !== undefined ? 1 << 0 : 0;
                flags |= this.description !== undefined ? 1 << 1 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.bot !== undefined) {
                    b.write(this.bot.write());
                }
                if (this.langCode !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.langCode));
                }
                if (this.name !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.name));
                }
                if (this.about !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.about));
                }
                if (this.description !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.description));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        bots.SetBotInfo = SetBotInfo;
        class GetBotInfo extends index_js_1.TLObject {
            __response__;
            bot;
            langCode;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'bots.GetBotInfo';
                this.constructorId = 0xdcd914fd;
                this.subclassOfId = 0xca7b2235;
                this._slots = ['bot', 'langCode'];
                this.bot = params.bot;
                this.langCode = params.langCode;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let bot = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
                let langCode = await index_js_1.Primitive.String.read(_data);
                return new Raw.bots.GetBotInfo({ bot: bot, langCode: langCode });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.bot !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.bot !== undefined) {
                    b.write(this.bot.write());
                }
                if (this.langCode !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.langCode));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        bots.GetBotInfo = GetBotInfo;
        class ReorderUsernames extends index_js_1.TLObject {
            __response__;
            bot;
            order;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'bots.ReorderUsernames';
                this.constructorId = 0x9709b1c2;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['bot', 'order'];
                this.bot = params.bot;
                this.order = params.order;
            }
            static async read(_data, ..._args) {
                let bot = await index_js_1.TLObject.read(_data);
                let order = await index_js_1.TLObject.read(_data, index_js_1.Primitive.String);
                return new Raw.bots.ReorderUsernames({ bot: bot, order: order });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.bot !== undefined) {
                    b.write(this.bot.write());
                }
                if (this.order) {
                    b.write(index_js_1.Primitive.Vector.write(this.order, index_js_1.Primitive.String));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        bots.ReorderUsernames = ReorderUsernames;
        class ToggleUsername extends index_js_1.TLObject {
            __response__;
            bot;
            username;
            active;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'bots.ToggleUsername';
                this.constructorId = 0x53ca973;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['bot', 'username', 'active'];
                this.bot = params.bot;
                this.username = params.username;
                this.active = params.active;
            }
            static async read(_data, ..._args) {
                let bot = await index_js_1.TLObject.read(_data);
                let username = await index_js_1.Primitive.String.read(_data);
                let active = await index_js_1.Primitive.Bool.read(_data);
                return new Raw.bots.ToggleUsername({ bot: bot, username: username, active: active });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.bot !== undefined) {
                    b.write(this.bot.write());
                }
                if (this.username !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.username));
                }
                if (this.active !== undefined) {
                    b.write(index_js_1.Primitive.Bool.write(this.active));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        bots.ToggleUsername = ToggleUsername;
        class CanSendMessage extends index_js_1.TLObject {
            __response__;
            bot;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'bots.CanSendMessage';
                this.constructorId = 0x1359f4e6;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['bot'];
                this.bot = params.bot;
            }
            static async read(_data, ..._args) {
                let bot = await index_js_1.TLObject.read(_data);
                return new Raw.bots.CanSendMessage({ bot: bot });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.bot !== undefined) {
                    b.write(this.bot.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        bots.CanSendMessage = CanSendMessage;
        class AllowSendMessage extends index_js_1.TLObject {
            __response__;
            bot;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'bots.AllowSendMessage';
                this.constructorId = 0xf132e3ef;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['bot'];
                this.bot = params.bot;
            }
            static async read(_data, ..._args) {
                let bot = await index_js_1.TLObject.read(_data);
                return new Raw.bots.AllowSendMessage({ bot: bot });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.bot !== undefined) {
                    b.write(this.bot.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        bots.AllowSendMessage = AllowSendMessage;
        class InvokeWebViewCustomMethod extends index_js_1.TLObject {
            __response__;
            bot;
            customMethod;
            params;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'bots.InvokeWebViewCustomMethod';
                this.constructorId = 0x87fc5e7;
                this.subclassOfId = 0xad0352e8;
                this._slots = ['bot', 'customMethod', 'params'];
                this.bot = params.bot;
                this.customMethod = params.customMethod;
                this.params = params.params;
            }
            static async read(_data, ..._args) {
                let bot = await index_js_1.TLObject.read(_data);
                let customMethod = await index_js_1.Primitive.String.read(_data);
                let params = await index_js_1.TLObject.read(_data);
                return new Raw.bots.InvokeWebViewCustomMethod({
                    bot: bot,
                    customMethod: customMethod,
                    params: params,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.bot !== undefined) {
                    b.write(this.bot.write());
                }
                if (this.customMethod !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.customMethod));
                }
                if (this.params !== undefined) {
                    b.write(this.params.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        bots.InvokeWebViewCustomMethod = InvokeWebViewCustomMethod;
    })(bots = Raw.bots || (Raw.bots = {}));
    let stories;
    (function (stories_1) {
        class AllStoriesNotModified extends index_js_1.TLObject {
            state;
            stealthMode;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'stories.AllStoriesNotModified';
                this.constructorId = 0x1158fe3e;
                this.subclassOfId = 0x7e60d0cd;
                this._slots = ['state', 'stealthMode'];
                this.state = params.state;
                this.stealthMode = params.stealthMode;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let state = await index_js_1.Primitive.String.read(_data);
                let stealthMode = await index_js_1.TLObject.read(_data);
                return new Raw.stories.AllStoriesNotModified({ state: state, stealthMode: stealthMode });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.state !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.state));
                }
                if (this.stealthMode !== undefined) {
                    b.write(this.stealthMode.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stories_1.AllStoriesNotModified = AllStoriesNotModified;
        class AllStories extends index_js_1.TLObject {
            hasMore;
            count;
            state;
            peerStories;
            chats;
            users;
            stealthMode;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'stories.AllStories';
                this.constructorId = 0x6efc5e81;
                this.subclassOfId = 0x7e60d0cd;
                this._slots = ['hasMore', 'count', 'state', 'peerStories', 'chats', 'users', 'stealthMode'];
                this.hasMore = params.hasMore;
                this.count = params.count;
                this.state = params.state;
                this.peerStories = params.peerStories;
                this.chats = params.chats;
                this.users = params.users;
                this.stealthMode = params.stealthMode;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let hasMore = flags & (1 << 0) ? true : false;
                let count = await index_js_1.Primitive.Int.read(_data);
                let state = await index_js_1.Primitive.String.read(_data);
                let peerStories = await index_js_1.TLObject.read(_data);
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                let stealthMode = await index_js_1.TLObject.read(_data);
                return new Raw.stories.AllStories({
                    hasMore: hasMore,
                    count: count,
                    state: state,
                    peerStories: peerStories,
                    chats: chats,
                    users: users,
                    stealthMode: stealthMode,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.hasMore ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.count !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.count));
                }
                if (this.state !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.state));
                }
                if (this.peerStories) {
                    b.write(index_js_1.Primitive.Vector.write(this.peerStories));
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                if (this.stealthMode !== undefined) {
                    b.write(this.stealthMode.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stories_1.AllStories = AllStories;
        class Stories extends index_js_1.TLObject {
            count;
            stories;
            pinnedToTop;
            chats;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'stories.Stories';
                this.constructorId = 0x63c3dd0a;
                this.subclassOfId = 0x251c0c2c;
                this._slots = ['count', 'stories', 'pinnedToTop', 'chats', 'users'];
                this.count = params.count;
                this.stories = params.stories;
                this.pinnedToTop = params.pinnedToTop;
                this.chats = params.chats;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let count = await index_js_1.Primitive.Int.read(_data);
                let stories = await index_js_1.TLObject.read(_data);
                let pinnedToTop = flags & (1 << 0) ? await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int) : [];
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.stories.Stories({
                    count: count,
                    stories: stories,
                    pinnedToTop: pinnedToTop,
                    chats: chats,
                    users: users,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.pinnedToTop ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.count !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.count));
                }
                if (this.stories) {
                    b.write(index_js_1.Primitive.Vector.write(this.stories));
                }
                if (this.pinnedToTop) {
                    b.write(index_js_1.Primitive.Vector.write(this.pinnedToTop, index_js_1.Primitive.Int));
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stories_1.Stories = Stories;
        class StoryViewsList extends index_js_1.TLObject {
            count;
            viewsCount;
            forwardsCount;
            reactionsCount;
            views;
            chats;
            users;
            nextOffset;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'stories.StoryViewsList';
                this.constructorId = 0x59d78fc5;
                this.subclassOfId = 0xb9437560;
                this._slots = [
                    'count',
                    'viewsCount',
                    'forwardsCount',
                    'reactionsCount',
                    'views',
                    'chats',
                    'users',
                    'nextOffset',
                ];
                this.count = params.count;
                this.viewsCount = params.viewsCount;
                this.forwardsCount = params.forwardsCount;
                this.reactionsCount = params.reactionsCount;
                this.views = params.views;
                this.chats = params.chats;
                this.users = params.users;
                this.nextOffset = params.nextOffset;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let count = await index_js_1.Primitive.Int.read(_data);
                let viewsCount = await index_js_1.Primitive.Int.read(_data);
                let forwardsCount = await index_js_1.Primitive.Int.read(_data);
                let reactionsCount = await index_js_1.Primitive.Int.read(_data);
                let views = await index_js_1.TLObject.read(_data);
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                let nextOffset = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
                return new Raw.stories.StoryViewsList({
                    count: count,
                    viewsCount: viewsCount,
                    forwardsCount: forwardsCount,
                    reactionsCount: reactionsCount,
                    views: views,
                    chats: chats,
                    users: users,
                    nextOffset: nextOffset,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.nextOffset !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.count !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.count));
                }
                if (this.viewsCount !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.viewsCount));
                }
                if (this.forwardsCount !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.forwardsCount));
                }
                if (this.reactionsCount !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.reactionsCount));
                }
                if (this.views) {
                    b.write(index_js_1.Primitive.Vector.write(this.views));
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                if (this.nextOffset !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.nextOffset));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stories_1.StoryViewsList = StoryViewsList;
        class StoryViews extends index_js_1.TLObject {
            views;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'stories.StoryViews';
                this.constructorId = 0xde9eed1d;
                this.subclassOfId = 0x4b3fc4ba;
                this._slots = ['views', 'users'];
                this.views = params.views;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let views = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.stories.StoryViews({ views: views, users: users });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.views) {
                    b.write(index_js_1.Primitive.Vector.write(this.views));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stories_1.StoryViews = StoryViews;
        class PeerStories extends index_js_1.TLObject {
            stories;
            chats;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'stories.PeerStories';
                this.constructorId = 0xcae68768;
                this.subclassOfId = 0x9d56cfd0;
                this._slots = ['stories', 'chats', 'users'];
                this.stories = params.stories;
                this.chats = params.chats;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let stories = await index_js_1.TLObject.read(_data);
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.stories.PeerStories({ stories: stories, chats: chats, users: users });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.stories !== undefined) {
                    b.write(this.stories.write());
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stories_1.PeerStories = PeerStories;
        class StoryReactionsList extends index_js_1.TLObject {
            count;
            reactions;
            chats;
            users;
            nextOffset;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'stories.StoryReactionsList';
                this.constructorId = 0xaa5f789c;
                this.subclassOfId = 0x46f91e3;
                this._slots = ['count', 'reactions', 'chats', 'users', 'nextOffset'];
                this.count = params.count;
                this.reactions = params.reactions;
                this.chats = params.chats;
                this.users = params.users;
                this.nextOffset = params.nextOffset;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let count = await index_js_1.Primitive.Int.read(_data);
                let reactions = await index_js_1.TLObject.read(_data);
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                let nextOffset = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
                return new Raw.stories.StoryReactionsList({
                    count: count,
                    reactions: reactions,
                    chats: chats,
                    users: users,
                    nextOffset: nextOffset,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.nextOffset !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.count !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.count));
                }
                if (this.reactions) {
                    b.write(index_js_1.Primitive.Vector.write(this.reactions));
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                if (this.nextOffset !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.nextOffset));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stories_1.StoryReactionsList = StoryReactionsList;
        class CanSendStory extends index_js_1.TLObject {
            __response__;
            peer;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'stories.CanSendStory';
                this.constructorId = 0xc7dfdfdd;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['peer'];
                this.peer = params.peer;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                return new Raw.stories.CanSendStory({ peer: peer });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stories_1.CanSendStory = CanSendStory;
        class SendStory extends index_js_1.TLObject {
            __response__;
            pinned;
            noforwards;
            fwdModified;
            peer;
            media;
            mediaAreas;
            caption;
            entities;
            privacyRules;
            randomId;
            period;
            fwdFromId;
            fwdFromStory;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'stories.SendStory';
                this.constructorId = 0xe4e6694b;
                this.subclassOfId = 0x8af52aac;
                this._slots = [
                    'pinned',
                    'noforwards',
                    'fwdModified',
                    'peer',
                    'media',
                    'mediaAreas',
                    'caption',
                    'entities',
                    'privacyRules',
                    'randomId',
                    'period',
                    'fwdFromId',
                    'fwdFromStory',
                ];
                this.pinned = params.pinned;
                this.noforwards = params.noforwards;
                this.fwdModified = params.fwdModified;
                this.peer = params.peer;
                this.media = params.media;
                this.mediaAreas = params.mediaAreas;
                this.caption = params.caption;
                this.entities = params.entities;
                this.privacyRules = params.privacyRules;
                this.randomId = params.randomId;
                this.period = params.period;
                this.fwdFromId = params.fwdFromId;
                this.fwdFromStory = params.fwdFromStory;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let pinned = flags & (1 << 2) ? true : false;
                let noforwards = flags & (1 << 4) ? true : false;
                let fwdModified = flags & (1 << 7) ? true : false;
                let peer = await index_js_1.TLObject.read(_data);
                let media = await index_js_1.TLObject.read(_data);
                let mediaAreas = flags & (1 << 5) ? await index_js_1.TLObject.read(_data) : [];
                let caption = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let entities = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : [];
                let privacyRules = await index_js_1.TLObject.read(_data);
                let randomId = await index_js_1.Primitive.Long.read(_data);
                let period = flags & (1 << 3) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let fwdFromId = flags & (1 << 6) ? await index_js_1.TLObject.read(_data) : undefined;
                let fwdFromStory = flags & (1 << 6) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                return new Raw.stories.SendStory({
                    pinned: pinned,
                    noforwards: noforwards,
                    fwdModified: fwdModified,
                    peer: peer,
                    media: media,
                    mediaAreas: mediaAreas,
                    caption: caption,
                    entities: entities,
                    privacyRules: privacyRules,
                    randomId: randomId,
                    period: period,
                    fwdFromId: fwdFromId,
                    fwdFromStory: fwdFromStory,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.pinned ? 1 << 2 : 0;
                flags |= this.noforwards ? 1 << 4 : 0;
                flags |= this.fwdModified ? 1 << 7 : 0;
                flags |= this.mediaAreas ? 1 << 5 : 0;
                flags |= this.caption !== undefined ? 1 << 0 : 0;
                flags |= this.entities ? 1 << 1 : 0;
                flags |= this.period !== undefined ? 1 << 3 : 0;
                flags |= this.fwdFromId !== undefined ? 1 << 6 : 0;
                flags |= this.fwdFromStory !== undefined ? 1 << 6 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.media !== undefined) {
                    b.write(this.media.write());
                }
                if (this.mediaAreas) {
                    b.write(index_js_1.Primitive.Vector.write(this.mediaAreas));
                }
                if (this.caption !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.caption));
                }
                if (this.entities) {
                    b.write(index_js_1.Primitive.Vector.write(this.entities));
                }
                if (this.privacyRules) {
                    b.write(index_js_1.Primitive.Vector.write(this.privacyRules));
                }
                if (this.randomId !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.randomId));
                }
                if (this.period !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.period));
                }
                if (this.fwdFromId !== undefined) {
                    b.write(this.fwdFromId.write());
                }
                if (this.fwdFromStory !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.fwdFromStory));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stories_1.SendStory = SendStory;
        class EditStory extends index_js_1.TLObject {
            __response__;
            peer;
            id;
            media;
            mediaAreas;
            caption;
            entities;
            privacyRules;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'stories.EditStory';
                this.constructorId = 0xb583ba46;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['peer', 'id', 'media', 'mediaAreas', 'caption', 'entities', 'privacyRules'];
                this.peer = params.peer;
                this.id = params.id;
                this.media = params.media;
                this.mediaAreas = params.mediaAreas;
                this.caption = params.caption;
                this.entities = params.entities;
                this.privacyRules = params.privacyRules;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let peer = await index_js_1.TLObject.read(_data);
                let id = await index_js_1.Primitive.Int.read(_data);
                let media = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
                let mediaAreas = flags & (1 << 3) ? await index_js_1.TLObject.read(_data) : [];
                let caption = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let entities = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : [];
                let privacyRules = flags & (1 << 2) ? await index_js_1.TLObject.read(_data) : [];
                return new Raw.stories.EditStory({
                    peer: peer,
                    id: id,
                    media: media,
                    mediaAreas: mediaAreas,
                    caption: caption,
                    entities: entities,
                    privacyRules: privacyRules,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.media !== undefined ? 1 << 0 : 0;
                flags |= this.mediaAreas ? 1 << 3 : 0;
                flags |= this.caption !== undefined ? 1 << 1 : 0;
                flags |= this.entities ? 1 << 1 : 0;
                flags |= this.privacyRules ? 1 << 2 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.id !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.id));
                }
                if (this.media !== undefined) {
                    b.write(this.media.write());
                }
                if (this.mediaAreas) {
                    b.write(index_js_1.Primitive.Vector.write(this.mediaAreas));
                }
                if (this.caption !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.caption));
                }
                if (this.entities) {
                    b.write(index_js_1.Primitive.Vector.write(this.entities));
                }
                if (this.privacyRules) {
                    b.write(index_js_1.Primitive.Vector.write(this.privacyRules));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stories_1.EditStory = EditStory;
        class DeleteStories extends index_js_1.TLObject {
            __response__;
            peer;
            id;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'stories.DeleteStories';
                this.constructorId = 0xae59db5f;
                this.subclassOfId = 0x5026710f;
                this._slots = ['peer', 'id'];
                this.peer = params.peer;
                this.id = params.id;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let id = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int);
                return new Raw.stories.DeleteStories({ peer: peer, id: id });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.id) {
                    b.write(index_js_1.Primitive.Vector.write(this.id, index_js_1.Primitive.Int));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stories_1.DeleteStories = DeleteStories;
        class TogglePinned extends index_js_1.TLObject {
            __response__;
            peer;
            id;
            pinned;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'stories.TogglePinned';
                this.constructorId = 0x9a75a1ef;
                this.subclassOfId = 0x5026710f;
                this._slots = ['peer', 'id', 'pinned'];
                this.peer = params.peer;
                this.id = params.id;
                this.pinned = params.pinned;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let id = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int);
                let pinned = await index_js_1.Primitive.Bool.read(_data);
                return new Raw.stories.TogglePinned({ peer: peer, id: id, pinned: pinned });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.id) {
                    b.write(index_js_1.Primitive.Vector.write(this.id, index_js_1.Primitive.Int));
                }
                if (this.pinned !== undefined) {
                    b.write(index_js_1.Primitive.Bool.write(this.pinned));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stories_1.TogglePinned = TogglePinned;
        class GetAllStories extends index_js_1.TLObject {
            __response__;
            next;
            hidden;
            state;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'stories.GetAllStories';
                this.constructorId = 0xeeb0d625;
                this.subclassOfId = 0x7e60d0cd;
                this._slots = ['next', 'hidden', 'state'];
                this.next = params.next;
                this.hidden = params.hidden;
                this.state = params.state;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let next = flags & (1 << 1) ? true : false;
                let hidden = flags & (1 << 2) ? true : false;
                let state = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
                return new Raw.stories.GetAllStories({ next: next, hidden: hidden, state: state });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.next ? 1 << 1 : 0;
                flags |= this.hidden ? 1 << 2 : 0;
                flags |= this.state !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.state !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.state));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stories_1.GetAllStories = GetAllStories;
        class GetPinnedStories extends index_js_1.TLObject {
            __response__;
            peer;
            offsetId;
            limit;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'stories.GetPinnedStories';
                this.constructorId = 0x5821a5dc;
                this.subclassOfId = 0x251c0c2c;
                this._slots = ['peer', 'offsetId', 'limit'];
                this.peer = params.peer;
                this.offsetId = params.offsetId;
                this.limit = params.limit;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let offsetId = await index_js_1.Primitive.Int.read(_data);
                let limit = await index_js_1.Primitive.Int.read(_data);
                return new Raw.stories.GetPinnedStories({ peer: peer, offsetId: offsetId, limit: limit });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.offsetId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.offsetId));
                }
                if (this.limit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.limit));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stories_1.GetPinnedStories = GetPinnedStories;
        class GetStoriesArchive extends index_js_1.TLObject {
            __response__;
            peer;
            offsetId;
            limit;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'stories.GetStoriesArchive';
                this.constructorId = 0xb4352016;
                this.subclassOfId = 0x251c0c2c;
                this._slots = ['peer', 'offsetId', 'limit'];
                this.peer = params.peer;
                this.offsetId = params.offsetId;
                this.limit = params.limit;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let offsetId = await index_js_1.Primitive.Int.read(_data);
                let limit = await index_js_1.Primitive.Int.read(_data);
                return new Raw.stories.GetStoriesArchive({ peer: peer, offsetId: offsetId, limit: limit });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.offsetId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.offsetId));
                }
                if (this.limit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.limit));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stories_1.GetStoriesArchive = GetStoriesArchive;
        class GetStoriesByID extends index_js_1.TLObject {
            __response__;
            peer;
            id;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'stories.GetStoriesByID';
                this.constructorId = 0x5774ca74;
                this.subclassOfId = 0x251c0c2c;
                this._slots = ['peer', 'id'];
                this.peer = params.peer;
                this.id = params.id;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let id = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int);
                return new Raw.stories.GetStoriesByID({ peer: peer, id: id });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.id) {
                    b.write(index_js_1.Primitive.Vector.write(this.id, index_js_1.Primitive.Int));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stories_1.GetStoriesByID = GetStoriesByID;
        class ToggleAllStoriesHidden extends index_js_1.TLObject {
            __response__;
            hidden;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'stories.ToggleAllStoriesHidden';
                this.constructorId = 0x7c2557c4;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['hidden'];
                this.hidden = params.hidden;
            }
            static async read(_data, ..._args) {
                let hidden = await index_js_1.Primitive.Bool.read(_data);
                return new Raw.stories.ToggleAllStoriesHidden({ hidden: hidden });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.hidden !== undefined) {
                    b.write(index_js_1.Primitive.Bool.write(this.hidden));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stories_1.ToggleAllStoriesHidden = ToggleAllStoriesHidden;
        class ReadStories extends index_js_1.TLObject {
            __response__;
            peer;
            maxId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'stories.ReadStories';
                this.constructorId = 0xa556dac8;
                this.subclassOfId = 0x5026710f;
                this._slots = ['peer', 'maxId'];
                this.peer = params.peer;
                this.maxId = params.maxId;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let maxId = await index_js_1.Primitive.Int.read(_data);
                return new Raw.stories.ReadStories({ peer: peer, maxId: maxId });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.maxId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.maxId));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stories_1.ReadStories = ReadStories;
        class IncrementStoryViews extends index_js_1.TLObject {
            __response__;
            peer;
            id;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'stories.IncrementStoryViews';
                this.constructorId = 0xb2028afb;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['peer', 'id'];
                this.peer = params.peer;
                this.id = params.id;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let id = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int);
                return new Raw.stories.IncrementStoryViews({ peer: peer, id: id });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.id) {
                    b.write(index_js_1.Primitive.Vector.write(this.id, index_js_1.Primitive.Int));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stories_1.IncrementStoryViews = IncrementStoryViews;
        class GetStoryViewsList extends index_js_1.TLObject {
            __response__;
            justContacts;
            reactionsFirst;
            forwardsFirst;
            peer;
            q;
            id;
            offset;
            limit;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'stories.GetStoryViewsList';
                this.constructorId = 0x7ed23c57;
                this.subclassOfId = 0xb9437560;
                this._slots = [
                    'justContacts',
                    'reactionsFirst',
                    'forwardsFirst',
                    'peer',
                    'q',
                    'id',
                    'offset',
                    'limit',
                ];
                this.justContacts = params.justContacts;
                this.reactionsFirst = params.reactionsFirst;
                this.forwardsFirst = params.forwardsFirst;
                this.peer = params.peer;
                this.q = params.q;
                this.id = params.id;
                this.offset = params.offset;
                this.limit = params.limit;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let justContacts = flags & (1 << 0) ? true : false;
                let reactionsFirst = flags & (1 << 2) ? true : false;
                let forwardsFirst = flags & (1 << 3) ? true : false;
                let peer = await index_js_1.TLObject.read(_data);
                let q = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let id = await index_js_1.Primitive.Int.read(_data);
                let offset = await index_js_1.Primitive.String.read(_data);
                let limit = await index_js_1.Primitive.Int.read(_data);
                return new Raw.stories.GetStoryViewsList({
                    justContacts: justContacts,
                    reactionsFirst: reactionsFirst,
                    forwardsFirst: forwardsFirst,
                    peer: peer,
                    q: q,
                    id: id,
                    offset: offset,
                    limit: limit,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.justContacts ? 1 << 0 : 0;
                flags |= this.reactionsFirst ? 1 << 2 : 0;
                flags |= this.forwardsFirst ? 1 << 3 : 0;
                flags |= this.q !== undefined ? 1 << 1 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.q !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.q));
                }
                if (this.id !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.id));
                }
                if (this.offset !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.offset));
                }
                if (this.limit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.limit));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stories_1.GetStoryViewsList = GetStoryViewsList;
        class GetStoriesViews extends index_js_1.TLObject {
            __response__;
            peer;
            id;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'stories.GetStoriesViews';
                this.constructorId = 0x28e16cc8;
                this.subclassOfId = 0x4b3fc4ba;
                this._slots = ['peer', 'id'];
                this.peer = params.peer;
                this.id = params.id;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let id = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int);
                return new Raw.stories.GetStoriesViews({ peer: peer, id: id });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.id) {
                    b.write(index_js_1.Primitive.Vector.write(this.id, index_js_1.Primitive.Int));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stories_1.GetStoriesViews = GetStoriesViews;
        class ExportStoryLink extends index_js_1.TLObject {
            __response__;
            peer;
            id;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'stories.ExportStoryLink';
                this.constructorId = 0x7b8def20;
                this.subclassOfId = 0xfc541a6;
                this._slots = ['peer', 'id'];
                this.peer = params.peer;
                this.id = params.id;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let id = await index_js_1.Primitive.Int.read(_data);
                return new Raw.stories.ExportStoryLink({ peer: peer, id: id });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.id !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.id));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stories_1.ExportStoryLink = ExportStoryLink;
        class Report extends index_js_1.TLObject {
            __response__;
            peer;
            id;
            reason;
            message;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'stories.Report';
                this.constructorId = 0x1923fa8c;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['peer', 'id', 'reason', 'message'];
                this.peer = params.peer;
                this.id = params.id;
                this.reason = params.reason;
                this.message = params.message;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let id = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int);
                let reason = await index_js_1.TLObject.read(_data);
                let message = await index_js_1.Primitive.String.read(_data);
                return new Raw.stories.Report({ peer: peer, id: id, reason: reason, message: message });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.id) {
                    b.write(index_js_1.Primitive.Vector.write(this.id, index_js_1.Primitive.Int));
                }
                if (this.reason !== undefined) {
                    b.write(this.reason.write());
                }
                if (this.message !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.message));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stories_1.Report = Report;
        class ActivateStealthMode extends index_js_1.TLObject {
            __response__;
            past;
            future;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'stories.ActivateStealthMode';
                this.constructorId = 0x57bbd166;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['past', 'future'];
                this.past = params.past;
                this.future = params.future;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let past = flags & (1 << 0) ? true : false;
                let future = flags & (1 << 1) ? true : false;
                return new Raw.stories.ActivateStealthMode({ past: past, future: future });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.past ? 1 << 0 : 0;
                flags |= this.future ? 1 << 1 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stories_1.ActivateStealthMode = ActivateStealthMode;
        class SendReaction extends index_js_1.TLObject {
            __response__;
            addToRecent;
            peer;
            storyId;
            reaction;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'stories.SendReaction';
                this.constructorId = 0x7fd736b2;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['addToRecent', 'peer', 'storyId', 'reaction'];
                this.addToRecent = params.addToRecent;
                this.peer = params.peer;
                this.storyId = params.storyId;
                this.reaction = params.reaction;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let addToRecent = flags & (1 << 0) ? true : false;
                let peer = await index_js_1.TLObject.read(_data);
                let storyId = await index_js_1.Primitive.Int.read(_data);
                let reaction = await index_js_1.TLObject.read(_data);
                return new Raw.stories.SendReaction({
                    addToRecent: addToRecent,
                    peer: peer,
                    storyId: storyId,
                    reaction: reaction,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.addToRecent ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.storyId !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.storyId));
                }
                if (this.reaction !== undefined) {
                    b.write(this.reaction.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stories_1.SendReaction = SendReaction;
        class GetPeerStories extends index_js_1.TLObject {
            __response__;
            peer;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'stories.GetPeerStories';
                this.constructorId = 0x2c4ada50;
                this.subclassOfId = 0x9d56cfd0;
                this._slots = ['peer'];
                this.peer = params.peer;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                return new Raw.stories.GetPeerStories({ peer: peer });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stories_1.GetPeerStories = GetPeerStories;
        class GetAllReadPeerStories extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'stories.GetAllReadPeerStories';
                this.constructorId = 0x9b5ae7f9;
                this.subclassOfId = 0x8af52aac;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.stories.GetAllReadPeerStories();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stories_1.GetAllReadPeerStories = GetAllReadPeerStories;
        class GetPeerMaxIDs extends index_js_1.TLObject {
            __response__;
            id;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'stories.GetPeerMaxIDs';
                this.constructorId = 0x535983c3;
                this.subclassOfId = 0x5026710f;
                this._slots = ['id'];
                this.id = params.id;
            }
            static async read(_data, ..._args) {
                let id = await index_js_1.TLObject.read(_data);
                return new Raw.stories.GetPeerMaxIDs({ id: id });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.id) {
                    b.write(index_js_1.Primitive.Vector.write(this.id));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stories_1.GetPeerMaxIDs = GetPeerMaxIDs;
        class GetChatsToSend extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'stories.GetChatsToSend';
                this.constructorId = 0xa56a8b60;
                this.subclassOfId = 0x99d5cb14;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.stories.GetChatsToSend();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stories_1.GetChatsToSend = GetChatsToSend;
        class TogglePeerStoriesHidden extends index_js_1.TLObject {
            __response__;
            peer;
            hidden;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'stories.TogglePeerStoriesHidden';
                this.constructorId = 0xbd0415c4;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['peer', 'hidden'];
                this.peer = params.peer;
                this.hidden = params.hidden;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let hidden = await index_js_1.Primitive.Bool.read(_data);
                return new Raw.stories.TogglePeerStoriesHidden({ peer: peer, hidden: hidden });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.hidden !== undefined) {
                    b.write(index_js_1.Primitive.Bool.write(this.hidden));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stories_1.TogglePeerStoriesHidden = TogglePeerStoriesHidden;
        class GetStoryReactionsList extends index_js_1.TLObject {
            __response__;
            forwardsFirst;
            peer;
            id;
            reaction;
            offset;
            limit;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'stories.GetStoryReactionsList';
                this.constructorId = 0xb9b2881f;
                this.subclassOfId = 0x46f91e3;
                this._slots = ['forwardsFirst', 'peer', 'id', 'reaction', 'offset', 'limit'];
                this.forwardsFirst = params.forwardsFirst;
                this.peer = params.peer;
                this.id = params.id;
                this.reaction = params.reaction;
                this.offset = params.offset;
                this.limit = params.limit;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let forwardsFirst = flags & (1 << 2) ? true : false;
                let peer = await index_js_1.TLObject.read(_data);
                let id = await index_js_1.Primitive.Int.read(_data);
                let reaction = flags & (1 << 0) ? await index_js_1.TLObject.read(_data) : undefined;
                let offset = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let limit = await index_js_1.Primitive.Int.read(_data);
                return new Raw.stories.GetStoryReactionsList({
                    forwardsFirst: forwardsFirst,
                    peer: peer,
                    id: id,
                    reaction: reaction,
                    offset: offset,
                    limit: limit,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.forwardsFirst ? 1 << 2 : 0;
                flags |= this.reaction !== undefined ? 1 << 0 : 0;
                flags |= this.offset !== undefined ? 1 << 1 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.id !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.id));
                }
                if (this.reaction !== undefined) {
                    b.write(this.reaction.write());
                }
                if (this.offset !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.offset));
                }
                if (this.limit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.limit));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stories_1.GetStoryReactionsList = GetStoryReactionsList;
        class TogglePinnedToTop extends index_js_1.TLObject {
            __response__;
            peer;
            id;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'stories.TogglePinnedToTop';
                this.constructorId = 0xb297e9b;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['peer', 'id'];
                this.peer = params.peer;
                this.id = params.id;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let id = await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int);
                return new Raw.stories.TogglePinnedToTop({ peer: peer, id: id });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.id) {
                    b.write(index_js_1.Primitive.Vector.write(this.id, index_js_1.Primitive.Int));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        stories_1.TogglePinnedToTop = TogglePinnedToTop;
    })(stories = Raw.stories || (Raw.stories = {}));
    let premium;
    (function (premium) {
        class BoostsList extends index_js_1.TLObject {
            count;
            boosts;
            nextOffset;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'premium.BoostsList';
                this.constructorId = 0x86f8613c;
                this.subclassOfId = 0x2235a8bd;
                this._slots = ['count', 'boosts', 'nextOffset', 'users'];
                this.count = params.count;
                this.boosts = params.boosts;
                this.nextOffset = params.nextOffset;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let count = await index_js_1.Primitive.Int.read(_data);
                let boosts = await index_js_1.TLObject.read(_data);
                let nextOffset = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.premium.BoostsList({
                    count: count,
                    boosts: boosts,
                    nextOffset: nextOffset,
                    users: users,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.nextOffset !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.count !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.count));
                }
                if (this.boosts) {
                    b.write(index_js_1.Primitive.Vector.write(this.boosts));
                }
                if (this.nextOffset !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.nextOffset));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        premium.BoostsList = BoostsList;
        class MyBoosts extends index_js_1.TLObject {
            myBoosts;
            chats;
            users;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'premium.MyBoosts';
                this.constructorId = 0x9ae228e2;
                this.subclassOfId = 0xad3512db;
                this._slots = ['myBoosts', 'chats', 'users'];
                this.myBoosts = params.myBoosts;
                this.chats = params.chats;
                this.users = params.users;
            }
            static async read(_data, ..._args) {
                let myBoosts = await index_js_1.TLObject.read(_data);
                let chats = await index_js_1.TLObject.read(_data);
                let users = await index_js_1.TLObject.read(_data);
                return new Raw.premium.MyBoosts({ myBoosts: myBoosts, chats: chats, users: users });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.myBoosts) {
                    b.write(index_js_1.Primitive.Vector.write(this.myBoosts));
                }
                if (this.chats) {
                    b.write(index_js_1.Primitive.Vector.write(this.chats));
                }
                if (this.users) {
                    b.write(index_js_1.Primitive.Vector.write(this.users));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        premium.MyBoosts = MyBoosts;
        class BoostsStatus extends index_js_1.TLObject {
            myBoost;
            level;
            currentLevelBoosts;
            boosts;
            giftBoosts;
            nextLevelBoosts;
            premiumAudience;
            boostUrl;
            prepaidGiveaways;
            myBoostSlots;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'premium.BoostsStatus';
                this.constructorId = 0x4959427a;
                this.subclassOfId = 0xc31b1ab9;
                this._slots = [
                    'myBoost',
                    'level',
                    'currentLevelBoosts',
                    'boosts',
                    'giftBoosts',
                    'nextLevelBoosts',
                    'premiumAudience',
                    'boostUrl',
                    'prepaidGiveaways',
                    'myBoostSlots',
                ];
                this.myBoost = params.myBoost;
                this.level = params.level;
                this.currentLevelBoosts = params.currentLevelBoosts;
                this.boosts = params.boosts;
                this.giftBoosts = params.giftBoosts;
                this.nextLevelBoosts = params.nextLevelBoosts;
                this.premiumAudience = params.premiumAudience;
                this.boostUrl = params.boostUrl;
                this.prepaidGiveaways = params.prepaidGiveaways;
                this.myBoostSlots = params.myBoostSlots;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let myBoost = flags & (1 << 2) ? true : false;
                let level = await index_js_1.Primitive.Int.read(_data);
                let currentLevelBoosts = await index_js_1.Primitive.Int.read(_data);
                let boosts = await index_js_1.Primitive.Int.read(_data);
                let giftBoosts = flags & (1 << 4) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let nextLevelBoosts = flags & (1 << 0) ? await index_js_1.Primitive.Int.read(_data) : undefined;
                let premiumAudience = flags & (1 << 1) ? await index_js_1.TLObject.read(_data) : undefined;
                let boostUrl = await index_js_1.Primitive.String.read(_data);
                let prepaidGiveaways = flags & (1 << 3) ? await index_js_1.TLObject.read(_data) : [];
                let myBoostSlots = flags & (1 << 2) ? await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int) : [];
                return new Raw.premium.BoostsStatus({
                    myBoost: myBoost,
                    level: level,
                    currentLevelBoosts: currentLevelBoosts,
                    boosts: boosts,
                    giftBoosts: giftBoosts,
                    nextLevelBoosts: nextLevelBoosts,
                    premiumAudience: premiumAudience,
                    boostUrl: boostUrl,
                    prepaidGiveaways: prepaidGiveaways,
                    myBoostSlots: myBoostSlots,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.myBoost ? 1 << 2 : 0;
                flags |= this.giftBoosts !== undefined ? 1 << 4 : 0;
                flags |= this.nextLevelBoosts !== undefined ? 1 << 0 : 0;
                flags |= this.premiumAudience !== undefined ? 1 << 1 : 0;
                flags |= this.prepaidGiveaways ? 1 << 3 : 0;
                flags |= this.myBoostSlots ? 1 << 2 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.level !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.level));
                }
                if (this.currentLevelBoosts !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.currentLevelBoosts));
                }
                if (this.boosts !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.boosts));
                }
                if (this.giftBoosts !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.giftBoosts));
                }
                if (this.nextLevelBoosts !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.nextLevelBoosts));
                }
                if (this.premiumAudience !== undefined) {
                    b.write(this.premiumAudience.write());
                }
                if (this.boostUrl !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.boostUrl));
                }
                if (this.prepaidGiveaways) {
                    b.write(index_js_1.Primitive.Vector.write(this.prepaidGiveaways));
                }
                if (this.myBoostSlots) {
                    b.write(index_js_1.Primitive.Vector.write(this.myBoostSlots, index_js_1.Primitive.Int));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        premium.BoostsStatus = BoostsStatus;
        class GetBoostsList extends index_js_1.TLObject {
            __response__;
            gifts;
            peer;
            offset;
            limit;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'premium.GetBoostsList';
                this.constructorId = 0x60f67660;
                this.subclassOfId = 0x2235a8bd;
                this._slots = ['gifts', 'peer', 'offset', 'limit'];
                this.gifts = params.gifts;
                this.peer = params.peer;
                this.offset = params.offset;
                this.limit = params.limit;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let gifts = flags & (1 << 0) ? true : false;
                let peer = await index_js_1.TLObject.read(_data);
                let offset = await index_js_1.Primitive.String.read(_data);
                let limit = await index_js_1.Primitive.Int.read(_data);
                return new Raw.premium.GetBoostsList({
                    gifts: gifts,
                    peer: peer,
                    offset: offset,
                    limit: limit,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.gifts ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.offset !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.offset));
                }
                if (this.limit !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.limit));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        premium.GetBoostsList = GetBoostsList;
        class GetMyBoosts extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'premium.GetMyBoosts';
                this.constructorId = 0xbe77b4a;
                this.subclassOfId = 0xad3512db;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.premium.GetMyBoosts();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        premium.GetMyBoosts = GetMyBoosts;
        class ApplyBoost extends index_js_1.TLObject {
            __response__;
            slots;
            peer;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'premium.ApplyBoost';
                this.constructorId = 0x6b7da746;
                this.subclassOfId = 0xad3512db;
                this._slots = ['slots', 'peer'];
                this.slots = params.slots;
                this.peer = params.peer;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let slots = flags & (1 << 0) ? await index_js_1.TLObject.read(_data, index_js_1.Primitive.Int) : [];
                let peer = await index_js_1.TLObject.read(_data);
                return new Raw.premium.ApplyBoost({ slots: slots, peer: peer });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.slots ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.slots) {
                    b.write(index_js_1.Primitive.Vector.write(this.slots, index_js_1.Primitive.Int));
                }
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        premium.ApplyBoost = ApplyBoost;
        class GetBoostsStatus extends index_js_1.TLObject {
            __response__;
            peer;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'premium.GetBoostsStatus';
                this.constructorId = 0x42f1f61;
                this.subclassOfId = 0xc31b1ab9;
                this._slots = ['peer'];
                this.peer = params.peer;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                return new Raw.premium.GetBoostsStatus({ peer: peer });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        premium.GetBoostsStatus = GetBoostsStatus;
        class GetUserBoosts extends index_js_1.TLObject {
            __response__;
            peer;
            userId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'premium.GetUserBoosts';
                this.constructorId = 0x39854d1f;
                this.subclassOfId = 0x2235a8bd;
                this._slots = ['peer', 'userId'];
                this.peer = params.peer;
                this.userId = params.userId;
            }
            static async read(_data, ..._args) {
                let peer = await index_js_1.TLObject.read(_data);
                let userId = await index_js_1.TLObject.read(_data);
                return new Raw.premium.GetUserBoosts({ peer: peer, userId: userId });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.peer !== undefined) {
                    b.write(this.peer.write());
                }
                if (this.userId !== undefined) {
                    b.write(this.userId.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        premium.GetUserBoosts = GetUserBoosts;
    })(premium = Raw.premium || (Raw.premium = {}));
    let smsjobs;
    (function (smsjobs) {
        class EligibleToJoin extends index_js_1.TLObject {
            termsUrl;
            monthlySentSms;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'smsjobs.EligibleToJoin';
                this.constructorId = 0xdc8b44cf;
                this.subclassOfId = 0x5eb760a6;
                this._slots = ['termsUrl', 'monthlySentSms'];
                this.termsUrl = params.termsUrl;
                this.monthlySentSms = params.monthlySentSms;
            }
            static async read(_data, ..._args) {
                let termsUrl = await index_js_1.Primitive.String.read(_data);
                let monthlySentSms = await index_js_1.Primitive.Int.read(_data);
                return new Raw.smsjobs.EligibleToJoin({
                    termsUrl: termsUrl,
                    monthlySentSms: monthlySentSms,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.termsUrl !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.termsUrl));
                }
                if (this.monthlySentSms !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.monthlySentSms));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        smsjobs.EligibleToJoin = EligibleToJoin;
        class Status extends index_js_1.TLObject {
            allowInternational;
            recentSent;
            recentSince;
            recentRemains;
            totalSent;
            totalSince;
            lastGiftSlug;
            termsUrl;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'smsjobs.Status';
                this.constructorId = 0x2aee9191;
                this.subclassOfId = 0xcd8f2b25;
                this._slots = [
                    'allowInternational',
                    'recentSent',
                    'recentSince',
                    'recentRemains',
                    'totalSent',
                    'totalSince',
                    'lastGiftSlug',
                    'termsUrl',
                ];
                this.allowInternational = params.allowInternational;
                this.recentSent = params.recentSent;
                this.recentSince = params.recentSince;
                this.recentRemains = params.recentRemains;
                this.totalSent = params.totalSent;
                this.totalSince = params.totalSince;
                this.lastGiftSlug = params.lastGiftSlug;
                this.termsUrl = params.termsUrl;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let allowInternational = flags & (1 << 0) ? true : false;
                let recentSent = await index_js_1.Primitive.Int.read(_data);
                let recentSince = await index_js_1.Primitive.Int.read(_data);
                let recentRemains = await index_js_1.Primitive.Int.read(_data);
                let totalSent = await index_js_1.Primitive.Int.read(_data);
                let totalSince = await index_js_1.Primitive.Int.read(_data);
                let lastGiftSlug = flags & (1 << 1) ? await index_js_1.Primitive.String.read(_data) : undefined;
                let termsUrl = await index_js_1.Primitive.String.read(_data);
                return new Raw.smsjobs.Status({
                    allowInternational: allowInternational,
                    recentSent: recentSent,
                    recentSince: recentSince,
                    recentRemains: recentRemains,
                    totalSent: totalSent,
                    totalSince: totalSince,
                    lastGiftSlug: lastGiftSlug,
                    termsUrl: termsUrl,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.allowInternational ? 1 << 0 : 0;
                flags |= this.lastGiftSlug !== undefined ? 1 << 1 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.recentSent !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.recentSent));
                }
                if (this.recentSince !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.recentSince));
                }
                if (this.recentRemains !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.recentRemains));
                }
                if (this.totalSent !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.totalSent));
                }
                if (this.totalSince !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.totalSince));
                }
                if (this.lastGiftSlug !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.lastGiftSlug));
                }
                if (this.termsUrl !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.termsUrl));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        smsjobs.Status = Status;
        class IsEligibleToJoin extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'smsjobs.IsEligibleToJoin';
                this.constructorId = 0xedc39d0;
                this.subclassOfId = 0x5eb760a6;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.smsjobs.IsEligibleToJoin();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        smsjobs.IsEligibleToJoin = IsEligibleToJoin;
        class Join extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'smsjobs.Join';
                this.constructorId = 0xa74ece2d;
                this.subclassOfId = 0xf5b399ac;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.smsjobs.Join();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        smsjobs.Join = Join;
        class Leave extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'smsjobs.Leave';
                this.constructorId = 0x9898ad73;
                this.subclassOfId = 0xf5b399ac;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.smsjobs.Leave();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        smsjobs.Leave = Leave;
        class UpdateSettings extends index_js_1.TLObject {
            __response__;
            allowInternational;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'smsjobs.UpdateSettings';
                this.constructorId = 0x93fa0bf;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['allowInternational'];
                this.allowInternational = params.allowInternational;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let allowInternational = flags & (1 << 0) ? true : false;
                return new Raw.smsjobs.UpdateSettings({ allowInternational: allowInternational });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.allowInternational ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        smsjobs.UpdateSettings = UpdateSettings;
        class GetStatus extends index_js_1.TLObject {
            __response__;
            constructor() {
                super();
                this.classType = 'functions';
                this.className = 'smsjobs.GetStatus';
                this.constructorId = 0x10a698e8;
                this.subclassOfId = 0xcd8f2b25;
                this._slots = [];
            }
            static async read(_data, ..._args) {
                return new Raw.smsjobs.GetStatus();
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        smsjobs.GetStatus = GetStatus;
        class GetSmsJob extends index_js_1.TLObject {
            __response__;
            jobId;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'smsjobs.GetSmsJob';
                this.constructorId = 0x778d902f;
                this.subclassOfId = 0x1f24187e;
                this._slots = ['jobId'];
                this.jobId = params.jobId;
            }
            static async read(_data, ..._args) {
                let jobId = await index_js_1.Primitive.String.read(_data);
                return new Raw.smsjobs.GetSmsJob({ jobId: jobId });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.jobId !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.jobId));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        smsjobs.GetSmsJob = GetSmsJob;
        class FinishJob extends index_js_1.TLObject {
            __response__;
            jobId;
            error;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'smsjobs.FinishJob';
                this.constructorId = 0x4f1ebf24;
                this.subclassOfId = 0xf5b399ac;
                this._slots = ['jobId', 'error'];
                this.jobId = params.jobId;
                this.error = params.error;
            }
            static async read(_data, ..._args) {
                let flags = await index_js_1.Primitive.Int.read(_data);
                let jobId = await index_js_1.Primitive.String.read(_data);
                let error = flags & (1 << 0) ? await index_js_1.Primitive.String.read(_data) : undefined;
                return new Raw.smsjobs.FinishJob({ jobId: jobId, error: error });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                let flags = 0;
                flags |= this.error !== undefined ? 1 << 0 : 0;
                b.write(index_js_1.Primitive.Int.write(flags));
                if (this.jobId !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.jobId));
                }
                if (this.error !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.error));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        smsjobs.FinishJob = FinishJob;
    })(smsjobs = Raw.smsjobs || (Raw.smsjobs = {}));
    let fragment;
    (function (fragment) {
        class CollectibleInfo extends index_js_1.TLObject {
            purchaseDate;
            currency;
            amount;
            cryptoCurrency;
            cryptoAmount;
            url;
            constructor(params) {
                super();
                this.classType = 'types';
                this.className = 'fragment.CollectibleInfo';
                this.constructorId = 0x6ebdff91;
                this.subclassOfId = 0xd4ea5790;
                this._slots = [
                    'purchaseDate',
                    'currency',
                    'amount',
                    'cryptoCurrency',
                    'cryptoAmount',
                    'url',
                ];
                this.purchaseDate = params.purchaseDate;
                this.currency = params.currency;
                this.amount = params.amount;
                this.cryptoCurrency = params.cryptoCurrency;
                this.cryptoAmount = params.cryptoAmount;
                this.url = params.url;
            }
            static async read(_data, ..._args) {
                let purchaseDate = await index_js_1.Primitive.Int.read(_data);
                let currency = await index_js_1.Primitive.String.read(_data);
                let amount = await index_js_1.Primitive.Long.read(_data);
                let cryptoCurrency = await index_js_1.Primitive.String.read(_data);
                let cryptoAmount = await index_js_1.Primitive.Long.read(_data);
                let url = await index_js_1.Primitive.String.read(_data);
                return new Raw.fragment.CollectibleInfo({
                    purchaseDate: purchaseDate,
                    currency: currency,
                    amount: amount,
                    cryptoCurrency: cryptoCurrency,
                    cryptoAmount: cryptoAmount,
                    url: url,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.purchaseDate !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.purchaseDate));
                }
                if (this.currency !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.currency));
                }
                if (this.amount !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.amount));
                }
                if (this.cryptoCurrency !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.cryptoCurrency));
                }
                if (this.cryptoAmount !== undefined) {
                    b.write(index_js_1.Primitive.Long.write(this.cryptoAmount));
                }
                if (this.url !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.url));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        fragment.CollectibleInfo = CollectibleInfo;
        class GetCollectibleInfo extends index_js_1.TLObject {
            __response__;
            collectible;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'fragment.GetCollectibleInfo';
                this.constructorId = 0xbe1e85ba;
                this.subclassOfId = 0xd4ea5790;
                this._slots = ['collectible'];
                this.collectible = params.collectible;
            }
            static async read(_data, ..._args) {
                let collectible = await index_js_1.TLObject.read(_data);
                return new Raw.fragment.GetCollectibleInfo({ collectible: collectible });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.collectible !== undefined) {
                    b.write(this.collectible.write());
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        fragment.GetCollectibleInfo = GetCollectibleInfo;
    })(fragment = Raw.fragment || (Raw.fragment = {}));
    let langpack;
    (function (langpack) {
        class GetLangPack extends index_js_1.TLObject {
            __response__;
            langPack;
            langCode;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'langpack.GetLangPack';
                this.constructorId = 0xf2f2330a;
                this.subclassOfId = 0x52662d55;
                this._slots = ['langPack', 'langCode'];
                this.langPack = params.langPack;
                this.langCode = params.langCode;
            }
            static async read(_data, ..._args) {
                let langPack = await index_js_1.Primitive.String.read(_data);
                let langCode = await index_js_1.Primitive.String.read(_data);
                return new Raw.langpack.GetLangPack({ langPack: langPack, langCode: langCode });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.langPack !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.langPack));
                }
                if (this.langCode !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.langCode));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        langpack.GetLangPack = GetLangPack;
        class GetStrings extends index_js_1.TLObject {
            __response__;
            langPack;
            langCode;
            keys;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'langpack.GetStrings';
                this.constructorId = 0xefea3803;
                this.subclassOfId = 0xc7b7353d;
                this._slots = ['langPack', 'langCode', 'keys'];
                this.langPack = params.langPack;
                this.langCode = params.langCode;
                this.keys = params.keys;
            }
            static async read(_data, ..._args) {
                let langPack = await index_js_1.Primitive.String.read(_data);
                let langCode = await index_js_1.Primitive.String.read(_data);
                let keys = await index_js_1.TLObject.read(_data, index_js_1.Primitive.String);
                return new Raw.langpack.GetStrings({ langPack: langPack, langCode: langCode, keys: keys });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.langPack !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.langPack));
                }
                if (this.langCode !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.langCode));
                }
                if (this.keys) {
                    b.write(index_js_1.Primitive.Vector.write(this.keys, index_js_1.Primitive.String));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        langpack.GetStrings = GetStrings;
        class GetDifference extends index_js_1.TLObject {
            __response__;
            langPack;
            langCode;
            fromVersion;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'langpack.GetDifference';
                this.constructorId = 0xcd984aa5;
                this.subclassOfId = 0x52662d55;
                this._slots = ['langPack', 'langCode', 'fromVersion'];
                this.langPack = params.langPack;
                this.langCode = params.langCode;
                this.fromVersion = params.fromVersion;
            }
            static async read(_data, ..._args) {
                let langPack = await index_js_1.Primitive.String.read(_data);
                let langCode = await index_js_1.Primitive.String.read(_data);
                let fromVersion = await index_js_1.Primitive.Int.read(_data);
                return new Raw.langpack.GetDifference({
                    langPack: langPack,
                    langCode: langCode,
                    fromVersion: fromVersion,
                });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.langPack !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.langPack));
                }
                if (this.langCode !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.langCode));
                }
                if (this.fromVersion !== undefined) {
                    b.write(index_js_1.Primitive.Int.write(this.fromVersion));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        langpack.GetDifference = GetDifference;
        class GetLanguages extends index_js_1.TLObject {
            __response__;
            langPack;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'langpack.GetLanguages';
                this.constructorId = 0x42c6978f;
                this.subclassOfId = 0x280912c9;
                this._slots = ['langPack'];
                this.langPack = params.langPack;
            }
            static async read(_data, ..._args) {
                let langPack = await index_js_1.Primitive.String.read(_data);
                return new Raw.langpack.GetLanguages({ langPack: langPack });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.langPack !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.langPack));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        langpack.GetLanguages = GetLanguages;
        class GetLanguage extends index_js_1.TLObject {
            __response__;
            langPack;
            langCode;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'langpack.GetLanguage';
                this.constructorId = 0x6a596502;
                this.subclassOfId = 0xabac89b7;
                this._slots = ['langPack', 'langCode'];
                this.langPack = params.langPack;
                this.langCode = params.langCode;
            }
            static async read(_data, ..._args) {
                let langPack = await index_js_1.Primitive.String.read(_data);
                let langCode = await index_js_1.Primitive.String.read(_data);
                return new Raw.langpack.GetLanguage({ langPack: langPack, langCode: langCode });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.langPack !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.langPack));
                }
                if (this.langCode !== undefined) {
                    b.write(index_js_1.Primitive.String.write(this.langCode));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        langpack.GetLanguage = GetLanguage;
    })(langpack = Raw.langpack || (Raw.langpack = {}));
    let folders;
    (function (folders) {
        class EditPeerFolders extends index_js_1.TLObject {
            __response__;
            folderPeers;
            constructor(params) {
                super();
                this.classType = 'functions';
                this.className = 'folders.EditPeerFolders';
                this.constructorId = 0x6847d0ab;
                this.subclassOfId = 0x8af52aac;
                this._slots = ['folderPeers'];
                this.folderPeers = params.folderPeers;
            }
            static async read(_data, ..._args) {
                let folderPeers = await index_js_1.TLObject.read(_data);
                return new Raw.folders.EditPeerFolders({ folderPeers: folderPeers });
            }
            write() {
                let b = new index_js_1.BytesIO();
                b.write(index_js_1.Primitive.Int.write(this.constructorId, false));
                if (this.folderPeers) {
                    b.write(index_js_1.Primitive.Vector.write(this.folderPeers));
                }
                return platform_node_js_1.Buffer.from(b.buffer);
            }
        }
        folders.EditPeerFolders = EditPeerFolders;
    })(folders = Raw.folders || (Raw.folders = {}));
})(Raw || (exports.Raw = Raw = {}));
