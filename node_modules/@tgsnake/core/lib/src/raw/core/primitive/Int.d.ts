/// <reference types="node" />
import { TLObject } from '../TLObject.js';
import { BytesIO } from '../BytesIO.js';
export declare class Int extends TLObject {
    static SIZE: number;
    static write(value: number | bigint, signed?: boolean, little?: boolean): Buffer;
    static read(data: BytesIO, signed?: boolean, little?: boolean, size?: number): Promise<number>;
}
export declare class Long extends TLObject {
    static SIZE: number;
    static read(data: BytesIO, signed?: boolean, little?: boolean, size?: number): Promise<bigint>;
    static write(value: bigint, signed?: boolean, little?: boolean): Buffer;
}
export declare class Int128 extends Long {
    static SIZE: number;
    static read(data: BytesIO, signed?: boolean, little?: boolean, size?: number): Promise<bigint>;
    static write(value: bigint, _signed?: boolean, _little?: boolean): Buffer;
}
export declare class Int256 extends Long {
    static SIZE: number;
    static read(data: BytesIO, signed?: boolean, little?: boolean, size?: number): Promise<bigint>;
    static write(value: bigint, _signed?: boolean, _little?: boolean): Buffer;
}
