/// <reference types="node" />
import { TLObject, BytesIO, type UpdateSecretChatMessage } from './core/index.js';
export declare namespace Raw {
    type X = TLObject;
    type Type = TLObject;
    type Bool = boolean;
    type int = number;
    type double = number;
    type float = number;
    type int128 = bigint;
    type int256 = bigint;
    type long = bigint;
    type bytes = Buffer;
    type Vector<T> = Array<T>;
    const Layer: number;
    const HighestSCLayer: number;
    type TypesTLRequest = Raw.ReqPq | Raw.ReqPqMulti | Raw.ReqDhParams | Raw.SetClientDhParams | Raw.DestroyAuthKey | Raw.RpcDropAnswer | Raw.GetFutureSalts | Raw.Ping | Raw.PingDelayDisconnect | Raw.DestroySession | Raw.InvokeAfterMsg | Raw.InvokeAfterMsgs | Raw.InitConnection | Raw.InvokeWithLayer | Raw.InvokeWithoutUpdates | Raw.InvokeWithMessagesRange | Raw.InvokeWithTakeout | Raw.InvokeWithBusinessConnection | Raw.InvokeWithGooglePlayIntegrity | Raw.InvokeWithApnsSecret | Raw.auth.SendCode | Raw.auth.SignUp | Raw.auth.SignIn | Raw.auth.LogOut | Raw.auth.ResetAuthorizations | Raw.auth.ExportAuthorization | Raw.auth.ImportAuthorization | Raw.auth.BindTempAuthKey | Raw.auth.ImportBotAuthorization | Raw.auth.CheckPassword | Raw.auth.RequestPasswordRecovery | Raw.auth.RecoverPassword | Raw.auth.ResendCode | Raw.auth.CancelCode | Raw.auth.DropTempAuthKeys | Raw.auth.ExportLoginToken | Raw.auth.ImportLoginToken | Raw.auth.AcceptLoginToken | Raw.auth.CheckRecoveryPassword | Raw.auth.ImportWebTokenAuthorization | Raw.auth.RequestFirebaseSms | Raw.auth.ResetLoginEmail | Raw.auth.ReportMissingCode | Raw.account.RegisterDevice | Raw.account.UnregisterDevice | Raw.account.UpdateNotifySettings | Raw.account.GetNotifySettings | Raw.account.ResetNotifySettings | Raw.account.UpdateProfile | Raw.account.UpdateStatus | Raw.account.GetWallPapers | Raw.account.ReportPeer | Raw.account.CheckUsername | Raw.account.UpdateUsername | Raw.account.GetPrivacy | Raw.account.SetPrivacy | Raw.account.DeleteAccount | Raw.account.GetAccountTTL | Raw.account.SetAccountTTL | Raw.account.SendChangePhoneCode | Raw.account.ChangePhone | Raw.account.UpdateDeviceLocked | Raw.account.GetAuthorizations | Raw.account.ResetAuthorization | Raw.account.GetPassword | Raw.account.GetPasswordSettings | Raw.account.UpdatePasswordSettings | Raw.account.SendConfirmPhoneCode | Raw.account.ConfirmPhone | Raw.account.GetTmpPassword | Raw.account.GetWebAuthorizations | Raw.account.ResetWebAuthorization | Raw.account.ResetWebAuthorizations | Raw.account.GetAllSecureValues | Raw.account.GetSecureValue | Raw.account.SaveSecureValue | Raw.account.DeleteSecureValue | Raw.account.GetAuthorizationForm | Raw.account.AcceptAuthorization | Raw.account.SendVerifyPhoneCode | Raw.account.VerifyPhone | Raw.account.SendVerifyEmailCode | Raw.account.VerifyEmail | Raw.account.InitTakeoutSession | Raw.account.FinishTakeoutSession | Raw.account.ConfirmPasswordEmail | Raw.account.ResendPasswordEmail | Raw.account.CancelPasswordEmail | Raw.account.GetContactSignUpNotification | Raw.account.SetContactSignUpNotification | Raw.account.GetNotifyExceptions | Raw.account.GetWallPaper | Raw.account.UploadWallPaper | Raw.account.SaveWallPaper | Raw.account.InstallWallPaper | Raw.account.ResetWallPapers | Raw.account.GetAutoDownloadSettings | Raw.account.SaveAutoDownloadSettings | Raw.account.UploadTheme | Raw.account.CreateTheme | Raw.account.UpdateTheme | Raw.account.SaveTheme | Raw.account.InstallTheme | Raw.account.GetTheme | Raw.account.GetThemes | Raw.account.SetContentSettings | Raw.account.GetContentSettings | Raw.account.GetMultiWallPapers | Raw.account.GetGlobalPrivacySettings | Raw.account.SetGlobalPrivacySettings | Raw.account.ReportProfilePhoto | Raw.account.ResetPassword | Raw.account.DeclinePasswordReset | Raw.account.GetChatThemes | Raw.account.SetAuthorizationTTL | Raw.account.ChangeAuthorizationSettings | Raw.account.GetSavedRingtones | Raw.account.SaveRingtone | Raw.account.UploadRingtone | Raw.account.UpdateEmojiStatus | Raw.account.GetDefaultEmojiStatuses | Raw.account.GetRecentEmojiStatuses | Raw.account.ClearRecentEmojiStatuses | Raw.account.ReorderUsernames | Raw.account.ToggleUsername | Raw.account.GetDefaultProfilePhotoEmojis | Raw.account.GetDefaultGroupPhotoEmojis | Raw.account.GetAutoSaveSettings | Raw.account.SaveAutoSaveSettings | Raw.account.DeleteAutoSaveExceptions | Raw.account.InvalidateSignInCodes | Raw.account.UpdateColor | Raw.account.GetDefaultBackgroundEmojis | Raw.account.GetChannelDefaultEmojiStatuses | Raw.account.GetChannelRestrictedStatusEmojis | Raw.account.UpdateBusinessWorkHours | Raw.account.UpdateBusinessLocation | Raw.account.UpdateBusinessGreetingMessage | Raw.account.UpdateBusinessAwayMessage | Raw.account.UpdateConnectedBot | Raw.account.GetConnectedBots | Raw.account.GetBotBusinessConnection | Raw.account.UpdateBusinessIntro | Raw.account.ToggleConnectedBotPaused | Raw.account.DisablePeerConnectedBot | Raw.account.UpdateBirthday | Raw.account.CreateBusinessChatLink | Raw.account.EditBusinessChatLink | Raw.account.DeleteBusinessChatLink | Raw.account.GetBusinessChatLinks | Raw.account.ResolveBusinessChatLink | Raw.account.UpdatePersonalChannel | Raw.account.ToggleSponsoredMessages | Raw.account.GetReactionsNotifySettings | Raw.account.SetReactionsNotifySettings | Raw.users.GetUsers | Raw.users.GetFullUser | Raw.users.SetSecureValueErrors | Raw.users.GetIsPremiumRequiredToContact | Raw.contacts.GetContactIDs | Raw.contacts.GetStatuses | Raw.contacts.GetContacts | Raw.contacts.ImportContacts | Raw.contacts.DeleteContacts | Raw.contacts.DeleteByPhones | Raw.contacts.Block | Raw.contacts.Unblock | Raw.contacts.GetBlocked | Raw.contacts.Search | Raw.contacts.ResolveUsername | Raw.contacts.GetTopPeers | Raw.contacts.ResetTopPeerRating | Raw.contacts.ResetSaved | Raw.contacts.GetSaved | Raw.contacts.ToggleTopPeers | Raw.contacts.AddContact | Raw.contacts.AcceptContact | Raw.contacts.GetLocated | Raw.contacts.BlockFromReplies | Raw.contacts.ResolvePhone | Raw.contacts.ExportContactToken | Raw.contacts.ImportContactToken | Raw.contacts.EditCloseFriends | Raw.contacts.SetBlocked | Raw.contacts.GetBirthdays | Raw.messages.GetMessages | Raw.messages.GetDialogs | Raw.messages.GetHistory | Raw.messages.Search | Raw.messages.ReadHistory | Raw.messages.DeleteHistory | Raw.messages.DeleteMessages | Raw.messages.ReceivedMessages | Raw.messages.SetTyping | Raw.messages.SendMessage | Raw.messages.SendMedia | Raw.messages.ForwardMessages | Raw.messages.ReportSpam | Raw.messages.GetPeerSettings | Raw.messages.Report | Raw.messages.GetChats | Raw.messages.GetFullChat | Raw.messages.EditChatTitle | Raw.messages.EditChatPhoto | Raw.messages.AddChatUser | Raw.messages.DeleteChatUser | Raw.messages.CreateChat | Raw.messages.GetDhConfig | Raw.messages.RequestEncryption | Raw.messages.AcceptEncryption | Raw.messages.DiscardEncryption | Raw.messages.SetEncryptedTyping | Raw.messages.ReadEncryptedHistory | Raw.messages.SendEncrypted | Raw.messages.SendEncryptedFile | Raw.messages.SendEncryptedService | Raw.messages.ReceivedQueue | Raw.messages.ReportEncryptedSpam | Raw.messages.ReadMessageContents | Raw.messages.GetStickers | Raw.messages.GetAllStickers | Raw.messages.GetWebPagePreview | Raw.messages.ExportChatInvite | Raw.messages.CheckChatInvite | Raw.messages.ImportChatInvite | Raw.messages.GetStickerSet | Raw.messages.InstallStickerSet | Raw.messages.UninstallStickerSet | Raw.messages.StartBot | Raw.messages.GetMessagesViews | Raw.messages.EditChatAdmin | Raw.messages.MigrateChat | Raw.messages.SearchGlobal | Raw.messages.ReorderStickerSets | Raw.messages.GetDocumentByHash | Raw.messages.GetSavedGifs | Raw.messages.SaveGif | Raw.messages.GetInlineBotResults | Raw.messages.SetInlineBotResults | Raw.messages.SendInlineBotResult | Raw.messages.GetMessageEditData | Raw.messages.EditMessage | Raw.messages.EditInlineBotMessage | Raw.messages.GetBotCallbackAnswer | Raw.messages.SetBotCallbackAnswer | Raw.messages.GetPeerDialogs | Raw.messages.SaveDraft | Raw.messages.GetAllDrafts | Raw.messages.GetFeaturedStickers | Raw.messages.ReadFeaturedStickers | Raw.messages.GetRecentStickers | Raw.messages.SaveRecentSticker | Raw.messages.ClearRecentStickers | Raw.messages.GetArchivedStickers | Raw.messages.GetMaskStickers | Raw.messages.GetAttachedStickers | Raw.messages.SetGameScore | Raw.messages.SetInlineGameScore | Raw.messages.GetGameHighScores | Raw.messages.GetInlineGameHighScores | Raw.messages.GetCommonChats | Raw.messages.GetWebPage | Raw.messages.ToggleDialogPin | Raw.messages.ReorderPinnedDialogs | Raw.messages.GetPinnedDialogs | Raw.messages.SetBotShippingResults | Raw.messages.SetBotPrecheckoutResults | Raw.messages.UploadMedia | Raw.messages.SendScreenshotNotification | Raw.messages.GetFavedStickers | Raw.messages.FaveSticker | Raw.messages.GetUnreadMentions | Raw.messages.ReadMentions | Raw.messages.GetRecentLocations | Raw.messages.SendMultiMedia | Raw.messages.UploadEncryptedFile | Raw.messages.SearchStickerSets | Raw.messages.GetSplitRanges | Raw.messages.MarkDialogUnread | Raw.messages.GetDialogUnreadMarks | Raw.messages.ClearAllDrafts | Raw.messages.UpdatePinnedMessage | Raw.messages.SendVote | Raw.messages.GetPollResults | Raw.messages.GetOnlines | Raw.messages.EditChatAbout | Raw.messages.EditChatDefaultBannedRights | Raw.messages.GetEmojiKeywords | Raw.messages.GetEmojiKeywordsDifference | Raw.messages.GetEmojiKeywordsLanguages | Raw.messages.GetEmojiURL | Raw.messages.GetSearchCounters | Raw.messages.RequestUrlAuth | Raw.messages.AcceptUrlAuth | Raw.messages.HidePeerSettingsBar | Raw.messages.GetScheduledHistory | Raw.messages.GetScheduledMessages | Raw.messages.SendScheduledMessages | Raw.messages.DeleteScheduledMessages | Raw.messages.GetPollVotes | Raw.messages.ToggleStickerSets | Raw.messages.GetDialogFilters | Raw.messages.GetSuggestedDialogFilters | Raw.messages.UpdateDialogFilter | Raw.messages.UpdateDialogFiltersOrder | Raw.messages.GetOldFeaturedStickers | Raw.messages.GetReplies | Raw.messages.GetDiscussionMessage | Raw.messages.ReadDiscussion | Raw.messages.UnpinAllMessages | Raw.messages.DeleteChat | Raw.messages.DeletePhoneCallHistory | Raw.messages.CheckHistoryImport | Raw.messages.InitHistoryImport | Raw.messages.UploadImportedMedia | Raw.messages.StartHistoryImport | Raw.messages.GetExportedChatInvites | Raw.messages.GetExportedChatInvite | Raw.messages.EditExportedChatInvite | Raw.messages.DeleteRevokedExportedChatInvites | Raw.messages.DeleteExportedChatInvite | Raw.messages.GetAdminsWithInvites | Raw.messages.GetChatInviteImporters | Raw.messages.SetHistoryTTL | Raw.messages.CheckHistoryImportPeer | Raw.messages.SetChatTheme | Raw.messages.GetMessageReadParticipants | Raw.messages.GetSearchResultsCalendar | Raw.messages.GetSearchResultsPositions | Raw.messages.HideChatJoinRequest | Raw.messages.HideAllChatJoinRequests | Raw.messages.ToggleNoForwards | Raw.messages.SaveDefaultSendAs | Raw.messages.SendReaction | Raw.messages.GetMessagesReactions | Raw.messages.GetMessageReactionsList | Raw.messages.SetChatAvailableReactions | Raw.messages.GetAvailableReactions | Raw.messages.SetDefaultReaction | Raw.messages.TranslateText | Raw.messages.GetUnreadReactions | Raw.messages.ReadReactions | Raw.messages.SearchSentMedia | Raw.messages.GetAttachMenuBots | Raw.messages.GetAttachMenuBot | Raw.messages.ToggleBotInAttachMenu | Raw.messages.RequestWebView | Raw.messages.ProlongWebView | Raw.messages.RequestSimpleWebView | Raw.messages.SendWebViewResultMessage | Raw.messages.SendWebViewData | Raw.messages.TranscribeAudio | Raw.messages.RateTranscribedAudio | Raw.messages.GetCustomEmojiDocuments | Raw.messages.GetEmojiStickers | Raw.messages.GetFeaturedEmojiStickers | Raw.messages.ReportReaction | Raw.messages.GetTopReactions | Raw.messages.GetRecentReactions | Raw.messages.ClearRecentReactions | Raw.messages.GetExtendedMedia | Raw.messages.SetDefaultHistoryTTL | Raw.messages.GetDefaultHistoryTTL | Raw.messages.SendBotRequestedPeer | Raw.messages.GetEmojiGroups | Raw.messages.GetEmojiStatusGroups | Raw.messages.GetEmojiProfilePhotoGroups | Raw.messages.SearchCustomEmoji | Raw.messages.TogglePeerTranslations | Raw.messages.GetBotApp | Raw.messages.RequestAppWebView | Raw.messages.SetChatWallPaper | Raw.messages.SearchEmojiStickerSets | Raw.messages.GetSavedDialogs | Raw.messages.GetSavedHistory | Raw.messages.DeleteSavedHistory | Raw.messages.GetPinnedSavedDialogs | Raw.messages.ToggleSavedDialogPin | Raw.messages.ReorderPinnedSavedDialogs | Raw.messages.GetSavedReactionTags | Raw.messages.UpdateSavedReactionTag | Raw.messages.GetDefaultTagReactions | Raw.messages.GetOutboxReadDate | Raw.messages.GetQuickReplies | Raw.messages.ReorderQuickReplies | Raw.messages.CheckQuickReplyShortcut | Raw.messages.EditQuickReplyShortcut | Raw.messages.DeleteQuickReplyShortcut | Raw.messages.GetQuickReplyMessages | Raw.messages.SendQuickReplyMessages | Raw.messages.DeleteQuickReplyMessages | Raw.messages.ToggleDialogFilterTags | Raw.messages.GetMyStickers | Raw.messages.GetEmojiStickerGroups | Raw.messages.GetAvailableEffects | Raw.messages.EditFactCheck | Raw.messages.DeleteFactCheck | Raw.messages.GetFactCheck | Raw.updates.GetState | Raw.updates.GetDifference | Raw.updates.GetChannelDifference | Raw.photos.UpdateProfilePhoto | Raw.photos.UploadProfilePhoto | Raw.photos.DeletePhotos | Raw.photos.GetUserPhotos | Raw.photos.UploadContactProfilePhoto | Raw.upload.SaveFilePart | Raw.upload.GetFile | Raw.upload.SaveBigFilePart | Raw.upload.GetWebFile | Raw.upload.GetCdnFile | Raw.upload.ReuploadCdnFile | Raw.upload.GetCdnFileHashes | Raw.upload.GetFileHashes | Raw.help.GetConfig | Raw.help.GetNearestDc | Raw.help.GetAppUpdate | Raw.help.GetInviteText | Raw.help.GetSupport | Raw.help.SetBotUpdatesStatus | Raw.help.GetCdnConfig | Raw.help.GetRecentMeUrls | Raw.help.GetTermsOfServiceUpdate | Raw.help.AcceptTermsOfService | Raw.help.GetDeepLinkInfo | Raw.help.GetAppConfig | Raw.help.SaveAppLog | Raw.help.GetPassportConfig | Raw.help.GetSupportName | Raw.help.GetUserInfo | Raw.help.EditUserInfo | Raw.help.GetPromoData | Raw.help.HidePromoData | Raw.help.DismissSuggestion | Raw.help.GetCountriesList | Raw.help.GetPremiumPromo | Raw.help.GetPeerColors | Raw.help.GetPeerProfileColors | Raw.help.GetTimezonesList | Raw.channels.ReadHistory | Raw.channels.DeleteMessages | Raw.channels.ReportSpam | Raw.channels.GetMessages | Raw.channels.GetParticipants | Raw.channels.GetParticipant | Raw.channels.GetChannels | Raw.channels.GetFullChannel | Raw.channels.CreateChannel | Raw.channels.EditAdmin | Raw.channels.EditTitle | Raw.channels.EditPhoto | Raw.channels.CheckUsername | Raw.channels.UpdateUsername | Raw.channels.JoinChannel | Raw.channels.LeaveChannel | Raw.channels.InviteToChannel | Raw.channels.DeleteChannel | Raw.channels.ExportMessageLink | Raw.channels.ToggleSignatures | Raw.channels.GetAdminedPublicChannels | Raw.channels.EditBanned | Raw.channels.GetAdminLog | Raw.channels.SetStickers | Raw.channels.ReadMessageContents | Raw.channels.DeleteHistory | Raw.channels.TogglePreHistoryHidden | Raw.channels.GetLeftChannels | Raw.channels.GetGroupsForDiscussion | Raw.channels.SetDiscussionGroup | Raw.channels.EditCreator | Raw.channels.EditLocation | Raw.channels.ToggleSlowMode | Raw.channels.GetInactiveChannels | Raw.channels.ConvertToGigagroup | Raw.channels.ViewSponsoredMessage | Raw.channels.GetSponsoredMessages | Raw.channels.GetSendAs | Raw.channels.DeleteParticipantHistory | Raw.channels.ToggleJoinToSend | Raw.channels.ToggleJoinRequest | Raw.channels.ReorderUsernames | Raw.channels.ToggleUsername | Raw.channels.DeactivateAllUsernames | Raw.channels.ToggleForum | Raw.channels.CreateForumTopic | Raw.channels.GetForumTopics | Raw.channels.GetForumTopicsByID | Raw.channels.EditForumTopic | Raw.channels.UpdatePinnedForumTopic | Raw.channels.DeleteTopicHistory | Raw.channels.ReorderPinnedForumTopics | Raw.channels.ToggleAntiSpam | Raw.channels.ReportAntiSpamFalsePositive | Raw.channels.ToggleParticipantsHidden | Raw.channels.ClickSponsoredMessage | Raw.channels.UpdateColor | Raw.channels.ToggleViewForumAsMessages | Raw.channels.GetChannelRecommendations | Raw.channels.UpdateEmojiStatus | Raw.channels.SetBoostsToUnblockRestrictions | Raw.channels.SetEmojiStickers | Raw.channels.ReportSponsoredMessage | Raw.channels.RestrictSponsoredMessages | Raw.channels.SearchPosts | Raw.bots.SendCustomRequest | Raw.bots.AnswerWebhookJSONQuery | Raw.bots.SetBotCommands | Raw.bots.ResetBotCommands | Raw.bots.GetBotCommands | Raw.bots.SetBotMenuButton | Raw.bots.GetBotMenuButton | Raw.bots.SetBotBroadcastDefaultAdminRights | Raw.bots.SetBotGroupDefaultAdminRights | Raw.bots.SetBotInfo | Raw.bots.GetBotInfo | Raw.bots.ReorderUsernames | Raw.bots.ToggleUsername | Raw.bots.CanSendMessage | Raw.bots.AllowSendMessage | Raw.bots.InvokeWebViewCustomMethod | Raw.payments.GetPaymentForm | Raw.payments.GetPaymentReceipt | Raw.payments.ValidateRequestedInfo | Raw.payments.SendPaymentForm | Raw.payments.GetSavedInfo | Raw.payments.ClearSavedInfo | Raw.payments.GetBankCardData | Raw.payments.ExportInvoice | Raw.payments.AssignAppStoreTransaction | Raw.payments.AssignPlayMarketTransaction | Raw.payments.CanPurchasePremium | Raw.payments.GetPremiumGiftCodeOptions | Raw.payments.CheckGiftCode | Raw.payments.ApplyGiftCode | Raw.payments.GetGiveawayInfo | Raw.payments.LaunchPrepaidGiveaway | Raw.payments.GetStarsTopupOptions | Raw.payments.GetStarsStatus | Raw.payments.GetStarsTransactions | Raw.payments.SendStarsForm | Raw.payments.RefundStarsCharge | Raw.stickers.CreateStickerSet | Raw.stickers.RemoveStickerFromSet | Raw.stickers.ChangeStickerPosition | Raw.stickers.AddStickerToSet | Raw.stickers.SetStickerSetThumb | Raw.stickers.CheckShortName | Raw.stickers.SuggestShortName | Raw.stickers.ChangeSticker | Raw.stickers.RenameStickerSet | Raw.stickers.DeleteStickerSet | Raw.stickers.ReplaceSticker | Raw.phone.GetCallConfig | Raw.phone.RequestCall | Raw.phone.AcceptCall | Raw.phone.ConfirmCall | Raw.phone.ReceivedCall | Raw.phone.DiscardCall | Raw.phone.SetCallRating | Raw.phone.SaveCallDebug | Raw.phone.SendSignalingData | Raw.phone.CreateGroupCall | Raw.phone.JoinGroupCall | Raw.phone.LeaveGroupCall | Raw.phone.InviteToGroupCall | Raw.phone.DiscardGroupCall | Raw.phone.ToggleGroupCallSettings | Raw.phone.GetGroupCall | Raw.phone.GetGroupParticipants | Raw.phone.CheckGroupCall | Raw.phone.ToggleGroupCallRecord | Raw.phone.EditGroupCallParticipant | Raw.phone.EditGroupCallTitle | Raw.phone.GetGroupCallJoinAs | Raw.phone.ExportGroupCallInvite | Raw.phone.ToggleGroupCallStartSubscription | Raw.phone.StartScheduledGroupCall | Raw.phone.SaveDefaultGroupCallJoinAs | Raw.phone.JoinGroupCallPresentation | Raw.phone.LeaveGroupCallPresentation | Raw.phone.GetGroupCallStreamChannels | Raw.phone.GetGroupCallStreamRtmpUrl | Raw.phone.SaveCallLog | Raw.langpack.GetLangPack | Raw.langpack.GetStrings | Raw.langpack.GetDifference | Raw.langpack.GetLanguages | Raw.langpack.GetLanguage | Raw.folders.EditPeerFolders | Raw.stats.GetBroadcastStats | Raw.stats.LoadAsyncGraph | Raw.stats.GetMegagroupStats | Raw.stats.GetMessagePublicForwards | Raw.stats.GetMessageStats | Raw.stats.GetStoryStats | Raw.stats.GetStoryPublicForwards | Raw.stats.GetBroadcastRevenueStats | Raw.stats.GetBroadcastRevenueWithdrawalUrl | Raw.stats.GetBroadcastRevenueTransactions | Raw.chatlists.ExportChatlistInvite | Raw.chatlists.DeleteExportedInvite | Raw.chatlists.EditExportedInvite | Raw.chatlists.GetExportedInvites | Raw.chatlists.CheckChatlistInvite | Raw.chatlists.JoinChatlistInvite | Raw.chatlists.GetChatlistUpdates | Raw.chatlists.JoinChatlistUpdates | Raw.chatlists.HideChatlistUpdates | Raw.chatlists.GetLeaveChatlistSuggestions | Raw.chatlists.LeaveChatlist | Raw.stories.CanSendStory | Raw.stories.SendStory | Raw.stories.EditStory | Raw.stories.DeleteStories | Raw.stories.TogglePinned | Raw.stories.GetAllStories | Raw.stories.GetPinnedStories | Raw.stories.GetStoriesArchive | Raw.stories.GetStoriesByID | Raw.stories.ToggleAllStoriesHidden | Raw.stories.ReadStories | Raw.stories.IncrementStoryViews | Raw.stories.GetStoryViewsList | Raw.stories.GetStoriesViews | Raw.stories.ExportStoryLink | Raw.stories.Report | Raw.stories.ActivateStealthMode | Raw.stories.SendReaction | Raw.stories.GetPeerStories | Raw.stories.GetAllReadPeerStories | Raw.stories.GetPeerMaxIDs | Raw.stories.GetChatsToSend | Raw.stories.TogglePeerStoriesHidden | Raw.stories.GetStoryReactionsList | Raw.stories.TogglePinnedToTop | Raw.premium.GetBoostsList | Raw.premium.GetMyBoosts | Raw.premium.ApplyBoost | Raw.premium.GetBoostsStatus | Raw.premium.GetUserBoosts | Raw.smsjobs.IsEligibleToJoin | Raw.smsjobs.Join | Raw.smsjobs.Leave | Raw.smsjobs.UpdateSettings | Raw.smsjobs.GetStatus | Raw.smsjobs.GetSmsJob | Raw.smsjobs.FinishJob | Raw.fragment.GetCollectibleInfo;
    type TypeFileLocation = Raw.FileLocationUnavailable23 | Raw.FileLocation23;
    type TypeDecryptedMessage = Raw.DecryptedMessage8 | Raw.DecryptedMessageService8 | Raw.DecryptedMessage17 | Raw.DecryptedMessageService17 | Raw.DecryptedMessage45 | Raw.DecryptedMessage73;
    type TypeDecryptedMessageAction = Raw.DecryptedMessageActionSetMessageTTL8 | Raw.DecryptedMessageActionReadMessages8 | Raw.DecryptedMessageActionDeleteMessages8 | Raw.DecryptedMessageActionScreenshotMessages8 | Raw.DecryptedMessageActionFlushHistory8 | Raw.DecryptedMessageActionResend17 | Raw.DecryptedMessageActionNotifyLayer17 | Raw.DecryptedMessageActionTyping17 | Raw.DecryptedMessageActionRequestKey20 | Raw.DecryptedMessageActionAcceptKey20 | Raw.DecryptedMessageActionAbortKey20 | Raw.DecryptedMessageActionCommitKey20 | Raw.DecryptedMessageActionNoop20;
    type TypeDecryptedMessageMedia = Raw.DecryptedMessageMediaEmpty8 | Raw.DecryptedMessageMediaPhoto8 | Raw.DecryptedMessageMediaVideo8 | Raw.DecryptedMessageMediaGeoPoint8 | Raw.DecryptedMessageMediaContact8 | Raw.DecryptedMessageMediaDocument8 | Raw.DecryptedMessageMediaAudio8 | Raw.DecryptedMessageMediaVideo17 | Raw.DecryptedMessageMediaAudio17 | Raw.DecryptedMessageMediaExternalDocument23 | Raw.DecryptedMessageMediaPhoto45 | Raw.DecryptedMessageMediaVideo45 | Raw.DecryptedMessageMediaDocument45 | Raw.DecryptedMessageMediaVenue45 | Raw.DecryptedMessageMediaWebPage45 | Raw.DecryptedMessageMediaDocument143;
    type TypeInputCollectible = Raw.InputCollectibleUsername | Raw.InputCollectiblePhone;
    type TypeSmsJob = Raw.SmsJob;
    type TypeExportedStoryLink = Raw.ExportedStoryLink;
    type TypeInputChatlist = Raw.InputChatlistDialogFilter;
    type TypeInputFolderPeer = Raw.InputFolderPeer;
    type TypeLangPackLanguage = Raw.LangPackLanguage;
    type TypeInputPhoneCall = Raw.InputPhoneCall;
    type TypeInputStickerSetItem = Raw.InputStickerSetItem;
    type TypeInputPaymentCredentials = Raw.InputPaymentCredentialsSaved | Raw.InputPaymentCredentials | Raw.InputPaymentCredentialsApplePay | Raw.InputPaymentCredentialsGooglePay;
    type TypeInputInvoice = Raw.InputInvoiceMessage | Raw.InputInvoiceSlug | Raw.InputInvoicePremiumGiftCode | Raw.InputInvoiceStars;
    type TypeBotCommandScope = Raw.BotCommandScopeDefault | Raw.BotCommandScopeUsers | Raw.BotCommandScopeChats | Raw.BotCommandScopeChatAdmins | Raw.BotCommandScopePeer | Raw.BotCommandScopePeerAdmins | Raw.BotCommandScopePeerUser;
    type TypeChannelAdminLogEventsFilter = Raw.ChannelAdminLogEventsFilter;
    type TypeExportedMessageLink = Raw.ExportedMessageLink;
    type TypeChannelParticipantsFilter = Raw.ChannelParticipantsRecent | Raw.ChannelParticipantsAdmins | Raw.ChannelParticipantsKicked | Raw.ChannelParticipantsBots | Raw.ChannelParticipantsBanned | Raw.ChannelParticipantsSearch | Raw.ChannelParticipantsContacts | Raw.ChannelParticipantsMentions;
    type TypeInputAppEvent = Raw.InputAppEvent;
    type TypeCdnConfig = Raw.CdnConfig;
    type TypeNearestDc = Raw.NearestDc;
    type TypeConfig = Raw.Config;
    type TypeInputWebFileLocation = Raw.InputWebFileLocation | Raw.InputWebFileGeoPointLocation | Raw.InputWebFileAudioAlbumThumbLocation;
    type TypeInputFileLocation = Raw.InputFileLocation | Raw.InputEncryptedFileLocation | Raw.InputDocumentFileLocation | Raw.InputSecureFileLocation | Raw.InputTakeoutFileLocation | Raw.InputPhotoFileLocation | Raw.InputPhotoLegacyFileLocation | Raw.InputPeerPhotoFileLocation | Raw.InputStickerSetThumb | Raw.InputGroupCallStream;
    type TypeChannelMessagesFilter = Raw.ChannelMessagesFilterEmpty | Raw.ChannelMessagesFilter;
    type TypeOutboxReadDate = Raw.OutboxReadDate;
    type TypeAppWebViewResult = Raw.AppWebViewResultUrl;
    type TypeInputBotApp = Raw.InputBotAppID | Raw.InputBotAppShortName;
    type TypeDefaultHistoryTTL = Raw.DefaultHistoryTTL;
    type TypeWebViewMessageSent = Raw.WebViewMessageSent;
    type TypeSimpleWebViewResult = Raw.SimpleWebViewResultUrl;
    type TypeWebViewResult = Raw.WebViewResultUrl;
    type TypeAttachMenuBotsBot = Raw.AttachMenuBotsBot;
    type TypeAttachMenuBots = Raw.AttachMenuBotsNotModified | Raw.AttachMenuBots;
    type TypeReadParticipantDate = Raw.ReadParticipantDate;
    type TypeDialogFilterSuggested = Raw.DialogFilterSuggested;
    type TypeUrlAuthResult = Raw.UrlAuthResultRequest | Raw.UrlAuthResultAccepted | Raw.UrlAuthResultDefault;
    type TypeEmojiURL = Raw.EmojiURL;
    type TypeEmojiLanguage = Raw.EmojiLanguage;
    type TypeEmojiKeywordsDifference = Raw.EmojiKeywordsDifference;
    type TypeChatOnlines = Raw.ChatOnlines;
    type TypeInputSingleMedia = Raw.InputSingleMedia;
    type TypeInputStickeredMedia = Raw.InputStickeredMediaPhoto | Raw.InputStickeredMediaDocument;
    type TypeInputDialogPeer = Raw.InputDialogPeer | Raw.InputDialogPeerFolder;
    type TypeInputBotInlineResult = Raw.InputBotInlineResult | Raw.InputBotInlineResultPhoto | Raw.InputBotInlineResultDocument | Raw.InputBotInlineResultGame;
    type TypeInputEncryptedFile = Raw.InputEncryptedFileEmpty | Raw.InputEncryptedFileUploaded | Raw.InputEncryptedFile | Raw.InputEncryptedFileBigUploaded;
    type TypeInputEncryptedChat = Raw.InputEncryptedChat;
    type TypeInputChatPhoto = Raw.InputChatPhotoEmpty | Raw.InputChatUploadedPhoto | Raw.InputChatPhoto;
    type TypeInputQuickReplyShortcut = Raw.InputQuickReplyShortcut | Raw.InputQuickReplyShortcutId;
    type TypeReceivedNotifyMessage = Raw.ReceivedNotifyMessage;
    type TypeInputMessage = Raw.InputMessageID | Raw.InputMessageReplyTo | Raw.InputMessagePinned | Raw.InputMessageCallbackQuery;
    type TypeExportedContactToken = Raw.ExportedContactToken;
    type TypeSavedContact = Raw.SavedPhoneContact;
    type TypeInputContact = Raw.InputPhoneContact;
    type TypeContactStatus = Raw.ContactStatus;
    type TypeReactionsNotifySettings = Raw.ReactionsNotifySettings;
    type TypeInputBusinessChatLink = Raw.InputBusinessChatLink;
    type TypeInputBusinessIntro = Raw.InputBusinessIntro;
    type TypeInputBusinessBotRecipients = Raw.InputBusinessBotRecipients;
    type TypeInputBusinessAwayMessage = Raw.InputBusinessAwayMessage;
    type TypeInputBusinessGreetingMessage = Raw.InputBusinessGreetingMessage;
    type TypeEmojiList = Raw.EmojiListNotModified | Raw.EmojiList;
    type TypeGlobalPrivacySettings = Raw.GlobalPrivacySettings;
    type TypeInputTheme = Raw.InputTheme | Raw.InputThemeSlug;
    type TypeInputThemeSettings = Raw.InputThemeSettings;
    type TypeEmailVerifyPurpose = Raw.EmailVerifyPurposeLoginSetup | Raw.EmailVerifyPurposeLoginChange | Raw.EmailVerifyPurposePassport;
    type TypeSecureValueHash = Raw.SecureValueHash;
    type TypeInputSecureValue = Raw.InputSecureValue;
    type TypeAccountDaysTTL = Raw.AccountDaysTTL;
    type TypeInputPrivacyRule = Raw.InputPrivacyValueAllowContacts | Raw.InputPrivacyValueAllowAll | Raw.InputPrivacyValueAllowUsers | Raw.InputPrivacyValueDisallowContacts | Raw.InputPrivacyValueDisallowAll | Raw.InputPrivacyValueDisallowUsers | Raw.InputPrivacyValueAllowChatParticipants | Raw.InputPrivacyValueDisallowChatParticipants | Raw.InputPrivacyValueAllowCloseFriends | Raw.InputPrivacyValueAllowPremium;
    type TypeInputPrivacyKey = Raw.InputPrivacyKeyStatusTimestamp | Raw.InputPrivacyKeyChatInvite | Raw.InputPrivacyKeyPhoneCall | Raw.InputPrivacyKeyPhoneP2P | Raw.InputPrivacyKeyForwards | Raw.InputPrivacyKeyProfilePhoto | Raw.InputPrivacyKeyPhoneNumber | Raw.InputPrivacyKeyAddedByPhone | Raw.InputPrivacyKeyVoiceMessages | Raw.InputPrivacyKeyAbout | Raw.InputPrivacyKeyBirthday;
    type TypeReportReason = Raw.InputReportReasonSpam | Raw.InputReportReasonViolence | Raw.InputReportReasonPornography | Raw.InputReportReasonChildAbuse | Raw.InputReportReasonOther | Raw.InputReportReasonCopyright | Raw.InputReportReasonGeoIrrelevant | Raw.InputReportReasonFake | Raw.InputReportReasonIllegalDrugs | Raw.InputReportReasonPersonalDetails;
    type TypeInputPeerNotifySettings = Raw.InputPeerNotifySettings;
    type TypeInputNotifyPeer = Raw.InputNotifyPeer | Raw.InputNotifyUsers | Raw.InputNotifyChats | Raw.InputNotifyBroadcasts | Raw.InputNotifyForumTopic;
    type TypeInputCheckPasswordSRP = Raw.InputCheckPasswordEmpty | Raw.InputCheckPasswordSRP;
    type TypeEmailVerification = Raw.EmailVerificationCode | Raw.EmailVerificationGoogle | Raw.EmailVerificationApple;
    type TypeCodeSettings = Raw.CodeSettings;
    type TypeInputClientProxy = Raw.InputClientProxy;
    type TypeStarsTransaction = Raw.StarsTransaction;
    type TypeStarsTransactionPeer = Raw.StarsTransactionPeerUnsupported | Raw.StarsTransactionPeerAppStore | Raw.StarsTransactionPeerPlayMarket | Raw.StarsTransactionPeerPremiumBot | Raw.StarsTransactionPeerFragment | Raw.StarsTransactionPeer;
    type TypeAvailableEffect = Raw.AvailableEffect;
    type TypeReactionNotificationsFrom = Raw.ReactionNotificationsFromContacts | Raw.ReactionNotificationsFromAll;
    type TypeBroadcastRevenueTransaction = Raw.BroadcastRevenueTransactionProceeds | Raw.BroadcastRevenueTransactionWithdrawal | Raw.BroadcastRevenueTransactionRefund;
    type TypeSponsoredMessageReportOption = Raw.SponsoredMessageReportOption;
    type TypeBusinessChatLink = Raw.BusinessChatLink;
    type TypeMissingInvitee = Raw.MissingInvitee;
    type TypeContactBirthday = Raw.ContactBirthday;
    type TypeConnectedBot = Raw.ConnectedBot;
    type TypeBusinessBotRecipients = Raw.BusinessBotRecipients;
    type TypeTimezone = Raw.Timezone;
    type TypeBusinessAwayMessageSchedule = Raw.BusinessAwayMessageScheduleAlways | Raw.BusinessAwayMessageScheduleOutsideWorkHours | Raw.BusinessAwayMessageScheduleCustom;
    type TypeBusinessRecipients = Raw.BusinessRecipients;
    type TypeInputBusinessRecipients = Raw.InputBusinessRecipients;
    type TypeBusinessWeeklyOpen = Raw.BusinessWeeklyOpen;
    type TypeSavedReactionTag = Raw.SavedReactionTag;
    type TypeSavedDialog = Raw.SavedDialog;
    type TypeStoryReaction = Raw.StoryReaction | Raw.StoryReactionPublicForward | Raw.StoryReactionPublicRepost;
    type TypePublicForward = Raw.PublicForwardMessage | Raw.PublicForwardStory;
    type TypePrepaidGiveaway = Raw.PrepaidGiveaway;
    type TypeMyBoost = Raw.MyBoost;
    type TypeMediaAreaCoordinates = Raw.MediaAreaCoordinates;
    type TypeStoryView = Raw.StoryView | Raw.StoryViewPublicForward | Raw.StoryViewPublicRepost;
    type TypeStoryViews = Raw.StoryViews;
    type TypeMediaArea = Raw.MediaAreaVenue | Raw.InputMediaAreaVenue | Raw.MediaAreaGeoPoint | Raw.MediaAreaSuggestedReaction | Raw.MediaAreaChannelPost | Raw.InputMediaAreaChannelPost;
    type TypeStoryFwdHeader = Raw.StoryFwdHeader;
    type TypeExportedChatlistInvite = Raw.ExportedChatlistInvite;
    type TypeAutoSaveException = Raw.AutoSaveException;
    type TypeAutoSaveSettings = Raw.AutoSaveSettings;
    type TypeEmojiGroup = Raw.EmojiGroup | Raw.EmojiGroupGreeting | Raw.EmojiGroupPremium;
    type TypePremiumSubscriptionOption = Raw.PremiumSubscriptionOption;
    type TypeStarsTopupOption = Raw.StarsTopupOption;
    type TypePremiumGiftCodeOption = Raw.PremiumGiftCodeOption;
    type TypeInputStorePaymentPurpose = Raw.InputStorePaymentPremiumSubscription | Raw.InputStorePaymentGiftPremium | Raw.InputStorePaymentPremiumGiftCode | Raw.InputStorePaymentPremiumGiveaway | Raw.InputStorePaymentStars;
    type TypeAttachMenuBot = Raw.AttachMenuBot;
    type TypeAttachMenuBotIcon = Raw.AttachMenuBotIcon;
    type TypeAttachMenuPeerType = Raw.AttachMenuPeerTypeSameBotPM | Raw.AttachMenuPeerTypeBotPM | Raw.AttachMenuPeerTypePM | Raw.AttachMenuPeerTypeChat | Raw.AttachMenuPeerTypeBroadcast;
    type TypeAttachMenuBotIconColor = Raw.AttachMenuBotIconColor;
    type TypeGroupCallStreamChannel = Raw.GroupCallStreamChannel;
    type TypeAvailableReaction = Raw.AvailableReaction;
    type TypeMessagePeerReaction = Raw.MessagePeerReaction;
    type TypeUserFull = Raw.UserFull;
    type TypeSendAsPeer = Raw.SendAsPeer;
    type TypeSearchResultsPosition = Raw.SearchResultPosition;
    type TypeSearchResultsCalendarPeriod = Raw.SearchResultsCalendarPeriod;
    type TypeSponsoredMessage = Raw.SponsoredMessage;
    type TypeGroupCallParticipantVideoSourceGroup = Raw.GroupCallParticipantVideoSourceGroup;
    type TypeChatAdminWithInvites = Raw.ChatAdminWithInvites;
    type TypeChatInviteImporter = Raw.ChatInviteImporter;
    type TypeGroupCallParticipantVideo = Raw.GroupCallParticipantVideo;
    type TypeMessageViews = Raw.MessageViews;
    type TypeStatsGroupTopInviter = Raw.StatsGroupTopInviter;
    type TypeStatsGroupTopAdmin = Raw.StatsGroupTopAdmin;
    type TypeStatsGroupTopPoster = Raw.StatsGroupTopPoster;
    type TypePostInteractionCounters = Raw.PostInteractionCountersMessage | Raw.PostInteractionCountersStory;
    type TypeStatsGraph = Raw.StatsGraphAsync | Raw.StatsGraphError | Raw.StatsGraph;
    type TypeStatsPercentValue = Raw.StatsPercentValue;
    type TypeStatsAbsValueAndPrev = Raw.StatsAbsValueAndPrev;
    type TypeStatsDateRangeDays = Raw.StatsDateRangeDays;
    type TypeBankCardOpenUrl = Raw.BankCardOpenUrl;
    type TypeMessagePeerVote = Raw.MessagePeerVote | Raw.MessagePeerVoteInputOption | Raw.MessagePeerVoteMultiple;
    type TypeInputWallPaper = Raw.InputWallPaper | Raw.InputWallPaperSlug | Raw.InputWallPaperNoFile;
    type TypeBaseTheme = Raw.BaseThemeClassic | Raw.BaseThemeDay | Raw.BaseThemeNight | Raw.BaseThemeTinted | Raw.BaseThemeArctic;
    type TypeThemeSettings = Raw.ThemeSettings;
    type TypeMessagesFilter = Raw.InputMessagesFilterEmpty | Raw.InputMessagesFilterPhotos | Raw.InputMessagesFilterVideo | Raw.InputMessagesFilterPhotoVideo | Raw.InputMessagesFilterDocument | Raw.InputMessagesFilterUrl | Raw.InputMessagesFilterGif | Raw.InputMessagesFilterVoice | Raw.InputMessagesFilterMusic | Raw.InputMessagesFilterChatPhotos | Raw.InputMessagesFilterPhoneCalls | Raw.InputMessagesFilterRoundVoice | Raw.InputMessagesFilterRoundVideo | Raw.InputMessagesFilterMyMentions | Raw.InputMessagesFilterGeo | Raw.InputMessagesFilterContacts | Raw.InputMessagesFilterPinned;
    type TypeEmojiKeyword = Raw.EmojiKeyword | Raw.EmojiKeywordDeleted;
    type TypeAutoDownloadSettings = Raw.AutoDownloadSettings;
    type TypePollAnswerVoters = Raw.PollAnswerVoters;
    type TypePollAnswer = Raw.PollAnswer;
    type TypeTextWithEntities = Raw.TextWithEntities;
    type TypePageTableCell = Raw.PageTableCell;
    type TypeJSONObjectValue = Raw.JsonObjectValue;
    type TypeJSONValue = Raw.JsonNull | Raw.JsonBool | Raw.JsonNumber | Raw.JsonString | Raw.JsonArray | Raw.JsonObject;
    type TypeSecureValueError = Raw.SecureValueErrorData | Raw.SecureValueErrorFrontSide | Raw.SecureValueErrorReverseSide | Raw.SecureValueErrorSelfie | Raw.SecureValueErrorFile | Raw.SecureValueErrorFiles | Raw.SecureValueError | Raw.SecureValueErrorTranslationFile | Raw.SecureValueErrorTranslationFiles;
    type TypeSecureRequiredType = Raw.SecureRequiredType | Raw.SecureRequiredTypeOneOf;
    type TypeInputSecureFile = Raw.InputSecureFileUploaded | Raw.InputSecureFile;
    type TypeSecurePlainData = Raw.SecurePlainPhone | Raw.SecurePlainEmail;
    type TypeSecureFile = Raw.SecureFileEmpty | Raw.SecureFile;
    type TypeSecureData = Raw.SecureData;
    type TypeWebAuthorization = Raw.WebAuthorization;
    type TypeRecentMeUrl = Raw.RecentMeUrlUnknown | Raw.RecentMeUrlUser | Raw.RecentMeUrlChat | Raw.RecentMeUrlChatInvite | Raw.RecentMeUrlStickerSet;
    type TypeChatInvite = Raw.ChatInviteAlready | Raw.ChatInvite | Raw.ChatInvitePeek;
    type TypeChannelAdminLogEvent = Raw.ChannelAdminLogEvent;
    type TypeChannelAdminLogEventAction = Raw.ChannelAdminLogEventActionChangeTitle | Raw.ChannelAdminLogEventActionChangeAbout | Raw.ChannelAdminLogEventActionChangeUsername | Raw.ChannelAdminLogEventActionChangePhoto | Raw.ChannelAdminLogEventActionToggleInvites | Raw.ChannelAdminLogEventActionToggleSignatures | Raw.ChannelAdminLogEventActionUpdatePinned | Raw.ChannelAdminLogEventActionEditMessage | Raw.ChannelAdminLogEventActionDeleteMessage | Raw.ChannelAdminLogEventActionParticipantJoin | Raw.ChannelAdminLogEventActionParticipantLeave | Raw.ChannelAdminLogEventActionParticipantInvite | Raw.ChannelAdminLogEventActionParticipantToggleBan | Raw.ChannelAdminLogEventActionParticipantToggleAdmin | Raw.ChannelAdminLogEventActionChangeStickerSet | Raw.ChannelAdminLogEventActionTogglePreHistoryHidden | Raw.ChannelAdminLogEventActionDefaultBannedRights | Raw.ChannelAdminLogEventActionStopPoll | Raw.ChannelAdminLogEventActionChangeLinkedChat | Raw.ChannelAdminLogEventActionChangeLocation | Raw.ChannelAdminLogEventActionToggleSlowMode | Raw.ChannelAdminLogEventActionStartGroupCall | Raw.ChannelAdminLogEventActionDiscardGroupCall | Raw.ChannelAdminLogEventActionParticipantMute | Raw.ChannelAdminLogEventActionParticipantUnmute | Raw.ChannelAdminLogEventActionToggleGroupCallSetting | Raw.ChannelAdminLogEventActionParticipantJoinByInvite | Raw.ChannelAdminLogEventActionExportedInviteDelete | Raw.ChannelAdminLogEventActionExportedInviteRevoke | Raw.ChannelAdminLogEventActionExportedInviteEdit | Raw.ChannelAdminLogEventActionParticipantVolume | Raw.ChannelAdminLogEventActionChangeHistoryTTL | Raw.ChannelAdminLogEventActionParticipantJoinByRequest | Raw.ChannelAdminLogEventActionToggleNoForwards | Raw.ChannelAdminLogEventActionSendMessage | Raw.ChannelAdminLogEventActionChangeAvailableReactions | Raw.ChannelAdminLogEventActionChangeUsernames | Raw.ChannelAdminLogEventActionToggleForum | Raw.ChannelAdminLogEventActionCreateTopic | Raw.ChannelAdminLogEventActionEditTopic | Raw.ChannelAdminLogEventActionDeleteTopic | Raw.ChannelAdminLogEventActionPinTopic | Raw.ChannelAdminLogEventActionToggleAntiSpam | Raw.ChannelAdminLogEventActionChangePeerColor | Raw.ChannelAdminLogEventActionChangeProfilePeerColor | Raw.ChannelAdminLogEventActionChangeWallpaper | Raw.ChannelAdminLogEventActionChangeEmojiStatus | Raw.ChannelAdminLogEventActionChangeEmojiStickerSet;
    type TypeLangPackString = Raw.LangPackString | Raw.LangPackStringPluralized | Raw.LangPackStringDeleted;
    type TypeCdnPublicKey = Raw.CdnPublicKey;
    type TypePhoneConnection = Raw.PhoneConnection | Raw.PhoneConnectionWebrtc;
    type TypePhoneCallProtocol = Raw.PhoneCallProtocol;
    type TypeUpdates = Raw.UpdatesTooLong | Raw.UpdateShortMessage | Raw.UpdateShortChatMessage | Raw.UpdateShort | Raw.UpdatesCombined | Raw.Updates | Raw.UpdateShortSentMessage;
    type TypeShippingOption = Raw.ShippingOption;
    type TypePaymentSavedCredentials = Raw.PaymentSavedCredentialsCard;
    type TypePaymentFormMethod = Raw.PaymentFormMethod;
    type TypeLabeledPrice = Raw.LabeledPrice;
    type TypePageRelatedArticle = Raw.PageRelatedArticle;
    type TypePageListOrderedItem = Raw.PageListOrderedItemText | Raw.PageListOrderedItemBlocks;
    type TypePageTableRow = Raw.PageTableRow;
    type TypePageBlock = Raw.PageBlockUnsupported | Raw.PageBlockTitle | Raw.PageBlockSubtitle | Raw.PageBlockAuthorDate | Raw.PageBlockHeader | Raw.PageBlockSubheader | Raw.PageBlockParagraph | Raw.PageBlockPreformatted | Raw.PageBlockFooter | Raw.PageBlockDivider | Raw.PageBlockAnchor | Raw.PageBlockList | Raw.PageBlockBlockquote | Raw.PageBlockPullquote | Raw.PageBlockPhoto | Raw.PageBlockVideo | Raw.PageBlockCover | Raw.PageBlockEmbed | Raw.PageBlockEmbedPost | Raw.PageBlockCollage | Raw.PageBlockSlideshow | Raw.PageBlockChannel | Raw.PageBlockAudio | Raw.PageBlockKicker | Raw.PageBlockTable | Raw.PageBlockOrderedList | Raw.PageBlockDetails | Raw.PageBlockRelatedArticles | Raw.PageBlockMap;
    type TypePageCaption = Raw.PageCaption;
    type TypePageListItem = Raw.PageListItemText | Raw.PageListItemBlocks;
    type TypeRichText = Raw.TextEmpty | Raw.TextPlain | Raw.TextBold | Raw.TextItalic | Raw.TextUnderline | Raw.TextStrike | Raw.TextFixed | Raw.TextUrl | Raw.TextEmail | Raw.TextConcat | Raw.TextSubscript | Raw.TextSuperscript | Raw.TextMarked | Raw.TextPhone | Raw.TextImage | Raw.TextAnchor;
    type TypeHighScore = Raw.HighScore;
    type TypeStickerSetCovered = Raw.StickerSetCovered | Raw.StickerSetMultiCovered | Raw.StickerSetFullCovered | Raw.StickerSetNoCovered;
    type TypeInputReplyTo = Raw.InputReplyToMessage | Raw.InputReplyToStory;
    type TypeTopPeerCategoryPeers = Raw.TopPeerCategoryPeers;
    type TypeTopPeer = Raw.TopPeer;
    type TypeTopPeerCategory = Raw.TopPeerCategoryBotsPM | Raw.TopPeerCategoryBotsInline | Raw.TopPeerCategoryCorrespondents | Raw.TopPeerCategoryGroups | Raw.TopPeerCategoryChannels | Raw.TopPeerCategoryPhoneCalls | Raw.TopPeerCategoryForwardUsers | Raw.TopPeerCategoryForwardChats;
    type TypeBotInlineResult = Raw.BotInlineResult | Raw.BotInlineMediaResult;
    type TypeInlineBotWebView = Raw.InlineBotWebView;
    type TypeInlineBotSwitchPM = Raw.InlineBotSwitchPM;
    type TypeBotInlineMessage = Raw.BotInlineMessageMediaAuto | Raw.BotInlineMessageText | Raw.BotInlineMessageMediaGeo | Raw.BotInlineMessageMediaVenue | Raw.BotInlineMessageMediaContact | Raw.BotInlineMessageMediaInvoice | Raw.BotInlineMessageMediaWebPage;
    type TypeInputBotInlineMessage = Raw.InputBotInlineMessageMediaAuto | Raw.InputBotInlineMessageText | Raw.InputBotInlineMessageMediaGeo | Raw.InputBotInlineMessageMediaVenue | Raw.InputBotInlineMessageMediaContact | Raw.InputBotInlineMessageGame | Raw.InputBotInlineMessageMediaInvoice | Raw.InputBotInlineMessageMediaWebPage;
    type TypeMessageRange = Raw.MessageRange;
    type TypeKeyboardButtonRow = Raw.KeyboardButtonRow;
    type TypeKeyboardButton = Raw.KeyboardButton | Raw.KeyboardButtonUrl | Raw.KeyboardButtonCallback | Raw.KeyboardButtonRequestPhone | Raw.KeyboardButtonRequestGeoLocation | Raw.KeyboardButtonSwitchInline | Raw.KeyboardButtonGame | Raw.KeyboardButtonBuy | Raw.KeyboardButtonUrlAuth | Raw.InputKeyboardButtonUrlAuth | Raw.KeyboardButtonRequestPoll | Raw.InputKeyboardButtonUserProfile | Raw.KeyboardButtonUserProfile | Raw.KeyboardButtonWebView | Raw.KeyboardButtonSimpleWebView | Raw.KeyboardButtonRequestPeer | Raw.InputKeyboardButtonRequestPeer;
    type TypeRequestPeerType = Raw.RequestPeerTypeUser | Raw.RequestPeerTypeChat | Raw.RequestPeerTypeBroadcast;
    type TypeStickerKeyword = Raw.StickerKeyword;
    type TypeStickerPack = Raw.StickerPack;
    type TypeSecureSecretSettings = Raw.SecureSecretSettings;
    type TypeSecurePasswordKdfAlgo = Raw.SecurePasswordKdfAlgoUnknown | Raw.SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000 | Raw.SecurePasswordKdfAlgoSHA512;
    type TypePasswordKdfAlgo = Raw.PasswordKdfAlgoUnknown | Raw.PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow;
    type TypeAuthorization = Raw.Authorization;
    type TypeWebPageAttribute = Raw.WebPageAttributeTheme | Raw.WebPageAttributeStory | Raw.WebPageAttributeStickerSet;
    type TypePage = Raw.Page;
    type TypeMaskCoords = Raw.MaskCoords;
    type TypeInputUser = Raw.InputUserEmpty | Raw.InputUserSelf | Raw.InputUser | Raw.InputUserFromMessage;
    type TypeEncryptedFile = Raw.EncryptedFileEmpty | Raw.EncryptedFile;
    type TypeFileHash = Raw.FileHash;
    type TypeUpdate = Raw.UpdateNewMessage | Raw.UpdateMessageID | Raw.UpdateDeleteMessages | Raw.UpdateUserTyping | Raw.UpdateChatUserTyping | Raw.UpdateChatParticipants | Raw.UpdateUserStatus | Raw.UpdateUserName | Raw.UpdateNewAuthorization | Raw.UpdateNewEncryptedMessage | Raw.UpdateEncryptedChatTyping | Raw.UpdateEncryption | Raw.UpdateEncryptedMessagesRead | Raw.UpdateChatParticipantAdd | Raw.UpdateChatParticipantDelete | Raw.UpdateDcOptions | Raw.UpdateNotifySettings | Raw.UpdateServiceNotification | Raw.UpdatePrivacy | Raw.UpdateUserPhone | Raw.UpdateReadHistoryInbox | Raw.UpdateReadHistoryOutbox | Raw.UpdateWebPage | Raw.UpdateReadMessagesContents | Raw.UpdateChannelTooLong | Raw.UpdateChannel | Raw.UpdateNewChannelMessage | Raw.UpdateReadChannelInbox | Raw.UpdateDeleteChannelMessages | Raw.UpdateChannelMessageViews | Raw.UpdateChatParticipantAdmin | Raw.UpdateNewStickerSet | Raw.UpdateStickerSetsOrder | Raw.UpdateStickerSets | Raw.UpdateSavedGifs | Raw.UpdateBotInlineQuery | Raw.UpdateBotInlineSend | Raw.UpdateEditChannelMessage | Raw.UpdateBotCallbackQuery | Raw.UpdateEditMessage | Raw.UpdateInlineBotCallbackQuery | Raw.UpdateReadChannelOutbox | Raw.UpdateDraftMessage | Raw.UpdateReadFeaturedStickers | Raw.UpdateRecentStickers | Raw.UpdateConfig | Raw.UpdatePtsChanged | Raw.UpdateChannelWebPage | Raw.UpdateDialogPinned | Raw.UpdatePinnedDialogs | Raw.UpdateBotWebhookJSON | Raw.UpdateBotWebhookJSONQuery | Raw.UpdateBotShippingQuery | Raw.UpdateBotPrecheckoutQuery | Raw.UpdatePhoneCall | Raw.UpdateLangPackTooLong | Raw.UpdateLangPack | Raw.UpdateFavedStickers | Raw.UpdateChannelReadMessagesContents | Raw.UpdateContactsReset | Raw.UpdateChannelAvailableMessages | Raw.UpdateDialogUnreadMark | Raw.UpdateMessagePoll | Raw.UpdateChatDefaultBannedRights | Raw.UpdateFolderPeers | Raw.UpdatePeerSettings | Raw.UpdatePeerLocated | Raw.UpdateNewScheduledMessage | Raw.UpdateDeleteScheduledMessages | Raw.UpdateTheme | Raw.UpdateGeoLiveViewed | Raw.UpdateLoginToken | Raw.UpdateMessagePollVote | Raw.UpdateDialogFilter | Raw.UpdateDialogFilterOrder | Raw.UpdateDialogFilters | Raw.UpdatePhoneCallSignalingData | Raw.UpdateChannelMessageForwards | Raw.UpdateReadChannelDiscussionInbox | Raw.UpdateReadChannelDiscussionOutbox | Raw.UpdatePeerBlocked | Raw.UpdateChannelUserTyping | Raw.UpdatePinnedMessages | Raw.UpdatePinnedChannelMessages | Raw.UpdateChat | Raw.UpdateGroupCallParticipants | Raw.UpdateGroupCall | Raw.UpdatePeerHistoryTTL | Raw.UpdateChatParticipant | Raw.UpdateChannelParticipant | Raw.UpdateBotStopped | Raw.UpdateGroupCallConnection | Raw.UpdateBotCommands | Raw.UpdatePendingJoinRequests | Raw.UpdateBotChatInviteRequester | Raw.UpdateMessageReactions | Raw.UpdateAttachMenuBots | Raw.UpdateWebViewResultSent | Raw.UpdateBotMenuButton | Raw.UpdateSavedRingtones | Raw.UpdateTranscribedAudio | Raw.UpdateReadFeaturedEmojiStickers | Raw.UpdateUserEmojiStatus | Raw.UpdateRecentEmojiStatuses | Raw.UpdateRecentReactions | Raw.UpdateMoveStickerSetToTop | Raw.UpdateMessageExtendedMedia | Raw.UpdateChannelPinnedTopic | Raw.UpdateChannelPinnedTopics | Raw.UpdateUser | Raw.UpdateAutoSaveSettings | Raw.UpdateStory | Raw.UpdateReadStories | Raw.UpdateStoryID | Raw.UpdateStoriesStealthMode | Raw.UpdateSentStoryReaction | Raw.UpdateBotChatBoost | Raw.UpdateChannelViewForumAsMessages | Raw.UpdatePeerWallpaper | Raw.UpdateBotMessageReaction | Raw.UpdateBotMessageReactions | Raw.UpdateSavedDialogPinned | Raw.UpdatePinnedSavedDialogs | Raw.UpdateSavedReactionTags | Raw.UpdateSmsJob | Raw.UpdateQuickReplies | Raw.UpdateNewQuickReply | Raw.UpdateDeleteQuickReply | Raw.UpdateQuickReplyMessage | Raw.UpdateDeleteQuickReplyMessages | Raw.UpdateBotBusinessConnect | Raw.UpdateBotNewBusinessMessage | Raw.UpdateBotEditBusinessMessage | Raw.UpdateBotDeleteBusinessMessage | Raw.UpdateNewStoryReaction | Raw.UpdateBroadcastRevenueTransactions | Raw.UpdateStarsBalance | UpdateSecretChatMessage;
    type TypeBroadcastRevenueBalances = Raw.BroadcastRevenueBalances;
    type TypeBotBusinessConnection = Raw.BotBusinessConnection;
    type TypeQuickReply = Raw.QuickReply;
    type TypeReactionCount = Raw.ReactionCount;
    type TypeBoost = Raw.Boost;
    type TypeReaction = Raw.ReactionEmpty | Raw.ReactionEmoji | Raw.ReactionCustomEmoji;
    type TypeStoriesStealthMode = Raw.StoriesStealthMode;
    type TypeBotMenuButton = Raw.BotMenuButtonDefault | Raw.BotMenuButtonCommands | Raw.BotMenuButton;
    type TypeBotCommand = Raw.BotCommand;
    type TypeChannelParticipant = Raw.ChannelParticipant | Raw.ChannelParticipantSelf | Raw.ChannelParticipantCreator | Raw.ChannelParticipantAdmin | Raw.ChannelParticipantBanned | Raw.ChannelParticipantLeft;
    type TypeGroupCall = Raw.GroupCallDiscarded | Raw.GroupCall;
    type TypeGroupCallParticipant = Raw.GroupCallParticipant;
    type TypeDialogFilter = Raw.DialogFilter | Raw.DialogFilterDefault | Raw.DialogFilterChatlist;
    type TypeTheme = Raw.Theme;
    type TypePeerLocated = Raw.PeerLocated | Raw.PeerSelfLocated;
    type TypeFolderPeer = Raw.FolderPeer;
    type TypeLangPackDifference = Raw.LangPackDifference;
    type TypePhoneCall = Raw.PhoneCallEmpty | Raw.PhoneCallWaiting | Raw.PhoneCallRequested | Raw.PhoneCallAccepted | Raw.PhoneCall | Raw.PhoneCallDiscarded;
    type TypePostAddress = Raw.PostAddress;
    type TypeDialogPeer = Raw.DialogPeer | Raw.DialogPeerFolder;
    type TypeInputBotInlineMessageID = Raw.InputBotInlineMessageID | Raw.InputBotInlineMessageID64;
    type TypeInlineQueryPeerType = Raw.InlineQueryPeerTypeSameBotPM | Raw.InlineQueryPeerTypePM | Raw.InlineQueryPeerTypeChat | Raw.InlineQueryPeerTypeMegagroup | Raw.InlineQueryPeerTypeBroadcast | Raw.InlineQueryPeerTypeBotPM;
    type TypePrivacyRule = Raw.PrivacyValueAllowContacts | Raw.PrivacyValueAllowAll | Raw.PrivacyValueAllowUsers | Raw.PrivacyValueDisallowContacts | Raw.PrivacyValueDisallowAll | Raw.PrivacyValueDisallowUsers | Raw.PrivacyValueAllowChatParticipants | Raw.PrivacyValueDisallowChatParticipants | Raw.PrivacyValueAllowCloseFriends | Raw.PrivacyValueAllowPremium;
    type TypePrivacyKey = Raw.PrivacyKeyStatusTimestamp | Raw.PrivacyKeyChatInvite | Raw.PrivacyKeyPhoneCall | Raw.PrivacyKeyPhoneP2P | Raw.PrivacyKeyForwards | Raw.PrivacyKeyProfilePhoto | Raw.PrivacyKeyPhoneNumber | Raw.PrivacyKeyAddedByPhone | Raw.PrivacyKeyVoiceMessages | Raw.PrivacyKeyAbout | Raw.PrivacyKeyBirthday;
    type TypeNotifyPeer = Raw.NotifyPeer | Raw.NotifyUsers | Raw.NotifyChats | Raw.NotifyBroadcasts | Raw.NotifyForumTopic;
    type TypeDcOption = Raw.DcOption;
    type TypeEncryptedChat = Raw.EncryptedChatEmpty | Raw.EncryptedChatWaiting | Raw.EncryptedChatRequested | Raw.EncryptedChat | Raw.EncryptedChatDiscarded;
    type TypeEncryptedMessage = Raw.EncryptedMessage | Raw.EncryptedMessageService;
    type TypeSendMessageAction = Raw.SendMessageTypingAction | Raw.SendMessageCancelAction | Raw.SendMessageRecordVideoAction | Raw.SendMessageUploadVideoAction | Raw.SendMessageRecordAudioAction | Raw.SendMessageUploadAudioAction | Raw.SendMessageUploadPhotoAction | Raw.SendMessageUploadDocumentAction | Raw.SendMessageGeoLocationAction | Raw.SendMessageChooseContactAction | Raw.SendMessageGamePlayAction | Raw.SendMessageRecordRoundAction | Raw.SendMessageUploadRoundAction | Raw.SpeakingInGroupCallAction | Raw.SendMessageHistoryImportAction | Raw.SendMessageChooseStickerAction | Raw.SendMessageEmojiInteraction | Raw.SendMessageEmojiInteractionSeen | Raw.SendMessageUploadVideoAction17 | Raw.SendMessageUploadAudioAction17 | Raw.SendMessageUploadPhotoAction17 | Raw.SendMessageUploadDocumentAction17 | Raw.SendMessageUploadRoundAction66;
    type TypeChatFull = Raw.ChatFull | Raw.ChannelFull;
    type TypeForumTopic = Raw.ForumTopicDeleted | Raw.ForumTopic;
    type TypeMessage = Raw.MessageEmpty | Raw.Message | Raw.MessageService;
    type TypeDialog = Raw.Dialog | Raw.DialogFolder;
    type TypeChat = Raw.ChatEmpty | Raw.Chat | Raw.ChatForbidden | Raw.Channel | Raw.ChannelForbidden;
    type TypePeerBlocked = Raw.PeerBlocked;
    type TypePopularContact = Raw.PopularContact;
    type TypeImportedContact = Raw.ImportedContact;
    type TypeContact = Raw.Contact;
    type TypeBirthday = Raw.Birthday;
    type TypeBusinessIntro = Raw.BusinessIntro;
    type TypeBusinessAwayMessage = Raw.BusinessAwayMessage;
    type TypeBusinessGreetingMessage = Raw.BusinessGreetingMessage;
    type TypeBusinessLocation = Raw.BusinessLocation;
    type TypeBusinessWorkHours = Raw.BusinessWorkHours;
    type TypePremiumGiftOption = Raw.PremiumGiftOption;
    type TypePeerSettings = Raw.PeerSettings;
    type TypeWallPaperSettings = Raw.WallPaperSettings;
    type TypeNotificationSound = Raw.NotificationSoundDefault | Raw.NotificationSoundNone | Raw.NotificationSoundLocal | Raw.NotificationSoundRingtone;
    type TypeUser = Raw.UserEmpty | Raw.User;
    type TypePhotoSize = Raw.PhotoSizeEmpty | Raw.PhotoSize | Raw.PhotoCachedSize | Raw.PhotoStrippedSize | Raw.PhotoSizeProgressive | Raw.PhotoPathSize | Raw.PhotoSize23 | Raw.PhotoCachedSize23;
    type TypeFolder = Raw.Folder;
    type TypeDraftMessage = Raw.DraftMessageEmpty | Raw.DraftMessage;
    type TypeRequestedPeer = Raw.RequestedPeerUser | Raw.RequestedPeerChat | Raw.RequestedPeerChannel;
    type TypeSecureValueType = Raw.SecureValueTypePersonalDetails | Raw.SecureValueTypePassport | Raw.SecureValueTypeDriverLicense | Raw.SecureValueTypeIdentityCard | Raw.SecureValueTypeInternalPassport | Raw.SecureValueTypeAddress | Raw.SecureValueTypeUtilityBill | Raw.SecureValueTypeBankStatement | Raw.SecureValueTypeRentalAgreement | Raw.SecureValueTypePassportRegistration | Raw.SecureValueTypeTemporaryRegistration | Raw.SecureValueTypePhone | Raw.SecureValueTypeEmail;
    type TypeSecureCredentialsEncrypted = Raw.SecureCredentialsEncrypted;
    type TypeSecureValue = Raw.SecureValue;
    type TypeBotApp = Raw.BotAppNotModified | Raw.BotApp;
    type TypePhoneCallDiscardReason = Raw.PhoneCallDiscardReasonMissed | Raw.PhoneCallDiscardReasonDisconnect | Raw.PhoneCallDiscardReasonHangup | Raw.PhoneCallDiscardReasonBusy;
    type TypePaymentCharge = Raw.PaymentCharge;
    type TypePaymentRequestedInfo = Raw.PaymentRequestedInfo;
    type TypeStoryItem = Raw.StoryItemDeleted | Raw.StoryItemSkipped | Raw.StoryItem;
    type TypePollResults = Raw.PollResults;
    type TypeMessageExtendedMedia = Raw.MessageExtendedMediaPreview | Raw.MessageExtendedMedia;
    type TypeWebDocument = Raw.WebDocument | Raw.WebDocumentNoProxy;
    type TypeGame = Raw.Game;
    type TypeWebPage = Raw.WebPageEmpty | Raw.WebPagePending | Raw.WebPage | Raw.WebPageNotModified;
    type TypeDocument = Raw.DocumentEmpty | Raw.Document;
    type TypeGeoPoint = Raw.GeoPointEmpty | Raw.GeoPoint;
    type TypeMessageAction = Raw.MessageActionEmpty | Raw.MessageActionChatCreate | Raw.MessageActionChatEditTitle | Raw.MessageActionChatEditPhoto | Raw.MessageActionChatDeletePhoto | Raw.MessageActionChatAddUser | Raw.MessageActionChatDeleteUser | Raw.MessageActionChatJoinedByLink | Raw.MessageActionChannelCreate | Raw.MessageActionChatMigrateTo | Raw.MessageActionChannelMigrateFrom | Raw.MessageActionPinMessage | Raw.MessageActionHistoryClear | Raw.MessageActionGameScore | Raw.MessageActionPaymentSentMe | Raw.MessageActionPaymentSent | Raw.MessageActionPhoneCall | Raw.MessageActionScreenshotTaken | Raw.MessageActionCustomAction | Raw.MessageActionBotAllowed | Raw.MessageActionSecureValuesSentMe | Raw.MessageActionSecureValuesSent | Raw.MessageActionContactSignUp | Raw.MessageActionGeoProximityReached | Raw.MessageActionGroupCall | Raw.MessageActionInviteToGroupCall | Raw.MessageActionSetMessagesTTL | Raw.MessageActionGroupCallScheduled | Raw.MessageActionSetChatTheme | Raw.MessageActionChatJoinedByRequest | Raw.MessageActionWebViewDataSentMe | Raw.MessageActionWebViewDataSent | Raw.MessageActionGiftPremium | Raw.MessageActionTopicCreate | Raw.MessageActionTopicEdit | Raw.MessageActionSuggestProfilePhoto | Raw.MessageActionRequestedPeer | Raw.MessageActionSetChatWallPaper | Raw.MessageActionGiftCode | Raw.MessageActionGiveawayLaunch | Raw.MessageActionGiveawayResults | Raw.MessageActionBoostApply | Raw.MessageActionRequestedPeerSentMe;
    type TypeFactCheck = Raw.FactCheck;
    type TypeMessageReactions = Raw.MessageReactions;
    type TypeMessageReplies = Raw.MessageReplies;
    type TypeReplyMarkup = Raw.ReplyKeyboardHide | Raw.ReplyKeyboardForceReply | Raw.ReplyKeyboardMarkup | Raw.ReplyInlineMarkup;
    type TypeMessageMedia = Raw.MessageMediaEmpty | Raw.MessageMediaPhoto | Raw.MessageMediaGeo | Raw.MessageMediaContact | Raw.MessageMediaUnsupported | Raw.MessageMediaDocument | Raw.MessageMediaWebPage | Raw.MessageMediaVenue | Raw.MessageMediaGame | Raw.MessageMediaInvoice | Raw.MessageMediaGeoLive | Raw.MessageMediaPoll | Raw.MessageMediaDice | Raw.MessageMediaStory | Raw.MessageMediaGiveaway | Raw.MessageMediaGiveawayResults;
    type TypeMessageReplyHeader = Raw.MessageReplyHeader | Raw.MessageReplyStoryHeader;
    type TypeMessageFwdHeader = Raw.MessageFwdHeader;
    type TypeChatParticipant = Raw.ChatParticipant | Raw.ChatParticipantCreator | Raw.ChatParticipantAdmin;
    type TypeWallPaper = Raw.WallPaper | Raw.WallPaperNoFile;
    type TypePeerStories = Raw.PeerStories;
    type TypeChannelLocation = Raw.ChannelLocationEmpty | Raw.ChannelLocation;
    type TypeStickerSet = Raw.StickerSet;
    type TypeChatReactions = Raw.ChatReactionsNone | Raw.ChatReactionsAll | Raw.ChatReactionsSome;
    type TypePeer = Raw.PeerUser | Raw.PeerChat | Raw.PeerChannel;
    type TypeBotInfo = Raw.BotInfo;
    type TypeExportedChatInvite = Raw.ChatInviteExported | Raw.ChatInvitePublicJoinRequests;
    type TypePeerNotifySettings = Raw.PeerNotifySettings;
    type TypePhoto = Raw.PhotoEmpty | Raw.Photo;
    type TypeChatParticipants = Raw.ChatParticipantsForbidden | Raw.ChatParticipants;
    type TypeChatBannedRights = Raw.ChatBannedRights;
    type TypeChatAdminRights = Raw.ChatAdminRights;
    type TypeInputChannel = Raw.InputChannelEmpty | Raw.InputChannel | Raw.InputChannelFromMessage;
    type TypeChatPhoto = Raw.ChatPhotoEmpty | Raw.ChatPhoto;
    type TypePeerColor = Raw.PeerColor;
    type TypeUsername = Raw.Username;
    type TypeEmojiStatus = Raw.EmojiStatusEmpty | Raw.EmojiStatus | Raw.EmojiStatusUntil;
    type TypeRestrictionReason = Raw.RestrictionReason;
    type TypeUserStatus = Raw.UserStatusEmpty | Raw.UserStatusOnline | Raw.UserStatusOffline | Raw.UserStatusRecently | Raw.UserStatusLastWeek | Raw.UserStatusLastMonth;
    type TypeUserProfilePhoto = Raw.UserProfilePhotoEmpty | Raw.UserProfilePhoto;
    type TypeInputGroupCall = Raw.InputGroupCall;
    type TypeInputStickerSet = Raw.InputStickerSetEmpty | Raw.InputStickerSetID | Raw.InputStickerSetShortName | Raw.InputStickerSetAnimatedEmoji | Raw.InputStickerSetDice | Raw.InputStickerSetAnimatedEmojiAnimations | Raw.InputStickerSetPremiumGifts | Raw.InputStickerSetEmojiGenericAnimations | Raw.InputStickerSetEmojiDefaultStatuses | Raw.InputStickerSetEmojiDefaultTopicIcons | Raw.InputStickerSetEmojiChannelDefaultStatuses;
    type TypeVideoSize = Raw.VideoSize | Raw.VideoSizeEmojiMarkup | Raw.VideoSizeStickerMarkup;
    type TypeMessageEntity = Raw.MessageEntityUnknown | Raw.MessageEntityMention | Raw.MessageEntityHashtag | Raw.MessageEntityBotCommand | Raw.MessageEntityUrl | Raw.MessageEntityEmail | Raw.MessageEntityBold | Raw.MessageEntityItalic | Raw.MessageEntityCode | Raw.MessageEntityPre | Raw.MessageEntityTextUrl | Raw.MessageEntityMentionName | Raw.InputMessageEntityMentionName | Raw.MessageEntityPhone | Raw.MessageEntityCashtag | Raw.MessageEntityUnderline | Raw.MessageEntityStrike | Raw.MessageEntityBankCard | Raw.MessageEntitySpoiler | Raw.MessageEntityCustomEmoji | Raw.MessageEntityBlockquote | Raw.MessageEntityBlockquote101;
    type TypePoll = Raw.Poll;
    type TypeInputMedia = Raw.InputMediaEmpty | Raw.InputMediaUploadedPhoto | Raw.InputMediaPhoto | Raw.InputMediaGeoPoint | Raw.InputMediaContact | Raw.InputMediaUploadedDocument | Raw.InputMediaDocument | Raw.InputMediaVenue | Raw.InputMediaPhotoExternal | Raw.InputMediaDocumentExternal | Raw.InputMediaGame | Raw.InputMediaInvoice | Raw.InputMediaGeoLive | Raw.InputMediaPoll | Raw.InputMediaDice | Raw.InputMediaStory | Raw.InputMediaWebPage;
    type TypeDataJSON = Raw.DataJSON;
    type TypeInvoice = Raw.Invoice;
    type TypeInputWebDocument = Raw.InputWebDocument;
    type TypeInputGame = Raw.InputGameID | Raw.InputGameShortName;
    type TypeDocumentAttribute = Raw.DocumentAttributeImageSize | Raw.DocumentAttributeAnimated | Raw.DocumentAttributeSticker | Raw.DocumentAttributeVideo | Raw.DocumentAttributeAudio | Raw.DocumentAttributeFilename | Raw.DocumentAttributeHasStickers | Raw.DocumentAttributeCustomEmoji | Raw.DocumentAttributeSticker23 | Raw.DocumentAttributeVideo23 | Raw.DocumentAttributeAudio23 | Raw.DocumentAttributeSticker45 | Raw.DocumentAttributeAudio45 | Raw.DocumentAttributeVideo66;
    type TypeInputGeoPoint = Raw.InputGeoPointEmpty | Raw.InputGeoPoint;
    type TypeInputPhoto = Raw.InputPhotoEmpty | Raw.InputPhoto;
    type TypeInputDocument = Raw.InputDocumentEmpty | Raw.InputDocument;
    type TypeInputFile = Raw.InputFile | Raw.InputFileBig;
    type TypeInputPeer = Raw.InputPeerEmpty | Raw.InputPeerSelf | Raw.InputPeerChat | Raw.InputPeerUser | Raw.InputPeerChannel | Raw.InputPeerUserFromMessage | Raw.InputPeerChannelFromMessage;
    type TypeDestroySessionRes = Raw.DestroySessionOk | Raw.DestroySessionNone;
    type TypePong = Raw.Pong;
    type TypeFutureSalts = Raw.FutureSalts;
    type TypeRpcDropAnswer = Raw.RpcAnswerUnknown | Raw.RpcAnswerDroppedRunning | Raw.RpcAnswerDropped;
    type TypeAccessPointRule = Raw.AccessPointRule;
    type TypeIpPort = Raw.IpPort | Raw.IpPortSecret;
    type TypeFutureSalt = Raw.FutureSalt;
    type TypeDestroyAuthKeyRes = Raw.DestroyAuthKeyOk | Raw.DestroyAuthKeyNone | Raw.DestroyAuthKeyFail;
    type TypeSetClientDhParamsAnswer = Raw.DhGenOk | Raw.DhGenRetry | Raw.DhGenFail;
    type TypeServerDhParams = Raw.ServerDhParamsFail | Raw.ServerDhParamsOk;
    type TypeResPQ = Raw.ResPQ;
    class ResPQ extends TLObject {
        nonce: int128;
        serverNonce: int128;
        pq: bytes;
        serverPublicKeyFingerprints: Vector<long>;
        constructor(params: {
            nonce: int128;
            serverNonce: int128;
            pq: bytes;
            serverPublicKeyFingerprints: Vector<long>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ResPQ>;
        write(): Buffer;
    }
    class PQInnerData extends TLObject {
        pq: bytes;
        p: bytes;
        q: bytes;
        nonce: int128;
        serverNonce: int128;
        newNonce: int256;
        constructor(params: {
            pq: bytes;
            p: bytes;
            q: bytes;
            nonce: int128;
            serverNonce: int128;
            newNonce: int256;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PQInnerData>;
        write(): Buffer;
    }
    class PQInnerDataDc extends TLObject {
        pq: bytes;
        p: bytes;
        q: bytes;
        nonce: int128;
        serverNonce: int128;
        newNonce: int256;
        dc: int;
        constructor(params: {
            pq: bytes;
            p: bytes;
            q: bytes;
            nonce: int128;
            serverNonce: int128;
            newNonce: int256;
            dc: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PQInnerDataDc>;
        write(): Buffer;
    }
    class PQInnerDataTemp extends TLObject {
        pq: bytes;
        p: bytes;
        q: bytes;
        nonce: int128;
        serverNonce: int128;
        newNonce: int256;
        expiresIn: int;
        constructor(params: {
            pq: bytes;
            p: bytes;
            q: bytes;
            nonce: int128;
            serverNonce: int128;
            newNonce: int256;
            expiresIn: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PQInnerDataTemp>;
        write(): Buffer;
    }
    class PQInnerDataTempDc extends TLObject {
        pq: bytes;
        p: bytes;
        q: bytes;
        nonce: int128;
        serverNonce: int128;
        newNonce: int256;
        dc: int;
        expiresIn: int;
        constructor(params: {
            pq: bytes;
            p: bytes;
            q: bytes;
            nonce: int128;
            serverNonce: int128;
            newNonce: int256;
            dc: int;
            expiresIn: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PQInnerDataTempDc>;
        write(): Buffer;
    }
    class BindAuthKeyInner extends TLObject {
        nonce: long;
        tempAuthKeyId: long;
        permAuthKeyId: long;
        tempSessionId: long;
        expiresAt: int;
        constructor(params: {
            nonce: long;
            tempAuthKeyId: long;
            permAuthKeyId: long;
            tempSessionId: long;
            expiresAt: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.BindAuthKeyInner>;
        write(): Buffer;
    }
    class ServerDhParamsFail extends TLObject {
        nonce: int128;
        serverNonce: int128;
        newNonceHash: int128;
        constructor(params: {
            nonce: int128;
            serverNonce: int128;
            newNonceHash: int128;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ServerDhParamsFail>;
        write(): Buffer;
    }
    class ServerDhParamsOk extends TLObject {
        nonce: int128;
        serverNonce: int128;
        encryptedAnswer: bytes;
        constructor(params: {
            nonce: int128;
            serverNonce: int128;
            encryptedAnswer: bytes;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ServerDhParamsOk>;
        write(): Buffer;
    }
    class ServerDhInnerData extends TLObject {
        nonce: int128;
        serverNonce: int128;
        g: int;
        dhPrime: bytes;
        gA: bytes;
        serverTime: int;
        constructor(params: {
            nonce: int128;
            serverNonce: int128;
            g: int;
            dhPrime: bytes;
            gA: bytes;
            serverTime: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ServerDhInnerData>;
        write(): Buffer;
    }
    class ClientDhInnerData extends TLObject {
        nonce: int128;
        serverNonce: int128;
        retryId: long;
        gB: bytes;
        constructor(params: {
            nonce: int128;
            serverNonce: int128;
            retryId: long;
            gB: bytes;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ClientDhInnerData>;
        write(): Buffer;
    }
    class DhGenOk extends TLObject {
        nonce: int128;
        serverNonce: int128;
        newNonceHash1: int128;
        constructor(params: {
            nonce: int128;
            serverNonce: int128;
            newNonceHash1: int128;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DhGenOk>;
        write(): Buffer;
    }
    class DhGenRetry extends TLObject {
        nonce: int128;
        serverNonce: int128;
        newNonceHash2: int128;
        constructor(params: {
            nonce: int128;
            serverNonce: int128;
            newNonceHash2: int128;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DhGenRetry>;
        write(): Buffer;
    }
    class DhGenFail extends TLObject {
        nonce: int128;
        serverNonce: int128;
        newNonceHash3: int128;
        constructor(params: {
            nonce: int128;
            serverNonce: int128;
            newNonceHash3: int128;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DhGenFail>;
        write(): Buffer;
    }
    class DestroyAuthKeyOk extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DestroyAuthKeyOk>;
        write(): Buffer;
    }
    class DestroyAuthKeyNone extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DestroyAuthKeyNone>;
        write(): Buffer;
    }
    class DestroyAuthKeyFail extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DestroyAuthKeyFail>;
        write(): Buffer;
    }
    class ReqPq extends TLObject {
        __response__: Raw.TypeResPQ;
        nonce: int128;
        constructor(params: {
            nonce: int128;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ReqPq>;
        write(): Buffer;
    }
    class ReqPqMulti extends TLObject {
        __response__: Raw.TypeResPQ;
        nonce: int128;
        constructor(params: {
            nonce: int128;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ReqPqMulti>;
        write(): Buffer;
    }
    class ReqDhParams extends TLObject {
        __response__: Raw.TypeServerDhParams;
        nonce: int128;
        serverNonce: int128;
        p: bytes;
        q: bytes;
        publicKeyFingerprint: long;
        encryptedData: bytes;
        constructor(params: {
            nonce: int128;
            serverNonce: int128;
            p: bytes;
            q: bytes;
            publicKeyFingerprint: long;
            encryptedData: bytes;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ReqDhParams>;
        write(): Buffer;
    }
    class SetClientDhParams extends TLObject {
        __response__: Raw.TypeSetClientDhParamsAnswer;
        nonce: int128;
        serverNonce: int128;
        encryptedData: bytes;
        constructor(params: {
            nonce: int128;
            serverNonce: int128;
            encryptedData: bytes;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SetClientDhParams>;
        write(): Buffer;
    }
    class DestroyAuthKey extends TLObject {
        __response__: Raw.TypeDestroyAuthKeyRes;
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DestroyAuthKey>;
        write(): Buffer;
    }
    class MsgsAck extends TLObject {
        msgIds: Vector<long>;
        constructor(params: {
            msgIds: Vector<long>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MsgsAck>;
        write(): Buffer;
    }
    class BadMsgNotification extends TLObject {
        badMsgId: long;
        badMsgSeqno: int;
        errorCode: int;
        constructor(params: {
            badMsgId: long;
            badMsgSeqno: int;
            errorCode: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.BadMsgNotification>;
        write(): Buffer;
    }
    class BadServerSalt extends TLObject {
        badMsgId: long;
        badMsgSeqno: int;
        errorCode: int;
        newServerSalt: long;
        constructor(params: {
            badMsgId: long;
            badMsgSeqno: int;
            errorCode: int;
            newServerSalt: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.BadServerSalt>;
        write(): Buffer;
    }
    class MsgsStateReq extends TLObject {
        msgIds: Vector<long>;
        constructor(params: {
            msgIds: Vector<long>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MsgsStateReq>;
        write(): Buffer;
    }
    class MsgsStateInfo extends TLObject {
        reqMsgId: long;
        info: string;
        constructor(params: {
            reqMsgId: long;
            info: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MsgsStateInfo>;
        write(): Buffer;
    }
    class MsgsAllInfo extends TLObject {
        msgIds: Vector<long>;
        info: string;
        constructor(params: {
            msgIds: Vector<long>;
            info: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MsgsAllInfo>;
        write(): Buffer;
    }
    class MsgDetailedInfo extends TLObject {
        msgId: long;
        answerMsgId: long;
        bytes: int;
        status: int;
        constructor(params: {
            msgId: long;
            answerMsgId: long;
            bytes: int;
            status: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MsgDetailedInfo>;
        write(): Buffer;
    }
    class MsgNewDetailedInfo extends TLObject {
        answerMsgId: long;
        bytes: int;
        status: int;
        constructor(params: {
            answerMsgId: long;
            bytes: int;
            status: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MsgNewDetailedInfo>;
        write(): Buffer;
    }
    class MsgResendReq extends TLObject {
        msgIds: Vector<long>;
        constructor(params: {
            msgIds: Vector<long>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MsgResendReq>;
        write(): Buffer;
    }
    class RpcResult extends TLObject {
        reqMsgId: long;
        result: any;
        constructor(params: {
            reqMsgId: long;
            result: any;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.RpcResult>;
        write(): Buffer;
    }
    class RpcError extends TLObject {
        errorCode: int;
        errorMessage: string;
        constructor(params: {
            errorCode: int;
            errorMessage: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.RpcError>;
        write(): Buffer;
    }
    class RpcAnswerUnknown extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.RpcAnswerUnknown>;
        write(): Buffer;
    }
    class RpcAnswerDroppedRunning extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.RpcAnswerDroppedRunning>;
        write(): Buffer;
    }
    class RpcAnswerDropped extends TLObject {
        msgId: long;
        seqNo: int;
        bytes: int;
        constructor(params: {
            msgId: long;
            seqNo: int;
            bytes: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.RpcAnswerDropped>;
        write(): Buffer;
    }
    class FutureSalt extends TLObject {
        validSince: int;
        validUntil: int;
        salt: long;
        constructor(params: {
            validSince: int;
            validUntil: int;
            salt: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.FutureSalt>;
        write(): Buffer;
    }
    class FutureSalts extends TLObject {
        reqMsgId: long;
        now: int;
        salts: Vector<Raw.TypeFutureSalt>;
        constructor(params: {
            reqMsgId: long;
            now: int;
            salts: Vector<Raw.TypeFutureSalt>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.FutureSalts>;
        write(): Buffer;
    }
    class Pong extends TLObject {
        msgId: long;
        pingId: long;
        constructor(params: {
            msgId: long;
            pingId: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.Pong>;
        write(): Buffer;
    }
    class DestroySessionOk extends TLObject {
        sessionId: long;
        constructor(params: {
            sessionId: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DestroySessionOk>;
        write(): Buffer;
    }
    class DestroySessionNone extends TLObject {
        sessionId: long;
        constructor(params: {
            sessionId: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DestroySessionNone>;
        write(): Buffer;
    }
    class NewSessionCreated extends TLObject {
        firstMsgId: long;
        uniqueId: long;
        serverSalt: long;
        constructor(params: {
            firstMsgId: long;
            uniqueId: long;
            serverSalt: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.NewSessionCreated>;
        write(): Buffer;
    }
    class HttpWait extends TLObject {
        maxDelay: int;
        waitAfter: int;
        maxWait: int;
        constructor(params: {
            maxDelay: int;
            waitAfter: int;
            maxWait: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.HttpWait>;
        write(): Buffer;
    }
    class IpPort extends TLObject {
        ipv4: int;
        port: int;
        constructor(params: {
            ipv4: int;
            port: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.IpPort>;
        write(): Buffer;
    }
    class IpPortSecret extends TLObject {
        ipv4: int;
        port: int;
        secret: bytes;
        constructor(params: {
            ipv4: int;
            port: int;
            secret: bytes;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.IpPortSecret>;
        write(): Buffer;
    }
    class AccessPointRule extends TLObject {
        phonePrefixRules: string;
        dcId: int;
        ips: Vector<Raw.TypeIpPort>;
        constructor(params: {
            phonePrefixRules: string;
            dcId: int;
            ips: Vector<Raw.TypeIpPort>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.AccessPointRule>;
        write(): Buffer;
    }
    class RpcDropAnswer extends TLObject {
        __response__: Raw.TypeRpcDropAnswer;
        reqMsgId: long;
        constructor(params: {
            reqMsgId: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.RpcDropAnswer>;
        write(): Buffer;
    }
    class GetFutureSalts extends TLObject {
        __response__: Raw.TypeFutureSalts;
        num: int;
        constructor(params: {
            num: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.GetFutureSalts>;
        write(): Buffer;
    }
    class Ping extends TLObject {
        __response__: Raw.TypePong;
        pingId: long;
        constructor(params: {
            pingId: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.Ping>;
        write(): Buffer;
    }
    class PingDelayDisconnect extends TLObject {
        __response__: Raw.TypePong;
        pingId: long;
        disconnectDelay: int;
        constructor(params: {
            pingId: long;
            disconnectDelay: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PingDelayDisconnect>;
        write(): Buffer;
    }
    class DestroySession extends TLObject {
        __response__: Raw.TypeDestroySessionRes;
        sessionId: long;
        constructor(params: {
            sessionId: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DestroySession>;
        write(): Buffer;
    }
    class InputPeerEmpty extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputPeerEmpty>;
        write(): Buffer;
    }
    class InputPeerSelf extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputPeerSelf>;
        write(): Buffer;
    }
    class InputPeerChat extends TLObject {
        chatId: long;
        constructor(params: {
            chatId: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputPeerChat>;
        write(): Buffer;
    }
    class InputPeerUser extends TLObject {
        userId: long;
        accessHash: long;
        constructor(params: {
            userId: long;
            accessHash: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputPeerUser>;
        write(): Buffer;
    }
    class InputPeerChannel extends TLObject {
        channelId: long;
        accessHash: long;
        constructor(params: {
            channelId: long;
            accessHash: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputPeerChannel>;
        write(): Buffer;
    }
    class InputPeerUserFromMessage extends TLObject {
        peer: Raw.TypeInputPeer;
        msgId: int;
        userId: long;
        constructor(params: {
            peer: Raw.TypeInputPeer;
            msgId: int;
            userId: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputPeerUserFromMessage>;
        write(): Buffer;
    }
    class InputPeerChannelFromMessage extends TLObject {
        peer: Raw.TypeInputPeer;
        msgId: int;
        channelId: long;
        constructor(params: {
            peer: Raw.TypeInputPeer;
            msgId: int;
            channelId: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputPeerChannelFromMessage>;
        write(): Buffer;
    }
    class InputUserEmpty extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputUserEmpty>;
        write(): Buffer;
    }
    class InputUserSelf extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputUserSelf>;
        write(): Buffer;
    }
    class InputUser extends TLObject {
        userId: long;
        accessHash: long;
        constructor(params: {
            userId: long;
            accessHash: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputUser>;
        write(): Buffer;
    }
    class InputUserFromMessage extends TLObject {
        peer: Raw.TypeInputPeer;
        msgId: int;
        userId: long;
        constructor(params: {
            peer: Raw.TypeInputPeer;
            msgId: int;
            userId: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputUserFromMessage>;
        write(): Buffer;
    }
    class InputPhoneContact extends TLObject {
        clientId: long;
        phone: string;
        firstName: string;
        lastName: string;
        constructor(params: {
            clientId: long;
            phone: string;
            firstName: string;
            lastName: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputPhoneContact>;
        write(): Buffer;
    }
    class InputFile extends TLObject {
        id: long;
        parts: int;
        name: string;
        md5Checksum: string;
        constructor(params: {
            id: long;
            parts: int;
            name: string;
            md5Checksum: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputFile>;
        write(): Buffer;
    }
    class InputFileBig extends TLObject {
        id: long;
        parts: int;
        name: string;
        constructor(params: {
            id: long;
            parts: int;
            name: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputFileBig>;
        write(): Buffer;
    }
    class InputMediaEmpty extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputMediaEmpty>;
        write(): Buffer;
    }
    class InputMediaUploadedPhoto extends TLObject {
        spoiler?: boolean;
        file: Raw.TypeInputFile;
        stickers?: Vector<Raw.TypeInputDocument>;
        ttlSeconds?: int;
        constructor(params: {
            spoiler?: boolean;
            file: Raw.TypeInputFile;
            stickers?: Vector<Raw.TypeInputDocument>;
            ttlSeconds?: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputMediaUploadedPhoto>;
        write(): Buffer;
    }
    class InputMediaPhoto extends TLObject {
        spoiler?: boolean;
        id: Raw.TypeInputPhoto;
        ttlSeconds?: int;
        constructor(params: {
            spoiler?: boolean;
            id: Raw.TypeInputPhoto;
            ttlSeconds?: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputMediaPhoto>;
        write(): Buffer;
    }
    class InputMediaGeoPoint extends TLObject {
        geoPoint: Raw.TypeInputGeoPoint;
        constructor(params: {
            geoPoint: Raw.TypeInputGeoPoint;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputMediaGeoPoint>;
        write(): Buffer;
    }
    class InputMediaContact extends TLObject {
        phoneNumber: string;
        firstName: string;
        lastName: string;
        vcard: string;
        constructor(params: {
            phoneNumber: string;
            firstName: string;
            lastName: string;
            vcard: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputMediaContact>;
        write(): Buffer;
    }
    class InputMediaUploadedDocument extends TLObject {
        nosoundVideo?: boolean;
        forceFile?: boolean;
        spoiler?: boolean;
        file: Raw.TypeInputFile;
        thumb?: Raw.TypeInputFile;
        mimeType: string;
        attributes: Vector<Raw.TypeDocumentAttribute>;
        stickers?: Vector<Raw.TypeInputDocument>;
        ttlSeconds?: int;
        constructor(params: {
            nosoundVideo?: boolean;
            forceFile?: boolean;
            spoiler?: boolean;
            file: Raw.TypeInputFile;
            thumb?: Raw.TypeInputFile;
            mimeType: string;
            attributes: Vector<Raw.TypeDocumentAttribute>;
            stickers?: Vector<Raw.TypeInputDocument>;
            ttlSeconds?: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputMediaUploadedDocument>;
        write(): Buffer;
    }
    class InputMediaDocument extends TLObject {
        spoiler?: boolean;
        id: Raw.TypeInputDocument;
        ttlSeconds?: int;
        query?: string;
        constructor(params: {
            spoiler?: boolean;
            id: Raw.TypeInputDocument;
            ttlSeconds?: int;
            query?: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputMediaDocument>;
        write(): Buffer;
    }
    class InputMediaVenue extends TLObject {
        geoPoint: Raw.TypeInputGeoPoint;
        title: string;
        address: string;
        provider: string;
        venueId: string;
        venueType: string;
        constructor(params: {
            geoPoint: Raw.TypeInputGeoPoint;
            title: string;
            address: string;
            provider: string;
            venueId: string;
            venueType: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputMediaVenue>;
        write(): Buffer;
    }
    class InputMediaPhotoExternal extends TLObject {
        spoiler?: boolean;
        url: string;
        ttlSeconds?: int;
        constructor(params: {
            spoiler?: boolean;
            url: string;
            ttlSeconds?: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputMediaPhotoExternal>;
        write(): Buffer;
    }
    class InputMediaDocumentExternal extends TLObject {
        spoiler?: boolean;
        url: string;
        ttlSeconds?: int;
        constructor(params: {
            spoiler?: boolean;
            url: string;
            ttlSeconds?: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputMediaDocumentExternal>;
        write(): Buffer;
    }
    class InputMediaGame extends TLObject {
        id: Raw.TypeInputGame;
        constructor(params: {
            id: Raw.TypeInputGame;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputMediaGame>;
        write(): Buffer;
    }
    class InputMediaInvoice extends TLObject {
        title: string;
        description: string;
        photo?: Raw.TypeInputWebDocument;
        invoice: Raw.TypeInvoice;
        payload: bytes;
        provider?: string;
        providerData: Raw.TypeDataJSON;
        startParam?: string;
        extendedMedia?: Raw.TypeInputMedia;
        constructor(params: {
            title: string;
            description: string;
            photo?: Raw.TypeInputWebDocument;
            invoice: Raw.TypeInvoice;
            payload: bytes;
            provider?: string;
            providerData: Raw.TypeDataJSON;
            startParam?: string;
            extendedMedia?: Raw.TypeInputMedia;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputMediaInvoice>;
        write(): Buffer;
    }
    class InputMediaGeoLive extends TLObject {
        stopped?: boolean;
        geoPoint: Raw.TypeInputGeoPoint;
        heading?: int;
        period?: int;
        proximityNotificationRadius?: int;
        constructor(params: {
            stopped?: boolean;
            geoPoint: Raw.TypeInputGeoPoint;
            heading?: int;
            period?: int;
            proximityNotificationRadius?: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputMediaGeoLive>;
        write(): Buffer;
    }
    class InputMediaPoll extends TLObject {
        poll: Raw.TypePoll;
        correctAnswers?: Vector<bytes>;
        solution?: string;
        solutionEntities?: Vector<Raw.TypeMessageEntity>;
        constructor(params: {
            poll: Raw.TypePoll;
            correctAnswers?: Vector<bytes>;
            solution?: string;
            solutionEntities?: Vector<Raw.TypeMessageEntity>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputMediaPoll>;
        write(): Buffer;
    }
    class InputMediaDice extends TLObject {
        emoticon: string;
        constructor(params: {
            emoticon: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputMediaDice>;
        write(): Buffer;
    }
    class InputMediaStory extends TLObject {
        peer: Raw.TypeInputPeer;
        id: int;
        constructor(params: {
            peer: Raw.TypeInputPeer;
            id: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputMediaStory>;
        write(): Buffer;
    }
    class InputMediaWebPage extends TLObject {
        forceLargeMedia?: boolean;
        forceSmallMedia?: boolean;
        optional?: boolean;
        url: string;
        constructor(params: {
            forceLargeMedia?: boolean;
            forceSmallMedia?: boolean;
            optional?: boolean;
            url: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputMediaWebPage>;
        write(): Buffer;
    }
    class InputChatPhotoEmpty extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputChatPhotoEmpty>;
        write(): Buffer;
    }
    class InputChatUploadedPhoto extends TLObject {
        file?: Raw.TypeInputFile;
        video?: Raw.TypeInputFile;
        videoStartTs?: double;
        videoEmojiMarkup?: Raw.TypeVideoSize;
        constructor(params: {
            file?: Raw.TypeInputFile;
            video?: Raw.TypeInputFile;
            videoStartTs?: double;
            videoEmojiMarkup?: Raw.TypeVideoSize;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputChatUploadedPhoto>;
        write(): Buffer;
    }
    class InputChatPhoto extends TLObject {
        id: Raw.TypeInputPhoto;
        constructor(params: {
            id: Raw.TypeInputPhoto;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputChatPhoto>;
        write(): Buffer;
    }
    class InputGeoPointEmpty extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputGeoPointEmpty>;
        write(): Buffer;
    }
    class InputGeoPoint extends TLObject {
        lat: double;
        long: double;
        accuracyRadius?: int;
        constructor(params: {
            lat: double;
            long: double;
            accuracyRadius?: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputGeoPoint>;
        write(): Buffer;
    }
    class InputPhotoEmpty extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputPhotoEmpty>;
        write(): Buffer;
    }
    class InputPhoto extends TLObject {
        id: long;
        accessHash: long;
        fileReference: bytes;
        constructor(params: {
            id: long;
            accessHash: long;
            fileReference: bytes;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputPhoto>;
        write(): Buffer;
    }
    class InputFileLocation extends TLObject {
        volumeId: long;
        localId: int;
        secret: long;
        fileReference: bytes;
        constructor(params: {
            volumeId: long;
            localId: int;
            secret: long;
            fileReference: bytes;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputFileLocation>;
        write(): Buffer;
    }
    class InputEncryptedFileLocation extends TLObject {
        id: long;
        accessHash: long;
        constructor(params: {
            id: long;
            accessHash: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputEncryptedFileLocation>;
        write(): Buffer;
    }
    class InputDocumentFileLocation extends TLObject {
        id: long;
        accessHash: long;
        fileReference: bytes;
        thumbSize: string;
        constructor(params: {
            id: long;
            accessHash: long;
            fileReference: bytes;
            thumbSize: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputDocumentFileLocation>;
        write(): Buffer;
    }
    class InputSecureFileLocation extends TLObject {
        id: long;
        accessHash: long;
        constructor(params: {
            id: long;
            accessHash: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputSecureFileLocation>;
        write(): Buffer;
    }
    class InputTakeoutFileLocation extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputTakeoutFileLocation>;
        write(): Buffer;
    }
    class InputPhotoFileLocation extends TLObject {
        id: long;
        accessHash: long;
        fileReference: bytes;
        thumbSize: string;
        constructor(params: {
            id: long;
            accessHash: long;
            fileReference: bytes;
            thumbSize: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputPhotoFileLocation>;
        write(): Buffer;
    }
    class InputPhotoLegacyFileLocation extends TLObject {
        id: long;
        accessHash: long;
        fileReference: bytes;
        volumeId: long;
        localId: int;
        secret: long;
        constructor(params: {
            id: long;
            accessHash: long;
            fileReference: bytes;
            volumeId: long;
            localId: int;
            secret: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputPhotoLegacyFileLocation>;
        write(): Buffer;
    }
    class InputPeerPhotoFileLocation extends TLObject {
        big?: boolean;
        peer: Raw.TypeInputPeer;
        photoId: long;
        constructor(params: {
            big?: boolean;
            peer: Raw.TypeInputPeer;
            photoId: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputPeerPhotoFileLocation>;
        write(): Buffer;
    }
    class InputStickerSetThumb extends TLObject {
        stickerset: Raw.TypeInputStickerSet;
        thumbVersion: int;
        constructor(params: {
            stickerset: Raw.TypeInputStickerSet;
            thumbVersion: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputStickerSetThumb>;
        write(): Buffer;
    }
    class InputGroupCallStream extends TLObject {
        call: Raw.TypeInputGroupCall;
        timeMs: long;
        scale: int;
        videoChannel?: int;
        videoQuality?: int;
        constructor(params: {
            call: Raw.TypeInputGroupCall;
            timeMs: long;
            scale: int;
            videoChannel?: int;
            videoQuality?: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputGroupCallStream>;
        write(): Buffer;
    }
    class PeerUser extends TLObject {
        userId: long;
        constructor(params: {
            userId: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PeerUser>;
        write(): Buffer;
    }
    class PeerChat extends TLObject {
        chatId: long;
        constructor(params: {
            chatId: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PeerChat>;
        write(): Buffer;
    }
    class PeerChannel extends TLObject {
        channelId: long;
        constructor(params: {
            channelId: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PeerChannel>;
        write(): Buffer;
    }
    class UserEmpty extends TLObject {
        id: long;
        constructor(params: {
            id: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UserEmpty>;
        write(): Buffer;
    }
    class User extends TLObject {
        self?: boolean;
        contact?: boolean;
        mutualContact?: boolean;
        deleted?: boolean;
        bot?: boolean;
        botChatHistory?: boolean;
        botNochats?: boolean;
        verified?: boolean;
        restricted?: boolean;
        min?: boolean;
        botInlineGeo?: boolean;
        support?: boolean;
        scam?: boolean;
        applyMinPhoto?: boolean;
        fake?: boolean;
        botAttachMenu?: boolean;
        premium?: boolean;
        attachMenuEnabled?: boolean;
        botCanEdit?: boolean;
        closeFriend?: boolean;
        storiesHidden?: boolean;
        storiesUnavailable?: boolean;
        contactRequirePremium?: boolean;
        botBusiness?: boolean;
        id: long;
        accessHash?: long;
        firstName?: string;
        lastName?: string;
        username?: string;
        phone?: string;
        photo?: Raw.TypeUserProfilePhoto;
        status?: Raw.TypeUserStatus;
        botInfoVersion?: int;
        restrictionReason?: Vector<Raw.TypeRestrictionReason>;
        botInlinePlaceholder?: string;
        langCode?: string;
        emojiStatus?: Raw.TypeEmojiStatus;
        usernames?: Vector<Raw.TypeUsername>;
        storiesMaxId?: int;
        color?: Raw.TypePeerColor;
        profileColor?: Raw.TypePeerColor;
        constructor(params: {
            self?: boolean;
            contact?: boolean;
            mutualContact?: boolean;
            deleted?: boolean;
            bot?: boolean;
            botChatHistory?: boolean;
            botNochats?: boolean;
            verified?: boolean;
            restricted?: boolean;
            min?: boolean;
            botInlineGeo?: boolean;
            support?: boolean;
            scam?: boolean;
            applyMinPhoto?: boolean;
            fake?: boolean;
            botAttachMenu?: boolean;
            premium?: boolean;
            attachMenuEnabled?: boolean;
            botCanEdit?: boolean;
            closeFriend?: boolean;
            storiesHidden?: boolean;
            storiesUnavailable?: boolean;
            contactRequirePremium?: boolean;
            botBusiness?: boolean;
            id: long;
            accessHash?: long;
            firstName?: string;
            lastName?: string;
            username?: string;
            phone?: string;
            photo?: Raw.TypeUserProfilePhoto;
            status?: Raw.TypeUserStatus;
            botInfoVersion?: int;
            restrictionReason?: Vector<Raw.TypeRestrictionReason>;
            botInlinePlaceholder?: string;
            langCode?: string;
            emojiStatus?: Raw.TypeEmojiStatus;
            usernames?: Vector<Raw.TypeUsername>;
            storiesMaxId?: int;
            color?: Raw.TypePeerColor;
            profileColor?: Raw.TypePeerColor;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.User>;
        write(): Buffer;
    }
    class UserProfilePhotoEmpty extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UserProfilePhotoEmpty>;
        write(): Buffer;
    }
    class UserProfilePhoto extends TLObject {
        hasVideo?: boolean;
        personal?: boolean;
        photoId: long;
        strippedThumb?: bytes;
        dcId: int;
        constructor(params: {
            hasVideo?: boolean;
            personal?: boolean;
            photoId: long;
            strippedThumb?: bytes;
            dcId: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UserProfilePhoto>;
        write(): Buffer;
    }
    class UserStatusEmpty extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UserStatusEmpty>;
        write(): Buffer;
    }
    class UserStatusOnline extends TLObject {
        expires: int;
        constructor(params: {
            expires: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UserStatusOnline>;
        write(): Buffer;
    }
    class UserStatusOffline extends TLObject {
        wasOnline: int;
        constructor(params: {
            wasOnline: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UserStatusOffline>;
        write(): Buffer;
    }
    class UserStatusRecently extends TLObject {
        byMe?: boolean;
        constructor(params: {
            byMe?: boolean;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UserStatusRecently>;
        write(): Buffer;
    }
    class UserStatusLastWeek extends TLObject {
        byMe?: boolean;
        constructor(params: {
            byMe?: boolean;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UserStatusLastWeek>;
        write(): Buffer;
    }
    class UserStatusLastMonth extends TLObject {
        byMe?: boolean;
        constructor(params: {
            byMe?: boolean;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UserStatusLastMonth>;
        write(): Buffer;
    }
    class ChatEmpty extends TLObject {
        id: long;
        constructor(params: {
            id: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChatEmpty>;
        write(): Buffer;
    }
    class Chat extends TLObject {
        creator?: boolean;
        left?: boolean;
        deactivated?: boolean;
        callActive?: boolean;
        callNotEmpty?: boolean;
        noforwards?: boolean;
        id: long;
        title: string;
        photo: Raw.TypeChatPhoto;
        participantsCount: int;
        date: int;
        version: int;
        migratedTo?: Raw.TypeInputChannel;
        adminRights?: Raw.TypeChatAdminRights;
        defaultBannedRights?: Raw.TypeChatBannedRights;
        constructor(params: {
            creator?: boolean;
            left?: boolean;
            deactivated?: boolean;
            callActive?: boolean;
            callNotEmpty?: boolean;
            noforwards?: boolean;
            id: long;
            title: string;
            photo: Raw.TypeChatPhoto;
            participantsCount: int;
            date: int;
            version: int;
            migratedTo?: Raw.TypeInputChannel;
            adminRights?: Raw.TypeChatAdminRights;
            defaultBannedRights?: Raw.TypeChatBannedRights;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.Chat>;
        write(): Buffer;
    }
    class ChatForbidden extends TLObject {
        id: long;
        title: string;
        constructor(params: {
            id: long;
            title: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChatForbidden>;
        write(): Buffer;
    }
    class Channel extends TLObject {
        creator?: boolean;
        left?: boolean;
        broadcast?: boolean;
        verified?: boolean;
        megagroup?: boolean;
        restricted?: boolean;
        signatures?: boolean;
        min?: boolean;
        scam?: boolean;
        hasLink?: boolean;
        hasGeo?: boolean;
        slowmodeEnabled?: boolean;
        callActive?: boolean;
        callNotEmpty?: boolean;
        fake?: boolean;
        gigagroup?: boolean;
        noforwards?: boolean;
        joinToSend?: boolean;
        joinRequest?: boolean;
        forum?: boolean;
        storiesHidden?: boolean;
        storiesHiddenMin?: boolean;
        storiesUnavailable?: boolean;
        id: long;
        accessHash?: long;
        title: string;
        username?: string;
        photo: Raw.TypeChatPhoto;
        date: int;
        restrictionReason?: Vector<Raw.TypeRestrictionReason>;
        adminRights?: Raw.TypeChatAdminRights;
        bannedRights?: Raw.TypeChatBannedRights;
        defaultBannedRights?: Raw.TypeChatBannedRights;
        participantsCount?: int;
        usernames?: Vector<Raw.TypeUsername>;
        storiesMaxId?: int;
        color?: Raw.TypePeerColor;
        profileColor?: Raw.TypePeerColor;
        emojiStatus?: Raw.TypeEmojiStatus;
        level?: int;
        constructor(params: {
            creator?: boolean;
            left?: boolean;
            broadcast?: boolean;
            verified?: boolean;
            megagroup?: boolean;
            restricted?: boolean;
            signatures?: boolean;
            min?: boolean;
            scam?: boolean;
            hasLink?: boolean;
            hasGeo?: boolean;
            slowmodeEnabled?: boolean;
            callActive?: boolean;
            callNotEmpty?: boolean;
            fake?: boolean;
            gigagroup?: boolean;
            noforwards?: boolean;
            joinToSend?: boolean;
            joinRequest?: boolean;
            forum?: boolean;
            storiesHidden?: boolean;
            storiesHiddenMin?: boolean;
            storiesUnavailable?: boolean;
            id: long;
            accessHash?: long;
            title: string;
            username?: string;
            photo: Raw.TypeChatPhoto;
            date: int;
            restrictionReason?: Vector<Raw.TypeRestrictionReason>;
            adminRights?: Raw.TypeChatAdminRights;
            bannedRights?: Raw.TypeChatBannedRights;
            defaultBannedRights?: Raw.TypeChatBannedRights;
            participantsCount?: int;
            usernames?: Vector<Raw.TypeUsername>;
            storiesMaxId?: int;
            color?: Raw.TypePeerColor;
            profileColor?: Raw.TypePeerColor;
            emojiStatus?: Raw.TypeEmojiStatus;
            level?: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.Channel>;
        write(): Buffer;
    }
    class ChannelForbidden extends TLObject {
        broadcast?: boolean;
        megagroup?: boolean;
        id: long;
        accessHash: long;
        title: string;
        untilDate?: int;
        constructor(params: {
            broadcast?: boolean;
            megagroup?: boolean;
            id: long;
            accessHash: long;
            title: string;
            untilDate?: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelForbidden>;
        write(): Buffer;
    }
    class ChatFull extends TLObject {
        canSetUsername?: boolean;
        hasScheduled?: boolean;
        translationsDisabled?: boolean;
        id: long;
        about: string;
        participants: Raw.TypeChatParticipants;
        chatPhoto?: Raw.TypePhoto;
        notifySettings: Raw.TypePeerNotifySettings;
        exportedInvite?: Raw.TypeExportedChatInvite;
        botInfo?: Vector<Raw.TypeBotInfo>;
        pinnedMsgId?: int;
        folderId?: int;
        call?: Raw.TypeInputGroupCall;
        ttlPeriod?: int;
        groupcallDefaultJoinAs?: Raw.TypePeer;
        themeEmoticon?: string;
        requestsPending?: int;
        recentRequesters?: Vector<long>;
        availableReactions?: Raw.TypeChatReactions;
        reactionsLimit?: int;
        constructor(params: {
            canSetUsername?: boolean;
            hasScheduled?: boolean;
            translationsDisabled?: boolean;
            id: long;
            about: string;
            participants: Raw.TypeChatParticipants;
            chatPhoto?: Raw.TypePhoto;
            notifySettings: Raw.TypePeerNotifySettings;
            exportedInvite?: Raw.TypeExportedChatInvite;
            botInfo?: Vector<Raw.TypeBotInfo>;
            pinnedMsgId?: int;
            folderId?: int;
            call?: Raw.TypeInputGroupCall;
            ttlPeriod?: int;
            groupcallDefaultJoinAs?: Raw.TypePeer;
            themeEmoticon?: string;
            requestsPending?: int;
            recentRequesters?: Vector<long>;
            availableReactions?: Raw.TypeChatReactions;
            reactionsLimit?: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChatFull>;
        write(): Buffer;
    }
    class ChannelFull extends TLObject {
        canViewParticipants?: boolean;
        canSetUsername?: boolean;
        canSetStickers?: boolean;
        hiddenPrehistory?: boolean;
        canSetLocation?: boolean;
        hasScheduled?: boolean;
        canViewStats?: boolean;
        blocked?: boolean;
        canDeleteChannel?: boolean;
        antispam?: boolean;
        participantsHidden?: boolean;
        translationsDisabled?: boolean;
        storiesPinnedAvailable?: boolean;
        viewForumAsMessages?: boolean;
        restrictedSponsored?: boolean;
        canViewRevenue?: boolean;
        id: long;
        about: string;
        participantsCount?: int;
        adminsCount?: int;
        kickedCount?: int;
        bannedCount?: int;
        onlineCount?: int;
        readInboxMaxId: int;
        readOutboxMaxId: int;
        unreadCount: int;
        chatPhoto: Raw.TypePhoto;
        notifySettings: Raw.TypePeerNotifySettings;
        exportedInvite?: Raw.TypeExportedChatInvite;
        botInfo: Vector<Raw.TypeBotInfo>;
        migratedFromChatId?: long;
        migratedFromMaxId?: int;
        pinnedMsgId?: int;
        stickerset?: Raw.TypeStickerSet;
        availableMinId?: int;
        folderId?: int;
        linkedChatId?: long;
        location?: Raw.TypeChannelLocation;
        slowmodeSeconds?: int;
        slowmodeNextSendDate?: int;
        statsDc?: int;
        pts: int;
        call?: Raw.TypeInputGroupCall;
        ttlPeriod?: int;
        pendingSuggestions?: Vector<string>;
        groupcallDefaultJoinAs?: Raw.TypePeer;
        themeEmoticon?: string;
        requestsPending?: int;
        recentRequesters?: Vector<long>;
        defaultSendAs?: Raw.TypePeer;
        availableReactions?: Raw.TypeChatReactions;
        reactionsLimit?: int;
        stories?: Raw.TypePeerStories;
        wallpaper?: Raw.TypeWallPaper;
        boostsApplied?: int;
        boostsUnrestrict?: int;
        emojiset?: Raw.TypeStickerSet;
        constructor(params: {
            canViewParticipants?: boolean;
            canSetUsername?: boolean;
            canSetStickers?: boolean;
            hiddenPrehistory?: boolean;
            canSetLocation?: boolean;
            hasScheduled?: boolean;
            canViewStats?: boolean;
            blocked?: boolean;
            canDeleteChannel?: boolean;
            antispam?: boolean;
            participantsHidden?: boolean;
            translationsDisabled?: boolean;
            storiesPinnedAvailable?: boolean;
            viewForumAsMessages?: boolean;
            restrictedSponsored?: boolean;
            canViewRevenue?: boolean;
            id: long;
            about: string;
            participantsCount?: int;
            adminsCount?: int;
            kickedCount?: int;
            bannedCount?: int;
            onlineCount?: int;
            readInboxMaxId: int;
            readOutboxMaxId: int;
            unreadCount: int;
            chatPhoto: Raw.TypePhoto;
            notifySettings: Raw.TypePeerNotifySettings;
            exportedInvite?: Raw.TypeExportedChatInvite;
            botInfo: Vector<Raw.TypeBotInfo>;
            migratedFromChatId?: long;
            migratedFromMaxId?: int;
            pinnedMsgId?: int;
            stickerset?: Raw.TypeStickerSet;
            availableMinId?: int;
            folderId?: int;
            linkedChatId?: long;
            location?: Raw.TypeChannelLocation;
            slowmodeSeconds?: int;
            slowmodeNextSendDate?: int;
            statsDc?: int;
            pts: int;
            call?: Raw.TypeInputGroupCall;
            ttlPeriod?: int;
            pendingSuggestions?: Vector<string>;
            groupcallDefaultJoinAs?: Raw.TypePeer;
            themeEmoticon?: string;
            requestsPending?: int;
            recentRequesters?: Vector<long>;
            defaultSendAs?: Raw.TypePeer;
            availableReactions?: Raw.TypeChatReactions;
            reactionsLimit?: int;
            stories?: Raw.TypePeerStories;
            wallpaper?: Raw.TypeWallPaper;
            boostsApplied?: int;
            boostsUnrestrict?: int;
            emojiset?: Raw.TypeStickerSet;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelFull>;
        write(): Buffer;
    }
    class ChatParticipant extends TLObject {
        userId: long;
        inviterId: long;
        date: int;
        constructor(params: {
            userId: long;
            inviterId: long;
            date: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChatParticipant>;
        write(): Buffer;
    }
    class ChatParticipantCreator extends TLObject {
        userId: long;
        constructor(params: {
            userId: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChatParticipantCreator>;
        write(): Buffer;
    }
    class ChatParticipantAdmin extends TLObject {
        userId: long;
        inviterId: long;
        date: int;
        constructor(params: {
            userId: long;
            inviterId: long;
            date: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChatParticipantAdmin>;
        write(): Buffer;
    }
    class ChatParticipantsForbidden extends TLObject {
        chatId: long;
        selfParticipant?: Raw.TypeChatParticipant;
        constructor(params: {
            chatId: long;
            selfParticipant?: Raw.TypeChatParticipant;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChatParticipantsForbidden>;
        write(): Buffer;
    }
    class ChatParticipants extends TLObject {
        chatId: long;
        participants: Vector<Raw.TypeChatParticipant>;
        version: int;
        constructor(params: {
            chatId: long;
            participants: Vector<Raw.TypeChatParticipant>;
            version: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChatParticipants>;
        write(): Buffer;
    }
    class ChatPhotoEmpty extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChatPhotoEmpty>;
        write(): Buffer;
    }
    class ChatPhoto extends TLObject {
        hasVideo?: boolean;
        photoId: long;
        strippedThumb?: bytes;
        dcId: int;
        constructor(params: {
            hasVideo?: boolean;
            photoId: long;
            strippedThumb?: bytes;
            dcId: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChatPhoto>;
        write(): Buffer;
    }
    class MessageEmpty extends TLObject {
        id: int;
        peerId?: Raw.TypePeer;
        constructor(params: {
            id: int;
            peerId?: Raw.TypePeer;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageEmpty>;
        write(): Buffer;
    }
    class Message extends TLObject {
        out?: boolean;
        mentioned?: boolean;
        mediaUnread?: boolean;
        silent?: boolean;
        post?: boolean;
        fromScheduled?: boolean;
        legacy?: boolean;
        editHide?: boolean;
        pinned?: boolean;
        noforwards?: boolean;
        invertMedia?: boolean;
        offline?: boolean;
        id: int;
        fromId?: Raw.TypePeer;
        fromBoostsApplied?: int;
        peerId: Raw.TypePeer;
        savedPeerId?: Raw.TypePeer;
        fwdFrom?: Raw.TypeMessageFwdHeader;
        viaBotId?: long;
        viaBusinessBotId?: long;
        replyTo?: Raw.TypeMessageReplyHeader;
        date: int;
        message: string;
        media?: Raw.TypeMessageMedia;
        replyMarkup?: Raw.TypeReplyMarkup;
        entities?: Vector<Raw.TypeMessageEntity>;
        views?: int;
        forwards?: int;
        replies?: Raw.TypeMessageReplies;
        editDate?: int;
        postAuthor?: string;
        groupedId?: long;
        reactions?: Raw.TypeMessageReactions;
        restrictionReason?: Vector<Raw.TypeRestrictionReason>;
        ttlPeriod?: int;
        quickReplyShortcutId?: int;
        effect?: long;
        factcheck?: Raw.TypeFactCheck;
        constructor(params: {
            out?: boolean;
            mentioned?: boolean;
            mediaUnread?: boolean;
            silent?: boolean;
            post?: boolean;
            fromScheduled?: boolean;
            legacy?: boolean;
            editHide?: boolean;
            pinned?: boolean;
            noforwards?: boolean;
            invertMedia?: boolean;
            offline?: boolean;
            id: int;
            fromId?: Raw.TypePeer;
            fromBoostsApplied?: int;
            peerId: Raw.TypePeer;
            savedPeerId?: Raw.TypePeer;
            fwdFrom?: Raw.TypeMessageFwdHeader;
            viaBotId?: long;
            viaBusinessBotId?: long;
            replyTo?: Raw.TypeMessageReplyHeader;
            date: int;
            message: string;
            media?: Raw.TypeMessageMedia;
            replyMarkup?: Raw.TypeReplyMarkup;
            entities?: Vector<Raw.TypeMessageEntity>;
            views?: int;
            forwards?: int;
            replies?: Raw.TypeMessageReplies;
            editDate?: int;
            postAuthor?: string;
            groupedId?: long;
            reactions?: Raw.TypeMessageReactions;
            restrictionReason?: Vector<Raw.TypeRestrictionReason>;
            ttlPeriod?: int;
            quickReplyShortcutId?: int;
            effect?: long;
            factcheck?: Raw.TypeFactCheck;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.Message>;
        write(): Buffer;
    }
    class MessageService extends TLObject {
        out?: boolean;
        mentioned?: boolean;
        mediaUnread?: boolean;
        silent?: boolean;
        post?: boolean;
        legacy?: boolean;
        id: int;
        fromId?: Raw.TypePeer;
        peerId: Raw.TypePeer;
        replyTo?: Raw.TypeMessageReplyHeader;
        date: int;
        action: Raw.TypeMessageAction;
        ttlPeriod?: int;
        constructor(params: {
            out?: boolean;
            mentioned?: boolean;
            mediaUnread?: boolean;
            silent?: boolean;
            post?: boolean;
            legacy?: boolean;
            id: int;
            fromId?: Raw.TypePeer;
            peerId: Raw.TypePeer;
            replyTo?: Raw.TypeMessageReplyHeader;
            date: int;
            action: Raw.TypeMessageAction;
            ttlPeriod?: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageService>;
        write(): Buffer;
    }
    class MessageMediaEmpty extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageMediaEmpty>;
        write(): Buffer;
    }
    class MessageMediaPhoto extends TLObject {
        spoiler?: boolean;
        photo?: Raw.TypePhoto;
        ttlSeconds?: int;
        constructor(params: {
            spoiler?: boolean;
            photo?: Raw.TypePhoto;
            ttlSeconds?: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageMediaPhoto>;
        write(): Buffer;
    }
    class MessageMediaGeo extends TLObject {
        geo: Raw.TypeGeoPoint;
        constructor(params: {
            geo: Raw.TypeGeoPoint;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageMediaGeo>;
        write(): Buffer;
    }
    class MessageMediaContact extends TLObject {
        phoneNumber: string;
        firstName: string;
        lastName: string;
        vcard: string;
        userId: long;
        constructor(params: {
            phoneNumber: string;
            firstName: string;
            lastName: string;
            vcard: string;
            userId: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageMediaContact>;
        write(): Buffer;
    }
    class MessageMediaUnsupported extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageMediaUnsupported>;
        write(): Buffer;
    }
    class MessageMediaDocument extends TLObject {
        nopremium?: boolean;
        spoiler?: boolean;
        video?: boolean;
        round?: boolean;
        voice?: boolean;
        document?: Raw.TypeDocument;
        altDocument?: Raw.TypeDocument;
        ttlSeconds?: int;
        constructor(params: {
            nopremium?: boolean;
            spoiler?: boolean;
            video?: boolean;
            round?: boolean;
            voice?: boolean;
            document?: Raw.TypeDocument;
            altDocument?: Raw.TypeDocument;
            ttlSeconds?: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageMediaDocument>;
        write(): Buffer;
    }
    class MessageMediaWebPage extends TLObject {
        forceLargeMedia?: boolean;
        forceSmallMedia?: boolean;
        manual?: boolean;
        safe?: boolean;
        webpage: Raw.TypeWebPage;
        constructor(params: {
            forceLargeMedia?: boolean;
            forceSmallMedia?: boolean;
            manual?: boolean;
            safe?: boolean;
            webpage: Raw.TypeWebPage;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageMediaWebPage>;
        write(): Buffer;
    }
    class MessageMediaVenue extends TLObject {
        geo: Raw.TypeGeoPoint;
        title: string;
        address: string;
        provider: string;
        venueId: string;
        venueType: string;
        constructor(params: {
            geo: Raw.TypeGeoPoint;
            title: string;
            address: string;
            provider: string;
            venueId: string;
            venueType: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageMediaVenue>;
        write(): Buffer;
    }
    class MessageMediaGame extends TLObject {
        game: Raw.TypeGame;
        constructor(params: {
            game: Raw.TypeGame;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageMediaGame>;
        write(): Buffer;
    }
    class MessageMediaInvoice extends TLObject {
        shippingAddressRequested?: boolean;
        test?: boolean;
        title: string;
        description: string;
        photo?: Raw.TypeWebDocument;
        receiptMsgId?: int;
        currency: string;
        totalAmount: long;
        startParam: string;
        extendedMedia?: Raw.TypeMessageExtendedMedia;
        constructor(params: {
            shippingAddressRequested?: boolean;
            test?: boolean;
            title: string;
            description: string;
            photo?: Raw.TypeWebDocument;
            receiptMsgId?: int;
            currency: string;
            totalAmount: long;
            startParam: string;
            extendedMedia?: Raw.TypeMessageExtendedMedia;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageMediaInvoice>;
        write(): Buffer;
    }
    class MessageMediaGeoLive extends TLObject {
        geo: Raw.TypeGeoPoint;
        heading?: int;
        period: int;
        proximityNotificationRadius?: int;
        constructor(params: {
            geo: Raw.TypeGeoPoint;
            heading?: int;
            period: int;
            proximityNotificationRadius?: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageMediaGeoLive>;
        write(): Buffer;
    }
    class MessageMediaPoll extends TLObject {
        poll: Raw.TypePoll;
        results: Raw.TypePollResults;
        constructor(params: {
            poll: Raw.TypePoll;
            results: Raw.TypePollResults;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageMediaPoll>;
        write(): Buffer;
    }
    class MessageMediaDice extends TLObject {
        value: int;
        emoticon: string;
        constructor(params: {
            value: int;
            emoticon: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageMediaDice>;
        write(): Buffer;
    }
    class MessageMediaStory extends TLObject {
        viaMention?: boolean;
        peer: Raw.TypePeer;
        id: int;
        story?: Raw.TypeStoryItem;
        constructor(params: {
            viaMention?: boolean;
            peer: Raw.TypePeer;
            id: int;
            story?: Raw.TypeStoryItem;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageMediaStory>;
        write(): Buffer;
    }
    class MessageMediaGiveaway extends TLObject {
        onlyNewSubscribers?: boolean;
        winnersAreVisible?: boolean;
        channels: Vector<long>;
        countriesIso2?: Vector<string>;
        prizeDescription?: string;
        quantity: int;
        months: int;
        untilDate: int;
        constructor(params: {
            onlyNewSubscribers?: boolean;
            winnersAreVisible?: boolean;
            channels: Vector<long>;
            countriesIso2?: Vector<string>;
            prizeDescription?: string;
            quantity: int;
            months: int;
            untilDate: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageMediaGiveaway>;
        write(): Buffer;
    }
    class MessageMediaGiveawayResults extends TLObject {
        onlyNewSubscribers?: boolean;
        refunded?: boolean;
        channelId: long;
        additionalPeersCount?: int;
        launchMsgId: int;
        winnersCount: int;
        unclaimedCount: int;
        winners: Vector<long>;
        months: int;
        prizeDescription?: string;
        untilDate: int;
        constructor(params: {
            onlyNewSubscribers?: boolean;
            refunded?: boolean;
            channelId: long;
            additionalPeersCount?: int;
            launchMsgId: int;
            winnersCount: int;
            unclaimedCount: int;
            winners: Vector<long>;
            months: int;
            prizeDescription?: string;
            untilDate: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageMediaGiveawayResults>;
        write(): Buffer;
    }
    class MessageActionEmpty extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageActionEmpty>;
        write(): Buffer;
    }
    class MessageActionChatCreate extends TLObject {
        title: string;
        users: Vector<long>;
        constructor(params: {
            title: string;
            users: Vector<long>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageActionChatCreate>;
        write(): Buffer;
    }
    class MessageActionChatEditTitle extends TLObject {
        title: string;
        constructor(params: {
            title: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageActionChatEditTitle>;
        write(): Buffer;
    }
    class MessageActionChatEditPhoto extends TLObject {
        photo: Raw.TypePhoto;
        constructor(params: {
            photo: Raw.TypePhoto;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageActionChatEditPhoto>;
        write(): Buffer;
    }
    class MessageActionChatDeletePhoto extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageActionChatDeletePhoto>;
        write(): Buffer;
    }
    class MessageActionChatAddUser extends TLObject {
        users: Vector<long>;
        constructor(params: {
            users: Vector<long>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageActionChatAddUser>;
        write(): Buffer;
    }
    class MessageActionChatDeleteUser extends TLObject {
        userId: long;
        constructor(params: {
            userId: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageActionChatDeleteUser>;
        write(): Buffer;
    }
    class MessageActionChatJoinedByLink extends TLObject {
        inviterId: long;
        constructor(params: {
            inviterId: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageActionChatJoinedByLink>;
        write(): Buffer;
    }
    class MessageActionChannelCreate extends TLObject {
        title: string;
        constructor(params: {
            title: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageActionChannelCreate>;
        write(): Buffer;
    }
    class MessageActionChatMigrateTo extends TLObject {
        channelId: long;
        constructor(params: {
            channelId: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageActionChatMigrateTo>;
        write(): Buffer;
    }
    class MessageActionChannelMigrateFrom extends TLObject {
        title: string;
        chatId: long;
        constructor(params: {
            title: string;
            chatId: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageActionChannelMigrateFrom>;
        write(): Buffer;
    }
    class MessageActionPinMessage extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageActionPinMessage>;
        write(): Buffer;
    }
    class MessageActionHistoryClear extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageActionHistoryClear>;
        write(): Buffer;
    }
    class MessageActionGameScore extends TLObject {
        gameId: long;
        score: int;
        constructor(params: {
            gameId: long;
            score: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageActionGameScore>;
        write(): Buffer;
    }
    class MessageActionPaymentSentMe extends TLObject {
        recurringInit?: boolean;
        recurringUsed?: boolean;
        currency: string;
        totalAmount: long;
        payload: bytes;
        info?: Raw.TypePaymentRequestedInfo;
        shippingOptionId?: string;
        charge: Raw.TypePaymentCharge;
        constructor(params: {
            recurringInit?: boolean;
            recurringUsed?: boolean;
            currency: string;
            totalAmount: long;
            payload: bytes;
            info?: Raw.TypePaymentRequestedInfo;
            shippingOptionId?: string;
            charge: Raw.TypePaymentCharge;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageActionPaymentSentMe>;
        write(): Buffer;
    }
    class MessageActionPaymentSent extends TLObject {
        recurringInit?: boolean;
        recurringUsed?: boolean;
        currency: string;
        totalAmount: long;
        invoiceSlug?: string;
        constructor(params: {
            recurringInit?: boolean;
            recurringUsed?: boolean;
            currency: string;
            totalAmount: long;
            invoiceSlug?: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageActionPaymentSent>;
        write(): Buffer;
    }
    class MessageActionPhoneCall extends TLObject {
        video?: boolean;
        callId: long;
        reason?: Raw.TypePhoneCallDiscardReason;
        duration?: int;
        constructor(params: {
            video?: boolean;
            callId: long;
            reason?: Raw.TypePhoneCallDiscardReason;
            duration?: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageActionPhoneCall>;
        write(): Buffer;
    }
    class MessageActionScreenshotTaken extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageActionScreenshotTaken>;
        write(): Buffer;
    }
    class MessageActionCustomAction extends TLObject {
        message: string;
        constructor(params: {
            message: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageActionCustomAction>;
        write(): Buffer;
    }
    class MessageActionBotAllowed extends TLObject {
        attachMenu?: boolean;
        fromRequest?: boolean;
        domain?: string;
        app?: Raw.TypeBotApp;
        constructor(params: {
            attachMenu?: boolean;
            fromRequest?: boolean;
            domain?: string;
            app?: Raw.TypeBotApp;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageActionBotAllowed>;
        write(): Buffer;
    }
    class MessageActionSecureValuesSentMe extends TLObject {
        values: Vector<Raw.TypeSecureValue>;
        credentials: Raw.TypeSecureCredentialsEncrypted;
        constructor(params: {
            values: Vector<Raw.TypeSecureValue>;
            credentials: Raw.TypeSecureCredentialsEncrypted;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageActionSecureValuesSentMe>;
        write(): Buffer;
    }
    class MessageActionSecureValuesSent extends TLObject {
        types: Vector<Raw.TypeSecureValueType>;
        constructor(params: {
            types: Vector<Raw.TypeSecureValueType>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageActionSecureValuesSent>;
        write(): Buffer;
    }
    class MessageActionContactSignUp extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageActionContactSignUp>;
        write(): Buffer;
    }
    class MessageActionGeoProximityReached extends TLObject {
        fromId: Raw.TypePeer;
        toId: Raw.TypePeer;
        distance: int;
        constructor(params: {
            fromId: Raw.TypePeer;
            toId: Raw.TypePeer;
            distance: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageActionGeoProximityReached>;
        write(): Buffer;
    }
    class MessageActionGroupCall extends TLObject {
        call: Raw.TypeInputGroupCall;
        duration?: int;
        constructor(params: {
            call: Raw.TypeInputGroupCall;
            duration?: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageActionGroupCall>;
        write(): Buffer;
    }
    class MessageActionInviteToGroupCall extends TLObject {
        call: Raw.TypeInputGroupCall;
        users: Vector<long>;
        constructor(params: {
            call: Raw.TypeInputGroupCall;
            users: Vector<long>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageActionInviteToGroupCall>;
        write(): Buffer;
    }
    class MessageActionSetMessagesTTL extends TLObject {
        period: int;
        autoSettingFrom?: long;
        constructor(params: {
            period: int;
            autoSettingFrom?: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageActionSetMessagesTTL>;
        write(): Buffer;
    }
    class MessageActionGroupCallScheduled extends TLObject {
        call: Raw.TypeInputGroupCall;
        scheduleDate: int;
        constructor(params: {
            call: Raw.TypeInputGroupCall;
            scheduleDate: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageActionGroupCallScheduled>;
        write(): Buffer;
    }
    class MessageActionSetChatTheme extends TLObject {
        emoticon: string;
        constructor(params: {
            emoticon: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageActionSetChatTheme>;
        write(): Buffer;
    }
    class MessageActionChatJoinedByRequest extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageActionChatJoinedByRequest>;
        write(): Buffer;
    }
    class MessageActionWebViewDataSentMe extends TLObject {
        text: string;
        data: string;
        constructor(params: {
            text: string;
            data: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageActionWebViewDataSentMe>;
        write(): Buffer;
    }
    class MessageActionWebViewDataSent extends TLObject {
        text: string;
        constructor(params: {
            text: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageActionWebViewDataSent>;
        write(): Buffer;
    }
    class MessageActionGiftPremium extends TLObject {
        currency: string;
        amount: long;
        months: int;
        cryptoCurrency?: string;
        cryptoAmount?: long;
        constructor(params: {
            currency: string;
            amount: long;
            months: int;
            cryptoCurrency?: string;
            cryptoAmount?: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageActionGiftPremium>;
        write(): Buffer;
    }
    class MessageActionTopicCreate extends TLObject {
        title: string;
        iconColor: int;
        iconEmojiId?: long;
        constructor(params: {
            title: string;
            iconColor: int;
            iconEmojiId?: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageActionTopicCreate>;
        write(): Buffer;
    }
    class MessageActionTopicEdit extends TLObject {
        title?: string;
        iconEmojiId?: long;
        closed?: Bool;
        hidden?: Bool;
        constructor(params: {
            title?: string;
            iconEmojiId?: long;
            closed?: Bool;
            hidden?: Bool;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageActionTopicEdit>;
        write(): Buffer;
    }
    class MessageActionSuggestProfilePhoto extends TLObject {
        photo: Raw.TypePhoto;
        constructor(params: {
            photo: Raw.TypePhoto;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageActionSuggestProfilePhoto>;
        write(): Buffer;
    }
    class MessageActionRequestedPeer extends TLObject {
        buttonId: int;
        peers: Vector<Raw.TypePeer>;
        constructor(params: {
            buttonId: int;
            peers: Vector<Raw.TypePeer>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageActionRequestedPeer>;
        write(): Buffer;
    }
    class MessageActionSetChatWallPaper extends TLObject {
        same?: boolean;
        forBoth?: boolean;
        wallpaper: Raw.TypeWallPaper;
        constructor(params: {
            same?: boolean;
            forBoth?: boolean;
            wallpaper: Raw.TypeWallPaper;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageActionSetChatWallPaper>;
        write(): Buffer;
    }
    class MessageActionGiftCode extends TLObject {
        viaGiveaway?: boolean;
        unclaimed?: boolean;
        boostPeer?: Raw.TypePeer;
        months: int;
        slug: string;
        currency?: string;
        amount?: long;
        cryptoCurrency?: string;
        cryptoAmount?: long;
        constructor(params: {
            viaGiveaway?: boolean;
            unclaimed?: boolean;
            boostPeer?: Raw.TypePeer;
            months: int;
            slug: string;
            currency?: string;
            amount?: long;
            cryptoCurrency?: string;
            cryptoAmount?: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageActionGiftCode>;
        write(): Buffer;
    }
    class MessageActionGiveawayLaunch extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageActionGiveawayLaunch>;
        write(): Buffer;
    }
    class MessageActionGiveawayResults extends TLObject {
        winnersCount: int;
        unclaimedCount: int;
        constructor(params: {
            winnersCount: int;
            unclaimedCount: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageActionGiveawayResults>;
        write(): Buffer;
    }
    class MessageActionBoostApply extends TLObject {
        boosts: int;
        constructor(params: {
            boosts: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageActionBoostApply>;
        write(): Buffer;
    }
    class MessageActionRequestedPeerSentMe extends TLObject {
        buttonId: int;
        peers: Vector<Raw.TypeRequestedPeer>;
        constructor(params: {
            buttonId: int;
            peers: Vector<Raw.TypeRequestedPeer>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageActionRequestedPeerSentMe>;
        write(): Buffer;
    }
    class Dialog extends TLObject {
        pinned?: boolean;
        unreadMark?: boolean;
        viewForumAsMessages?: boolean;
        peer: Raw.TypePeer;
        topMessage: int;
        readInboxMaxId: int;
        readOutboxMaxId: int;
        unreadCount: int;
        unreadMentionsCount: int;
        unreadReactionsCount: int;
        notifySettings: Raw.TypePeerNotifySettings;
        pts?: int;
        draft?: Raw.TypeDraftMessage;
        folderId?: int;
        ttlPeriod?: int;
        constructor(params: {
            pinned?: boolean;
            unreadMark?: boolean;
            viewForumAsMessages?: boolean;
            peer: Raw.TypePeer;
            topMessage: int;
            readInboxMaxId: int;
            readOutboxMaxId: int;
            unreadCount: int;
            unreadMentionsCount: int;
            unreadReactionsCount: int;
            notifySettings: Raw.TypePeerNotifySettings;
            pts?: int;
            draft?: Raw.TypeDraftMessage;
            folderId?: int;
            ttlPeriod?: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.Dialog>;
        write(): Buffer;
    }
    class DialogFolder extends TLObject {
        pinned?: boolean;
        folder: Raw.TypeFolder;
        peer: Raw.TypePeer;
        topMessage: int;
        unreadMutedPeersCount: int;
        unreadUnmutedPeersCount: int;
        unreadMutedMessagesCount: int;
        unreadUnmutedMessagesCount: int;
        constructor(params: {
            pinned?: boolean;
            folder: Raw.TypeFolder;
            peer: Raw.TypePeer;
            topMessage: int;
            unreadMutedPeersCount: int;
            unreadUnmutedPeersCount: int;
            unreadMutedMessagesCount: int;
            unreadUnmutedMessagesCount: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DialogFolder>;
        write(): Buffer;
    }
    class PhotoEmpty extends TLObject {
        id: long;
        constructor(params: {
            id: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PhotoEmpty>;
        write(): Buffer;
    }
    class Photo extends TLObject {
        hasStickers?: boolean;
        id: long;
        accessHash: long;
        fileReference: bytes;
        date: int;
        sizes: Vector<Raw.TypePhotoSize>;
        videoSizes?: Vector<Raw.TypeVideoSize>;
        dcId: int;
        constructor(params: {
            hasStickers?: boolean;
            id: long;
            accessHash: long;
            fileReference: bytes;
            date: int;
            sizes: Vector<Raw.TypePhotoSize>;
            videoSizes?: Vector<Raw.TypeVideoSize>;
            dcId: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.Photo>;
        write(): Buffer;
    }
    class PhotoSizeEmpty extends TLObject {
        type: string;
        constructor(params: {
            type: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PhotoSizeEmpty>;
        write(): Buffer;
    }
    class PhotoSize extends TLObject {
        type: string;
        w: int;
        h: int;
        size: int;
        constructor(params: {
            type: string;
            w: int;
            h: int;
            size: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PhotoSize>;
        write(): Buffer;
    }
    class PhotoCachedSize extends TLObject {
        type: string;
        w: int;
        h: int;
        bytes: bytes;
        constructor(params: {
            type: string;
            w: int;
            h: int;
            bytes: bytes;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PhotoCachedSize>;
        write(): Buffer;
    }
    class PhotoStrippedSize extends TLObject {
        type: string;
        bytes: bytes;
        constructor(params: {
            type: string;
            bytes: bytes;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PhotoStrippedSize>;
        write(): Buffer;
    }
    class PhotoSizeProgressive extends TLObject {
        type: string;
        w: int;
        h: int;
        sizes: Vector<int>;
        constructor(params: {
            type: string;
            w: int;
            h: int;
            sizes: Vector<int>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PhotoSizeProgressive>;
        write(): Buffer;
    }
    class PhotoPathSize extends TLObject {
        type: string;
        bytes: bytes;
        constructor(params: {
            type: string;
            bytes: bytes;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PhotoPathSize>;
        write(): Buffer;
    }
    class GeoPointEmpty extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.GeoPointEmpty>;
        write(): Buffer;
    }
    class GeoPoint extends TLObject {
        long: double;
        lat: double;
        accessHash: long;
        accuracyRadius?: int;
        constructor(params: {
            long: double;
            lat: double;
            accessHash: long;
            accuracyRadius?: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.GeoPoint>;
        write(): Buffer;
    }
    class InputNotifyPeer extends TLObject {
        peer: Raw.TypeInputPeer;
        constructor(params: {
            peer: Raw.TypeInputPeer;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputNotifyPeer>;
        write(): Buffer;
    }
    class InputNotifyUsers extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputNotifyUsers>;
        write(): Buffer;
    }
    class InputNotifyChats extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputNotifyChats>;
        write(): Buffer;
    }
    class InputNotifyBroadcasts extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputNotifyBroadcasts>;
        write(): Buffer;
    }
    class InputNotifyForumTopic extends TLObject {
        peer: Raw.TypeInputPeer;
        topMsgId: int;
        constructor(params: {
            peer: Raw.TypeInputPeer;
            topMsgId: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputNotifyForumTopic>;
        write(): Buffer;
    }
    class InputPeerNotifySettings extends TLObject {
        showPreviews?: Bool;
        silent?: Bool;
        muteUntil?: int;
        sound?: Raw.TypeNotificationSound;
        storiesMuted?: Bool;
        storiesHideSender?: Bool;
        storiesSound?: Raw.TypeNotificationSound;
        constructor(params: {
            showPreviews?: Bool;
            silent?: Bool;
            muteUntil?: int;
            sound?: Raw.TypeNotificationSound;
            storiesMuted?: Bool;
            storiesHideSender?: Bool;
            storiesSound?: Raw.TypeNotificationSound;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputPeerNotifySettings>;
        write(): Buffer;
    }
    class PeerNotifySettings extends TLObject {
        showPreviews?: Bool;
        silent?: Bool;
        muteUntil?: int;
        iosSound?: Raw.TypeNotificationSound;
        androidSound?: Raw.TypeNotificationSound;
        otherSound?: Raw.TypeNotificationSound;
        storiesMuted?: Bool;
        storiesHideSender?: Bool;
        storiesIosSound?: Raw.TypeNotificationSound;
        storiesAndroidSound?: Raw.TypeNotificationSound;
        storiesOtherSound?: Raw.TypeNotificationSound;
        constructor(params: {
            showPreviews?: Bool;
            silent?: Bool;
            muteUntil?: int;
            iosSound?: Raw.TypeNotificationSound;
            androidSound?: Raw.TypeNotificationSound;
            otherSound?: Raw.TypeNotificationSound;
            storiesMuted?: Bool;
            storiesHideSender?: Bool;
            storiesIosSound?: Raw.TypeNotificationSound;
            storiesAndroidSound?: Raw.TypeNotificationSound;
            storiesOtherSound?: Raw.TypeNotificationSound;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PeerNotifySettings>;
        write(): Buffer;
    }
    class PeerSettings extends TLObject {
        reportSpam?: boolean;
        addContact?: boolean;
        blockContact?: boolean;
        shareContact?: boolean;
        needContactsException?: boolean;
        reportGeo?: boolean;
        autoarchived?: boolean;
        inviteMembers?: boolean;
        requestChatBroadcast?: boolean;
        businessBotPaused?: boolean;
        businessBotCanReply?: boolean;
        geoDistance?: int;
        requestChatTitle?: string;
        requestChatDate?: int;
        businessBotId?: long;
        businessBotManageUrl?: string;
        constructor(params: {
            reportSpam?: boolean;
            addContact?: boolean;
            blockContact?: boolean;
            shareContact?: boolean;
            needContactsException?: boolean;
            reportGeo?: boolean;
            autoarchived?: boolean;
            inviteMembers?: boolean;
            requestChatBroadcast?: boolean;
            businessBotPaused?: boolean;
            businessBotCanReply?: boolean;
            geoDistance?: int;
            requestChatTitle?: string;
            requestChatDate?: int;
            businessBotId?: long;
            businessBotManageUrl?: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PeerSettings>;
        write(): Buffer;
    }
    class WallPaper extends TLObject {
        id: long;
        creator?: boolean;
        default?: boolean;
        pattern?: boolean;
        dark?: boolean;
        accessHash: long;
        slug: string;
        document: Raw.TypeDocument;
        settings?: Raw.TypeWallPaperSettings;
        constructor(params: {
            id: long;
            creator?: boolean;
            default?: boolean;
            pattern?: boolean;
            dark?: boolean;
            accessHash: long;
            slug: string;
            document: Raw.TypeDocument;
            settings?: Raw.TypeWallPaperSettings;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.WallPaper>;
        write(): Buffer;
    }
    class WallPaperNoFile extends TLObject {
        id: long;
        default?: boolean;
        dark?: boolean;
        settings?: Raw.TypeWallPaperSettings;
        constructor(params: {
            id: long;
            default?: boolean;
            dark?: boolean;
            settings?: Raw.TypeWallPaperSettings;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.WallPaperNoFile>;
        write(): Buffer;
    }
    class InputReportReasonSpam extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputReportReasonSpam>;
        write(): Buffer;
    }
    class InputReportReasonViolence extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputReportReasonViolence>;
        write(): Buffer;
    }
    class InputReportReasonPornography extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputReportReasonPornography>;
        write(): Buffer;
    }
    class InputReportReasonChildAbuse extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputReportReasonChildAbuse>;
        write(): Buffer;
    }
    class InputReportReasonOther extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputReportReasonOther>;
        write(): Buffer;
    }
    class InputReportReasonCopyright extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputReportReasonCopyright>;
        write(): Buffer;
    }
    class InputReportReasonGeoIrrelevant extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputReportReasonGeoIrrelevant>;
        write(): Buffer;
    }
    class InputReportReasonFake extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputReportReasonFake>;
        write(): Buffer;
    }
    class InputReportReasonIllegalDrugs extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputReportReasonIllegalDrugs>;
        write(): Buffer;
    }
    class InputReportReasonPersonalDetails extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputReportReasonPersonalDetails>;
        write(): Buffer;
    }
    class UserFull extends TLObject {
        blocked?: boolean;
        phoneCallsAvailable?: boolean;
        phoneCallsPrivate?: boolean;
        canPinMessage?: boolean;
        hasScheduled?: boolean;
        videoCallsAvailable?: boolean;
        voiceMessagesForbidden?: boolean;
        translationsDisabled?: boolean;
        storiesPinnedAvailable?: boolean;
        blockedMyStoriesFrom?: boolean;
        wallpaperOverridden?: boolean;
        contactRequirePremium?: boolean;
        readDatesPrivate?: boolean;
        sponsoredEnabled?: boolean;
        id: long;
        about?: string;
        settings: Raw.TypePeerSettings;
        personalPhoto?: Raw.TypePhoto;
        profilePhoto?: Raw.TypePhoto;
        fallbackPhoto?: Raw.TypePhoto;
        notifySettings: Raw.TypePeerNotifySettings;
        botInfo?: Raw.TypeBotInfo;
        pinnedMsgId?: int;
        commonChatsCount: int;
        folderId?: int;
        ttlPeriod?: int;
        themeEmoticon?: string;
        privateForwardName?: string;
        botGroupAdminRights?: Raw.TypeChatAdminRights;
        botBroadcastAdminRights?: Raw.TypeChatAdminRights;
        premiumGifts?: Vector<Raw.TypePremiumGiftOption>;
        wallpaper?: Raw.TypeWallPaper;
        stories?: Raw.TypePeerStories;
        businessWorkHours?: Raw.TypeBusinessWorkHours;
        businessLocation?: Raw.TypeBusinessLocation;
        businessGreetingMessage?: Raw.TypeBusinessGreetingMessage;
        businessAwayMessage?: Raw.TypeBusinessAwayMessage;
        businessIntro?: Raw.TypeBusinessIntro;
        birthday?: Raw.TypeBirthday;
        personalChannelId?: long;
        personalChannelMessage?: int;
        constructor(params: {
            blocked?: boolean;
            phoneCallsAvailable?: boolean;
            phoneCallsPrivate?: boolean;
            canPinMessage?: boolean;
            hasScheduled?: boolean;
            videoCallsAvailable?: boolean;
            voiceMessagesForbidden?: boolean;
            translationsDisabled?: boolean;
            storiesPinnedAvailable?: boolean;
            blockedMyStoriesFrom?: boolean;
            wallpaperOverridden?: boolean;
            contactRequirePremium?: boolean;
            readDatesPrivate?: boolean;
            sponsoredEnabled?: boolean;
            id: long;
            about?: string;
            settings: Raw.TypePeerSettings;
            personalPhoto?: Raw.TypePhoto;
            profilePhoto?: Raw.TypePhoto;
            fallbackPhoto?: Raw.TypePhoto;
            notifySettings: Raw.TypePeerNotifySettings;
            botInfo?: Raw.TypeBotInfo;
            pinnedMsgId?: int;
            commonChatsCount: int;
            folderId?: int;
            ttlPeriod?: int;
            themeEmoticon?: string;
            privateForwardName?: string;
            botGroupAdminRights?: Raw.TypeChatAdminRights;
            botBroadcastAdminRights?: Raw.TypeChatAdminRights;
            premiumGifts?: Vector<Raw.TypePremiumGiftOption>;
            wallpaper?: Raw.TypeWallPaper;
            stories?: Raw.TypePeerStories;
            businessWorkHours?: Raw.TypeBusinessWorkHours;
            businessLocation?: Raw.TypeBusinessLocation;
            businessGreetingMessage?: Raw.TypeBusinessGreetingMessage;
            businessAwayMessage?: Raw.TypeBusinessAwayMessage;
            businessIntro?: Raw.TypeBusinessIntro;
            birthday?: Raw.TypeBirthday;
            personalChannelId?: long;
            personalChannelMessage?: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UserFull>;
        write(): Buffer;
    }
    class Contact extends TLObject {
        userId: long;
        mutual: Bool;
        constructor(params: {
            userId: long;
            mutual: Bool;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.Contact>;
        write(): Buffer;
    }
    class ImportedContact extends TLObject {
        userId: long;
        clientId: long;
        constructor(params: {
            userId: long;
            clientId: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ImportedContact>;
        write(): Buffer;
    }
    class ContactStatus extends TLObject {
        userId: long;
        status: Raw.TypeUserStatus;
        constructor(params: {
            userId: long;
            status: Raw.TypeUserStatus;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ContactStatus>;
        write(): Buffer;
    }
    class InputMessagesFilterEmpty extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputMessagesFilterEmpty>;
        write(): Buffer;
    }
    class InputMessagesFilterPhotos extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputMessagesFilterPhotos>;
        write(): Buffer;
    }
    class InputMessagesFilterVideo extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputMessagesFilterVideo>;
        write(): Buffer;
    }
    class InputMessagesFilterPhotoVideo extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputMessagesFilterPhotoVideo>;
        write(): Buffer;
    }
    class InputMessagesFilterDocument extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputMessagesFilterDocument>;
        write(): Buffer;
    }
    class InputMessagesFilterUrl extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputMessagesFilterUrl>;
        write(): Buffer;
    }
    class InputMessagesFilterGif extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputMessagesFilterGif>;
        write(): Buffer;
    }
    class InputMessagesFilterVoice extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputMessagesFilterVoice>;
        write(): Buffer;
    }
    class InputMessagesFilterMusic extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputMessagesFilterMusic>;
        write(): Buffer;
    }
    class InputMessagesFilterChatPhotos extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputMessagesFilterChatPhotos>;
        write(): Buffer;
    }
    class InputMessagesFilterPhoneCalls extends TLObject {
        missed?: boolean;
        constructor(params: {
            missed?: boolean;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputMessagesFilterPhoneCalls>;
        write(): Buffer;
    }
    class InputMessagesFilterRoundVoice extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputMessagesFilterRoundVoice>;
        write(): Buffer;
    }
    class InputMessagesFilterRoundVideo extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputMessagesFilterRoundVideo>;
        write(): Buffer;
    }
    class InputMessagesFilterMyMentions extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputMessagesFilterMyMentions>;
        write(): Buffer;
    }
    class InputMessagesFilterGeo extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputMessagesFilterGeo>;
        write(): Buffer;
    }
    class InputMessagesFilterContacts extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputMessagesFilterContacts>;
        write(): Buffer;
    }
    class InputMessagesFilterPinned extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputMessagesFilterPinned>;
        write(): Buffer;
    }
    class UpdateNewMessage extends TLObject {
        message: Raw.TypeMessage;
        pts: int;
        ptsCount: int;
        constructor(params: {
            message: Raw.TypeMessage;
            pts: int;
            ptsCount: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateNewMessage>;
        write(): Buffer;
    }
    class UpdateMessageID extends TLObject {
        id: int;
        randomId: long;
        constructor(params: {
            id: int;
            randomId: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateMessageID>;
        write(): Buffer;
    }
    class UpdateDeleteMessages extends TLObject {
        messages: Vector<int>;
        pts: int;
        ptsCount: int;
        constructor(params: {
            messages: Vector<int>;
            pts: int;
            ptsCount: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateDeleteMessages>;
        write(): Buffer;
    }
    class UpdateUserTyping extends TLObject {
        userId: long;
        action: Raw.TypeSendMessageAction;
        constructor(params: {
            userId: long;
            action: Raw.TypeSendMessageAction;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateUserTyping>;
        write(): Buffer;
    }
    class UpdateChatUserTyping extends TLObject {
        chatId: long;
        fromId: Raw.TypePeer;
        action: Raw.TypeSendMessageAction;
        constructor(params: {
            chatId: long;
            fromId: Raw.TypePeer;
            action: Raw.TypeSendMessageAction;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateChatUserTyping>;
        write(): Buffer;
    }
    class UpdateChatParticipants extends TLObject {
        participants: Raw.TypeChatParticipants;
        constructor(params: {
            participants: Raw.TypeChatParticipants;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateChatParticipants>;
        write(): Buffer;
    }
    class UpdateUserStatus extends TLObject {
        userId: long;
        status: Raw.TypeUserStatus;
        constructor(params: {
            userId: long;
            status: Raw.TypeUserStatus;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateUserStatus>;
        write(): Buffer;
    }
    class UpdateUserName extends TLObject {
        userId: long;
        firstName: string;
        lastName: string;
        usernames: Vector<Raw.TypeUsername>;
        constructor(params: {
            userId: long;
            firstName: string;
            lastName: string;
            usernames: Vector<Raw.TypeUsername>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateUserName>;
        write(): Buffer;
    }
    class UpdateNewAuthorization extends TLObject {
        unconfirmed?: boolean;
        hash: long;
        date?: int;
        device?: string;
        location?: string;
        constructor(params: {
            unconfirmed?: boolean;
            hash: long;
            date?: int;
            device?: string;
            location?: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateNewAuthorization>;
        write(): Buffer;
    }
    class UpdateNewEncryptedMessage extends TLObject {
        message: Raw.TypeEncryptedMessage;
        qts: int;
        constructor(params: {
            message: Raw.TypeEncryptedMessage;
            qts: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateNewEncryptedMessage>;
        write(): Buffer;
    }
    class UpdateEncryptedChatTyping extends TLObject {
        chatId: int;
        constructor(params: {
            chatId: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateEncryptedChatTyping>;
        write(): Buffer;
    }
    class UpdateEncryption extends TLObject {
        chat: Raw.TypeEncryptedChat;
        date: int;
        constructor(params: {
            chat: Raw.TypeEncryptedChat;
            date: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateEncryption>;
        write(): Buffer;
    }
    class UpdateEncryptedMessagesRead extends TLObject {
        chatId: int;
        maxDate: int;
        date: int;
        constructor(params: {
            chatId: int;
            maxDate: int;
            date: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateEncryptedMessagesRead>;
        write(): Buffer;
    }
    class UpdateChatParticipantAdd extends TLObject {
        chatId: long;
        userId: long;
        inviterId: long;
        date: int;
        version: int;
        constructor(params: {
            chatId: long;
            userId: long;
            inviterId: long;
            date: int;
            version: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateChatParticipantAdd>;
        write(): Buffer;
    }
    class UpdateChatParticipantDelete extends TLObject {
        chatId: long;
        userId: long;
        version: int;
        constructor(params: {
            chatId: long;
            userId: long;
            version: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateChatParticipantDelete>;
        write(): Buffer;
    }
    class UpdateDcOptions extends TLObject {
        dcOptions: Vector<Raw.TypeDcOption>;
        constructor(params: {
            dcOptions: Vector<Raw.TypeDcOption>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateDcOptions>;
        write(): Buffer;
    }
    class UpdateNotifySettings extends TLObject {
        peer: Raw.TypeNotifyPeer;
        notifySettings: Raw.TypePeerNotifySettings;
        constructor(params: {
            peer: Raw.TypeNotifyPeer;
            notifySettings: Raw.TypePeerNotifySettings;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateNotifySettings>;
        write(): Buffer;
    }
    class UpdateServiceNotification extends TLObject {
        popup?: boolean;
        invertMedia?: boolean;
        inboxDate?: int;
        type: string;
        message: string;
        media: Raw.TypeMessageMedia;
        entities: Vector<Raw.TypeMessageEntity>;
        constructor(params: {
            popup?: boolean;
            invertMedia?: boolean;
            inboxDate?: int;
            type: string;
            message: string;
            media: Raw.TypeMessageMedia;
            entities: Vector<Raw.TypeMessageEntity>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateServiceNotification>;
        write(): Buffer;
    }
    class UpdatePrivacy extends TLObject {
        key: Raw.TypePrivacyKey;
        rules: Vector<Raw.TypePrivacyRule>;
        constructor(params: {
            key: Raw.TypePrivacyKey;
            rules: Vector<Raw.TypePrivacyRule>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdatePrivacy>;
        write(): Buffer;
    }
    class UpdateUserPhone extends TLObject {
        userId: long;
        phone: string;
        constructor(params: {
            userId: long;
            phone: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateUserPhone>;
        write(): Buffer;
    }
    class UpdateReadHistoryInbox extends TLObject {
        folderId?: int;
        peer: Raw.TypePeer;
        maxId: int;
        stillUnreadCount: int;
        pts: int;
        ptsCount: int;
        constructor(params: {
            folderId?: int;
            peer: Raw.TypePeer;
            maxId: int;
            stillUnreadCount: int;
            pts: int;
            ptsCount: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateReadHistoryInbox>;
        write(): Buffer;
    }
    class UpdateReadHistoryOutbox extends TLObject {
        peer: Raw.TypePeer;
        maxId: int;
        pts: int;
        ptsCount: int;
        constructor(params: {
            peer: Raw.TypePeer;
            maxId: int;
            pts: int;
            ptsCount: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateReadHistoryOutbox>;
        write(): Buffer;
    }
    class UpdateWebPage extends TLObject {
        webpage: Raw.TypeWebPage;
        pts: int;
        ptsCount: int;
        constructor(params: {
            webpage: Raw.TypeWebPage;
            pts: int;
            ptsCount: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateWebPage>;
        write(): Buffer;
    }
    class UpdateReadMessagesContents extends TLObject {
        messages: Vector<int>;
        pts: int;
        ptsCount: int;
        date?: int;
        constructor(params: {
            messages: Vector<int>;
            pts: int;
            ptsCount: int;
            date?: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateReadMessagesContents>;
        write(): Buffer;
    }
    class UpdateChannelTooLong extends TLObject {
        channelId: long;
        pts?: int;
        constructor(params: {
            channelId: long;
            pts?: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateChannelTooLong>;
        write(): Buffer;
    }
    class UpdateChannel extends TLObject {
        channelId: long;
        constructor(params: {
            channelId: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateChannel>;
        write(): Buffer;
    }
    class UpdateNewChannelMessage extends TLObject {
        message: Raw.TypeMessage;
        pts: int;
        ptsCount: int;
        constructor(params: {
            message: Raw.TypeMessage;
            pts: int;
            ptsCount: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateNewChannelMessage>;
        write(): Buffer;
    }
    class UpdateReadChannelInbox extends TLObject {
        folderId?: int;
        channelId: long;
        maxId: int;
        stillUnreadCount: int;
        pts: int;
        constructor(params: {
            folderId?: int;
            channelId: long;
            maxId: int;
            stillUnreadCount: int;
            pts: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateReadChannelInbox>;
        write(): Buffer;
    }
    class UpdateDeleteChannelMessages extends TLObject {
        channelId: long;
        messages: Vector<int>;
        pts: int;
        ptsCount: int;
        constructor(params: {
            channelId: long;
            messages: Vector<int>;
            pts: int;
            ptsCount: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateDeleteChannelMessages>;
        write(): Buffer;
    }
    class UpdateChannelMessageViews extends TLObject {
        channelId: long;
        id: int;
        views: int;
        constructor(params: {
            channelId: long;
            id: int;
            views: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateChannelMessageViews>;
        write(): Buffer;
    }
    class UpdateChatParticipantAdmin extends TLObject {
        chatId: long;
        userId: long;
        isAdmin: Bool;
        version: int;
        constructor(params: {
            chatId: long;
            userId: long;
            isAdmin: Bool;
            version: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateChatParticipantAdmin>;
        write(): Buffer;
    }
    class UpdateNewStickerSet extends TLObject {
        stickerset: Raw.messages.TypeStickerSet;
        constructor(params: {
            stickerset: Raw.messages.TypeStickerSet;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateNewStickerSet>;
        write(): Buffer;
    }
    class UpdateStickerSetsOrder extends TLObject {
        masks?: boolean;
        emojis?: boolean;
        order: Vector<long>;
        constructor(params: {
            masks?: boolean;
            emojis?: boolean;
            order: Vector<long>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateStickerSetsOrder>;
        write(): Buffer;
    }
    class UpdateStickerSets extends TLObject {
        masks?: boolean;
        emojis?: boolean;
        constructor(params: {
            masks?: boolean;
            emojis?: boolean;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateStickerSets>;
        write(): Buffer;
    }
    class UpdateSavedGifs extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateSavedGifs>;
        write(): Buffer;
    }
    class UpdateBotInlineQuery extends TLObject {
        queryId: long;
        userId: long;
        query: string;
        geo?: Raw.TypeGeoPoint;
        peerType?: Raw.TypeInlineQueryPeerType;
        offset: string;
        constructor(params: {
            queryId: long;
            userId: long;
            query: string;
            geo?: Raw.TypeGeoPoint;
            peerType?: Raw.TypeInlineQueryPeerType;
            offset: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateBotInlineQuery>;
        write(): Buffer;
    }
    class UpdateBotInlineSend extends TLObject {
        userId: long;
        query: string;
        geo?: Raw.TypeGeoPoint;
        id: string;
        msgId?: Raw.TypeInputBotInlineMessageID;
        constructor(params: {
            userId: long;
            query: string;
            geo?: Raw.TypeGeoPoint;
            id: string;
            msgId?: Raw.TypeInputBotInlineMessageID;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateBotInlineSend>;
        write(): Buffer;
    }
    class UpdateEditChannelMessage extends TLObject {
        message: Raw.TypeMessage;
        pts: int;
        ptsCount: int;
        constructor(params: {
            message: Raw.TypeMessage;
            pts: int;
            ptsCount: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateEditChannelMessage>;
        write(): Buffer;
    }
    class UpdateBotCallbackQuery extends TLObject {
        queryId: long;
        userId: long;
        peer: Raw.TypePeer;
        msgId: int;
        chatInstance: long;
        data?: bytes;
        gameShortName?: string;
        constructor(params: {
            queryId: long;
            userId: long;
            peer: Raw.TypePeer;
            msgId: int;
            chatInstance: long;
            data?: bytes;
            gameShortName?: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateBotCallbackQuery>;
        write(): Buffer;
    }
    class UpdateEditMessage extends TLObject {
        message: Raw.TypeMessage;
        pts: int;
        ptsCount: int;
        constructor(params: {
            message: Raw.TypeMessage;
            pts: int;
            ptsCount: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateEditMessage>;
        write(): Buffer;
    }
    class UpdateInlineBotCallbackQuery extends TLObject {
        queryId: long;
        userId: long;
        msgId: Raw.TypeInputBotInlineMessageID;
        chatInstance: long;
        data?: bytes;
        gameShortName?: string;
        constructor(params: {
            queryId: long;
            userId: long;
            msgId: Raw.TypeInputBotInlineMessageID;
            chatInstance: long;
            data?: bytes;
            gameShortName?: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateInlineBotCallbackQuery>;
        write(): Buffer;
    }
    class UpdateReadChannelOutbox extends TLObject {
        channelId: long;
        maxId: int;
        constructor(params: {
            channelId: long;
            maxId: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateReadChannelOutbox>;
        write(): Buffer;
    }
    class UpdateDraftMessage extends TLObject {
        peer: Raw.TypePeer;
        topMsgId?: int;
        draft: Raw.TypeDraftMessage;
        constructor(params: {
            peer: Raw.TypePeer;
            topMsgId?: int;
            draft: Raw.TypeDraftMessage;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateDraftMessage>;
        write(): Buffer;
    }
    class UpdateReadFeaturedStickers extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateReadFeaturedStickers>;
        write(): Buffer;
    }
    class UpdateRecentStickers extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateRecentStickers>;
        write(): Buffer;
    }
    class UpdateConfig extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateConfig>;
        write(): Buffer;
    }
    class UpdatePtsChanged extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdatePtsChanged>;
        write(): Buffer;
    }
    class UpdateChannelWebPage extends TLObject {
        channelId: long;
        webpage: Raw.TypeWebPage;
        pts: int;
        ptsCount: int;
        constructor(params: {
            channelId: long;
            webpage: Raw.TypeWebPage;
            pts: int;
            ptsCount: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateChannelWebPage>;
        write(): Buffer;
    }
    class UpdateDialogPinned extends TLObject {
        pinned?: boolean;
        folderId?: int;
        peer: Raw.TypeDialogPeer;
        constructor(params: {
            pinned?: boolean;
            folderId?: int;
            peer: Raw.TypeDialogPeer;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateDialogPinned>;
        write(): Buffer;
    }
    class UpdatePinnedDialogs extends TLObject {
        folderId?: int;
        order?: Vector<Raw.TypeDialogPeer>;
        constructor(params: {
            folderId?: int;
            order?: Vector<Raw.TypeDialogPeer>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdatePinnedDialogs>;
        write(): Buffer;
    }
    class UpdateBotWebhookJSON extends TLObject {
        data: Raw.TypeDataJSON;
        constructor(params: {
            data: Raw.TypeDataJSON;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateBotWebhookJSON>;
        write(): Buffer;
    }
    class UpdateBotWebhookJSONQuery extends TLObject {
        queryId: long;
        data: Raw.TypeDataJSON;
        timeout: int;
        constructor(params: {
            queryId: long;
            data: Raw.TypeDataJSON;
            timeout: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateBotWebhookJSONQuery>;
        write(): Buffer;
    }
    class UpdateBotShippingQuery extends TLObject {
        queryId: long;
        userId: long;
        payload: bytes;
        shippingAddress: Raw.TypePostAddress;
        constructor(params: {
            queryId: long;
            userId: long;
            payload: bytes;
            shippingAddress: Raw.TypePostAddress;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateBotShippingQuery>;
        write(): Buffer;
    }
    class UpdateBotPrecheckoutQuery extends TLObject {
        queryId: long;
        userId: long;
        payload: bytes;
        info?: Raw.TypePaymentRequestedInfo;
        shippingOptionId?: string;
        currency: string;
        totalAmount: long;
        constructor(params: {
            queryId: long;
            userId: long;
            payload: bytes;
            info?: Raw.TypePaymentRequestedInfo;
            shippingOptionId?: string;
            currency: string;
            totalAmount: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateBotPrecheckoutQuery>;
        write(): Buffer;
    }
    class UpdatePhoneCall extends TLObject {
        phoneCall: Raw.TypePhoneCall;
        constructor(params: {
            phoneCall: Raw.TypePhoneCall;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdatePhoneCall>;
        write(): Buffer;
    }
    class UpdateLangPackTooLong extends TLObject {
        langCode: string;
        constructor(params: {
            langCode: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateLangPackTooLong>;
        write(): Buffer;
    }
    class UpdateLangPack extends TLObject {
        difference: Raw.TypeLangPackDifference;
        constructor(params: {
            difference: Raw.TypeLangPackDifference;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateLangPack>;
        write(): Buffer;
    }
    class UpdateFavedStickers extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateFavedStickers>;
        write(): Buffer;
    }
    class UpdateChannelReadMessagesContents extends TLObject {
        channelId: long;
        topMsgId?: int;
        messages: Vector<int>;
        constructor(params: {
            channelId: long;
            topMsgId?: int;
            messages: Vector<int>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateChannelReadMessagesContents>;
        write(): Buffer;
    }
    class UpdateContactsReset extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateContactsReset>;
        write(): Buffer;
    }
    class UpdateChannelAvailableMessages extends TLObject {
        channelId: long;
        availableMinId: int;
        constructor(params: {
            channelId: long;
            availableMinId: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateChannelAvailableMessages>;
        write(): Buffer;
    }
    class UpdateDialogUnreadMark extends TLObject {
        unread?: boolean;
        peer: Raw.TypeDialogPeer;
        constructor(params: {
            unread?: boolean;
            peer: Raw.TypeDialogPeer;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateDialogUnreadMark>;
        write(): Buffer;
    }
    class UpdateMessagePoll extends TLObject {
        pollId: long;
        poll?: Raw.TypePoll;
        results: Raw.TypePollResults;
        constructor(params: {
            pollId: long;
            poll?: Raw.TypePoll;
            results: Raw.TypePollResults;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateMessagePoll>;
        write(): Buffer;
    }
    class UpdateChatDefaultBannedRights extends TLObject {
        peer: Raw.TypePeer;
        defaultBannedRights: Raw.TypeChatBannedRights;
        version: int;
        constructor(params: {
            peer: Raw.TypePeer;
            defaultBannedRights: Raw.TypeChatBannedRights;
            version: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateChatDefaultBannedRights>;
        write(): Buffer;
    }
    class UpdateFolderPeers extends TLObject {
        folderPeers: Vector<Raw.TypeFolderPeer>;
        pts: int;
        ptsCount: int;
        constructor(params: {
            folderPeers: Vector<Raw.TypeFolderPeer>;
            pts: int;
            ptsCount: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateFolderPeers>;
        write(): Buffer;
    }
    class UpdatePeerSettings extends TLObject {
        peer: Raw.TypePeer;
        settings: Raw.TypePeerSettings;
        constructor(params: {
            peer: Raw.TypePeer;
            settings: Raw.TypePeerSettings;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdatePeerSettings>;
        write(): Buffer;
    }
    class UpdatePeerLocated extends TLObject {
        peers: Vector<Raw.TypePeerLocated>;
        constructor(params: {
            peers: Vector<Raw.TypePeerLocated>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdatePeerLocated>;
        write(): Buffer;
    }
    class UpdateNewScheduledMessage extends TLObject {
        message: Raw.TypeMessage;
        constructor(params: {
            message: Raw.TypeMessage;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateNewScheduledMessage>;
        write(): Buffer;
    }
    class UpdateDeleteScheduledMessages extends TLObject {
        peer: Raw.TypePeer;
        messages: Vector<int>;
        constructor(params: {
            peer: Raw.TypePeer;
            messages: Vector<int>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateDeleteScheduledMessages>;
        write(): Buffer;
    }
    class UpdateTheme extends TLObject {
        theme: Raw.TypeTheme;
        constructor(params: {
            theme: Raw.TypeTheme;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateTheme>;
        write(): Buffer;
    }
    class UpdateGeoLiveViewed extends TLObject {
        peer: Raw.TypePeer;
        msgId: int;
        constructor(params: {
            peer: Raw.TypePeer;
            msgId: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateGeoLiveViewed>;
        write(): Buffer;
    }
    class UpdateLoginToken extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateLoginToken>;
        write(): Buffer;
    }
    class UpdateMessagePollVote extends TLObject {
        pollId: long;
        peer: Raw.TypePeer;
        options: Vector<bytes>;
        qts: int;
        constructor(params: {
            pollId: long;
            peer: Raw.TypePeer;
            options: Vector<bytes>;
            qts: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateMessagePollVote>;
        write(): Buffer;
    }
    class UpdateDialogFilter extends TLObject {
        id: int;
        filter?: Raw.TypeDialogFilter;
        constructor(params: {
            id: int;
            filter?: Raw.TypeDialogFilter;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateDialogFilter>;
        write(): Buffer;
    }
    class UpdateDialogFilterOrder extends TLObject {
        order: Vector<int>;
        constructor(params: {
            order: Vector<int>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateDialogFilterOrder>;
        write(): Buffer;
    }
    class UpdateDialogFilters extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateDialogFilters>;
        write(): Buffer;
    }
    class UpdatePhoneCallSignalingData extends TLObject {
        phoneCallId: long;
        data: bytes;
        constructor(params: {
            phoneCallId: long;
            data: bytes;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdatePhoneCallSignalingData>;
        write(): Buffer;
    }
    class UpdateChannelMessageForwards extends TLObject {
        channelId: long;
        id: int;
        forwards: int;
        constructor(params: {
            channelId: long;
            id: int;
            forwards: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateChannelMessageForwards>;
        write(): Buffer;
    }
    class UpdateReadChannelDiscussionInbox extends TLObject {
        channelId: long;
        topMsgId: int;
        readMaxId: int;
        broadcastId?: long;
        broadcastPost?: int;
        constructor(params: {
            channelId: long;
            topMsgId: int;
            readMaxId: int;
            broadcastId?: long;
            broadcastPost?: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateReadChannelDiscussionInbox>;
        write(): Buffer;
    }
    class UpdateReadChannelDiscussionOutbox extends TLObject {
        channelId: long;
        topMsgId: int;
        readMaxId: int;
        constructor(params: {
            channelId: long;
            topMsgId: int;
            readMaxId: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateReadChannelDiscussionOutbox>;
        write(): Buffer;
    }
    class UpdatePeerBlocked extends TLObject {
        blocked?: boolean;
        blockedMyStoriesFrom?: boolean;
        peerId: Raw.TypePeer;
        constructor(params: {
            blocked?: boolean;
            blockedMyStoriesFrom?: boolean;
            peerId: Raw.TypePeer;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdatePeerBlocked>;
        write(): Buffer;
    }
    class UpdateChannelUserTyping extends TLObject {
        channelId: long;
        topMsgId?: int;
        fromId: Raw.TypePeer;
        action: Raw.TypeSendMessageAction;
        constructor(params: {
            channelId: long;
            topMsgId?: int;
            fromId: Raw.TypePeer;
            action: Raw.TypeSendMessageAction;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateChannelUserTyping>;
        write(): Buffer;
    }
    class UpdatePinnedMessages extends TLObject {
        pinned?: boolean;
        peer: Raw.TypePeer;
        messages: Vector<int>;
        pts: int;
        ptsCount: int;
        constructor(params: {
            pinned?: boolean;
            peer: Raw.TypePeer;
            messages: Vector<int>;
            pts: int;
            ptsCount: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdatePinnedMessages>;
        write(): Buffer;
    }
    class UpdatePinnedChannelMessages extends TLObject {
        pinned?: boolean;
        channelId: long;
        messages: Vector<int>;
        pts: int;
        ptsCount: int;
        constructor(params: {
            pinned?: boolean;
            channelId: long;
            messages: Vector<int>;
            pts: int;
            ptsCount: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdatePinnedChannelMessages>;
        write(): Buffer;
    }
    class UpdateChat extends TLObject {
        chatId: long;
        constructor(params: {
            chatId: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateChat>;
        write(): Buffer;
    }
    class UpdateGroupCallParticipants extends TLObject {
        call: Raw.TypeInputGroupCall;
        participants: Vector<Raw.TypeGroupCallParticipant>;
        version: int;
        constructor(params: {
            call: Raw.TypeInputGroupCall;
            participants: Vector<Raw.TypeGroupCallParticipant>;
            version: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateGroupCallParticipants>;
        write(): Buffer;
    }
    class UpdateGroupCall extends TLObject {
        chatId: long;
        call: Raw.TypeGroupCall;
        constructor(params: {
            chatId: long;
            call: Raw.TypeGroupCall;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateGroupCall>;
        write(): Buffer;
    }
    class UpdatePeerHistoryTTL extends TLObject {
        peer: Raw.TypePeer;
        ttlPeriod?: int;
        constructor(params: {
            peer: Raw.TypePeer;
            ttlPeriod?: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdatePeerHistoryTTL>;
        write(): Buffer;
    }
    class UpdateChatParticipant extends TLObject {
        chatId: long;
        date: int;
        actorId: long;
        userId: long;
        prevParticipant?: Raw.TypeChatParticipant;
        newParticipant?: Raw.TypeChatParticipant;
        invite?: Raw.TypeExportedChatInvite;
        qts: int;
        constructor(params: {
            chatId: long;
            date: int;
            actorId: long;
            userId: long;
            prevParticipant?: Raw.TypeChatParticipant;
            newParticipant?: Raw.TypeChatParticipant;
            invite?: Raw.TypeExportedChatInvite;
            qts: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateChatParticipant>;
        write(): Buffer;
    }
    class UpdateChannelParticipant extends TLObject {
        viaChatlist?: boolean;
        channelId: long;
        date: int;
        actorId: long;
        userId: long;
        prevParticipant?: Raw.TypeChannelParticipant;
        newParticipant?: Raw.TypeChannelParticipant;
        invite?: Raw.TypeExportedChatInvite;
        qts: int;
        constructor(params: {
            viaChatlist?: boolean;
            channelId: long;
            date: int;
            actorId: long;
            userId: long;
            prevParticipant?: Raw.TypeChannelParticipant;
            newParticipant?: Raw.TypeChannelParticipant;
            invite?: Raw.TypeExportedChatInvite;
            qts: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateChannelParticipant>;
        write(): Buffer;
    }
    class UpdateBotStopped extends TLObject {
        userId: long;
        date: int;
        stopped: Bool;
        qts: int;
        constructor(params: {
            userId: long;
            date: int;
            stopped: Bool;
            qts: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateBotStopped>;
        write(): Buffer;
    }
    class UpdateGroupCallConnection extends TLObject {
        presentation?: boolean;
        params: Raw.TypeDataJSON;
        constructor(params: {
            presentation?: boolean;
            params: Raw.TypeDataJSON;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateGroupCallConnection>;
        write(): Buffer;
    }
    class UpdateBotCommands extends TLObject {
        peer: Raw.TypePeer;
        botId: long;
        commands: Vector<Raw.TypeBotCommand>;
        constructor(params: {
            peer: Raw.TypePeer;
            botId: long;
            commands: Vector<Raw.TypeBotCommand>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateBotCommands>;
        write(): Buffer;
    }
    class UpdatePendingJoinRequests extends TLObject {
        peer: Raw.TypePeer;
        requestsPending: int;
        recentRequesters: Vector<long>;
        constructor(params: {
            peer: Raw.TypePeer;
            requestsPending: int;
            recentRequesters: Vector<long>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdatePendingJoinRequests>;
        write(): Buffer;
    }
    class UpdateBotChatInviteRequester extends TLObject {
        peer: Raw.TypePeer;
        date: int;
        userId: long;
        about: string;
        invite: Raw.TypeExportedChatInvite;
        qts: int;
        constructor(params: {
            peer: Raw.TypePeer;
            date: int;
            userId: long;
            about: string;
            invite: Raw.TypeExportedChatInvite;
            qts: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateBotChatInviteRequester>;
        write(): Buffer;
    }
    class UpdateMessageReactions extends TLObject {
        peer: Raw.TypePeer;
        msgId: int;
        topMsgId?: int;
        reactions: Raw.TypeMessageReactions;
        constructor(params: {
            peer: Raw.TypePeer;
            msgId: int;
            topMsgId?: int;
            reactions: Raw.TypeMessageReactions;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateMessageReactions>;
        write(): Buffer;
    }
    class UpdateAttachMenuBots extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateAttachMenuBots>;
        write(): Buffer;
    }
    class UpdateWebViewResultSent extends TLObject {
        queryId: long;
        constructor(params: {
            queryId: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateWebViewResultSent>;
        write(): Buffer;
    }
    class UpdateBotMenuButton extends TLObject {
        botId: long;
        button: Raw.TypeBotMenuButton;
        constructor(params: {
            botId: long;
            button: Raw.TypeBotMenuButton;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateBotMenuButton>;
        write(): Buffer;
    }
    class UpdateSavedRingtones extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateSavedRingtones>;
        write(): Buffer;
    }
    class UpdateTranscribedAudio extends TLObject {
        pending?: boolean;
        peer: Raw.TypePeer;
        msgId: int;
        transcriptionId: long;
        text: string;
        constructor(params: {
            pending?: boolean;
            peer: Raw.TypePeer;
            msgId: int;
            transcriptionId: long;
            text: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateTranscribedAudio>;
        write(): Buffer;
    }
    class UpdateReadFeaturedEmojiStickers extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateReadFeaturedEmojiStickers>;
        write(): Buffer;
    }
    class UpdateUserEmojiStatus extends TLObject {
        userId: long;
        emojiStatus: Raw.TypeEmojiStatus;
        constructor(params: {
            userId: long;
            emojiStatus: Raw.TypeEmojiStatus;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateUserEmojiStatus>;
        write(): Buffer;
    }
    class UpdateRecentEmojiStatuses extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateRecentEmojiStatuses>;
        write(): Buffer;
    }
    class UpdateRecentReactions extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateRecentReactions>;
        write(): Buffer;
    }
    class UpdateMoveStickerSetToTop extends TLObject {
        masks?: boolean;
        emojis?: boolean;
        stickerset: long;
        constructor(params: {
            masks?: boolean;
            emojis?: boolean;
            stickerset: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateMoveStickerSetToTop>;
        write(): Buffer;
    }
    class UpdateMessageExtendedMedia extends TLObject {
        peer: Raw.TypePeer;
        msgId: int;
        extendedMedia: Raw.TypeMessageExtendedMedia;
        constructor(params: {
            peer: Raw.TypePeer;
            msgId: int;
            extendedMedia: Raw.TypeMessageExtendedMedia;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateMessageExtendedMedia>;
        write(): Buffer;
    }
    class UpdateChannelPinnedTopic extends TLObject {
        pinned?: boolean;
        channelId: long;
        topicId: int;
        constructor(params: {
            pinned?: boolean;
            channelId: long;
            topicId: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateChannelPinnedTopic>;
        write(): Buffer;
    }
    class UpdateChannelPinnedTopics extends TLObject {
        channelId: long;
        order?: Vector<int>;
        constructor(params: {
            channelId: long;
            order?: Vector<int>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateChannelPinnedTopics>;
        write(): Buffer;
    }
    class UpdateUser extends TLObject {
        userId: long;
        constructor(params: {
            userId: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateUser>;
        write(): Buffer;
    }
    class UpdateAutoSaveSettings extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateAutoSaveSettings>;
        write(): Buffer;
    }
    class UpdateStory extends TLObject {
        peer: Raw.TypePeer;
        story: Raw.TypeStoryItem;
        constructor(params: {
            peer: Raw.TypePeer;
            story: Raw.TypeStoryItem;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateStory>;
        write(): Buffer;
    }
    class UpdateReadStories extends TLObject {
        peer: Raw.TypePeer;
        maxId: int;
        constructor(params: {
            peer: Raw.TypePeer;
            maxId: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateReadStories>;
        write(): Buffer;
    }
    class UpdateStoryID extends TLObject {
        id: int;
        randomId: long;
        constructor(params: {
            id: int;
            randomId: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateStoryID>;
        write(): Buffer;
    }
    class UpdateStoriesStealthMode extends TLObject {
        stealthMode: Raw.TypeStoriesStealthMode;
        constructor(params: {
            stealthMode: Raw.TypeStoriesStealthMode;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateStoriesStealthMode>;
        write(): Buffer;
    }
    class UpdateSentStoryReaction extends TLObject {
        peer: Raw.TypePeer;
        storyId: int;
        reaction: Raw.TypeReaction;
        constructor(params: {
            peer: Raw.TypePeer;
            storyId: int;
            reaction: Raw.TypeReaction;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateSentStoryReaction>;
        write(): Buffer;
    }
    class UpdateBotChatBoost extends TLObject {
        peer: Raw.TypePeer;
        boost: Raw.TypeBoost;
        qts: int;
        constructor(params: {
            peer: Raw.TypePeer;
            boost: Raw.TypeBoost;
            qts: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateBotChatBoost>;
        write(): Buffer;
    }
    class UpdateChannelViewForumAsMessages extends TLObject {
        channelId: long;
        enabled: Bool;
        constructor(params: {
            channelId: long;
            enabled: Bool;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateChannelViewForumAsMessages>;
        write(): Buffer;
    }
    class UpdatePeerWallpaper extends TLObject {
        wallpaperOverridden?: boolean;
        peer: Raw.TypePeer;
        wallpaper?: Raw.TypeWallPaper;
        constructor(params: {
            wallpaperOverridden?: boolean;
            peer: Raw.TypePeer;
            wallpaper?: Raw.TypeWallPaper;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdatePeerWallpaper>;
        write(): Buffer;
    }
    class UpdateBotMessageReaction extends TLObject {
        peer: Raw.TypePeer;
        msgId: int;
        date: int;
        actor: Raw.TypePeer;
        oldReactions: Vector<Raw.TypeReaction>;
        newReactions: Vector<Raw.TypeReaction>;
        qts: int;
        constructor(params: {
            peer: Raw.TypePeer;
            msgId: int;
            date: int;
            actor: Raw.TypePeer;
            oldReactions: Vector<Raw.TypeReaction>;
            newReactions: Vector<Raw.TypeReaction>;
            qts: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateBotMessageReaction>;
        write(): Buffer;
    }
    class UpdateBotMessageReactions extends TLObject {
        peer: Raw.TypePeer;
        msgId: int;
        date: int;
        reactions: Vector<Raw.TypeReactionCount>;
        qts: int;
        constructor(params: {
            peer: Raw.TypePeer;
            msgId: int;
            date: int;
            reactions: Vector<Raw.TypeReactionCount>;
            qts: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateBotMessageReactions>;
        write(): Buffer;
    }
    class UpdateSavedDialogPinned extends TLObject {
        pinned?: boolean;
        peer: Raw.TypeDialogPeer;
        constructor(params: {
            pinned?: boolean;
            peer: Raw.TypeDialogPeer;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateSavedDialogPinned>;
        write(): Buffer;
    }
    class UpdatePinnedSavedDialogs extends TLObject {
        order?: Vector<Raw.TypeDialogPeer>;
        constructor(params: {
            order?: Vector<Raw.TypeDialogPeer>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdatePinnedSavedDialogs>;
        write(): Buffer;
    }
    class UpdateSavedReactionTags extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateSavedReactionTags>;
        write(): Buffer;
    }
    class UpdateSmsJob extends TLObject {
        jobId: string;
        constructor(params: {
            jobId: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateSmsJob>;
        write(): Buffer;
    }
    class UpdateQuickReplies extends TLObject {
        quickReplies: Vector<Raw.TypeQuickReply>;
        constructor(params: {
            quickReplies: Vector<Raw.TypeQuickReply>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateQuickReplies>;
        write(): Buffer;
    }
    class UpdateNewQuickReply extends TLObject {
        quickReply: Raw.TypeQuickReply;
        constructor(params: {
            quickReply: Raw.TypeQuickReply;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateNewQuickReply>;
        write(): Buffer;
    }
    class UpdateDeleteQuickReply extends TLObject {
        shortcutId: int;
        constructor(params: {
            shortcutId: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateDeleteQuickReply>;
        write(): Buffer;
    }
    class UpdateQuickReplyMessage extends TLObject {
        message: Raw.TypeMessage;
        constructor(params: {
            message: Raw.TypeMessage;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateQuickReplyMessage>;
        write(): Buffer;
    }
    class UpdateDeleteQuickReplyMessages extends TLObject {
        shortcutId: int;
        messages: Vector<int>;
        constructor(params: {
            shortcutId: int;
            messages: Vector<int>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateDeleteQuickReplyMessages>;
        write(): Buffer;
    }
    class UpdateBotBusinessConnect extends TLObject {
        connection: Raw.TypeBotBusinessConnection;
        qts: int;
        constructor(params: {
            connection: Raw.TypeBotBusinessConnection;
            qts: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateBotBusinessConnect>;
        write(): Buffer;
    }
    class UpdateBotNewBusinessMessage extends TLObject {
        connectionId: string;
        message: Raw.TypeMessage;
        replyToMessage?: Raw.TypeMessage;
        qts: int;
        constructor(params: {
            connectionId: string;
            message: Raw.TypeMessage;
            replyToMessage?: Raw.TypeMessage;
            qts: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateBotNewBusinessMessage>;
        write(): Buffer;
    }
    class UpdateBotEditBusinessMessage extends TLObject {
        connectionId: string;
        message: Raw.TypeMessage;
        replyToMessage?: Raw.TypeMessage;
        qts: int;
        constructor(params: {
            connectionId: string;
            message: Raw.TypeMessage;
            replyToMessage?: Raw.TypeMessage;
            qts: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateBotEditBusinessMessage>;
        write(): Buffer;
    }
    class UpdateBotDeleteBusinessMessage extends TLObject {
        connectionId: string;
        peer: Raw.TypePeer;
        messages: Vector<int>;
        qts: int;
        constructor(params: {
            connectionId: string;
            peer: Raw.TypePeer;
            messages: Vector<int>;
            qts: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateBotDeleteBusinessMessage>;
        write(): Buffer;
    }
    class UpdateNewStoryReaction extends TLObject {
        storyId: int;
        peer: Raw.TypePeer;
        reaction: Raw.TypeReaction;
        constructor(params: {
            storyId: int;
            peer: Raw.TypePeer;
            reaction: Raw.TypeReaction;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateNewStoryReaction>;
        write(): Buffer;
    }
    class UpdateBroadcastRevenueTransactions extends TLObject {
        peer: Raw.TypePeer;
        balances: Raw.TypeBroadcastRevenueBalances;
        constructor(params: {
            peer: Raw.TypePeer;
            balances: Raw.TypeBroadcastRevenueBalances;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateBroadcastRevenueTransactions>;
        write(): Buffer;
    }
    class UpdateStarsBalance extends TLObject {
        balance: long;
        constructor(params: {
            balance: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateStarsBalance>;
        write(): Buffer;
    }
    class UpdatesTooLong extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdatesTooLong>;
        write(): Buffer;
    }
    class UpdateShortMessage extends TLObject {
        out?: boolean;
        mentioned?: boolean;
        mediaUnread?: boolean;
        silent?: boolean;
        id: int;
        userId: long;
        message: string;
        pts: int;
        ptsCount: int;
        date: int;
        fwdFrom?: Raw.TypeMessageFwdHeader;
        viaBotId?: long;
        replyTo?: Raw.TypeMessageReplyHeader;
        entities?: Vector<Raw.TypeMessageEntity>;
        ttlPeriod?: int;
        constructor(params: {
            out?: boolean;
            mentioned?: boolean;
            mediaUnread?: boolean;
            silent?: boolean;
            id: int;
            userId: long;
            message: string;
            pts: int;
            ptsCount: int;
            date: int;
            fwdFrom?: Raw.TypeMessageFwdHeader;
            viaBotId?: long;
            replyTo?: Raw.TypeMessageReplyHeader;
            entities?: Vector<Raw.TypeMessageEntity>;
            ttlPeriod?: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateShortMessage>;
        write(): Buffer;
    }
    class UpdateShortChatMessage extends TLObject {
        out?: boolean;
        mentioned?: boolean;
        mediaUnread?: boolean;
        silent?: boolean;
        id: int;
        fromId: long;
        chatId: long;
        message: string;
        pts: int;
        ptsCount: int;
        date: int;
        fwdFrom?: Raw.TypeMessageFwdHeader;
        viaBotId?: long;
        replyTo?: Raw.TypeMessageReplyHeader;
        entities?: Vector<Raw.TypeMessageEntity>;
        ttlPeriod?: int;
        constructor(params: {
            out?: boolean;
            mentioned?: boolean;
            mediaUnread?: boolean;
            silent?: boolean;
            id: int;
            fromId: long;
            chatId: long;
            message: string;
            pts: int;
            ptsCount: int;
            date: int;
            fwdFrom?: Raw.TypeMessageFwdHeader;
            viaBotId?: long;
            replyTo?: Raw.TypeMessageReplyHeader;
            entities?: Vector<Raw.TypeMessageEntity>;
            ttlPeriod?: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateShortChatMessage>;
        write(): Buffer;
    }
    class UpdateShort extends TLObject {
        update: Raw.TypeUpdate;
        date: int;
        constructor(params: {
            update: Raw.TypeUpdate;
            date: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateShort>;
        write(): Buffer;
    }
    class UpdatesCombined extends TLObject {
        updates: Vector<Raw.TypeUpdate>;
        users: Vector<Raw.TypeUser>;
        chats: Vector<Raw.TypeChat>;
        date: int;
        seqStart: int;
        seq: int;
        constructor(params: {
            updates: Vector<Raw.TypeUpdate>;
            users: Vector<Raw.TypeUser>;
            chats: Vector<Raw.TypeChat>;
            date: int;
            seqStart: int;
            seq: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdatesCombined>;
        write(): Buffer;
    }
    class Updates extends TLObject {
        updates: Vector<Raw.TypeUpdate>;
        users: Vector<Raw.TypeUser>;
        chats: Vector<Raw.TypeChat>;
        date: int;
        seq: int;
        constructor(params: {
            updates: Vector<Raw.TypeUpdate>;
            users: Vector<Raw.TypeUser>;
            chats: Vector<Raw.TypeChat>;
            date: int;
            seq: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.Updates>;
        write(): Buffer;
    }
    class UpdateShortSentMessage extends TLObject {
        out?: boolean;
        id: int;
        pts: int;
        ptsCount: int;
        date: int;
        media?: Raw.TypeMessageMedia;
        entities?: Vector<Raw.TypeMessageEntity>;
        ttlPeriod?: int;
        constructor(params: {
            out?: boolean;
            id: int;
            pts: int;
            ptsCount: int;
            date: int;
            media?: Raw.TypeMessageMedia;
            entities?: Vector<Raw.TypeMessageEntity>;
            ttlPeriod?: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UpdateShortSentMessage>;
        write(): Buffer;
    }
    class DcOption extends TLObject {
        ipv6?: boolean;
        mediaOnly?: boolean;
        tcpoOnly?: boolean;
        cdn?: boolean;
        static?: boolean;
        thisPortOnly?: boolean;
        id: int;
        ipAddress: string;
        port: int;
        secret?: bytes;
        constructor(params: {
            ipv6?: boolean;
            mediaOnly?: boolean;
            tcpoOnly?: boolean;
            cdn?: boolean;
            static?: boolean;
            thisPortOnly?: boolean;
            id: int;
            ipAddress: string;
            port: int;
            secret?: bytes;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DcOption>;
        write(): Buffer;
    }
    class Config extends TLObject {
        defaultP2pContacts?: boolean;
        preloadFeaturedStickers?: boolean;
        revokePmInbox?: boolean;
        blockedMode?: boolean;
        forceTryIpv6?: boolean;
        date: int;
        expires: int;
        testMode: Bool;
        thisDc: int;
        dcOptions: Vector<Raw.TypeDcOption>;
        dcTxtDomainName: string;
        chatSizeMax: int;
        megagroupSizeMax: int;
        forwardedCountMax: int;
        onlineUpdatePeriodMs: int;
        offlineBlurTimeoutMs: int;
        offlineIdleTimeoutMs: int;
        onlineCloudTimeoutMs: int;
        notifyCloudDelayMs: int;
        notifyDefaultDelayMs: int;
        pushChatPeriodMs: int;
        pushChatLimit: int;
        editTimeLimit: int;
        revokeTimeLimit: int;
        revokePmTimeLimit: int;
        ratingEDecay: int;
        stickersRecentLimit: int;
        channelsReadMediaPeriod: int;
        tmpSessions?: int;
        callReceiveTimeoutMs: int;
        callRingTimeoutMs: int;
        callConnectTimeoutMs: int;
        callPacketTimeoutMs: int;
        meUrlPrefix: string;
        autoupdateUrlPrefix?: string;
        gifSearchUsername?: string;
        venueSearchUsername?: string;
        imgSearchUsername?: string;
        staticMapsProvider?: string;
        captionLengthMax: int;
        messageLengthMax: int;
        webfileDcId: int;
        suggestedLangCode?: string;
        langPackVersion?: int;
        baseLangPackVersion?: int;
        reactionsDefault?: Raw.TypeReaction;
        autologinToken?: string;
        constructor(params: {
            defaultP2pContacts?: boolean;
            preloadFeaturedStickers?: boolean;
            revokePmInbox?: boolean;
            blockedMode?: boolean;
            forceTryIpv6?: boolean;
            date: int;
            expires: int;
            testMode: Bool;
            thisDc: int;
            dcOptions: Vector<Raw.TypeDcOption>;
            dcTxtDomainName: string;
            chatSizeMax: int;
            megagroupSizeMax: int;
            forwardedCountMax: int;
            onlineUpdatePeriodMs: int;
            offlineBlurTimeoutMs: int;
            offlineIdleTimeoutMs: int;
            onlineCloudTimeoutMs: int;
            notifyCloudDelayMs: int;
            notifyDefaultDelayMs: int;
            pushChatPeriodMs: int;
            pushChatLimit: int;
            editTimeLimit: int;
            revokeTimeLimit: int;
            revokePmTimeLimit: int;
            ratingEDecay: int;
            stickersRecentLimit: int;
            channelsReadMediaPeriod: int;
            tmpSessions?: int;
            callReceiveTimeoutMs: int;
            callRingTimeoutMs: int;
            callConnectTimeoutMs: int;
            callPacketTimeoutMs: int;
            meUrlPrefix: string;
            autoupdateUrlPrefix?: string;
            gifSearchUsername?: string;
            venueSearchUsername?: string;
            imgSearchUsername?: string;
            staticMapsProvider?: string;
            captionLengthMax: int;
            messageLengthMax: int;
            webfileDcId: int;
            suggestedLangCode?: string;
            langPackVersion?: int;
            baseLangPackVersion?: int;
            reactionsDefault?: Raw.TypeReaction;
            autologinToken?: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.Config>;
        write(): Buffer;
    }
    class NearestDc extends TLObject {
        country: string;
        thisDc: int;
        nearestDc: int;
        constructor(params: {
            country: string;
            thisDc: int;
            nearestDc: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.NearestDc>;
        write(): Buffer;
    }
    class EncryptedChatEmpty extends TLObject {
        id: int;
        constructor(params: {
            id: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.EncryptedChatEmpty>;
        write(): Buffer;
    }
    class EncryptedChatWaiting extends TLObject {
        id: int;
        accessHash: long;
        date: int;
        adminId: long;
        participantId: long;
        constructor(params: {
            id: int;
            accessHash: long;
            date: int;
            adminId: long;
            participantId: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.EncryptedChatWaiting>;
        write(): Buffer;
    }
    class EncryptedChatRequested extends TLObject {
        folderId?: int;
        id: int;
        accessHash: long;
        date: int;
        adminId: long;
        participantId: long;
        gA: bytes;
        constructor(params: {
            folderId?: int;
            id: int;
            accessHash: long;
            date: int;
            adminId: long;
            participantId: long;
            gA: bytes;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.EncryptedChatRequested>;
        write(): Buffer;
    }
    class EncryptedChat extends TLObject {
        id: int;
        accessHash: long;
        date: int;
        adminId: long;
        participantId: long;
        gAOrB: bytes;
        keyFingerprint: long;
        constructor(params: {
            id: int;
            accessHash: long;
            date: int;
            adminId: long;
            participantId: long;
            gAOrB: bytes;
            keyFingerprint: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.EncryptedChat>;
        write(): Buffer;
    }
    class EncryptedChatDiscarded extends TLObject {
        historyDeleted?: boolean;
        id: int;
        constructor(params: {
            historyDeleted?: boolean;
            id: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.EncryptedChatDiscarded>;
        write(): Buffer;
    }
    class InputEncryptedChat extends TLObject {
        chatId: int;
        accessHash: long;
        constructor(params: {
            chatId: int;
            accessHash: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputEncryptedChat>;
        write(): Buffer;
    }
    class EncryptedFileEmpty extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.EncryptedFileEmpty>;
        write(): Buffer;
    }
    class EncryptedFile extends TLObject {
        id: long;
        accessHash: long;
        size: long;
        dcId: int;
        keyFingerprint: int;
        constructor(params: {
            id: long;
            accessHash: long;
            size: long;
            dcId: int;
            keyFingerprint: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.EncryptedFile>;
        write(): Buffer;
    }
    class InputEncryptedFileEmpty extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputEncryptedFileEmpty>;
        write(): Buffer;
    }
    class InputEncryptedFileUploaded extends TLObject {
        id: long;
        parts: int;
        md5Checksum: string;
        keyFingerprint: int;
        constructor(params: {
            id: long;
            parts: int;
            md5Checksum: string;
            keyFingerprint: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputEncryptedFileUploaded>;
        write(): Buffer;
    }
    class InputEncryptedFile extends TLObject {
        id: long;
        accessHash: long;
        constructor(params: {
            id: long;
            accessHash: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputEncryptedFile>;
        write(): Buffer;
    }
    class InputEncryptedFileBigUploaded extends TLObject {
        id: long;
        parts: int;
        keyFingerprint: int;
        constructor(params: {
            id: long;
            parts: int;
            keyFingerprint: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputEncryptedFileBigUploaded>;
        write(): Buffer;
    }
    class EncryptedMessage extends TLObject {
        randomId: long;
        chatId: int;
        date: int;
        bytes: bytes;
        file: Raw.TypeEncryptedFile;
        constructor(params: {
            randomId: long;
            chatId: int;
            date: int;
            bytes: bytes;
            file: Raw.TypeEncryptedFile;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.EncryptedMessage>;
        write(): Buffer;
    }
    class EncryptedMessageService extends TLObject {
        randomId: long;
        chatId: int;
        date: int;
        bytes: bytes;
        constructor(params: {
            randomId: long;
            chatId: int;
            date: int;
            bytes: bytes;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.EncryptedMessageService>;
        write(): Buffer;
    }
    class InputDocumentEmpty extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputDocumentEmpty>;
        write(): Buffer;
    }
    class InputDocument extends TLObject {
        id: long;
        accessHash: long;
        fileReference: bytes;
        constructor(params: {
            id: long;
            accessHash: long;
            fileReference: bytes;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputDocument>;
        write(): Buffer;
    }
    class DocumentEmpty extends TLObject {
        id: long;
        constructor(params: {
            id: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DocumentEmpty>;
        write(): Buffer;
    }
    class Document extends TLObject {
        id: long;
        accessHash: long;
        fileReference: bytes;
        date: int;
        mimeType: string;
        size: long;
        thumbs?: Vector<Raw.TypePhotoSize>;
        videoThumbs?: Vector<Raw.TypeVideoSize>;
        dcId: int;
        attributes: Vector<Raw.TypeDocumentAttribute>;
        constructor(params: {
            id: long;
            accessHash: long;
            fileReference: bytes;
            date: int;
            mimeType: string;
            size: long;
            thumbs?: Vector<Raw.TypePhotoSize>;
            videoThumbs?: Vector<Raw.TypeVideoSize>;
            dcId: int;
            attributes: Vector<Raw.TypeDocumentAttribute>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.Document>;
        write(): Buffer;
    }
    class NotifyPeer extends TLObject {
        peer: Raw.TypePeer;
        constructor(params: {
            peer: Raw.TypePeer;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.NotifyPeer>;
        write(): Buffer;
    }
    class NotifyUsers extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.NotifyUsers>;
        write(): Buffer;
    }
    class NotifyChats extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.NotifyChats>;
        write(): Buffer;
    }
    class NotifyBroadcasts extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.NotifyBroadcasts>;
        write(): Buffer;
    }
    class NotifyForumTopic extends TLObject {
        peer: Raw.TypePeer;
        topMsgId: int;
        constructor(params: {
            peer: Raw.TypePeer;
            topMsgId: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.NotifyForumTopic>;
        write(): Buffer;
    }
    class SendMessageTypingAction extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SendMessageTypingAction>;
        write(): Buffer;
    }
    class SendMessageCancelAction extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SendMessageCancelAction>;
        write(): Buffer;
    }
    class SendMessageRecordVideoAction extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SendMessageRecordVideoAction>;
        write(): Buffer;
    }
    class SendMessageUploadVideoAction extends TLObject {
        progress: int;
        constructor(params: {
            progress: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SendMessageUploadVideoAction>;
        write(): Buffer;
    }
    class SendMessageRecordAudioAction extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SendMessageRecordAudioAction>;
        write(): Buffer;
    }
    class SendMessageUploadAudioAction extends TLObject {
        progress: int;
        constructor(params: {
            progress: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SendMessageUploadAudioAction>;
        write(): Buffer;
    }
    class SendMessageUploadPhotoAction extends TLObject {
        progress: int;
        constructor(params: {
            progress: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SendMessageUploadPhotoAction>;
        write(): Buffer;
    }
    class SendMessageUploadDocumentAction extends TLObject {
        progress: int;
        constructor(params: {
            progress: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SendMessageUploadDocumentAction>;
        write(): Buffer;
    }
    class SendMessageGeoLocationAction extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SendMessageGeoLocationAction>;
        write(): Buffer;
    }
    class SendMessageChooseContactAction extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SendMessageChooseContactAction>;
        write(): Buffer;
    }
    class SendMessageGamePlayAction extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SendMessageGamePlayAction>;
        write(): Buffer;
    }
    class SendMessageRecordRoundAction extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SendMessageRecordRoundAction>;
        write(): Buffer;
    }
    class SendMessageUploadRoundAction extends TLObject {
        progress: int;
        constructor(params: {
            progress: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SendMessageUploadRoundAction>;
        write(): Buffer;
    }
    class SpeakingInGroupCallAction extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SpeakingInGroupCallAction>;
        write(): Buffer;
    }
    class SendMessageHistoryImportAction extends TLObject {
        progress: int;
        constructor(params: {
            progress: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SendMessageHistoryImportAction>;
        write(): Buffer;
    }
    class SendMessageChooseStickerAction extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SendMessageChooseStickerAction>;
        write(): Buffer;
    }
    class SendMessageEmojiInteraction extends TLObject {
        emoticon: string;
        msgId: int;
        interaction: Raw.TypeDataJSON;
        constructor(params: {
            emoticon: string;
            msgId: int;
            interaction: Raw.TypeDataJSON;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SendMessageEmojiInteraction>;
        write(): Buffer;
    }
    class SendMessageEmojiInteractionSeen extends TLObject {
        emoticon: string;
        constructor(params: {
            emoticon: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SendMessageEmojiInteractionSeen>;
        write(): Buffer;
    }
    class InputPrivacyKeyStatusTimestamp extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputPrivacyKeyStatusTimestamp>;
        write(): Buffer;
    }
    class InputPrivacyKeyChatInvite extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputPrivacyKeyChatInvite>;
        write(): Buffer;
    }
    class InputPrivacyKeyPhoneCall extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputPrivacyKeyPhoneCall>;
        write(): Buffer;
    }
    class InputPrivacyKeyPhoneP2P extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputPrivacyKeyPhoneP2P>;
        write(): Buffer;
    }
    class InputPrivacyKeyForwards extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputPrivacyKeyForwards>;
        write(): Buffer;
    }
    class InputPrivacyKeyProfilePhoto extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputPrivacyKeyProfilePhoto>;
        write(): Buffer;
    }
    class InputPrivacyKeyPhoneNumber extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputPrivacyKeyPhoneNumber>;
        write(): Buffer;
    }
    class InputPrivacyKeyAddedByPhone extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputPrivacyKeyAddedByPhone>;
        write(): Buffer;
    }
    class InputPrivacyKeyVoiceMessages extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputPrivacyKeyVoiceMessages>;
        write(): Buffer;
    }
    class InputPrivacyKeyAbout extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputPrivacyKeyAbout>;
        write(): Buffer;
    }
    class InputPrivacyKeyBirthday extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputPrivacyKeyBirthday>;
        write(): Buffer;
    }
    class PrivacyKeyStatusTimestamp extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PrivacyKeyStatusTimestamp>;
        write(): Buffer;
    }
    class PrivacyKeyChatInvite extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PrivacyKeyChatInvite>;
        write(): Buffer;
    }
    class PrivacyKeyPhoneCall extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PrivacyKeyPhoneCall>;
        write(): Buffer;
    }
    class PrivacyKeyPhoneP2P extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PrivacyKeyPhoneP2P>;
        write(): Buffer;
    }
    class PrivacyKeyForwards extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PrivacyKeyForwards>;
        write(): Buffer;
    }
    class PrivacyKeyProfilePhoto extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PrivacyKeyProfilePhoto>;
        write(): Buffer;
    }
    class PrivacyKeyPhoneNumber extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PrivacyKeyPhoneNumber>;
        write(): Buffer;
    }
    class PrivacyKeyAddedByPhone extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PrivacyKeyAddedByPhone>;
        write(): Buffer;
    }
    class PrivacyKeyVoiceMessages extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PrivacyKeyVoiceMessages>;
        write(): Buffer;
    }
    class PrivacyKeyAbout extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PrivacyKeyAbout>;
        write(): Buffer;
    }
    class PrivacyKeyBirthday extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PrivacyKeyBirthday>;
        write(): Buffer;
    }
    class InputPrivacyValueAllowContacts extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputPrivacyValueAllowContacts>;
        write(): Buffer;
    }
    class InputPrivacyValueAllowAll extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputPrivacyValueAllowAll>;
        write(): Buffer;
    }
    class InputPrivacyValueAllowUsers extends TLObject {
        users: Vector<Raw.TypeInputUser>;
        constructor(params: {
            users: Vector<Raw.TypeInputUser>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputPrivacyValueAllowUsers>;
        write(): Buffer;
    }
    class InputPrivacyValueDisallowContacts extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputPrivacyValueDisallowContacts>;
        write(): Buffer;
    }
    class InputPrivacyValueDisallowAll extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputPrivacyValueDisallowAll>;
        write(): Buffer;
    }
    class InputPrivacyValueDisallowUsers extends TLObject {
        users: Vector<Raw.TypeInputUser>;
        constructor(params: {
            users: Vector<Raw.TypeInputUser>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputPrivacyValueDisallowUsers>;
        write(): Buffer;
    }
    class InputPrivacyValueAllowChatParticipants extends TLObject {
        chats: Vector<long>;
        constructor(params: {
            chats: Vector<long>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputPrivacyValueAllowChatParticipants>;
        write(): Buffer;
    }
    class InputPrivacyValueDisallowChatParticipants extends TLObject {
        chats: Vector<long>;
        constructor(params: {
            chats: Vector<long>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputPrivacyValueDisallowChatParticipants>;
        write(): Buffer;
    }
    class InputPrivacyValueAllowCloseFriends extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputPrivacyValueAllowCloseFriends>;
        write(): Buffer;
    }
    class InputPrivacyValueAllowPremium extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputPrivacyValueAllowPremium>;
        write(): Buffer;
    }
    class PrivacyValueAllowContacts extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PrivacyValueAllowContacts>;
        write(): Buffer;
    }
    class PrivacyValueAllowAll extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PrivacyValueAllowAll>;
        write(): Buffer;
    }
    class PrivacyValueAllowUsers extends TLObject {
        users: Vector<long>;
        constructor(params: {
            users: Vector<long>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PrivacyValueAllowUsers>;
        write(): Buffer;
    }
    class PrivacyValueDisallowContacts extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PrivacyValueDisallowContacts>;
        write(): Buffer;
    }
    class PrivacyValueDisallowAll extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PrivacyValueDisallowAll>;
        write(): Buffer;
    }
    class PrivacyValueDisallowUsers extends TLObject {
        users: Vector<long>;
        constructor(params: {
            users: Vector<long>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PrivacyValueDisallowUsers>;
        write(): Buffer;
    }
    class PrivacyValueAllowChatParticipants extends TLObject {
        chats: Vector<long>;
        constructor(params: {
            chats: Vector<long>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PrivacyValueAllowChatParticipants>;
        write(): Buffer;
    }
    class PrivacyValueDisallowChatParticipants extends TLObject {
        chats: Vector<long>;
        constructor(params: {
            chats: Vector<long>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PrivacyValueDisallowChatParticipants>;
        write(): Buffer;
    }
    class PrivacyValueAllowCloseFriends extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PrivacyValueAllowCloseFriends>;
        write(): Buffer;
    }
    class PrivacyValueAllowPremium extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PrivacyValueAllowPremium>;
        write(): Buffer;
    }
    class AccountDaysTTL extends TLObject {
        days: int;
        constructor(params: {
            days: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.AccountDaysTTL>;
        write(): Buffer;
    }
    class DocumentAttributeImageSize extends TLObject {
        w: int;
        h: int;
        constructor(params: {
            w: int;
            h: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DocumentAttributeImageSize>;
        write(): Buffer;
    }
    class DocumentAttributeAnimated extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DocumentAttributeAnimated>;
        write(): Buffer;
    }
    class DocumentAttributeSticker extends TLObject {
        mask?: boolean;
        alt: string;
        stickerset: Raw.TypeInputStickerSet;
        maskCoords?: Raw.TypeMaskCoords;
        constructor(params: {
            mask?: boolean;
            alt: string;
            stickerset: Raw.TypeInputStickerSet;
            maskCoords?: Raw.TypeMaskCoords;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DocumentAttributeSticker>;
        write(): Buffer;
    }
    class DocumentAttributeVideo extends TLObject {
        roundMessage?: boolean;
        supportsStreaming?: boolean;
        nosound?: boolean;
        duration: double;
        w: int;
        h: int;
        preloadPrefixSize?: int;
        constructor(params: {
            roundMessage?: boolean;
            supportsStreaming?: boolean;
            nosound?: boolean;
            duration: double;
            w: int;
            h: int;
            preloadPrefixSize?: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DocumentAttributeVideo>;
        write(): Buffer;
    }
    class DocumentAttributeAudio extends TLObject {
        voice?: boolean;
        duration: int;
        title?: string;
        performer?: string;
        waveform?: bytes;
        constructor(params: {
            voice?: boolean;
            duration: int;
            title?: string;
            performer?: string;
            waveform?: bytes;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DocumentAttributeAudio>;
        write(): Buffer;
    }
    class DocumentAttributeFilename extends TLObject {
        fileName: string;
        constructor(params: {
            fileName: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DocumentAttributeFilename>;
        write(): Buffer;
    }
    class DocumentAttributeHasStickers extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DocumentAttributeHasStickers>;
        write(): Buffer;
    }
    class DocumentAttributeCustomEmoji extends TLObject {
        free?: boolean;
        textColor?: boolean;
        alt: string;
        stickerset: Raw.TypeInputStickerSet;
        constructor(params: {
            free?: boolean;
            textColor?: boolean;
            alt: string;
            stickerset: Raw.TypeInputStickerSet;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DocumentAttributeCustomEmoji>;
        write(): Buffer;
    }
    class StickerPack extends TLObject {
        emoticon: string;
        documents: Vector<long>;
        constructor(params: {
            emoticon: string;
            documents: Vector<long>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.StickerPack>;
        write(): Buffer;
    }
    class WebPageEmpty extends TLObject {
        id: long;
        url?: string;
        constructor(params: {
            id: long;
            url?: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.WebPageEmpty>;
        write(): Buffer;
    }
    class WebPagePending extends TLObject {
        id: long;
        url?: string;
        date: int;
        constructor(params: {
            id: long;
            url?: string;
            date: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.WebPagePending>;
        write(): Buffer;
    }
    class WebPage extends TLObject {
        hasLargeMedia?: boolean;
        id: long;
        url: string;
        displayUrl: string;
        hash: int;
        type?: string;
        siteName?: string;
        title?: string;
        description?: string;
        photo?: Raw.TypePhoto;
        embedUrl?: string;
        embedType?: string;
        embedWidth?: int;
        embedHeight?: int;
        duration?: int;
        author?: string;
        document?: Raw.TypeDocument;
        cachedPage?: Raw.TypePage;
        attributes?: Vector<Raw.TypeWebPageAttribute>;
        constructor(params: {
            hasLargeMedia?: boolean;
            id: long;
            url: string;
            displayUrl: string;
            hash: int;
            type?: string;
            siteName?: string;
            title?: string;
            description?: string;
            photo?: Raw.TypePhoto;
            embedUrl?: string;
            embedType?: string;
            embedWidth?: int;
            embedHeight?: int;
            duration?: int;
            author?: string;
            document?: Raw.TypeDocument;
            cachedPage?: Raw.TypePage;
            attributes?: Vector<Raw.TypeWebPageAttribute>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.WebPage>;
        write(): Buffer;
    }
    class WebPageNotModified extends TLObject {
        cachedPageViews?: int;
        constructor(params: {
            cachedPageViews?: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.WebPageNotModified>;
        write(): Buffer;
    }
    class Authorization extends TLObject {
        current?: boolean;
        officialApp?: boolean;
        passwordPending?: boolean;
        encryptedRequestsDisabled?: boolean;
        callRequestsDisabled?: boolean;
        unconfirmed?: boolean;
        hash: long;
        deviceModel: string;
        platform: string;
        systemVersion: string;
        apiId: int;
        appName: string;
        appVersion: string;
        dateCreated: int;
        dateActive: int;
        ip: string;
        country: string;
        region: string;
        constructor(params: {
            current?: boolean;
            officialApp?: boolean;
            passwordPending?: boolean;
            encryptedRequestsDisabled?: boolean;
            callRequestsDisabled?: boolean;
            unconfirmed?: boolean;
            hash: long;
            deviceModel: string;
            platform: string;
            systemVersion: string;
            apiId: int;
            appName: string;
            appVersion: string;
            dateCreated: int;
            dateActive: int;
            ip: string;
            country: string;
            region: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.Authorization>;
        write(): Buffer;
    }
    class ReceivedNotifyMessage extends TLObject {
        id: int;
        flags: int;
        constructor(params: {
            id: int;
            flags: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ReceivedNotifyMessage>;
        write(): Buffer;
    }
    class ChatInviteExported extends TLObject {
        revoked?: boolean;
        permanent?: boolean;
        requestNeeded?: boolean;
        link: string;
        adminId: long;
        date: int;
        startDate?: int;
        expireDate?: int;
        usageLimit?: int;
        usage?: int;
        requested?: int;
        title?: string;
        constructor(params: {
            revoked?: boolean;
            permanent?: boolean;
            requestNeeded?: boolean;
            link: string;
            adminId: long;
            date: int;
            startDate?: int;
            expireDate?: int;
            usageLimit?: int;
            usage?: int;
            requested?: int;
            title?: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChatInviteExported>;
        write(): Buffer;
    }
    class ChatInvitePublicJoinRequests extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChatInvitePublicJoinRequests>;
        write(): Buffer;
    }
    class ChatInviteAlready extends TLObject {
        chat: Raw.TypeChat;
        constructor(params: {
            chat: Raw.TypeChat;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChatInviteAlready>;
        write(): Buffer;
    }
    class ChatInvite extends TLObject {
        channel?: boolean;
        broadcast?: boolean;
        public?: boolean;
        megagroup?: boolean;
        requestNeeded?: boolean;
        verified?: boolean;
        scam?: boolean;
        fake?: boolean;
        title: string;
        about?: string;
        photo: Raw.TypePhoto;
        participantsCount: int;
        participants?: Vector<Raw.TypeUser>;
        color: int;
        constructor(params: {
            channel?: boolean;
            broadcast?: boolean;
            public?: boolean;
            megagroup?: boolean;
            requestNeeded?: boolean;
            verified?: boolean;
            scam?: boolean;
            fake?: boolean;
            title: string;
            about?: string;
            photo: Raw.TypePhoto;
            participantsCount: int;
            participants?: Vector<Raw.TypeUser>;
            color: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChatInvite>;
        write(): Buffer;
    }
    class ChatInvitePeek extends TLObject {
        chat: Raw.TypeChat;
        expires: int;
        constructor(params: {
            chat: Raw.TypeChat;
            expires: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChatInvitePeek>;
        write(): Buffer;
    }
    class InputStickerSetEmpty extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputStickerSetEmpty>;
        write(): Buffer;
    }
    class InputStickerSetID extends TLObject {
        id: long;
        accessHash: long;
        constructor(params: {
            id: long;
            accessHash: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputStickerSetID>;
        write(): Buffer;
    }
    class InputStickerSetShortName extends TLObject {
        shortName: string;
        constructor(params: {
            shortName: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputStickerSetShortName>;
        write(): Buffer;
    }
    class InputStickerSetAnimatedEmoji extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputStickerSetAnimatedEmoji>;
        write(): Buffer;
    }
    class InputStickerSetDice extends TLObject {
        emoticon: string;
        constructor(params: {
            emoticon: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputStickerSetDice>;
        write(): Buffer;
    }
    class InputStickerSetAnimatedEmojiAnimations extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputStickerSetAnimatedEmojiAnimations>;
        write(): Buffer;
    }
    class InputStickerSetPremiumGifts extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputStickerSetPremiumGifts>;
        write(): Buffer;
    }
    class InputStickerSetEmojiGenericAnimations extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputStickerSetEmojiGenericAnimations>;
        write(): Buffer;
    }
    class InputStickerSetEmojiDefaultStatuses extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputStickerSetEmojiDefaultStatuses>;
        write(): Buffer;
    }
    class InputStickerSetEmojiDefaultTopicIcons extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputStickerSetEmojiDefaultTopicIcons>;
        write(): Buffer;
    }
    class InputStickerSetEmojiChannelDefaultStatuses extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputStickerSetEmojiChannelDefaultStatuses>;
        write(): Buffer;
    }
    class StickerSet extends TLObject {
        archived?: boolean;
        official?: boolean;
        masks?: boolean;
        emojis?: boolean;
        textColor?: boolean;
        channelEmojiStatus?: boolean;
        creator?: boolean;
        installedDate?: int;
        id: long;
        accessHash: long;
        title: string;
        shortName: string;
        thumbs?: Vector<Raw.TypePhotoSize>;
        thumbDcId?: int;
        thumbVersion?: int;
        thumbDocumentId?: long;
        count: int;
        hash: int;
        constructor(params: {
            archived?: boolean;
            official?: boolean;
            masks?: boolean;
            emojis?: boolean;
            textColor?: boolean;
            channelEmojiStatus?: boolean;
            creator?: boolean;
            installedDate?: int;
            id: long;
            accessHash: long;
            title: string;
            shortName: string;
            thumbs?: Vector<Raw.TypePhotoSize>;
            thumbDcId?: int;
            thumbVersion?: int;
            thumbDocumentId?: long;
            count: int;
            hash: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.StickerSet>;
        write(): Buffer;
    }
    class BotCommand extends TLObject {
        command: string;
        description: string;
        constructor(params: {
            command: string;
            description: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.BotCommand>;
        write(): Buffer;
    }
    class BotInfo extends TLObject {
        userId?: long;
        description?: string;
        descriptionPhoto?: Raw.TypePhoto;
        descriptionDocument?: Raw.TypeDocument;
        commands?: Vector<Raw.TypeBotCommand>;
        menuButton?: Raw.TypeBotMenuButton;
        constructor(params: {
            userId?: long;
            description?: string;
            descriptionPhoto?: Raw.TypePhoto;
            descriptionDocument?: Raw.TypeDocument;
            commands?: Vector<Raw.TypeBotCommand>;
            menuButton?: Raw.TypeBotMenuButton;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.BotInfo>;
        write(): Buffer;
    }
    class KeyboardButton extends TLObject {
        text: string;
        constructor(params: {
            text: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.KeyboardButton>;
        write(): Buffer;
    }
    class KeyboardButtonUrl extends TLObject {
        text: string;
        url: string;
        constructor(params: {
            text: string;
            url: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.KeyboardButtonUrl>;
        write(): Buffer;
    }
    class KeyboardButtonCallback extends TLObject {
        requiresPassword?: boolean;
        text: string;
        data: bytes;
        constructor(params: {
            requiresPassword?: boolean;
            text: string;
            data: bytes;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.KeyboardButtonCallback>;
        write(): Buffer;
    }
    class KeyboardButtonRequestPhone extends TLObject {
        text: string;
        constructor(params: {
            text: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.KeyboardButtonRequestPhone>;
        write(): Buffer;
    }
    class KeyboardButtonRequestGeoLocation extends TLObject {
        text: string;
        constructor(params: {
            text: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.KeyboardButtonRequestGeoLocation>;
        write(): Buffer;
    }
    class KeyboardButtonSwitchInline extends TLObject {
        samePeer?: boolean;
        text: string;
        query: string;
        peerTypes?: Vector<Raw.TypeInlineQueryPeerType>;
        constructor(params: {
            samePeer?: boolean;
            text: string;
            query: string;
            peerTypes?: Vector<Raw.TypeInlineQueryPeerType>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.KeyboardButtonSwitchInline>;
        write(): Buffer;
    }
    class KeyboardButtonGame extends TLObject {
        text: string;
        constructor(params: {
            text: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.KeyboardButtonGame>;
        write(): Buffer;
    }
    class KeyboardButtonBuy extends TLObject {
        text: string;
        constructor(params: {
            text: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.KeyboardButtonBuy>;
        write(): Buffer;
    }
    class KeyboardButtonUrlAuth extends TLObject {
        text: string;
        fwdText?: string;
        url: string;
        buttonId: int;
        constructor(params: {
            text: string;
            fwdText?: string;
            url: string;
            buttonId: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.KeyboardButtonUrlAuth>;
        write(): Buffer;
    }
    class InputKeyboardButtonUrlAuth extends TLObject {
        requestWriteAccess?: boolean;
        text: string;
        fwdText?: string;
        url: string;
        bot: Raw.TypeInputUser;
        constructor(params: {
            requestWriteAccess?: boolean;
            text: string;
            fwdText?: string;
            url: string;
            bot: Raw.TypeInputUser;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputKeyboardButtonUrlAuth>;
        write(): Buffer;
    }
    class KeyboardButtonRequestPoll extends TLObject {
        quiz?: Bool;
        text: string;
        constructor(params: {
            quiz?: Bool;
            text: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.KeyboardButtonRequestPoll>;
        write(): Buffer;
    }
    class InputKeyboardButtonUserProfile extends TLObject {
        text: string;
        userId: Raw.TypeInputUser;
        constructor(params: {
            text: string;
            userId: Raw.TypeInputUser;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputKeyboardButtonUserProfile>;
        write(): Buffer;
    }
    class KeyboardButtonUserProfile extends TLObject {
        text: string;
        userId: long;
        constructor(params: {
            text: string;
            userId: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.KeyboardButtonUserProfile>;
        write(): Buffer;
    }
    class KeyboardButtonWebView extends TLObject {
        text: string;
        url: string;
        constructor(params: {
            text: string;
            url: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.KeyboardButtonWebView>;
        write(): Buffer;
    }
    class KeyboardButtonSimpleWebView extends TLObject {
        text: string;
        url: string;
        constructor(params: {
            text: string;
            url: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.KeyboardButtonSimpleWebView>;
        write(): Buffer;
    }
    class KeyboardButtonRequestPeer extends TLObject {
        text: string;
        buttonId: int;
        peerType: Raw.TypeRequestPeerType;
        maxQuantity: int;
        constructor(params: {
            text: string;
            buttonId: int;
            peerType: Raw.TypeRequestPeerType;
            maxQuantity: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.KeyboardButtonRequestPeer>;
        write(): Buffer;
    }
    class InputKeyboardButtonRequestPeer extends TLObject {
        nameRequested?: boolean;
        usernameRequested?: boolean;
        photoRequested?: boolean;
        text: string;
        buttonId: int;
        peerType: Raw.TypeRequestPeerType;
        maxQuantity: int;
        constructor(params: {
            nameRequested?: boolean;
            usernameRequested?: boolean;
            photoRequested?: boolean;
            text: string;
            buttonId: int;
            peerType: Raw.TypeRequestPeerType;
            maxQuantity: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputKeyboardButtonRequestPeer>;
        write(): Buffer;
    }
    class KeyboardButtonRow extends TLObject {
        buttons: Vector<Raw.TypeKeyboardButton>;
        constructor(params: {
            buttons: Vector<Raw.TypeKeyboardButton>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.KeyboardButtonRow>;
        write(): Buffer;
    }
    class ReplyKeyboardHide extends TLObject {
        selective?: boolean;
        constructor(params: {
            selective?: boolean;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ReplyKeyboardHide>;
        write(): Buffer;
    }
    class ReplyKeyboardForceReply extends TLObject {
        singleUse?: boolean;
        selective?: boolean;
        placeholder?: string;
        constructor(params: {
            singleUse?: boolean;
            selective?: boolean;
            placeholder?: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ReplyKeyboardForceReply>;
        write(): Buffer;
    }
    class ReplyKeyboardMarkup extends TLObject {
        resize?: boolean;
        singleUse?: boolean;
        selective?: boolean;
        persistent?: boolean;
        rows: Vector<Raw.TypeKeyboardButtonRow>;
        placeholder?: string;
        constructor(params: {
            resize?: boolean;
            singleUse?: boolean;
            selective?: boolean;
            persistent?: boolean;
            rows: Vector<Raw.TypeKeyboardButtonRow>;
            placeholder?: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ReplyKeyboardMarkup>;
        write(): Buffer;
    }
    class ReplyInlineMarkup extends TLObject {
        rows: Vector<Raw.TypeKeyboardButtonRow>;
        constructor(params: {
            rows: Vector<Raw.TypeKeyboardButtonRow>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ReplyInlineMarkup>;
        write(): Buffer;
    }
    class MessageEntityUnknown extends TLObject {
        offset: int;
        length: int;
        constructor(params: {
            offset: int;
            length: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageEntityUnknown>;
        write(): Buffer;
    }
    class MessageEntityMention extends TLObject {
        offset: int;
        length: int;
        constructor(params: {
            offset: int;
            length: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageEntityMention>;
        write(): Buffer;
    }
    class MessageEntityHashtag extends TLObject {
        offset: int;
        length: int;
        constructor(params: {
            offset: int;
            length: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageEntityHashtag>;
        write(): Buffer;
    }
    class MessageEntityBotCommand extends TLObject {
        offset: int;
        length: int;
        constructor(params: {
            offset: int;
            length: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageEntityBotCommand>;
        write(): Buffer;
    }
    class MessageEntityUrl extends TLObject {
        offset: int;
        length: int;
        constructor(params: {
            offset: int;
            length: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageEntityUrl>;
        write(): Buffer;
    }
    class MessageEntityEmail extends TLObject {
        offset: int;
        length: int;
        constructor(params: {
            offset: int;
            length: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageEntityEmail>;
        write(): Buffer;
    }
    class MessageEntityBold extends TLObject {
        offset: int;
        length: int;
        constructor(params: {
            offset: int;
            length: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageEntityBold>;
        write(): Buffer;
    }
    class MessageEntityItalic extends TLObject {
        offset: int;
        length: int;
        constructor(params: {
            offset: int;
            length: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageEntityItalic>;
        write(): Buffer;
    }
    class MessageEntityCode extends TLObject {
        offset: int;
        length: int;
        constructor(params: {
            offset: int;
            length: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageEntityCode>;
        write(): Buffer;
    }
    class MessageEntityPre extends TLObject {
        offset: int;
        length: int;
        language: string;
        constructor(params: {
            offset: int;
            length: int;
            language: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageEntityPre>;
        write(): Buffer;
    }
    class MessageEntityTextUrl extends TLObject {
        offset: int;
        length: int;
        url: string;
        constructor(params: {
            offset: int;
            length: int;
            url: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageEntityTextUrl>;
        write(): Buffer;
    }
    class MessageEntityMentionName extends TLObject {
        offset: int;
        length: int;
        userId: long;
        constructor(params: {
            offset: int;
            length: int;
            userId: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageEntityMentionName>;
        write(): Buffer;
    }
    class InputMessageEntityMentionName extends TLObject {
        offset: int;
        length: int;
        userId: Raw.TypeInputUser;
        constructor(params: {
            offset: int;
            length: int;
            userId: Raw.TypeInputUser;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputMessageEntityMentionName>;
        write(): Buffer;
    }
    class MessageEntityPhone extends TLObject {
        offset: int;
        length: int;
        constructor(params: {
            offset: int;
            length: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageEntityPhone>;
        write(): Buffer;
    }
    class MessageEntityCashtag extends TLObject {
        offset: int;
        length: int;
        constructor(params: {
            offset: int;
            length: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageEntityCashtag>;
        write(): Buffer;
    }
    class MessageEntityUnderline extends TLObject {
        offset: int;
        length: int;
        constructor(params: {
            offset: int;
            length: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageEntityUnderline>;
        write(): Buffer;
    }
    class MessageEntityStrike extends TLObject {
        offset: int;
        length: int;
        constructor(params: {
            offset: int;
            length: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageEntityStrike>;
        write(): Buffer;
    }
    class MessageEntityBankCard extends TLObject {
        offset: int;
        length: int;
        constructor(params: {
            offset: int;
            length: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageEntityBankCard>;
        write(): Buffer;
    }
    class MessageEntitySpoiler extends TLObject {
        offset: int;
        length: int;
        constructor(params: {
            offset: int;
            length: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageEntitySpoiler>;
        write(): Buffer;
    }
    class MessageEntityCustomEmoji extends TLObject {
        offset: int;
        length: int;
        documentId: long;
        constructor(params: {
            offset: int;
            length: int;
            documentId: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageEntityCustomEmoji>;
        write(): Buffer;
    }
    class MessageEntityBlockquote extends TLObject {
        collapsed?: boolean;
        offset: int;
        length: int;
        constructor(params: {
            collapsed?: boolean;
            offset: int;
            length: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageEntityBlockquote>;
        write(): Buffer;
    }
    class InputChannelEmpty extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputChannelEmpty>;
        write(): Buffer;
    }
    class InputChannel extends TLObject {
        channelId: long;
        accessHash: long;
        constructor(params: {
            channelId: long;
            accessHash: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputChannel>;
        write(): Buffer;
    }
    class InputChannelFromMessage extends TLObject {
        peer: Raw.TypeInputPeer;
        msgId: int;
        channelId: long;
        constructor(params: {
            peer: Raw.TypeInputPeer;
            msgId: int;
            channelId: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputChannelFromMessage>;
        write(): Buffer;
    }
    class MessageRange extends TLObject {
        minId: int;
        maxId: int;
        constructor(params: {
            minId: int;
            maxId: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageRange>;
        write(): Buffer;
    }
    class ChannelMessagesFilterEmpty extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelMessagesFilterEmpty>;
        write(): Buffer;
    }
    class ChannelMessagesFilter extends TLObject {
        excludeNewMessages?: boolean;
        ranges: Vector<Raw.TypeMessageRange>;
        constructor(params: {
            excludeNewMessages?: boolean;
            ranges: Vector<Raw.TypeMessageRange>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelMessagesFilter>;
        write(): Buffer;
    }
    class ChannelParticipant extends TLObject {
        userId: long;
        date: int;
        constructor(params: {
            userId: long;
            date: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelParticipant>;
        write(): Buffer;
    }
    class ChannelParticipantSelf extends TLObject {
        viaRequest?: boolean;
        userId: long;
        inviterId: long;
        date: int;
        constructor(params: {
            viaRequest?: boolean;
            userId: long;
            inviterId: long;
            date: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelParticipantSelf>;
        write(): Buffer;
    }
    class ChannelParticipantCreator extends TLObject {
        userId: long;
        adminRights: Raw.TypeChatAdminRights;
        rank?: string;
        constructor(params: {
            userId: long;
            adminRights: Raw.TypeChatAdminRights;
            rank?: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelParticipantCreator>;
        write(): Buffer;
    }
    class ChannelParticipantAdmin extends TLObject {
        canEdit?: boolean;
        self?: boolean;
        userId: long;
        inviterId?: long;
        promotedBy: long;
        date: int;
        adminRights: Raw.TypeChatAdminRights;
        rank?: string;
        constructor(params: {
            canEdit?: boolean;
            self?: boolean;
            userId: long;
            inviterId?: long;
            promotedBy: long;
            date: int;
            adminRights: Raw.TypeChatAdminRights;
            rank?: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelParticipantAdmin>;
        write(): Buffer;
    }
    class ChannelParticipantBanned extends TLObject {
        left?: boolean;
        peer: Raw.TypePeer;
        kickedBy: long;
        date: int;
        bannedRights: Raw.TypeChatBannedRights;
        constructor(params: {
            left?: boolean;
            peer: Raw.TypePeer;
            kickedBy: long;
            date: int;
            bannedRights: Raw.TypeChatBannedRights;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelParticipantBanned>;
        write(): Buffer;
    }
    class ChannelParticipantLeft extends TLObject {
        peer: Raw.TypePeer;
        constructor(params: {
            peer: Raw.TypePeer;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelParticipantLeft>;
        write(): Buffer;
    }
    class ChannelParticipantsRecent extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelParticipantsRecent>;
        write(): Buffer;
    }
    class ChannelParticipantsAdmins extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelParticipantsAdmins>;
        write(): Buffer;
    }
    class ChannelParticipantsKicked extends TLObject {
        q: string;
        constructor(params: {
            q: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelParticipantsKicked>;
        write(): Buffer;
    }
    class ChannelParticipantsBots extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelParticipantsBots>;
        write(): Buffer;
    }
    class ChannelParticipantsBanned extends TLObject {
        q: string;
        constructor(params: {
            q: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelParticipantsBanned>;
        write(): Buffer;
    }
    class ChannelParticipantsSearch extends TLObject {
        q: string;
        constructor(params: {
            q: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelParticipantsSearch>;
        write(): Buffer;
    }
    class ChannelParticipantsContacts extends TLObject {
        q: string;
        constructor(params: {
            q: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelParticipantsContacts>;
        write(): Buffer;
    }
    class ChannelParticipantsMentions extends TLObject {
        q?: string;
        topMsgId?: int;
        constructor(params: {
            q?: string;
            topMsgId?: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelParticipantsMentions>;
        write(): Buffer;
    }
    class InputBotInlineMessageMediaAuto extends TLObject {
        invertMedia?: boolean;
        message: string;
        entities?: Vector<Raw.TypeMessageEntity>;
        replyMarkup?: Raw.TypeReplyMarkup;
        constructor(params: {
            invertMedia?: boolean;
            message: string;
            entities?: Vector<Raw.TypeMessageEntity>;
            replyMarkup?: Raw.TypeReplyMarkup;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputBotInlineMessageMediaAuto>;
        write(): Buffer;
    }
    class InputBotInlineMessageText extends TLObject {
        noWebpage?: boolean;
        invertMedia?: boolean;
        message: string;
        entities?: Vector<Raw.TypeMessageEntity>;
        replyMarkup?: Raw.TypeReplyMarkup;
        constructor(params: {
            noWebpage?: boolean;
            invertMedia?: boolean;
            message: string;
            entities?: Vector<Raw.TypeMessageEntity>;
            replyMarkup?: Raw.TypeReplyMarkup;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputBotInlineMessageText>;
        write(): Buffer;
    }
    class InputBotInlineMessageMediaGeo extends TLObject {
        geoPoint: Raw.TypeInputGeoPoint;
        heading?: int;
        period?: int;
        proximityNotificationRadius?: int;
        replyMarkup?: Raw.TypeReplyMarkup;
        constructor(params: {
            geoPoint: Raw.TypeInputGeoPoint;
            heading?: int;
            period?: int;
            proximityNotificationRadius?: int;
            replyMarkup?: Raw.TypeReplyMarkup;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputBotInlineMessageMediaGeo>;
        write(): Buffer;
    }
    class InputBotInlineMessageMediaVenue extends TLObject {
        geoPoint: Raw.TypeInputGeoPoint;
        title: string;
        address: string;
        provider: string;
        venueId: string;
        venueType: string;
        replyMarkup?: Raw.TypeReplyMarkup;
        constructor(params: {
            geoPoint: Raw.TypeInputGeoPoint;
            title: string;
            address: string;
            provider: string;
            venueId: string;
            venueType: string;
            replyMarkup?: Raw.TypeReplyMarkup;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputBotInlineMessageMediaVenue>;
        write(): Buffer;
    }
    class InputBotInlineMessageMediaContact extends TLObject {
        phoneNumber: string;
        firstName: string;
        lastName: string;
        vcard: string;
        replyMarkup?: Raw.TypeReplyMarkup;
        constructor(params: {
            phoneNumber: string;
            firstName: string;
            lastName: string;
            vcard: string;
            replyMarkup?: Raw.TypeReplyMarkup;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputBotInlineMessageMediaContact>;
        write(): Buffer;
    }
    class InputBotInlineMessageGame extends TLObject {
        replyMarkup?: Raw.TypeReplyMarkup;
        constructor(params: {
            replyMarkup?: Raw.TypeReplyMarkup;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputBotInlineMessageGame>;
        write(): Buffer;
    }
    class InputBotInlineMessageMediaInvoice extends TLObject {
        title: string;
        description: string;
        photo?: Raw.TypeInputWebDocument;
        invoice: Raw.TypeInvoice;
        payload: bytes;
        provider: string;
        providerData: Raw.TypeDataJSON;
        replyMarkup?: Raw.TypeReplyMarkup;
        constructor(params: {
            title: string;
            description: string;
            photo?: Raw.TypeInputWebDocument;
            invoice: Raw.TypeInvoice;
            payload: bytes;
            provider: string;
            providerData: Raw.TypeDataJSON;
            replyMarkup?: Raw.TypeReplyMarkup;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputBotInlineMessageMediaInvoice>;
        write(): Buffer;
    }
    class InputBotInlineMessageMediaWebPage extends TLObject {
        invertMedia?: boolean;
        forceLargeMedia?: boolean;
        forceSmallMedia?: boolean;
        optional?: boolean;
        message: string;
        entities?: Vector<Raw.TypeMessageEntity>;
        url: string;
        replyMarkup?: Raw.TypeReplyMarkup;
        constructor(params: {
            invertMedia?: boolean;
            forceLargeMedia?: boolean;
            forceSmallMedia?: boolean;
            optional?: boolean;
            message: string;
            entities?: Vector<Raw.TypeMessageEntity>;
            url: string;
            replyMarkup?: Raw.TypeReplyMarkup;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputBotInlineMessageMediaWebPage>;
        write(): Buffer;
    }
    class InputBotInlineResult extends TLObject {
        id: string;
        type: string;
        title?: string;
        description?: string;
        url?: string;
        thumb?: Raw.TypeInputWebDocument;
        content?: Raw.TypeInputWebDocument;
        sendMessage: Raw.TypeInputBotInlineMessage;
        constructor(params: {
            id: string;
            type: string;
            title?: string;
            description?: string;
            url?: string;
            thumb?: Raw.TypeInputWebDocument;
            content?: Raw.TypeInputWebDocument;
            sendMessage: Raw.TypeInputBotInlineMessage;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputBotInlineResult>;
        write(): Buffer;
    }
    class InputBotInlineResultPhoto extends TLObject {
        id: string;
        type: string;
        photo: Raw.TypeInputPhoto;
        sendMessage: Raw.TypeInputBotInlineMessage;
        constructor(params: {
            id: string;
            type: string;
            photo: Raw.TypeInputPhoto;
            sendMessage: Raw.TypeInputBotInlineMessage;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputBotInlineResultPhoto>;
        write(): Buffer;
    }
    class InputBotInlineResultDocument extends TLObject {
        id: string;
        type: string;
        title?: string;
        description?: string;
        document: Raw.TypeInputDocument;
        sendMessage: Raw.TypeInputBotInlineMessage;
        constructor(params: {
            id: string;
            type: string;
            title?: string;
            description?: string;
            document: Raw.TypeInputDocument;
            sendMessage: Raw.TypeInputBotInlineMessage;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputBotInlineResultDocument>;
        write(): Buffer;
    }
    class InputBotInlineResultGame extends TLObject {
        id: string;
        shortName: string;
        sendMessage: Raw.TypeInputBotInlineMessage;
        constructor(params: {
            id: string;
            shortName: string;
            sendMessage: Raw.TypeInputBotInlineMessage;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputBotInlineResultGame>;
        write(): Buffer;
    }
    class BotInlineMessageMediaAuto extends TLObject {
        invertMedia?: boolean;
        message: string;
        entities?: Vector<Raw.TypeMessageEntity>;
        replyMarkup?: Raw.TypeReplyMarkup;
        constructor(params: {
            invertMedia?: boolean;
            message: string;
            entities?: Vector<Raw.TypeMessageEntity>;
            replyMarkup?: Raw.TypeReplyMarkup;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.BotInlineMessageMediaAuto>;
        write(): Buffer;
    }
    class BotInlineMessageText extends TLObject {
        noWebpage?: boolean;
        invertMedia?: boolean;
        message: string;
        entities?: Vector<Raw.TypeMessageEntity>;
        replyMarkup?: Raw.TypeReplyMarkup;
        constructor(params: {
            noWebpage?: boolean;
            invertMedia?: boolean;
            message: string;
            entities?: Vector<Raw.TypeMessageEntity>;
            replyMarkup?: Raw.TypeReplyMarkup;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.BotInlineMessageText>;
        write(): Buffer;
    }
    class BotInlineMessageMediaGeo extends TLObject {
        geo: Raw.TypeGeoPoint;
        heading?: int;
        period?: int;
        proximityNotificationRadius?: int;
        replyMarkup?: Raw.TypeReplyMarkup;
        constructor(params: {
            geo: Raw.TypeGeoPoint;
            heading?: int;
            period?: int;
            proximityNotificationRadius?: int;
            replyMarkup?: Raw.TypeReplyMarkup;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.BotInlineMessageMediaGeo>;
        write(): Buffer;
    }
    class BotInlineMessageMediaVenue extends TLObject {
        geo: Raw.TypeGeoPoint;
        title: string;
        address: string;
        provider: string;
        venueId: string;
        venueType: string;
        replyMarkup?: Raw.TypeReplyMarkup;
        constructor(params: {
            geo: Raw.TypeGeoPoint;
            title: string;
            address: string;
            provider: string;
            venueId: string;
            venueType: string;
            replyMarkup?: Raw.TypeReplyMarkup;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.BotInlineMessageMediaVenue>;
        write(): Buffer;
    }
    class BotInlineMessageMediaContact extends TLObject {
        phoneNumber: string;
        firstName: string;
        lastName: string;
        vcard: string;
        replyMarkup?: Raw.TypeReplyMarkup;
        constructor(params: {
            phoneNumber: string;
            firstName: string;
            lastName: string;
            vcard: string;
            replyMarkup?: Raw.TypeReplyMarkup;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.BotInlineMessageMediaContact>;
        write(): Buffer;
    }
    class BotInlineMessageMediaInvoice extends TLObject {
        shippingAddressRequested?: boolean;
        test?: boolean;
        title: string;
        description: string;
        photo?: Raw.TypeWebDocument;
        currency: string;
        totalAmount: long;
        replyMarkup?: Raw.TypeReplyMarkup;
        constructor(params: {
            shippingAddressRequested?: boolean;
            test?: boolean;
            title: string;
            description: string;
            photo?: Raw.TypeWebDocument;
            currency: string;
            totalAmount: long;
            replyMarkup?: Raw.TypeReplyMarkup;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.BotInlineMessageMediaInvoice>;
        write(): Buffer;
    }
    class BotInlineMessageMediaWebPage extends TLObject {
        invertMedia?: boolean;
        forceLargeMedia?: boolean;
        forceSmallMedia?: boolean;
        manual?: boolean;
        safe?: boolean;
        message: string;
        entities?: Vector<Raw.TypeMessageEntity>;
        url: string;
        replyMarkup?: Raw.TypeReplyMarkup;
        constructor(params: {
            invertMedia?: boolean;
            forceLargeMedia?: boolean;
            forceSmallMedia?: boolean;
            manual?: boolean;
            safe?: boolean;
            message: string;
            entities?: Vector<Raw.TypeMessageEntity>;
            url: string;
            replyMarkup?: Raw.TypeReplyMarkup;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.BotInlineMessageMediaWebPage>;
        write(): Buffer;
    }
    class BotInlineResult extends TLObject {
        id: string;
        type: string;
        title?: string;
        description?: string;
        url?: string;
        thumb?: Raw.TypeWebDocument;
        content?: Raw.TypeWebDocument;
        sendMessage: Raw.TypeBotInlineMessage;
        constructor(params: {
            id: string;
            type: string;
            title?: string;
            description?: string;
            url?: string;
            thumb?: Raw.TypeWebDocument;
            content?: Raw.TypeWebDocument;
            sendMessage: Raw.TypeBotInlineMessage;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.BotInlineResult>;
        write(): Buffer;
    }
    class BotInlineMediaResult extends TLObject {
        id: string;
        type: string;
        photo?: Raw.TypePhoto;
        document?: Raw.TypeDocument;
        title?: string;
        description?: string;
        sendMessage: Raw.TypeBotInlineMessage;
        constructor(params: {
            id: string;
            type: string;
            photo?: Raw.TypePhoto;
            document?: Raw.TypeDocument;
            title?: string;
            description?: string;
            sendMessage: Raw.TypeBotInlineMessage;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.BotInlineMediaResult>;
        write(): Buffer;
    }
    class ExportedMessageLink extends TLObject {
        link: string;
        html: string;
        constructor(params: {
            link: string;
            html: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ExportedMessageLink>;
        write(): Buffer;
    }
    class MessageFwdHeader extends TLObject {
        imported?: boolean;
        savedOut?: boolean;
        fromId?: Raw.TypePeer;
        fromName?: string;
        date: int;
        channelPost?: int;
        postAuthor?: string;
        savedFromPeer?: Raw.TypePeer;
        savedFromMsgId?: int;
        savedFromId?: Raw.TypePeer;
        savedFromName?: string;
        savedDate?: int;
        psaType?: string;
        constructor(params: {
            imported?: boolean;
            savedOut?: boolean;
            fromId?: Raw.TypePeer;
            fromName?: string;
            date: int;
            channelPost?: int;
            postAuthor?: string;
            savedFromPeer?: Raw.TypePeer;
            savedFromMsgId?: int;
            savedFromId?: Raw.TypePeer;
            savedFromName?: string;
            savedDate?: int;
            psaType?: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageFwdHeader>;
        write(): Buffer;
    }
    class InputBotInlineMessageID extends TLObject {
        dcId: int;
        id: long;
        accessHash: long;
        constructor(params: {
            dcId: int;
            id: long;
            accessHash: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputBotInlineMessageID>;
        write(): Buffer;
    }
    class InputBotInlineMessageID64 extends TLObject {
        dcId: int;
        ownerId: long;
        id: int;
        accessHash: long;
        constructor(params: {
            dcId: int;
            ownerId: long;
            id: int;
            accessHash: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputBotInlineMessageID64>;
        write(): Buffer;
    }
    class InlineBotSwitchPM extends TLObject {
        text: string;
        startParam: string;
        constructor(params: {
            text: string;
            startParam: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InlineBotSwitchPM>;
        write(): Buffer;
    }
    class TopPeer extends TLObject {
        peer: Raw.TypePeer;
        rating: double;
        constructor(params: {
            peer: Raw.TypePeer;
            rating: double;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.TopPeer>;
        write(): Buffer;
    }
    class TopPeerCategoryBotsPM extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.TopPeerCategoryBotsPM>;
        write(): Buffer;
    }
    class TopPeerCategoryBotsInline extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.TopPeerCategoryBotsInline>;
        write(): Buffer;
    }
    class TopPeerCategoryCorrespondents extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.TopPeerCategoryCorrespondents>;
        write(): Buffer;
    }
    class TopPeerCategoryGroups extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.TopPeerCategoryGroups>;
        write(): Buffer;
    }
    class TopPeerCategoryChannels extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.TopPeerCategoryChannels>;
        write(): Buffer;
    }
    class TopPeerCategoryPhoneCalls extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.TopPeerCategoryPhoneCalls>;
        write(): Buffer;
    }
    class TopPeerCategoryForwardUsers extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.TopPeerCategoryForwardUsers>;
        write(): Buffer;
    }
    class TopPeerCategoryForwardChats extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.TopPeerCategoryForwardChats>;
        write(): Buffer;
    }
    class TopPeerCategoryPeers extends TLObject {
        category: Raw.TypeTopPeerCategory;
        count: int;
        peers: Vector<Raw.TypeTopPeer>;
        constructor(params: {
            category: Raw.TypeTopPeerCategory;
            count: int;
            peers: Vector<Raw.TypeTopPeer>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.TopPeerCategoryPeers>;
        write(): Buffer;
    }
    class DraftMessageEmpty extends TLObject {
        date?: int;
        constructor(params: {
            date?: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DraftMessageEmpty>;
        write(): Buffer;
    }
    class DraftMessage extends TLObject {
        noWebpage?: boolean;
        invertMedia?: boolean;
        replyTo?: Raw.TypeInputReplyTo;
        message: string;
        entities?: Vector<Raw.TypeMessageEntity>;
        media?: Raw.TypeInputMedia;
        date: int;
        constructor(params: {
            noWebpage?: boolean;
            invertMedia?: boolean;
            replyTo?: Raw.TypeInputReplyTo;
            message: string;
            entities?: Vector<Raw.TypeMessageEntity>;
            media?: Raw.TypeInputMedia;
            date: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DraftMessage>;
        write(): Buffer;
    }
    class StickerSetCovered extends TLObject {
        set: Raw.TypeStickerSet;
        cover: Raw.TypeDocument;
        constructor(params: {
            set: Raw.TypeStickerSet;
            cover: Raw.TypeDocument;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.StickerSetCovered>;
        write(): Buffer;
    }
    class StickerSetMultiCovered extends TLObject {
        set: Raw.TypeStickerSet;
        covers: Vector<Raw.TypeDocument>;
        constructor(params: {
            set: Raw.TypeStickerSet;
            covers: Vector<Raw.TypeDocument>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.StickerSetMultiCovered>;
        write(): Buffer;
    }
    class StickerSetFullCovered extends TLObject {
        set: Raw.TypeStickerSet;
        packs: Vector<Raw.TypeStickerPack>;
        keywords: Vector<Raw.TypeStickerKeyword>;
        documents: Vector<Raw.TypeDocument>;
        constructor(params: {
            set: Raw.TypeStickerSet;
            packs: Vector<Raw.TypeStickerPack>;
            keywords: Vector<Raw.TypeStickerKeyword>;
            documents: Vector<Raw.TypeDocument>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.StickerSetFullCovered>;
        write(): Buffer;
    }
    class StickerSetNoCovered extends TLObject {
        set: Raw.TypeStickerSet;
        constructor(params: {
            set: Raw.TypeStickerSet;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.StickerSetNoCovered>;
        write(): Buffer;
    }
    class MaskCoords extends TLObject {
        n: int;
        x: double;
        y: double;
        zoom: double;
        constructor(params: {
            n: int;
            x: double;
            y: double;
            zoom: double;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MaskCoords>;
        write(): Buffer;
    }
    class InputStickeredMediaPhoto extends TLObject {
        id: Raw.TypeInputPhoto;
        constructor(params: {
            id: Raw.TypeInputPhoto;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputStickeredMediaPhoto>;
        write(): Buffer;
    }
    class InputStickeredMediaDocument extends TLObject {
        id: Raw.TypeInputDocument;
        constructor(params: {
            id: Raw.TypeInputDocument;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputStickeredMediaDocument>;
        write(): Buffer;
    }
    class Game extends TLObject {
        id: long;
        accessHash: long;
        shortName: string;
        title: string;
        description: string;
        photo: Raw.TypePhoto;
        document?: Raw.TypeDocument;
        constructor(params: {
            id: long;
            accessHash: long;
            shortName: string;
            title: string;
            description: string;
            photo: Raw.TypePhoto;
            document?: Raw.TypeDocument;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.Game>;
        write(): Buffer;
    }
    class InputGameID extends TLObject {
        id: long;
        accessHash: long;
        constructor(params: {
            id: long;
            accessHash: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputGameID>;
        write(): Buffer;
    }
    class InputGameShortName extends TLObject {
        botId: Raw.TypeInputUser;
        shortName: string;
        constructor(params: {
            botId: Raw.TypeInputUser;
            shortName: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputGameShortName>;
        write(): Buffer;
    }
    class HighScore extends TLObject {
        pos: int;
        userId: long;
        score: int;
        constructor(params: {
            pos: int;
            userId: long;
            score: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.HighScore>;
        write(): Buffer;
    }
    class TextEmpty extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.TextEmpty>;
        write(): Buffer;
    }
    class TextPlain extends TLObject {
        text: string;
        constructor(params: {
            text: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.TextPlain>;
        write(): Buffer;
    }
    class TextBold extends TLObject {
        text: Raw.TypeRichText;
        constructor(params: {
            text: Raw.TypeRichText;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.TextBold>;
        write(): Buffer;
    }
    class TextItalic extends TLObject {
        text: Raw.TypeRichText;
        constructor(params: {
            text: Raw.TypeRichText;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.TextItalic>;
        write(): Buffer;
    }
    class TextUnderline extends TLObject {
        text: Raw.TypeRichText;
        constructor(params: {
            text: Raw.TypeRichText;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.TextUnderline>;
        write(): Buffer;
    }
    class TextStrike extends TLObject {
        text: Raw.TypeRichText;
        constructor(params: {
            text: Raw.TypeRichText;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.TextStrike>;
        write(): Buffer;
    }
    class TextFixed extends TLObject {
        text: Raw.TypeRichText;
        constructor(params: {
            text: Raw.TypeRichText;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.TextFixed>;
        write(): Buffer;
    }
    class TextUrl extends TLObject {
        text: Raw.TypeRichText;
        url: string;
        webpageId: long;
        constructor(params: {
            text: Raw.TypeRichText;
            url: string;
            webpageId: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.TextUrl>;
        write(): Buffer;
    }
    class TextEmail extends TLObject {
        text: Raw.TypeRichText;
        email: string;
        constructor(params: {
            text: Raw.TypeRichText;
            email: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.TextEmail>;
        write(): Buffer;
    }
    class TextConcat extends TLObject {
        texts: Vector<Raw.TypeRichText>;
        constructor(params: {
            texts: Vector<Raw.TypeRichText>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.TextConcat>;
        write(): Buffer;
    }
    class TextSubscript extends TLObject {
        text: Raw.TypeRichText;
        constructor(params: {
            text: Raw.TypeRichText;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.TextSubscript>;
        write(): Buffer;
    }
    class TextSuperscript extends TLObject {
        text: Raw.TypeRichText;
        constructor(params: {
            text: Raw.TypeRichText;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.TextSuperscript>;
        write(): Buffer;
    }
    class TextMarked extends TLObject {
        text: Raw.TypeRichText;
        constructor(params: {
            text: Raw.TypeRichText;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.TextMarked>;
        write(): Buffer;
    }
    class TextPhone extends TLObject {
        text: Raw.TypeRichText;
        phone: string;
        constructor(params: {
            text: Raw.TypeRichText;
            phone: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.TextPhone>;
        write(): Buffer;
    }
    class TextImage extends TLObject {
        documentId: long;
        w: int;
        h: int;
        constructor(params: {
            documentId: long;
            w: int;
            h: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.TextImage>;
        write(): Buffer;
    }
    class TextAnchor extends TLObject {
        text: Raw.TypeRichText;
        name: string;
        constructor(params: {
            text: Raw.TypeRichText;
            name: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.TextAnchor>;
        write(): Buffer;
    }
    class PageBlockUnsupported extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PageBlockUnsupported>;
        write(): Buffer;
    }
    class PageBlockTitle extends TLObject {
        text: Raw.TypeRichText;
        constructor(params: {
            text: Raw.TypeRichText;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PageBlockTitle>;
        write(): Buffer;
    }
    class PageBlockSubtitle extends TLObject {
        text: Raw.TypeRichText;
        constructor(params: {
            text: Raw.TypeRichText;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PageBlockSubtitle>;
        write(): Buffer;
    }
    class PageBlockAuthorDate extends TLObject {
        author: Raw.TypeRichText;
        publishedDate: int;
        constructor(params: {
            author: Raw.TypeRichText;
            publishedDate: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PageBlockAuthorDate>;
        write(): Buffer;
    }
    class PageBlockHeader extends TLObject {
        text: Raw.TypeRichText;
        constructor(params: {
            text: Raw.TypeRichText;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PageBlockHeader>;
        write(): Buffer;
    }
    class PageBlockSubheader extends TLObject {
        text: Raw.TypeRichText;
        constructor(params: {
            text: Raw.TypeRichText;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PageBlockSubheader>;
        write(): Buffer;
    }
    class PageBlockParagraph extends TLObject {
        text: Raw.TypeRichText;
        constructor(params: {
            text: Raw.TypeRichText;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PageBlockParagraph>;
        write(): Buffer;
    }
    class PageBlockPreformatted extends TLObject {
        text: Raw.TypeRichText;
        language: string;
        constructor(params: {
            text: Raw.TypeRichText;
            language: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PageBlockPreformatted>;
        write(): Buffer;
    }
    class PageBlockFooter extends TLObject {
        text: Raw.TypeRichText;
        constructor(params: {
            text: Raw.TypeRichText;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PageBlockFooter>;
        write(): Buffer;
    }
    class PageBlockDivider extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PageBlockDivider>;
        write(): Buffer;
    }
    class PageBlockAnchor extends TLObject {
        name: string;
        constructor(params: {
            name: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PageBlockAnchor>;
        write(): Buffer;
    }
    class PageBlockList extends TLObject {
        items: Vector<Raw.TypePageListItem>;
        constructor(params: {
            items: Vector<Raw.TypePageListItem>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PageBlockList>;
        write(): Buffer;
    }
    class PageBlockBlockquote extends TLObject {
        text: Raw.TypeRichText;
        caption: Raw.TypeRichText;
        constructor(params: {
            text: Raw.TypeRichText;
            caption: Raw.TypeRichText;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PageBlockBlockquote>;
        write(): Buffer;
    }
    class PageBlockPullquote extends TLObject {
        text: Raw.TypeRichText;
        caption: Raw.TypeRichText;
        constructor(params: {
            text: Raw.TypeRichText;
            caption: Raw.TypeRichText;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PageBlockPullquote>;
        write(): Buffer;
    }
    class PageBlockPhoto extends TLObject {
        photoId: long;
        caption: Raw.TypePageCaption;
        url?: string;
        webpageId?: long;
        constructor(params: {
            photoId: long;
            caption: Raw.TypePageCaption;
            url?: string;
            webpageId?: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PageBlockPhoto>;
        write(): Buffer;
    }
    class PageBlockVideo extends TLObject {
        autoplay?: boolean;
        loop?: boolean;
        videoId: long;
        caption: Raw.TypePageCaption;
        constructor(params: {
            autoplay?: boolean;
            loop?: boolean;
            videoId: long;
            caption: Raw.TypePageCaption;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PageBlockVideo>;
        write(): Buffer;
    }
    class PageBlockCover extends TLObject {
        cover: Raw.TypePageBlock;
        constructor(params: {
            cover: Raw.TypePageBlock;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PageBlockCover>;
        write(): Buffer;
    }
    class PageBlockEmbed extends TLObject {
        fullWidth?: boolean;
        allowScrolling?: boolean;
        url?: string;
        html?: string;
        posterPhotoId?: long;
        w?: int;
        h?: int;
        caption: Raw.TypePageCaption;
        constructor(params: {
            fullWidth?: boolean;
            allowScrolling?: boolean;
            url?: string;
            html?: string;
            posterPhotoId?: long;
            w?: int;
            h?: int;
            caption: Raw.TypePageCaption;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PageBlockEmbed>;
        write(): Buffer;
    }
    class PageBlockEmbedPost extends TLObject {
        url: string;
        webpageId: long;
        authorPhotoId: long;
        author: string;
        date: int;
        blocks: Vector<Raw.TypePageBlock>;
        caption: Raw.TypePageCaption;
        constructor(params: {
            url: string;
            webpageId: long;
            authorPhotoId: long;
            author: string;
            date: int;
            blocks: Vector<Raw.TypePageBlock>;
            caption: Raw.TypePageCaption;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PageBlockEmbedPost>;
        write(): Buffer;
    }
    class PageBlockCollage extends TLObject {
        items: Vector<Raw.TypePageBlock>;
        caption: Raw.TypePageCaption;
        constructor(params: {
            items: Vector<Raw.TypePageBlock>;
            caption: Raw.TypePageCaption;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PageBlockCollage>;
        write(): Buffer;
    }
    class PageBlockSlideshow extends TLObject {
        items: Vector<Raw.TypePageBlock>;
        caption: Raw.TypePageCaption;
        constructor(params: {
            items: Vector<Raw.TypePageBlock>;
            caption: Raw.TypePageCaption;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PageBlockSlideshow>;
        write(): Buffer;
    }
    class PageBlockChannel extends TLObject {
        channel: Raw.TypeChat;
        constructor(params: {
            channel: Raw.TypeChat;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PageBlockChannel>;
        write(): Buffer;
    }
    class PageBlockAudio extends TLObject {
        audioId: long;
        caption: Raw.TypePageCaption;
        constructor(params: {
            audioId: long;
            caption: Raw.TypePageCaption;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PageBlockAudio>;
        write(): Buffer;
    }
    class PageBlockKicker extends TLObject {
        text: Raw.TypeRichText;
        constructor(params: {
            text: Raw.TypeRichText;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PageBlockKicker>;
        write(): Buffer;
    }
    class PageBlockTable extends TLObject {
        bordered?: boolean;
        striped?: boolean;
        title: Raw.TypeRichText;
        rows: Vector<Raw.TypePageTableRow>;
        constructor(params: {
            bordered?: boolean;
            striped?: boolean;
            title: Raw.TypeRichText;
            rows: Vector<Raw.TypePageTableRow>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PageBlockTable>;
        write(): Buffer;
    }
    class PageBlockOrderedList extends TLObject {
        items: Vector<Raw.TypePageListOrderedItem>;
        constructor(params: {
            items: Vector<Raw.TypePageListOrderedItem>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PageBlockOrderedList>;
        write(): Buffer;
    }
    class PageBlockDetails extends TLObject {
        open?: boolean;
        blocks: Vector<Raw.TypePageBlock>;
        title: Raw.TypeRichText;
        constructor(params: {
            open?: boolean;
            blocks: Vector<Raw.TypePageBlock>;
            title: Raw.TypeRichText;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PageBlockDetails>;
        write(): Buffer;
    }
    class PageBlockRelatedArticles extends TLObject {
        title: Raw.TypeRichText;
        articles: Vector<Raw.TypePageRelatedArticle>;
        constructor(params: {
            title: Raw.TypeRichText;
            articles: Vector<Raw.TypePageRelatedArticle>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PageBlockRelatedArticles>;
        write(): Buffer;
    }
    class PageBlockMap extends TLObject {
        geo: Raw.TypeGeoPoint;
        zoom: int;
        w: int;
        h: int;
        caption: Raw.TypePageCaption;
        constructor(params: {
            geo: Raw.TypeGeoPoint;
            zoom: int;
            w: int;
            h: int;
            caption: Raw.TypePageCaption;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PageBlockMap>;
        write(): Buffer;
    }
    class PhoneCallDiscardReasonMissed extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PhoneCallDiscardReasonMissed>;
        write(): Buffer;
    }
    class PhoneCallDiscardReasonDisconnect extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PhoneCallDiscardReasonDisconnect>;
        write(): Buffer;
    }
    class PhoneCallDiscardReasonHangup extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PhoneCallDiscardReasonHangup>;
        write(): Buffer;
    }
    class PhoneCallDiscardReasonBusy extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PhoneCallDiscardReasonBusy>;
        write(): Buffer;
    }
    class DataJSON extends TLObject {
        data: string;
        constructor(params: {
            data: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DataJSON>;
        write(): Buffer;
    }
    class LabeledPrice extends TLObject {
        label: string;
        amount: long;
        constructor(params: {
            label: string;
            amount: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.LabeledPrice>;
        write(): Buffer;
    }
    class Invoice extends TLObject {
        test?: boolean;
        nameRequested?: boolean;
        phoneRequested?: boolean;
        emailRequested?: boolean;
        shippingAddressRequested?: boolean;
        flexible?: boolean;
        phoneToProvider?: boolean;
        emailToProvider?: boolean;
        recurring?: boolean;
        currency: string;
        prices: Vector<Raw.TypeLabeledPrice>;
        maxTipAmount?: long;
        suggestedTipAmounts?: Vector<long>;
        termsUrl?: string;
        constructor(params: {
            test?: boolean;
            nameRequested?: boolean;
            phoneRequested?: boolean;
            emailRequested?: boolean;
            shippingAddressRequested?: boolean;
            flexible?: boolean;
            phoneToProvider?: boolean;
            emailToProvider?: boolean;
            recurring?: boolean;
            currency: string;
            prices: Vector<Raw.TypeLabeledPrice>;
            maxTipAmount?: long;
            suggestedTipAmounts?: Vector<long>;
            termsUrl?: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.Invoice>;
        write(): Buffer;
    }
    class PaymentCharge extends TLObject {
        id: string;
        providerChargeId: string;
        constructor(params: {
            id: string;
            providerChargeId: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PaymentCharge>;
        write(): Buffer;
    }
    class PostAddress extends TLObject {
        streetLine1: string;
        streetLine2: string;
        city: string;
        state: string;
        countryIso2: string;
        postCode: string;
        constructor(params: {
            streetLine1: string;
            streetLine2: string;
            city: string;
            state: string;
            countryIso2: string;
            postCode: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PostAddress>;
        write(): Buffer;
    }
    class PaymentRequestedInfo extends TLObject {
        name?: string;
        phone?: string;
        email?: string;
        shippingAddress?: Raw.TypePostAddress;
        constructor(params: {
            name?: string;
            phone?: string;
            email?: string;
            shippingAddress?: Raw.TypePostAddress;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PaymentRequestedInfo>;
        write(): Buffer;
    }
    class PaymentSavedCredentialsCard extends TLObject {
        id: string;
        title: string;
        constructor(params: {
            id: string;
            title: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PaymentSavedCredentialsCard>;
        write(): Buffer;
    }
    class WebDocument extends TLObject {
        url: string;
        accessHash: long;
        size: int;
        mimeType: string;
        attributes: Vector<Raw.TypeDocumentAttribute>;
        constructor(params: {
            url: string;
            accessHash: long;
            size: int;
            mimeType: string;
            attributes: Vector<Raw.TypeDocumentAttribute>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.WebDocument>;
        write(): Buffer;
    }
    class WebDocumentNoProxy extends TLObject {
        url: string;
        size: int;
        mimeType: string;
        attributes: Vector<Raw.TypeDocumentAttribute>;
        constructor(params: {
            url: string;
            size: int;
            mimeType: string;
            attributes: Vector<Raw.TypeDocumentAttribute>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.WebDocumentNoProxy>;
        write(): Buffer;
    }
    class InputWebDocument extends TLObject {
        url: string;
        size: int;
        mimeType: string;
        attributes: Vector<Raw.TypeDocumentAttribute>;
        constructor(params: {
            url: string;
            size: int;
            mimeType: string;
            attributes: Vector<Raw.TypeDocumentAttribute>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputWebDocument>;
        write(): Buffer;
    }
    class InputWebFileLocation extends TLObject {
        url: string;
        accessHash: long;
        constructor(params: {
            url: string;
            accessHash: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputWebFileLocation>;
        write(): Buffer;
    }
    class InputWebFileGeoPointLocation extends TLObject {
        geoPoint: Raw.TypeInputGeoPoint;
        accessHash: long;
        w: int;
        h: int;
        zoom: int;
        scale: int;
        constructor(params: {
            geoPoint: Raw.TypeInputGeoPoint;
            accessHash: long;
            w: int;
            h: int;
            zoom: int;
            scale: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputWebFileGeoPointLocation>;
        write(): Buffer;
    }
    class InputWebFileAudioAlbumThumbLocation extends TLObject {
        small?: boolean;
        document?: Raw.TypeInputDocument;
        title?: string;
        performer?: string;
        constructor(params: {
            small?: boolean;
            document?: Raw.TypeInputDocument;
            title?: string;
            performer?: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputWebFileAudioAlbumThumbLocation>;
        write(): Buffer;
    }
    class InputPaymentCredentialsSaved extends TLObject {
        id: string;
        tmpPassword: bytes;
        constructor(params: {
            id: string;
            tmpPassword: bytes;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputPaymentCredentialsSaved>;
        write(): Buffer;
    }
    class InputPaymentCredentials extends TLObject {
        save?: boolean;
        data: Raw.TypeDataJSON;
        constructor(params: {
            save?: boolean;
            data: Raw.TypeDataJSON;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputPaymentCredentials>;
        write(): Buffer;
    }
    class InputPaymentCredentialsApplePay extends TLObject {
        paymentData: Raw.TypeDataJSON;
        constructor(params: {
            paymentData: Raw.TypeDataJSON;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputPaymentCredentialsApplePay>;
        write(): Buffer;
    }
    class InputPaymentCredentialsGooglePay extends TLObject {
        paymentToken: Raw.TypeDataJSON;
        constructor(params: {
            paymentToken: Raw.TypeDataJSON;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputPaymentCredentialsGooglePay>;
        write(): Buffer;
    }
    class ShippingOption extends TLObject {
        id: string;
        title: string;
        prices: Vector<Raw.TypeLabeledPrice>;
        constructor(params: {
            id: string;
            title: string;
            prices: Vector<Raw.TypeLabeledPrice>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ShippingOption>;
        write(): Buffer;
    }
    class InputStickerSetItem extends TLObject {
        document: Raw.TypeInputDocument;
        emoji: string;
        maskCoords?: Raw.TypeMaskCoords;
        keywords?: string;
        constructor(params: {
            document: Raw.TypeInputDocument;
            emoji: string;
            maskCoords?: Raw.TypeMaskCoords;
            keywords?: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputStickerSetItem>;
        write(): Buffer;
    }
    class InputPhoneCall extends TLObject {
        id: long;
        accessHash: long;
        constructor(params: {
            id: long;
            accessHash: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputPhoneCall>;
        write(): Buffer;
    }
    class PhoneCallEmpty extends TLObject {
        id: long;
        constructor(params: {
            id: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PhoneCallEmpty>;
        write(): Buffer;
    }
    class PhoneCallWaiting extends TLObject {
        video?: boolean;
        id: long;
        accessHash: long;
        date: int;
        adminId: long;
        participantId: long;
        protocol: Raw.TypePhoneCallProtocol;
        receiveDate?: int;
        constructor(params: {
            video?: boolean;
            id: long;
            accessHash: long;
            date: int;
            adminId: long;
            participantId: long;
            protocol: Raw.TypePhoneCallProtocol;
            receiveDate?: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PhoneCallWaiting>;
        write(): Buffer;
    }
    class PhoneCallRequested extends TLObject {
        video?: boolean;
        id: long;
        accessHash: long;
        date: int;
        adminId: long;
        participantId: long;
        gAHash: bytes;
        protocol: Raw.TypePhoneCallProtocol;
        constructor(params: {
            video?: boolean;
            id: long;
            accessHash: long;
            date: int;
            adminId: long;
            participantId: long;
            gAHash: bytes;
            protocol: Raw.TypePhoneCallProtocol;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PhoneCallRequested>;
        write(): Buffer;
    }
    class PhoneCallAccepted extends TLObject {
        video?: boolean;
        id: long;
        accessHash: long;
        date: int;
        adminId: long;
        participantId: long;
        gB: bytes;
        protocol: Raw.TypePhoneCallProtocol;
        constructor(params: {
            video?: boolean;
            id: long;
            accessHash: long;
            date: int;
            adminId: long;
            participantId: long;
            gB: bytes;
            protocol: Raw.TypePhoneCallProtocol;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PhoneCallAccepted>;
        write(): Buffer;
    }
    class PhoneCall extends TLObject {
        p2pAllowed?: boolean;
        video?: boolean;
        id: long;
        accessHash: long;
        date: int;
        adminId: long;
        participantId: long;
        gAOrB: bytes;
        keyFingerprint: long;
        protocol: Raw.TypePhoneCallProtocol;
        connections: Vector<Raw.TypePhoneConnection>;
        startDate: int;
        customParameters?: Raw.TypeDataJSON;
        constructor(params: {
            p2pAllowed?: boolean;
            video?: boolean;
            id: long;
            accessHash: long;
            date: int;
            adminId: long;
            participantId: long;
            gAOrB: bytes;
            keyFingerprint: long;
            protocol: Raw.TypePhoneCallProtocol;
            connections: Vector<Raw.TypePhoneConnection>;
            startDate: int;
            customParameters?: Raw.TypeDataJSON;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PhoneCall>;
        write(): Buffer;
    }
    class PhoneCallDiscarded extends TLObject {
        needRating?: boolean;
        needDebug?: boolean;
        video?: boolean;
        id: long;
        reason?: Raw.TypePhoneCallDiscardReason;
        duration?: int;
        constructor(params: {
            needRating?: boolean;
            needDebug?: boolean;
            video?: boolean;
            id: long;
            reason?: Raw.TypePhoneCallDiscardReason;
            duration?: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PhoneCallDiscarded>;
        write(): Buffer;
    }
    class PhoneConnection extends TLObject {
        tcp?: boolean;
        id: long;
        ip: string;
        ipv6: string;
        port: int;
        peerTag: bytes;
        constructor(params: {
            tcp?: boolean;
            id: long;
            ip: string;
            ipv6: string;
            port: int;
            peerTag: bytes;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PhoneConnection>;
        write(): Buffer;
    }
    class PhoneConnectionWebrtc extends TLObject {
        turn?: boolean;
        stun?: boolean;
        id: long;
        ip: string;
        ipv6: string;
        port: int;
        username: string;
        password: string;
        constructor(params: {
            turn?: boolean;
            stun?: boolean;
            id: long;
            ip: string;
            ipv6: string;
            port: int;
            username: string;
            password: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PhoneConnectionWebrtc>;
        write(): Buffer;
    }
    class PhoneCallProtocol extends TLObject {
        udpP2p?: boolean;
        udpReflector?: boolean;
        minLayer: int;
        maxLayer: int;
        libraryVersions: Vector<string>;
        constructor(params: {
            udpP2p?: boolean;
            udpReflector?: boolean;
            minLayer: int;
            maxLayer: int;
            libraryVersions: Vector<string>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PhoneCallProtocol>;
        write(): Buffer;
    }
    class CdnPublicKey extends TLObject {
        dcId: int;
        publicKey: string;
        constructor(params: {
            dcId: int;
            publicKey: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.CdnPublicKey>;
        write(): Buffer;
    }
    class CdnConfig extends TLObject {
        publicKeys: Vector<Raw.TypeCdnPublicKey>;
        constructor(params: {
            publicKeys: Vector<Raw.TypeCdnPublicKey>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.CdnConfig>;
        write(): Buffer;
    }
    class LangPackString extends TLObject {
        key: string;
        value: string;
        constructor(params: {
            key: string;
            value: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.LangPackString>;
        write(): Buffer;
    }
    class LangPackStringPluralized extends TLObject {
        key: string;
        zeroValue?: string;
        oneValue?: string;
        twoValue?: string;
        fewValue?: string;
        manyValue?: string;
        otherValue: string;
        constructor(params: {
            key: string;
            zeroValue?: string;
            oneValue?: string;
            twoValue?: string;
            fewValue?: string;
            manyValue?: string;
            otherValue: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.LangPackStringPluralized>;
        write(): Buffer;
    }
    class LangPackStringDeleted extends TLObject {
        key: string;
        constructor(params: {
            key: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.LangPackStringDeleted>;
        write(): Buffer;
    }
    class LangPackDifference extends TLObject {
        langCode: string;
        fromVersion: int;
        version: int;
        strings: Vector<Raw.TypeLangPackString>;
        constructor(params: {
            langCode: string;
            fromVersion: int;
            version: int;
            strings: Vector<Raw.TypeLangPackString>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.LangPackDifference>;
        write(): Buffer;
    }
    class LangPackLanguage extends TLObject {
        official?: boolean;
        rtl?: boolean;
        beta?: boolean;
        name: string;
        nativeName: string;
        langCode: string;
        baseLangCode?: string;
        pluralCode: string;
        stringsCount: int;
        translatedCount: int;
        translationsUrl: string;
        constructor(params: {
            official?: boolean;
            rtl?: boolean;
            beta?: boolean;
            name: string;
            nativeName: string;
            langCode: string;
            baseLangCode?: string;
            pluralCode: string;
            stringsCount: int;
            translatedCount: int;
            translationsUrl: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.LangPackLanguage>;
        write(): Buffer;
    }
    class ChannelAdminLogEventActionChangeTitle extends TLObject {
        prevValue: string;
        newValue: string;
        constructor(params: {
            prevValue: string;
            newValue: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelAdminLogEventActionChangeTitle>;
        write(): Buffer;
    }
    class ChannelAdminLogEventActionChangeAbout extends TLObject {
        prevValue: string;
        newValue: string;
        constructor(params: {
            prevValue: string;
            newValue: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelAdminLogEventActionChangeAbout>;
        write(): Buffer;
    }
    class ChannelAdminLogEventActionChangeUsername extends TLObject {
        prevValue: string;
        newValue: string;
        constructor(params: {
            prevValue: string;
            newValue: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelAdminLogEventActionChangeUsername>;
        write(): Buffer;
    }
    class ChannelAdminLogEventActionChangePhoto extends TLObject {
        prevPhoto: Raw.TypePhoto;
        newPhoto: Raw.TypePhoto;
        constructor(params: {
            prevPhoto: Raw.TypePhoto;
            newPhoto: Raw.TypePhoto;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelAdminLogEventActionChangePhoto>;
        write(): Buffer;
    }
    class ChannelAdminLogEventActionToggleInvites extends TLObject {
        newValue: Bool;
        constructor(params: {
            newValue: Bool;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelAdminLogEventActionToggleInvites>;
        write(): Buffer;
    }
    class ChannelAdminLogEventActionToggleSignatures extends TLObject {
        newValue: Bool;
        constructor(params: {
            newValue: Bool;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelAdminLogEventActionToggleSignatures>;
        write(): Buffer;
    }
    class ChannelAdminLogEventActionUpdatePinned extends TLObject {
        message: Raw.TypeMessage;
        constructor(params: {
            message: Raw.TypeMessage;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelAdminLogEventActionUpdatePinned>;
        write(): Buffer;
    }
    class ChannelAdminLogEventActionEditMessage extends TLObject {
        prevMessage: Raw.TypeMessage;
        newMessage: Raw.TypeMessage;
        constructor(params: {
            prevMessage: Raw.TypeMessage;
            newMessage: Raw.TypeMessage;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelAdminLogEventActionEditMessage>;
        write(): Buffer;
    }
    class ChannelAdminLogEventActionDeleteMessage extends TLObject {
        message: Raw.TypeMessage;
        constructor(params: {
            message: Raw.TypeMessage;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelAdminLogEventActionDeleteMessage>;
        write(): Buffer;
    }
    class ChannelAdminLogEventActionParticipantJoin extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelAdminLogEventActionParticipantJoin>;
        write(): Buffer;
    }
    class ChannelAdminLogEventActionParticipantLeave extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelAdminLogEventActionParticipantLeave>;
        write(): Buffer;
    }
    class ChannelAdminLogEventActionParticipantInvite extends TLObject {
        participant: Raw.TypeChannelParticipant;
        constructor(params: {
            participant: Raw.TypeChannelParticipant;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelAdminLogEventActionParticipantInvite>;
        write(): Buffer;
    }
    class ChannelAdminLogEventActionParticipantToggleBan extends TLObject {
        prevParticipant: Raw.TypeChannelParticipant;
        newParticipant: Raw.TypeChannelParticipant;
        constructor(params: {
            prevParticipant: Raw.TypeChannelParticipant;
            newParticipant: Raw.TypeChannelParticipant;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelAdminLogEventActionParticipantToggleBan>;
        write(): Buffer;
    }
    class ChannelAdminLogEventActionParticipantToggleAdmin extends TLObject {
        prevParticipant: Raw.TypeChannelParticipant;
        newParticipant: Raw.TypeChannelParticipant;
        constructor(params: {
            prevParticipant: Raw.TypeChannelParticipant;
            newParticipant: Raw.TypeChannelParticipant;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelAdminLogEventActionParticipantToggleAdmin>;
        write(): Buffer;
    }
    class ChannelAdminLogEventActionChangeStickerSet extends TLObject {
        prevStickerset: Raw.TypeInputStickerSet;
        newStickerset: Raw.TypeInputStickerSet;
        constructor(params: {
            prevStickerset: Raw.TypeInputStickerSet;
            newStickerset: Raw.TypeInputStickerSet;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelAdminLogEventActionChangeStickerSet>;
        write(): Buffer;
    }
    class ChannelAdminLogEventActionTogglePreHistoryHidden extends TLObject {
        newValue: Bool;
        constructor(params: {
            newValue: Bool;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelAdminLogEventActionTogglePreHistoryHidden>;
        write(): Buffer;
    }
    class ChannelAdminLogEventActionDefaultBannedRights extends TLObject {
        prevBannedRights: Raw.TypeChatBannedRights;
        newBannedRights: Raw.TypeChatBannedRights;
        constructor(params: {
            prevBannedRights: Raw.TypeChatBannedRights;
            newBannedRights: Raw.TypeChatBannedRights;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelAdminLogEventActionDefaultBannedRights>;
        write(): Buffer;
    }
    class ChannelAdminLogEventActionStopPoll extends TLObject {
        message: Raw.TypeMessage;
        constructor(params: {
            message: Raw.TypeMessage;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelAdminLogEventActionStopPoll>;
        write(): Buffer;
    }
    class ChannelAdminLogEventActionChangeLinkedChat extends TLObject {
        prevValue: long;
        newValue: long;
        constructor(params: {
            prevValue: long;
            newValue: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelAdminLogEventActionChangeLinkedChat>;
        write(): Buffer;
    }
    class ChannelAdminLogEventActionChangeLocation extends TLObject {
        prevValue: Raw.TypeChannelLocation;
        newValue: Raw.TypeChannelLocation;
        constructor(params: {
            prevValue: Raw.TypeChannelLocation;
            newValue: Raw.TypeChannelLocation;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelAdminLogEventActionChangeLocation>;
        write(): Buffer;
    }
    class ChannelAdminLogEventActionToggleSlowMode extends TLObject {
        prevValue: int;
        newValue: int;
        constructor(params: {
            prevValue: int;
            newValue: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelAdminLogEventActionToggleSlowMode>;
        write(): Buffer;
    }
    class ChannelAdminLogEventActionStartGroupCall extends TLObject {
        call: Raw.TypeInputGroupCall;
        constructor(params: {
            call: Raw.TypeInputGroupCall;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelAdminLogEventActionStartGroupCall>;
        write(): Buffer;
    }
    class ChannelAdminLogEventActionDiscardGroupCall extends TLObject {
        call: Raw.TypeInputGroupCall;
        constructor(params: {
            call: Raw.TypeInputGroupCall;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelAdminLogEventActionDiscardGroupCall>;
        write(): Buffer;
    }
    class ChannelAdminLogEventActionParticipantMute extends TLObject {
        participant: Raw.TypeGroupCallParticipant;
        constructor(params: {
            participant: Raw.TypeGroupCallParticipant;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelAdminLogEventActionParticipantMute>;
        write(): Buffer;
    }
    class ChannelAdminLogEventActionParticipantUnmute extends TLObject {
        participant: Raw.TypeGroupCallParticipant;
        constructor(params: {
            participant: Raw.TypeGroupCallParticipant;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelAdminLogEventActionParticipantUnmute>;
        write(): Buffer;
    }
    class ChannelAdminLogEventActionToggleGroupCallSetting extends TLObject {
        joinMuted: Bool;
        constructor(params: {
            joinMuted: Bool;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelAdminLogEventActionToggleGroupCallSetting>;
        write(): Buffer;
    }
    class ChannelAdminLogEventActionParticipantJoinByInvite extends TLObject {
        viaChatlist?: boolean;
        invite: Raw.TypeExportedChatInvite;
        constructor(params: {
            viaChatlist?: boolean;
            invite: Raw.TypeExportedChatInvite;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelAdminLogEventActionParticipantJoinByInvite>;
        write(): Buffer;
    }
    class ChannelAdminLogEventActionExportedInviteDelete extends TLObject {
        invite: Raw.TypeExportedChatInvite;
        constructor(params: {
            invite: Raw.TypeExportedChatInvite;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelAdminLogEventActionExportedInviteDelete>;
        write(): Buffer;
    }
    class ChannelAdminLogEventActionExportedInviteRevoke extends TLObject {
        invite: Raw.TypeExportedChatInvite;
        constructor(params: {
            invite: Raw.TypeExportedChatInvite;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelAdminLogEventActionExportedInviteRevoke>;
        write(): Buffer;
    }
    class ChannelAdminLogEventActionExportedInviteEdit extends TLObject {
        prevInvite: Raw.TypeExportedChatInvite;
        newInvite: Raw.TypeExportedChatInvite;
        constructor(params: {
            prevInvite: Raw.TypeExportedChatInvite;
            newInvite: Raw.TypeExportedChatInvite;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelAdminLogEventActionExportedInviteEdit>;
        write(): Buffer;
    }
    class ChannelAdminLogEventActionParticipantVolume extends TLObject {
        participant: Raw.TypeGroupCallParticipant;
        constructor(params: {
            participant: Raw.TypeGroupCallParticipant;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelAdminLogEventActionParticipantVolume>;
        write(): Buffer;
    }
    class ChannelAdminLogEventActionChangeHistoryTTL extends TLObject {
        prevValue: int;
        newValue: int;
        constructor(params: {
            prevValue: int;
            newValue: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelAdminLogEventActionChangeHistoryTTL>;
        write(): Buffer;
    }
    class ChannelAdminLogEventActionParticipantJoinByRequest extends TLObject {
        invite: Raw.TypeExportedChatInvite;
        approvedBy: long;
        constructor(params: {
            invite: Raw.TypeExportedChatInvite;
            approvedBy: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelAdminLogEventActionParticipantJoinByRequest>;
        write(): Buffer;
    }
    class ChannelAdminLogEventActionToggleNoForwards extends TLObject {
        newValue: Bool;
        constructor(params: {
            newValue: Bool;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelAdminLogEventActionToggleNoForwards>;
        write(): Buffer;
    }
    class ChannelAdminLogEventActionSendMessage extends TLObject {
        message: Raw.TypeMessage;
        constructor(params: {
            message: Raw.TypeMessage;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelAdminLogEventActionSendMessage>;
        write(): Buffer;
    }
    class ChannelAdminLogEventActionChangeAvailableReactions extends TLObject {
        prevValue: Raw.TypeChatReactions;
        newValue: Raw.TypeChatReactions;
        constructor(params: {
            prevValue: Raw.TypeChatReactions;
            newValue: Raw.TypeChatReactions;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelAdminLogEventActionChangeAvailableReactions>;
        write(): Buffer;
    }
    class ChannelAdminLogEventActionChangeUsernames extends TLObject {
        prevValue: Vector<string>;
        newValue: Vector<string>;
        constructor(params: {
            prevValue: Vector<string>;
            newValue: Vector<string>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelAdminLogEventActionChangeUsernames>;
        write(): Buffer;
    }
    class ChannelAdminLogEventActionToggleForum extends TLObject {
        newValue: Bool;
        constructor(params: {
            newValue: Bool;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelAdminLogEventActionToggleForum>;
        write(): Buffer;
    }
    class ChannelAdminLogEventActionCreateTopic extends TLObject {
        topic: Raw.TypeForumTopic;
        constructor(params: {
            topic: Raw.TypeForumTopic;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelAdminLogEventActionCreateTopic>;
        write(): Buffer;
    }
    class ChannelAdminLogEventActionEditTopic extends TLObject {
        prevTopic: Raw.TypeForumTopic;
        newTopic: Raw.TypeForumTopic;
        constructor(params: {
            prevTopic: Raw.TypeForumTopic;
            newTopic: Raw.TypeForumTopic;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelAdminLogEventActionEditTopic>;
        write(): Buffer;
    }
    class ChannelAdminLogEventActionDeleteTopic extends TLObject {
        topic: Raw.TypeForumTopic;
        constructor(params: {
            topic: Raw.TypeForumTopic;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelAdminLogEventActionDeleteTopic>;
        write(): Buffer;
    }
    class ChannelAdminLogEventActionPinTopic extends TLObject {
        prevTopic?: Raw.TypeForumTopic;
        newTopic?: Raw.TypeForumTopic;
        constructor(params: {
            prevTopic?: Raw.TypeForumTopic;
            newTopic?: Raw.TypeForumTopic;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelAdminLogEventActionPinTopic>;
        write(): Buffer;
    }
    class ChannelAdminLogEventActionToggleAntiSpam extends TLObject {
        newValue: Bool;
        constructor(params: {
            newValue: Bool;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelAdminLogEventActionToggleAntiSpam>;
        write(): Buffer;
    }
    class ChannelAdminLogEventActionChangePeerColor extends TLObject {
        prevValue: Raw.TypePeerColor;
        newValue: Raw.TypePeerColor;
        constructor(params: {
            prevValue: Raw.TypePeerColor;
            newValue: Raw.TypePeerColor;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelAdminLogEventActionChangePeerColor>;
        write(): Buffer;
    }
    class ChannelAdminLogEventActionChangeProfilePeerColor extends TLObject {
        prevValue: Raw.TypePeerColor;
        newValue: Raw.TypePeerColor;
        constructor(params: {
            prevValue: Raw.TypePeerColor;
            newValue: Raw.TypePeerColor;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelAdminLogEventActionChangeProfilePeerColor>;
        write(): Buffer;
    }
    class ChannelAdminLogEventActionChangeWallpaper extends TLObject {
        prevValue: Raw.TypeWallPaper;
        newValue: Raw.TypeWallPaper;
        constructor(params: {
            prevValue: Raw.TypeWallPaper;
            newValue: Raw.TypeWallPaper;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelAdminLogEventActionChangeWallpaper>;
        write(): Buffer;
    }
    class ChannelAdminLogEventActionChangeEmojiStatus extends TLObject {
        prevValue: Raw.TypeEmojiStatus;
        newValue: Raw.TypeEmojiStatus;
        constructor(params: {
            prevValue: Raw.TypeEmojiStatus;
            newValue: Raw.TypeEmojiStatus;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelAdminLogEventActionChangeEmojiStatus>;
        write(): Buffer;
    }
    class ChannelAdminLogEventActionChangeEmojiStickerSet extends TLObject {
        prevStickerset: Raw.TypeInputStickerSet;
        newStickerset: Raw.TypeInputStickerSet;
        constructor(params: {
            prevStickerset: Raw.TypeInputStickerSet;
            newStickerset: Raw.TypeInputStickerSet;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelAdminLogEventActionChangeEmojiStickerSet>;
        write(): Buffer;
    }
    class ChannelAdminLogEvent extends TLObject {
        id: long;
        date: int;
        userId: long;
        action: Raw.TypeChannelAdminLogEventAction;
        constructor(params: {
            id: long;
            date: int;
            userId: long;
            action: Raw.TypeChannelAdminLogEventAction;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelAdminLogEvent>;
        write(): Buffer;
    }
    class ChannelAdminLogEventsFilter extends TLObject {
        join?: boolean;
        leave?: boolean;
        invite?: boolean;
        ban?: boolean;
        unban?: boolean;
        kick?: boolean;
        unkick?: boolean;
        promote?: boolean;
        demote?: boolean;
        info?: boolean;
        settings?: boolean;
        pinned?: boolean;
        edit?: boolean;
        delete?: boolean;
        groupCall?: boolean;
        invites?: boolean;
        send?: boolean;
        forums?: boolean;
        constructor(params: {
            join?: boolean;
            leave?: boolean;
            invite?: boolean;
            ban?: boolean;
            unban?: boolean;
            kick?: boolean;
            unkick?: boolean;
            promote?: boolean;
            demote?: boolean;
            info?: boolean;
            settings?: boolean;
            pinned?: boolean;
            edit?: boolean;
            delete?: boolean;
            groupCall?: boolean;
            invites?: boolean;
            send?: boolean;
            forums?: boolean;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelAdminLogEventsFilter>;
        write(): Buffer;
    }
    class PopularContact extends TLObject {
        clientId: long;
        importers: int;
        constructor(params: {
            clientId: long;
            importers: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PopularContact>;
        write(): Buffer;
    }
    class RecentMeUrlUnknown extends TLObject {
        url: string;
        constructor(params: {
            url: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.RecentMeUrlUnknown>;
        write(): Buffer;
    }
    class RecentMeUrlUser extends TLObject {
        url: string;
        userId: long;
        constructor(params: {
            url: string;
            userId: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.RecentMeUrlUser>;
        write(): Buffer;
    }
    class RecentMeUrlChat extends TLObject {
        url: string;
        chatId: long;
        constructor(params: {
            url: string;
            chatId: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.RecentMeUrlChat>;
        write(): Buffer;
    }
    class RecentMeUrlChatInvite extends TLObject {
        url: string;
        chatInvite: Raw.TypeChatInvite;
        constructor(params: {
            url: string;
            chatInvite: Raw.TypeChatInvite;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.RecentMeUrlChatInvite>;
        write(): Buffer;
    }
    class RecentMeUrlStickerSet extends TLObject {
        url: string;
        set: Raw.TypeStickerSetCovered;
        constructor(params: {
            url: string;
            set: Raw.TypeStickerSetCovered;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.RecentMeUrlStickerSet>;
        write(): Buffer;
    }
    class InputSingleMedia extends TLObject {
        media: Raw.TypeInputMedia;
        randomId: long;
        message: string;
        entities?: Vector<Raw.TypeMessageEntity>;
        constructor(params: {
            media: Raw.TypeInputMedia;
            randomId: long;
            message: string;
            entities?: Vector<Raw.TypeMessageEntity>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputSingleMedia>;
        write(): Buffer;
    }
    class WebAuthorization extends TLObject {
        hash: long;
        botId: long;
        domain: string;
        browser: string;
        platform: string;
        dateCreated: int;
        dateActive: int;
        ip: string;
        region: string;
        constructor(params: {
            hash: long;
            botId: long;
            domain: string;
            browser: string;
            platform: string;
            dateCreated: int;
            dateActive: int;
            ip: string;
            region: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.WebAuthorization>;
        write(): Buffer;
    }
    class InputMessageID extends TLObject {
        id: int;
        constructor(params: {
            id: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputMessageID>;
        write(): Buffer;
    }
    class InputMessageReplyTo extends TLObject {
        id: int;
        constructor(params: {
            id: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputMessageReplyTo>;
        write(): Buffer;
    }
    class InputMessagePinned extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputMessagePinned>;
        write(): Buffer;
    }
    class InputMessageCallbackQuery extends TLObject {
        id: int;
        queryId: long;
        constructor(params: {
            id: int;
            queryId: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputMessageCallbackQuery>;
        write(): Buffer;
    }
    class InputDialogPeer extends TLObject {
        peer: Raw.TypeInputPeer;
        constructor(params: {
            peer: Raw.TypeInputPeer;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputDialogPeer>;
        write(): Buffer;
    }
    class InputDialogPeerFolder extends TLObject {
        folderId: int;
        constructor(params: {
            folderId: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputDialogPeerFolder>;
        write(): Buffer;
    }
    class DialogPeer extends TLObject {
        peer: Raw.TypePeer;
        constructor(params: {
            peer: Raw.TypePeer;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DialogPeer>;
        write(): Buffer;
    }
    class DialogPeerFolder extends TLObject {
        folderId: int;
        constructor(params: {
            folderId: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DialogPeerFolder>;
        write(): Buffer;
    }
    class FileHash extends TLObject {
        offset: long;
        limit: int;
        hash: bytes;
        constructor(params: {
            offset: long;
            limit: int;
            hash: bytes;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.FileHash>;
        write(): Buffer;
    }
    class InputClientProxy extends TLObject {
        address: string;
        port: int;
        constructor(params: {
            address: string;
            port: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputClientProxy>;
        write(): Buffer;
    }
    class InputSecureFileUploaded extends TLObject {
        id: long;
        parts: int;
        md5Checksum: string;
        fileHash: bytes;
        secret: bytes;
        constructor(params: {
            id: long;
            parts: int;
            md5Checksum: string;
            fileHash: bytes;
            secret: bytes;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputSecureFileUploaded>;
        write(): Buffer;
    }
    class InputSecureFile extends TLObject {
        id: long;
        accessHash: long;
        constructor(params: {
            id: long;
            accessHash: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputSecureFile>;
        write(): Buffer;
    }
    class SecureFileEmpty extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SecureFileEmpty>;
        write(): Buffer;
    }
    class SecureFile extends TLObject {
        id: long;
        accessHash: long;
        size: long;
        dcId: int;
        date: int;
        fileHash: bytes;
        secret: bytes;
        constructor(params: {
            id: long;
            accessHash: long;
            size: long;
            dcId: int;
            date: int;
            fileHash: bytes;
            secret: bytes;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SecureFile>;
        write(): Buffer;
    }
    class SecureData extends TLObject {
        data: bytes;
        dataHash: bytes;
        secret: bytes;
        constructor(params: {
            data: bytes;
            dataHash: bytes;
            secret: bytes;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SecureData>;
        write(): Buffer;
    }
    class SecurePlainPhone extends TLObject {
        phone: string;
        constructor(params: {
            phone: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SecurePlainPhone>;
        write(): Buffer;
    }
    class SecurePlainEmail extends TLObject {
        email: string;
        constructor(params: {
            email: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SecurePlainEmail>;
        write(): Buffer;
    }
    class SecureValueTypePersonalDetails extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SecureValueTypePersonalDetails>;
        write(): Buffer;
    }
    class SecureValueTypePassport extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SecureValueTypePassport>;
        write(): Buffer;
    }
    class SecureValueTypeDriverLicense extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SecureValueTypeDriverLicense>;
        write(): Buffer;
    }
    class SecureValueTypeIdentityCard extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SecureValueTypeIdentityCard>;
        write(): Buffer;
    }
    class SecureValueTypeInternalPassport extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SecureValueTypeInternalPassport>;
        write(): Buffer;
    }
    class SecureValueTypeAddress extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SecureValueTypeAddress>;
        write(): Buffer;
    }
    class SecureValueTypeUtilityBill extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SecureValueTypeUtilityBill>;
        write(): Buffer;
    }
    class SecureValueTypeBankStatement extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SecureValueTypeBankStatement>;
        write(): Buffer;
    }
    class SecureValueTypeRentalAgreement extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SecureValueTypeRentalAgreement>;
        write(): Buffer;
    }
    class SecureValueTypePassportRegistration extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SecureValueTypePassportRegistration>;
        write(): Buffer;
    }
    class SecureValueTypeTemporaryRegistration extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SecureValueTypeTemporaryRegistration>;
        write(): Buffer;
    }
    class SecureValueTypePhone extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SecureValueTypePhone>;
        write(): Buffer;
    }
    class SecureValueTypeEmail extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SecureValueTypeEmail>;
        write(): Buffer;
    }
    class SecureValue extends TLObject {
        type: Raw.TypeSecureValueType;
        data?: Raw.TypeSecureData;
        frontSide?: Raw.TypeSecureFile;
        reverseSide?: Raw.TypeSecureFile;
        selfie?: Raw.TypeSecureFile;
        translation?: Vector<Raw.TypeSecureFile>;
        files?: Vector<Raw.TypeSecureFile>;
        plainData?: Raw.TypeSecurePlainData;
        hash: bytes;
        constructor(params: {
            type: Raw.TypeSecureValueType;
            data?: Raw.TypeSecureData;
            frontSide?: Raw.TypeSecureFile;
            reverseSide?: Raw.TypeSecureFile;
            selfie?: Raw.TypeSecureFile;
            translation?: Vector<Raw.TypeSecureFile>;
            files?: Vector<Raw.TypeSecureFile>;
            plainData?: Raw.TypeSecurePlainData;
            hash: bytes;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SecureValue>;
        write(): Buffer;
    }
    class InputSecureValue extends TLObject {
        type: Raw.TypeSecureValueType;
        data?: Raw.TypeSecureData;
        frontSide?: Raw.TypeInputSecureFile;
        reverseSide?: Raw.TypeInputSecureFile;
        selfie?: Raw.TypeInputSecureFile;
        translation?: Vector<Raw.TypeInputSecureFile>;
        files?: Vector<Raw.TypeInputSecureFile>;
        plainData?: Raw.TypeSecurePlainData;
        constructor(params: {
            type: Raw.TypeSecureValueType;
            data?: Raw.TypeSecureData;
            frontSide?: Raw.TypeInputSecureFile;
            reverseSide?: Raw.TypeInputSecureFile;
            selfie?: Raw.TypeInputSecureFile;
            translation?: Vector<Raw.TypeInputSecureFile>;
            files?: Vector<Raw.TypeInputSecureFile>;
            plainData?: Raw.TypeSecurePlainData;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputSecureValue>;
        write(): Buffer;
    }
    class SecureValueHash extends TLObject {
        type: Raw.TypeSecureValueType;
        hash: bytes;
        constructor(params: {
            type: Raw.TypeSecureValueType;
            hash: bytes;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SecureValueHash>;
        write(): Buffer;
    }
    class SecureValueErrorData extends TLObject {
        type: Raw.TypeSecureValueType;
        dataHash: bytes;
        field: string;
        text: string;
        constructor(params: {
            type: Raw.TypeSecureValueType;
            dataHash: bytes;
            field: string;
            text: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SecureValueErrorData>;
        write(): Buffer;
    }
    class SecureValueErrorFrontSide extends TLObject {
        type: Raw.TypeSecureValueType;
        fileHash: bytes;
        text: string;
        constructor(params: {
            type: Raw.TypeSecureValueType;
            fileHash: bytes;
            text: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SecureValueErrorFrontSide>;
        write(): Buffer;
    }
    class SecureValueErrorReverseSide extends TLObject {
        type: Raw.TypeSecureValueType;
        fileHash: bytes;
        text: string;
        constructor(params: {
            type: Raw.TypeSecureValueType;
            fileHash: bytes;
            text: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SecureValueErrorReverseSide>;
        write(): Buffer;
    }
    class SecureValueErrorSelfie extends TLObject {
        type: Raw.TypeSecureValueType;
        fileHash: bytes;
        text: string;
        constructor(params: {
            type: Raw.TypeSecureValueType;
            fileHash: bytes;
            text: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SecureValueErrorSelfie>;
        write(): Buffer;
    }
    class SecureValueErrorFile extends TLObject {
        type: Raw.TypeSecureValueType;
        fileHash: bytes;
        text: string;
        constructor(params: {
            type: Raw.TypeSecureValueType;
            fileHash: bytes;
            text: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SecureValueErrorFile>;
        write(): Buffer;
    }
    class SecureValueErrorFiles extends TLObject {
        type: Raw.TypeSecureValueType;
        fileHash: Vector<bytes>;
        text: string;
        constructor(params: {
            type: Raw.TypeSecureValueType;
            fileHash: Vector<bytes>;
            text: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SecureValueErrorFiles>;
        write(): Buffer;
    }
    class SecureValueError extends TLObject {
        type: Raw.TypeSecureValueType;
        hash: bytes;
        text: string;
        constructor(params: {
            type: Raw.TypeSecureValueType;
            hash: bytes;
            text: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SecureValueError>;
        write(): Buffer;
    }
    class SecureValueErrorTranslationFile extends TLObject {
        type: Raw.TypeSecureValueType;
        fileHash: bytes;
        text: string;
        constructor(params: {
            type: Raw.TypeSecureValueType;
            fileHash: bytes;
            text: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SecureValueErrorTranslationFile>;
        write(): Buffer;
    }
    class SecureValueErrorTranslationFiles extends TLObject {
        type: Raw.TypeSecureValueType;
        fileHash: Vector<bytes>;
        text: string;
        constructor(params: {
            type: Raw.TypeSecureValueType;
            fileHash: Vector<bytes>;
            text: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SecureValueErrorTranslationFiles>;
        write(): Buffer;
    }
    class SecureCredentialsEncrypted extends TLObject {
        data: bytes;
        hash: bytes;
        secret: bytes;
        constructor(params: {
            data: bytes;
            hash: bytes;
            secret: bytes;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SecureCredentialsEncrypted>;
        write(): Buffer;
    }
    class SavedPhoneContact extends TLObject {
        phone: string;
        firstName: string;
        lastName: string;
        date: int;
        constructor(params: {
            phone: string;
            firstName: string;
            lastName: string;
            date: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SavedPhoneContact>;
        write(): Buffer;
    }
    class PasswordKdfAlgoUnknown extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PasswordKdfAlgoUnknown>;
        write(): Buffer;
    }
    class PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow extends TLObject {
        salt1: bytes;
        salt2: bytes;
        g: int;
        p: bytes;
        constructor(params: {
            salt1: bytes;
            salt2: bytes;
            g: int;
            p: bytes;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow>;
        write(): Buffer;
    }
    class SecurePasswordKdfAlgoUnknown extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SecurePasswordKdfAlgoUnknown>;
        write(): Buffer;
    }
    class SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000 extends TLObject {
        salt: bytes;
        constructor(params: {
            salt: bytes;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000>;
        write(): Buffer;
    }
    class SecurePasswordKdfAlgoSHA512 extends TLObject {
        salt: bytes;
        constructor(params: {
            salt: bytes;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SecurePasswordKdfAlgoSHA512>;
        write(): Buffer;
    }
    class SecureSecretSettings extends TLObject {
        secureAlgo: Raw.TypeSecurePasswordKdfAlgo;
        secureSecret: bytes;
        secureSecretId: long;
        constructor(params: {
            secureAlgo: Raw.TypeSecurePasswordKdfAlgo;
            secureSecret: bytes;
            secureSecretId: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SecureSecretSettings>;
        write(): Buffer;
    }
    class InputCheckPasswordEmpty extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputCheckPasswordEmpty>;
        write(): Buffer;
    }
    class InputCheckPasswordSRP extends TLObject {
        srpId: long;
        a: bytes;
        m1: bytes;
        constructor(params: {
            srpId: long;
            a: bytes;
            m1: bytes;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputCheckPasswordSRP>;
        write(): Buffer;
    }
    class SecureRequiredType extends TLObject {
        nativeNames?: boolean;
        selfieRequired?: boolean;
        translationRequired?: boolean;
        type: Raw.TypeSecureValueType;
        constructor(params: {
            nativeNames?: boolean;
            selfieRequired?: boolean;
            translationRequired?: boolean;
            type: Raw.TypeSecureValueType;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SecureRequiredType>;
        write(): Buffer;
    }
    class SecureRequiredTypeOneOf extends TLObject {
        types: Vector<Raw.TypeSecureRequiredType>;
        constructor(params: {
            types: Vector<Raw.TypeSecureRequiredType>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SecureRequiredTypeOneOf>;
        write(): Buffer;
    }
    class InputAppEvent extends TLObject {
        time: double;
        type: string;
        peer: long;
        data: Raw.TypeJSONValue;
        constructor(params: {
            time: double;
            type: string;
            peer: long;
            data: Raw.TypeJSONValue;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputAppEvent>;
        write(): Buffer;
    }
    class JsonObjectValue extends TLObject {
        key: string;
        value: Raw.TypeJSONValue;
        constructor(params: {
            key: string;
            value: Raw.TypeJSONValue;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.JsonObjectValue>;
        write(): Buffer;
    }
    class JsonNull extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.JsonNull>;
        write(): Buffer;
    }
    class JsonBool extends TLObject {
        value: Bool;
        constructor(params: {
            value: Bool;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.JsonBool>;
        write(): Buffer;
    }
    class JsonNumber extends TLObject {
        value: double;
        constructor(params: {
            value: double;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.JsonNumber>;
        write(): Buffer;
    }
    class JsonString extends TLObject {
        value: string;
        constructor(params: {
            value: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.JsonString>;
        write(): Buffer;
    }
    class JsonArray extends TLObject {
        value: Vector<Raw.TypeJSONValue>;
        constructor(params: {
            value: Vector<Raw.TypeJSONValue>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.JsonArray>;
        write(): Buffer;
    }
    class JsonObject extends TLObject {
        value: Vector<Raw.TypeJSONObjectValue>;
        constructor(params: {
            value: Vector<Raw.TypeJSONObjectValue>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.JsonObject>;
        write(): Buffer;
    }
    class PageTableCell extends TLObject {
        header?: boolean;
        alignCenter?: boolean;
        alignRight?: boolean;
        valignMiddle?: boolean;
        valignBottom?: boolean;
        text?: Raw.TypeRichText;
        colspan?: int;
        rowspan?: int;
        constructor(params: {
            header?: boolean;
            alignCenter?: boolean;
            alignRight?: boolean;
            valignMiddle?: boolean;
            valignBottom?: boolean;
            text?: Raw.TypeRichText;
            colspan?: int;
            rowspan?: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PageTableCell>;
        write(): Buffer;
    }
    class PageTableRow extends TLObject {
        cells: Vector<Raw.TypePageTableCell>;
        constructor(params: {
            cells: Vector<Raw.TypePageTableCell>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PageTableRow>;
        write(): Buffer;
    }
    class PageCaption extends TLObject {
        text: Raw.TypeRichText;
        credit: Raw.TypeRichText;
        constructor(params: {
            text: Raw.TypeRichText;
            credit: Raw.TypeRichText;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PageCaption>;
        write(): Buffer;
    }
    class PageListItemText extends TLObject {
        text: Raw.TypeRichText;
        constructor(params: {
            text: Raw.TypeRichText;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PageListItemText>;
        write(): Buffer;
    }
    class PageListItemBlocks extends TLObject {
        blocks: Vector<Raw.TypePageBlock>;
        constructor(params: {
            blocks: Vector<Raw.TypePageBlock>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PageListItemBlocks>;
        write(): Buffer;
    }
    class PageListOrderedItemText extends TLObject {
        num: string;
        text: Raw.TypeRichText;
        constructor(params: {
            num: string;
            text: Raw.TypeRichText;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PageListOrderedItemText>;
        write(): Buffer;
    }
    class PageListOrderedItemBlocks extends TLObject {
        num: string;
        blocks: Vector<Raw.TypePageBlock>;
        constructor(params: {
            num: string;
            blocks: Vector<Raw.TypePageBlock>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PageListOrderedItemBlocks>;
        write(): Buffer;
    }
    class PageRelatedArticle extends TLObject {
        url: string;
        webpageId: long;
        title?: string;
        description?: string;
        photoId?: long;
        author?: string;
        publishedDate?: int;
        constructor(params: {
            url: string;
            webpageId: long;
            title?: string;
            description?: string;
            photoId?: long;
            author?: string;
            publishedDate?: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PageRelatedArticle>;
        write(): Buffer;
    }
    class Page extends TLObject {
        part?: boolean;
        rtl?: boolean;
        v2?: boolean;
        url: string;
        blocks: Vector<Raw.TypePageBlock>;
        photos: Vector<Raw.TypePhoto>;
        documents: Vector<Raw.TypeDocument>;
        views?: int;
        constructor(params: {
            part?: boolean;
            rtl?: boolean;
            v2?: boolean;
            url: string;
            blocks: Vector<Raw.TypePageBlock>;
            photos: Vector<Raw.TypePhoto>;
            documents: Vector<Raw.TypeDocument>;
            views?: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.Page>;
        write(): Buffer;
    }
    class PollAnswer extends TLObject {
        text: Raw.TypeTextWithEntities;
        option: bytes;
        constructor(params: {
            text: Raw.TypeTextWithEntities;
            option: bytes;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PollAnswer>;
        write(): Buffer;
    }
    class Poll extends TLObject {
        id: long;
        closed?: boolean;
        publicVoters?: boolean;
        multipleChoice?: boolean;
        quiz?: boolean;
        question: Raw.TypeTextWithEntities;
        answers: Vector<Raw.TypePollAnswer>;
        closePeriod?: int;
        closeDate?: int;
        constructor(params: {
            id: long;
            closed?: boolean;
            publicVoters?: boolean;
            multipleChoice?: boolean;
            quiz?: boolean;
            question: Raw.TypeTextWithEntities;
            answers: Vector<Raw.TypePollAnswer>;
            closePeriod?: int;
            closeDate?: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.Poll>;
        write(): Buffer;
    }
    class PollAnswerVoters extends TLObject {
        chosen?: boolean;
        correct?: boolean;
        option: bytes;
        voters: int;
        constructor(params: {
            chosen?: boolean;
            correct?: boolean;
            option: bytes;
            voters: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PollAnswerVoters>;
        write(): Buffer;
    }
    class PollResults extends TLObject {
        min?: boolean;
        results?: Vector<Raw.TypePollAnswerVoters>;
        totalVoters?: int;
        recentVoters?: Vector<Raw.TypePeer>;
        solution?: string;
        solutionEntities?: Vector<Raw.TypeMessageEntity>;
        constructor(params: {
            min?: boolean;
            results?: Vector<Raw.TypePollAnswerVoters>;
            totalVoters?: int;
            recentVoters?: Vector<Raw.TypePeer>;
            solution?: string;
            solutionEntities?: Vector<Raw.TypeMessageEntity>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PollResults>;
        write(): Buffer;
    }
    class ChatOnlines extends TLObject {
        onlines: int;
        constructor(params: {
            onlines: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChatOnlines>;
        write(): Buffer;
    }
    class StatsURL extends TLObject {
        url: string;
        constructor(params: {
            url: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.StatsURL>;
        write(): Buffer;
    }
    class ChatAdminRights extends TLObject {
        changeInfo?: boolean;
        postMessages?: boolean;
        editMessages?: boolean;
        deleteMessages?: boolean;
        banUsers?: boolean;
        inviteUsers?: boolean;
        pinMessages?: boolean;
        addAdmins?: boolean;
        anonymous?: boolean;
        manageCall?: boolean;
        other?: boolean;
        manageTopics?: boolean;
        postStories?: boolean;
        editStories?: boolean;
        deleteStories?: boolean;
        constructor(params: {
            changeInfo?: boolean;
            postMessages?: boolean;
            editMessages?: boolean;
            deleteMessages?: boolean;
            banUsers?: boolean;
            inviteUsers?: boolean;
            pinMessages?: boolean;
            addAdmins?: boolean;
            anonymous?: boolean;
            manageCall?: boolean;
            other?: boolean;
            manageTopics?: boolean;
            postStories?: boolean;
            editStories?: boolean;
            deleteStories?: boolean;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChatAdminRights>;
        write(): Buffer;
    }
    class ChatBannedRights extends TLObject {
        viewMessages?: boolean;
        sendMessages?: boolean;
        sendMedia?: boolean;
        sendStickers?: boolean;
        sendGifs?: boolean;
        sendGames?: boolean;
        sendInline?: boolean;
        embedLinks?: boolean;
        sendPolls?: boolean;
        changeInfo?: boolean;
        inviteUsers?: boolean;
        pinMessages?: boolean;
        manageTopics?: boolean;
        sendPhotos?: boolean;
        sendVideos?: boolean;
        sendRoundvideos?: boolean;
        sendAudios?: boolean;
        sendVoices?: boolean;
        sendDocs?: boolean;
        sendPlain?: boolean;
        untilDate: int;
        constructor(params: {
            viewMessages?: boolean;
            sendMessages?: boolean;
            sendMedia?: boolean;
            sendStickers?: boolean;
            sendGifs?: boolean;
            sendGames?: boolean;
            sendInline?: boolean;
            embedLinks?: boolean;
            sendPolls?: boolean;
            changeInfo?: boolean;
            inviteUsers?: boolean;
            pinMessages?: boolean;
            manageTopics?: boolean;
            sendPhotos?: boolean;
            sendVideos?: boolean;
            sendRoundvideos?: boolean;
            sendAudios?: boolean;
            sendVoices?: boolean;
            sendDocs?: boolean;
            sendPlain?: boolean;
            untilDate: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChatBannedRights>;
        write(): Buffer;
    }
    class InputWallPaper extends TLObject {
        id: long;
        accessHash: long;
        constructor(params: {
            id: long;
            accessHash: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputWallPaper>;
        write(): Buffer;
    }
    class InputWallPaperSlug extends TLObject {
        slug: string;
        constructor(params: {
            slug: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputWallPaperSlug>;
        write(): Buffer;
    }
    class InputWallPaperNoFile extends TLObject {
        id: long;
        constructor(params: {
            id: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputWallPaperNoFile>;
        write(): Buffer;
    }
    class CodeSettings extends TLObject {
        allowFlashcall?: boolean;
        currentNumber?: boolean;
        allowAppHash?: boolean;
        allowMissedCall?: boolean;
        allowFirebase?: boolean;
        unknownNumber?: boolean;
        logoutTokens?: Vector<bytes>;
        token?: string;
        appSandbox?: Bool;
        constructor(params: {
            allowFlashcall?: boolean;
            currentNumber?: boolean;
            allowAppHash?: boolean;
            allowMissedCall?: boolean;
            allowFirebase?: boolean;
            unknownNumber?: boolean;
            logoutTokens?: Vector<bytes>;
            token?: string;
            appSandbox?: Bool;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.CodeSettings>;
        write(): Buffer;
    }
    class WallPaperSettings extends TLObject {
        blur?: boolean;
        motion?: boolean;
        backgroundColor?: int;
        secondBackgroundColor?: int;
        thirdBackgroundColor?: int;
        fourthBackgroundColor?: int;
        intensity?: int;
        rotation?: int;
        emoticon?: string;
        constructor(params: {
            blur?: boolean;
            motion?: boolean;
            backgroundColor?: int;
            secondBackgroundColor?: int;
            thirdBackgroundColor?: int;
            fourthBackgroundColor?: int;
            intensity?: int;
            rotation?: int;
            emoticon?: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.WallPaperSettings>;
        write(): Buffer;
    }
    class AutoDownloadSettings extends TLObject {
        disabled?: boolean;
        videoPreloadLarge?: boolean;
        audioPreloadNext?: boolean;
        phonecallsLessData?: boolean;
        storiesPreload?: boolean;
        photoSizeMax: int;
        videoSizeMax: long;
        fileSizeMax: long;
        videoUploadMaxbitrate: int;
        smallQueueActiveOperationsMax: int;
        largeQueueActiveOperationsMax: int;
        constructor(params: {
            disabled?: boolean;
            videoPreloadLarge?: boolean;
            audioPreloadNext?: boolean;
            phonecallsLessData?: boolean;
            storiesPreload?: boolean;
            photoSizeMax: int;
            videoSizeMax: long;
            fileSizeMax: long;
            videoUploadMaxbitrate: int;
            smallQueueActiveOperationsMax: int;
            largeQueueActiveOperationsMax: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.AutoDownloadSettings>;
        write(): Buffer;
    }
    class EmojiKeyword extends TLObject {
        keyword: string;
        emoticons: Vector<string>;
        constructor(params: {
            keyword: string;
            emoticons: Vector<string>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.EmojiKeyword>;
        write(): Buffer;
    }
    class EmojiKeywordDeleted extends TLObject {
        keyword: string;
        emoticons: Vector<string>;
        constructor(params: {
            keyword: string;
            emoticons: Vector<string>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.EmojiKeywordDeleted>;
        write(): Buffer;
    }
    class EmojiKeywordsDifference extends TLObject {
        langCode: string;
        fromVersion: int;
        version: int;
        keywords: Vector<Raw.TypeEmojiKeyword>;
        constructor(params: {
            langCode: string;
            fromVersion: int;
            version: int;
            keywords: Vector<Raw.TypeEmojiKeyword>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.EmojiKeywordsDifference>;
        write(): Buffer;
    }
    class EmojiURL extends TLObject {
        url: string;
        constructor(params: {
            url: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.EmojiURL>;
        write(): Buffer;
    }
    class EmojiLanguage extends TLObject {
        langCode: string;
        constructor(params: {
            langCode: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.EmojiLanguage>;
        write(): Buffer;
    }
    class Folder extends TLObject {
        autofillNewBroadcasts?: boolean;
        autofillPublicGroups?: boolean;
        autofillNewCorrespondents?: boolean;
        id: int;
        title: string;
        photo?: Raw.TypeChatPhoto;
        constructor(params: {
            autofillNewBroadcasts?: boolean;
            autofillPublicGroups?: boolean;
            autofillNewCorrespondents?: boolean;
            id: int;
            title: string;
            photo?: Raw.TypeChatPhoto;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.Folder>;
        write(): Buffer;
    }
    class InputFolderPeer extends TLObject {
        peer: Raw.TypeInputPeer;
        folderId: int;
        constructor(params: {
            peer: Raw.TypeInputPeer;
            folderId: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputFolderPeer>;
        write(): Buffer;
    }
    class FolderPeer extends TLObject {
        peer: Raw.TypePeer;
        folderId: int;
        constructor(params: {
            peer: Raw.TypePeer;
            folderId: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.FolderPeer>;
        write(): Buffer;
    }
    class UrlAuthResultRequest extends TLObject {
        requestWriteAccess?: boolean;
        bot: Raw.TypeUser;
        domain: string;
        constructor(params: {
            requestWriteAccess?: boolean;
            bot: Raw.TypeUser;
            domain: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UrlAuthResultRequest>;
        write(): Buffer;
    }
    class UrlAuthResultAccepted extends TLObject {
        url: string;
        constructor(params: {
            url: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UrlAuthResultAccepted>;
        write(): Buffer;
    }
    class UrlAuthResultDefault extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.UrlAuthResultDefault>;
        write(): Buffer;
    }
    class ChannelLocationEmpty extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelLocationEmpty>;
        write(): Buffer;
    }
    class ChannelLocation extends TLObject {
        geoPoint: Raw.TypeGeoPoint;
        address: string;
        constructor(params: {
            geoPoint: Raw.TypeGeoPoint;
            address: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChannelLocation>;
        write(): Buffer;
    }
    class PeerLocated extends TLObject {
        peer: Raw.TypePeer;
        expires: int;
        distance: int;
        constructor(params: {
            peer: Raw.TypePeer;
            expires: int;
            distance: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PeerLocated>;
        write(): Buffer;
    }
    class PeerSelfLocated extends TLObject {
        expires: int;
        constructor(params: {
            expires: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PeerSelfLocated>;
        write(): Buffer;
    }
    class RestrictionReason extends TLObject {
        platform: string;
        reason: string;
        text: string;
        constructor(params: {
            platform: string;
            reason: string;
            text: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.RestrictionReason>;
        write(): Buffer;
    }
    class InputTheme extends TLObject {
        id: long;
        accessHash: long;
        constructor(params: {
            id: long;
            accessHash: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputTheme>;
        write(): Buffer;
    }
    class InputThemeSlug extends TLObject {
        slug: string;
        constructor(params: {
            slug: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputThemeSlug>;
        write(): Buffer;
    }
    class Theme extends TLObject {
        creator?: boolean;
        default?: boolean;
        forChat?: boolean;
        id: long;
        accessHash: long;
        slug: string;
        title: string;
        document?: Raw.TypeDocument;
        settings?: Vector<Raw.TypeThemeSettings>;
        emoticon?: string;
        installsCount?: int;
        constructor(params: {
            creator?: boolean;
            default?: boolean;
            forChat?: boolean;
            id: long;
            accessHash: long;
            slug: string;
            title: string;
            document?: Raw.TypeDocument;
            settings?: Vector<Raw.TypeThemeSettings>;
            emoticon?: string;
            installsCount?: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.Theme>;
        write(): Buffer;
    }
    class BaseThemeClassic extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.BaseThemeClassic>;
        write(): Buffer;
    }
    class BaseThemeDay extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.BaseThemeDay>;
        write(): Buffer;
    }
    class BaseThemeNight extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.BaseThemeNight>;
        write(): Buffer;
    }
    class BaseThemeTinted extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.BaseThemeTinted>;
        write(): Buffer;
    }
    class BaseThemeArctic extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.BaseThemeArctic>;
        write(): Buffer;
    }
    class InputThemeSettings extends TLObject {
        messageColorsAnimated?: boolean;
        baseTheme: Raw.TypeBaseTheme;
        accentColor: int;
        outboxAccentColor?: int;
        messageColors?: Vector<int>;
        wallpaper?: Raw.TypeInputWallPaper;
        wallpaperSettings?: Raw.TypeWallPaperSettings;
        constructor(params: {
            messageColorsAnimated?: boolean;
            baseTheme: Raw.TypeBaseTheme;
            accentColor: int;
            outboxAccentColor?: int;
            messageColors?: Vector<int>;
            wallpaper?: Raw.TypeInputWallPaper;
            wallpaperSettings?: Raw.TypeWallPaperSettings;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputThemeSettings>;
        write(): Buffer;
    }
    class ThemeSettings extends TLObject {
        messageColorsAnimated?: boolean;
        baseTheme: Raw.TypeBaseTheme;
        accentColor: int;
        outboxAccentColor?: int;
        messageColors?: Vector<int>;
        wallpaper?: Raw.TypeWallPaper;
        constructor(params: {
            messageColorsAnimated?: boolean;
            baseTheme: Raw.TypeBaseTheme;
            accentColor: int;
            outboxAccentColor?: int;
            messageColors?: Vector<int>;
            wallpaper?: Raw.TypeWallPaper;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ThemeSettings>;
        write(): Buffer;
    }
    class WebPageAttributeTheme extends TLObject {
        documents?: Vector<Raw.TypeDocument>;
        settings?: Raw.TypeThemeSettings;
        constructor(params: {
            documents?: Vector<Raw.TypeDocument>;
            settings?: Raw.TypeThemeSettings;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.WebPageAttributeTheme>;
        write(): Buffer;
    }
    class WebPageAttributeStory extends TLObject {
        peer: Raw.TypePeer;
        id: int;
        story?: Raw.TypeStoryItem;
        constructor(params: {
            peer: Raw.TypePeer;
            id: int;
            story?: Raw.TypeStoryItem;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.WebPageAttributeStory>;
        write(): Buffer;
    }
    class WebPageAttributeStickerSet extends TLObject {
        emojis?: boolean;
        textColor?: boolean;
        stickers: Vector<Raw.TypeDocument>;
        constructor(params: {
            emojis?: boolean;
            textColor?: boolean;
            stickers: Vector<Raw.TypeDocument>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.WebPageAttributeStickerSet>;
        write(): Buffer;
    }
    class BankCardOpenUrl extends TLObject {
        url: string;
        name: string;
        constructor(params: {
            url: string;
            name: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.BankCardOpenUrl>;
        write(): Buffer;
    }
    class DialogFilter extends TLObject {
        contacts?: boolean;
        nonContacts?: boolean;
        groups?: boolean;
        broadcasts?: boolean;
        bots?: boolean;
        excludeMuted?: boolean;
        excludeRead?: boolean;
        excludeArchived?: boolean;
        id: int;
        title: string;
        emoticon?: string;
        color?: int;
        pinnedPeers: Vector<Raw.TypeInputPeer>;
        includePeers: Vector<Raw.TypeInputPeer>;
        excludePeers: Vector<Raw.TypeInputPeer>;
        constructor(params: {
            contacts?: boolean;
            nonContacts?: boolean;
            groups?: boolean;
            broadcasts?: boolean;
            bots?: boolean;
            excludeMuted?: boolean;
            excludeRead?: boolean;
            excludeArchived?: boolean;
            id: int;
            title: string;
            emoticon?: string;
            color?: int;
            pinnedPeers: Vector<Raw.TypeInputPeer>;
            includePeers: Vector<Raw.TypeInputPeer>;
            excludePeers: Vector<Raw.TypeInputPeer>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DialogFilter>;
        write(): Buffer;
    }
    class DialogFilterDefault extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DialogFilterDefault>;
        write(): Buffer;
    }
    class DialogFilterChatlist extends TLObject {
        hasMyInvites?: boolean;
        id: int;
        title: string;
        emoticon?: string;
        color?: int;
        pinnedPeers: Vector<Raw.TypeInputPeer>;
        includePeers: Vector<Raw.TypeInputPeer>;
        constructor(params: {
            hasMyInvites?: boolean;
            id: int;
            title: string;
            emoticon?: string;
            color?: int;
            pinnedPeers: Vector<Raw.TypeInputPeer>;
            includePeers: Vector<Raw.TypeInputPeer>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DialogFilterChatlist>;
        write(): Buffer;
    }
    class DialogFilterSuggested extends TLObject {
        filter: Raw.TypeDialogFilter;
        description: string;
        constructor(params: {
            filter: Raw.TypeDialogFilter;
            description: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DialogFilterSuggested>;
        write(): Buffer;
    }
    class StatsDateRangeDays extends TLObject {
        minDate: int;
        maxDate: int;
        constructor(params: {
            minDate: int;
            maxDate: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.StatsDateRangeDays>;
        write(): Buffer;
    }
    class StatsAbsValueAndPrev extends TLObject {
        current: double;
        previous: double;
        constructor(params: {
            current: double;
            previous: double;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.StatsAbsValueAndPrev>;
        write(): Buffer;
    }
    class StatsPercentValue extends TLObject {
        part: double;
        total: double;
        constructor(params: {
            part: double;
            total: double;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.StatsPercentValue>;
        write(): Buffer;
    }
    class StatsGraphAsync extends TLObject {
        token: string;
        constructor(params: {
            token: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.StatsGraphAsync>;
        write(): Buffer;
    }
    class StatsGraphError extends TLObject {
        error: string;
        constructor(params: {
            error: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.StatsGraphError>;
        write(): Buffer;
    }
    class StatsGraph extends TLObject {
        json: Raw.TypeDataJSON;
        zoomToken?: string;
        constructor(params: {
            json: Raw.TypeDataJSON;
            zoomToken?: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.StatsGraph>;
        write(): Buffer;
    }
    class VideoSize extends TLObject {
        type: string;
        w: int;
        h: int;
        size: int;
        videoStartTs?: double;
        constructor(params: {
            type: string;
            w: int;
            h: int;
            size: int;
            videoStartTs?: double;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.VideoSize>;
        write(): Buffer;
    }
    class VideoSizeEmojiMarkup extends TLObject {
        emojiId: long;
        backgroundColors: Vector<int>;
        constructor(params: {
            emojiId: long;
            backgroundColors: Vector<int>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.VideoSizeEmojiMarkup>;
        write(): Buffer;
    }
    class VideoSizeStickerMarkup extends TLObject {
        stickerset: Raw.TypeInputStickerSet;
        stickerId: long;
        backgroundColors: Vector<int>;
        constructor(params: {
            stickerset: Raw.TypeInputStickerSet;
            stickerId: long;
            backgroundColors: Vector<int>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.VideoSizeStickerMarkup>;
        write(): Buffer;
    }
    class StatsGroupTopPoster extends TLObject {
        userId: long;
        messages: int;
        avgChars: int;
        constructor(params: {
            userId: long;
            messages: int;
            avgChars: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.StatsGroupTopPoster>;
        write(): Buffer;
    }
    class StatsGroupTopAdmin extends TLObject {
        userId: long;
        deleted: int;
        kicked: int;
        banned: int;
        constructor(params: {
            userId: long;
            deleted: int;
            kicked: int;
            banned: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.StatsGroupTopAdmin>;
        write(): Buffer;
    }
    class StatsGroupTopInviter extends TLObject {
        userId: long;
        invitations: int;
        constructor(params: {
            userId: long;
            invitations: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.StatsGroupTopInviter>;
        write(): Buffer;
    }
    class GlobalPrivacySettings extends TLObject {
        archiveAndMuteNewNoncontactPeers?: boolean;
        keepArchivedUnmuted?: boolean;
        keepArchivedFolders?: boolean;
        hideReadMarks?: boolean;
        newNoncontactPeersRequirePremium?: boolean;
        constructor(params: {
            archiveAndMuteNewNoncontactPeers?: boolean;
            keepArchivedUnmuted?: boolean;
            keepArchivedFolders?: boolean;
            hideReadMarks?: boolean;
            newNoncontactPeersRequirePremium?: boolean;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.GlobalPrivacySettings>;
        write(): Buffer;
    }
    class MessageViews extends TLObject {
        views?: int;
        forwards?: int;
        replies?: Raw.TypeMessageReplies;
        constructor(params: {
            views?: int;
            forwards?: int;
            replies?: Raw.TypeMessageReplies;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageViews>;
        write(): Buffer;
    }
    class MessageReplyHeader extends TLObject {
        replyToScheduled?: boolean;
        forumTopic?: boolean;
        quote?: boolean;
        replyToMsgId?: int;
        replyToPeerId?: Raw.TypePeer;
        replyFrom?: Raw.TypeMessageFwdHeader;
        replyMedia?: Raw.TypeMessageMedia;
        replyToTopId?: int;
        quoteText?: string;
        quoteEntities?: Vector<Raw.TypeMessageEntity>;
        quoteOffset?: int;
        constructor(params: {
            replyToScheduled?: boolean;
            forumTopic?: boolean;
            quote?: boolean;
            replyToMsgId?: int;
            replyToPeerId?: Raw.TypePeer;
            replyFrom?: Raw.TypeMessageFwdHeader;
            replyMedia?: Raw.TypeMessageMedia;
            replyToTopId?: int;
            quoteText?: string;
            quoteEntities?: Vector<Raw.TypeMessageEntity>;
            quoteOffset?: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageReplyHeader>;
        write(): Buffer;
    }
    class MessageReplyStoryHeader extends TLObject {
        peer: Raw.TypePeer;
        storyId: int;
        constructor(params: {
            peer: Raw.TypePeer;
            storyId: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageReplyStoryHeader>;
        write(): Buffer;
    }
    class MessageReplies extends TLObject {
        comments?: boolean;
        replies: int;
        repliesPts: int;
        recentRepliers?: Vector<Raw.TypePeer>;
        channelId?: long;
        maxId?: int;
        readMaxId?: int;
        constructor(params: {
            comments?: boolean;
            replies: int;
            repliesPts: int;
            recentRepliers?: Vector<Raw.TypePeer>;
            channelId?: long;
            maxId?: int;
            readMaxId?: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageReplies>;
        write(): Buffer;
    }
    class PeerBlocked extends TLObject {
        peerId: Raw.TypePeer;
        date: int;
        constructor(params: {
            peerId: Raw.TypePeer;
            date: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PeerBlocked>;
        write(): Buffer;
    }
    class GroupCallDiscarded extends TLObject {
        id: long;
        accessHash: long;
        duration: int;
        constructor(params: {
            id: long;
            accessHash: long;
            duration: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.GroupCallDiscarded>;
        write(): Buffer;
    }
    class GroupCall extends TLObject {
        joinMuted?: boolean;
        canChangeJoinMuted?: boolean;
        joinDateAsc?: boolean;
        scheduleStartSubscribed?: boolean;
        canStartVideo?: boolean;
        recordVideoActive?: boolean;
        rtmpStream?: boolean;
        listenersHidden?: boolean;
        id: long;
        accessHash: long;
        participantsCount: int;
        title?: string;
        streamDcId?: int;
        recordStartDate?: int;
        scheduleDate?: int;
        unmutedVideoCount?: int;
        unmutedVideoLimit: int;
        version: int;
        constructor(params: {
            joinMuted?: boolean;
            canChangeJoinMuted?: boolean;
            joinDateAsc?: boolean;
            scheduleStartSubscribed?: boolean;
            canStartVideo?: boolean;
            recordVideoActive?: boolean;
            rtmpStream?: boolean;
            listenersHidden?: boolean;
            id: long;
            accessHash: long;
            participantsCount: int;
            title?: string;
            streamDcId?: int;
            recordStartDate?: int;
            scheduleDate?: int;
            unmutedVideoCount?: int;
            unmutedVideoLimit: int;
            version: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.GroupCall>;
        write(): Buffer;
    }
    class InputGroupCall extends TLObject {
        id: long;
        accessHash: long;
        constructor(params: {
            id: long;
            accessHash: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputGroupCall>;
        write(): Buffer;
    }
    class GroupCallParticipant extends TLObject {
        muted?: boolean;
        left?: boolean;
        canSelfUnmute?: boolean;
        justJoined?: boolean;
        versioned?: boolean;
        min?: boolean;
        mutedByYou?: boolean;
        volumeByAdmin?: boolean;
        self?: boolean;
        videoJoined?: boolean;
        peer: Raw.TypePeer;
        date: int;
        activeDate?: int;
        source: int;
        volume?: int;
        about?: string;
        raiseHandRating?: long;
        video?: Raw.TypeGroupCallParticipantVideo;
        presentation?: Raw.TypeGroupCallParticipantVideo;
        constructor(params: {
            muted?: boolean;
            left?: boolean;
            canSelfUnmute?: boolean;
            justJoined?: boolean;
            versioned?: boolean;
            min?: boolean;
            mutedByYou?: boolean;
            volumeByAdmin?: boolean;
            self?: boolean;
            videoJoined?: boolean;
            peer: Raw.TypePeer;
            date: int;
            activeDate?: int;
            source: int;
            volume?: int;
            about?: string;
            raiseHandRating?: long;
            video?: Raw.TypeGroupCallParticipantVideo;
            presentation?: Raw.TypeGroupCallParticipantVideo;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.GroupCallParticipant>;
        write(): Buffer;
    }
    class InlineQueryPeerTypeSameBotPM extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InlineQueryPeerTypeSameBotPM>;
        write(): Buffer;
    }
    class InlineQueryPeerTypePM extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InlineQueryPeerTypePM>;
        write(): Buffer;
    }
    class InlineQueryPeerTypeChat extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InlineQueryPeerTypeChat>;
        write(): Buffer;
    }
    class InlineQueryPeerTypeMegagroup extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InlineQueryPeerTypeMegagroup>;
        write(): Buffer;
    }
    class InlineQueryPeerTypeBroadcast extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InlineQueryPeerTypeBroadcast>;
        write(): Buffer;
    }
    class InlineQueryPeerTypeBotPM extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InlineQueryPeerTypeBotPM>;
        write(): Buffer;
    }
    class ChatInviteImporter extends TLObject {
        requested?: boolean;
        viaChatlist?: boolean;
        userId: long;
        date: int;
        about?: string;
        approvedBy?: long;
        constructor(params: {
            requested?: boolean;
            viaChatlist?: boolean;
            userId: long;
            date: int;
            about?: string;
            approvedBy?: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChatInviteImporter>;
        write(): Buffer;
    }
    class ChatAdminWithInvites extends TLObject {
        adminId: long;
        invitesCount: int;
        revokedInvitesCount: int;
        constructor(params: {
            adminId: long;
            invitesCount: int;
            revokedInvitesCount: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChatAdminWithInvites>;
        write(): Buffer;
    }
    class GroupCallParticipantVideoSourceGroup extends TLObject {
        semantics: string;
        sources: Vector<int>;
        constructor(params: {
            semantics: string;
            sources: Vector<int>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.GroupCallParticipantVideoSourceGroup>;
        write(): Buffer;
    }
    class GroupCallParticipantVideo extends TLObject {
        paused?: boolean;
        endpoint: string;
        sourceGroups: Vector<Raw.TypeGroupCallParticipantVideoSourceGroup>;
        audioSource?: int;
        constructor(params: {
            paused?: boolean;
            endpoint: string;
            sourceGroups: Vector<Raw.TypeGroupCallParticipantVideoSourceGroup>;
            audioSource?: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.GroupCallParticipantVideo>;
        write(): Buffer;
    }
    class BotCommandScopeDefault extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.BotCommandScopeDefault>;
        write(): Buffer;
    }
    class BotCommandScopeUsers extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.BotCommandScopeUsers>;
        write(): Buffer;
    }
    class BotCommandScopeChats extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.BotCommandScopeChats>;
        write(): Buffer;
    }
    class BotCommandScopeChatAdmins extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.BotCommandScopeChatAdmins>;
        write(): Buffer;
    }
    class BotCommandScopePeer extends TLObject {
        peer: Raw.TypeInputPeer;
        constructor(params: {
            peer: Raw.TypeInputPeer;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.BotCommandScopePeer>;
        write(): Buffer;
    }
    class BotCommandScopePeerAdmins extends TLObject {
        peer: Raw.TypeInputPeer;
        constructor(params: {
            peer: Raw.TypeInputPeer;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.BotCommandScopePeerAdmins>;
        write(): Buffer;
    }
    class BotCommandScopePeerUser extends TLObject {
        peer: Raw.TypeInputPeer;
        userId: Raw.TypeInputUser;
        constructor(params: {
            peer: Raw.TypeInputPeer;
            userId: Raw.TypeInputUser;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.BotCommandScopePeerUser>;
        write(): Buffer;
    }
    class SponsoredMessage extends TLObject {
        recommended?: boolean;
        canReport?: boolean;
        randomId: bytes;
        url: string;
        title: string;
        message: string;
        entities?: Vector<Raw.TypeMessageEntity>;
        photo?: Raw.TypePhoto;
        color?: Raw.TypePeerColor;
        buttonText: string;
        sponsorInfo?: string;
        additionalInfo?: string;
        constructor(params: {
            recommended?: boolean;
            canReport?: boolean;
            randomId: bytes;
            url: string;
            title: string;
            message: string;
            entities?: Vector<Raw.TypeMessageEntity>;
            photo?: Raw.TypePhoto;
            color?: Raw.TypePeerColor;
            buttonText: string;
            sponsorInfo?: string;
            additionalInfo?: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SponsoredMessage>;
        write(): Buffer;
    }
    class SearchResultsCalendarPeriod extends TLObject {
        date: int;
        minMsgId: int;
        maxMsgId: int;
        count: int;
        constructor(params: {
            date: int;
            minMsgId: int;
            maxMsgId: int;
            count: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SearchResultsCalendarPeriod>;
        write(): Buffer;
    }
    class SearchResultPosition extends TLObject {
        msgId: int;
        date: int;
        offset: int;
        constructor(params: {
            msgId: int;
            date: int;
            offset: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SearchResultPosition>;
        write(): Buffer;
    }
    class ReactionCount extends TLObject {
        chosenOrder?: int;
        reaction: Raw.TypeReaction;
        count: int;
        constructor(params: {
            chosenOrder?: int;
            reaction: Raw.TypeReaction;
            count: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ReactionCount>;
        write(): Buffer;
    }
    class MessageReactions extends TLObject {
        min?: boolean;
        canSeeList?: boolean;
        reactionsAsTags?: boolean;
        results: Vector<Raw.TypeReactionCount>;
        recentReactions?: Vector<Raw.TypeMessagePeerReaction>;
        constructor(params: {
            min?: boolean;
            canSeeList?: boolean;
            reactionsAsTags?: boolean;
            results: Vector<Raw.TypeReactionCount>;
            recentReactions?: Vector<Raw.TypeMessagePeerReaction>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageReactions>;
        write(): Buffer;
    }
    class AvailableReaction extends TLObject {
        inactive?: boolean;
        premium?: boolean;
        reaction: string;
        title: string;
        staticIcon: Raw.TypeDocument;
        appearAnimation: Raw.TypeDocument;
        selectAnimation: Raw.TypeDocument;
        activateAnimation: Raw.TypeDocument;
        effectAnimation: Raw.TypeDocument;
        aroundAnimation?: Raw.TypeDocument;
        centerIcon?: Raw.TypeDocument;
        constructor(params: {
            inactive?: boolean;
            premium?: boolean;
            reaction: string;
            title: string;
            staticIcon: Raw.TypeDocument;
            appearAnimation: Raw.TypeDocument;
            selectAnimation: Raw.TypeDocument;
            activateAnimation: Raw.TypeDocument;
            effectAnimation: Raw.TypeDocument;
            aroundAnimation?: Raw.TypeDocument;
            centerIcon?: Raw.TypeDocument;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.AvailableReaction>;
        write(): Buffer;
    }
    class MessagePeerReaction extends TLObject {
        big?: boolean;
        unread?: boolean;
        my?: boolean;
        peerId: Raw.TypePeer;
        date: int;
        reaction: Raw.TypeReaction;
        constructor(params: {
            big?: boolean;
            unread?: boolean;
            my?: boolean;
            peerId: Raw.TypePeer;
            date: int;
            reaction: Raw.TypeReaction;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessagePeerReaction>;
        write(): Buffer;
    }
    class GroupCallStreamChannel extends TLObject {
        channel: int;
        scale: int;
        lastTimestampMs: long;
        constructor(params: {
            channel: int;
            scale: int;
            lastTimestampMs: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.GroupCallStreamChannel>;
        write(): Buffer;
    }
    class AttachMenuBotIconColor extends TLObject {
        name: string;
        color: int;
        constructor(params: {
            name: string;
            color: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.AttachMenuBotIconColor>;
        write(): Buffer;
    }
    class AttachMenuBotIcon extends TLObject {
        name: string;
        icon: Raw.TypeDocument;
        colors?: Vector<Raw.TypeAttachMenuBotIconColor>;
        constructor(params: {
            name: string;
            icon: Raw.TypeDocument;
            colors?: Vector<Raw.TypeAttachMenuBotIconColor>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.AttachMenuBotIcon>;
        write(): Buffer;
    }
    class AttachMenuBot extends TLObject {
        inactive?: boolean;
        hasSettings?: boolean;
        requestWriteAccess?: boolean;
        showInAttachMenu?: boolean;
        showInSideMenu?: boolean;
        sideMenuDisclaimerNeeded?: boolean;
        botId: long;
        shortName: string;
        peerTypes?: Vector<Raw.TypeAttachMenuPeerType>;
        icons: Vector<Raw.TypeAttachMenuBotIcon>;
        constructor(params: {
            inactive?: boolean;
            hasSettings?: boolean;
            requestWriteAccess?: boolean;
            showInAttachMenu?: boolean;
            showInSideMenu?: boolean;
            sideMenuDisclaimerNeeded?: boolean;
            botId: long;
            shortName: string;
            peerTypes?: Vector<Raw.TypeAttachMenuPeerType>;
            icons: Vector<Raw.TypeAttachMenuBotIcon>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.AttachMenuBot>;
        write(): Buffer;
    }
    class AttachMenuBotsNotModified extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.AttachMenuBotsNotModified>;
        write(): Buffer;
    }
    class AttachMenuBots extends TLObject {
        hash: long;
        bots: Vector<Raw.TypeAttachMenuBot>;
        users: Vector<Raw.TypeUser>;
        constructor(params: {
            hash: long;
            bots: Vector<Raw.TypeAttachMenuBot>;
            users: Vector<Raw.TypeUser>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.AttachMenuBots>;
        write(): Buffer;
    }
    class AttachMenuBotsBot extends TLObject {
        bot: Raw.TypeAttachMenuBot;
        users: Vector<Raw.TypeUser>;
        constructor(params: {
            bot: Raw.TypeAttachMenuBot;
            users: Vector<Raw.TypeUser>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.AttachMenuBotsBot>;
        write(): Buffer;
    }
    class WebViewResultUrl extends TLObject {
        queryId: long;
        url: string;
        constructor(params: {
            queryId: long;
            url: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.WebViewResultUrl>;
        write(): Buffer;
    }
    class SimpleWebViewResultUrl extends TLObject {
        url: string;
        constructor(params: {
            url: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SimpleWebViewResultUrl>;
        write(): Buffer;
    }
    class WebViewMessageSent extends TLObject {
        msgId?: Raw.TypeInputBotInlineMessageID;
        constructor(params: {
            msgId?: Raw.TypeInputBotInlineMessageID;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.WebViewMessageSent>;
        write(): Buffer;
    }
    class BotMenuButtonDefault extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.BotMenuButtonDefault>;
        write(): Buffer;
    }
    class BotMenuButtonCommands extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.BotMenuButtonCommands>;
        write(): Buffer;
    }
    class BotMenuButton extends TLObject {
        text: string;
        url: string;
        constructor(params: {
            text: string;
            url: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.BotMenuButton>;
        write(): Buffer;
    }
    class NotificationSoundDefault extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.NotificationSoundDefault>;
        write(): Buffer;
    }
    class NotificationSoundNone extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.NotificationSoundNone>;
        write(): Buffer;
    }
    class NotificationSoundLocal extends TLObject {
        title: string;
        data: string;
        constructor(params: {
            title: string;
            data: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.NotificationSoundLocal>;
        write(): Buffer;
    }
    class NotificationSoundRingtone extends TLObject {
        id: long;
        constructor(params: {
            id: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.NotificationSoundRingtone>;
        write(): Buffer;
    }
    class AttachMenuPeerTypeSameBotPM extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.AttachMenuPeerTypeSameBotPM>;
        write(): Buffer;
    }
    class AttachMenuPeerTypeBotPM extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.AttachMenuPeerTypeBotPM>;
        write(): Buffer;
    }
    class AttachMenuPeerTypePM extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.AttachMenuPeerTypePM>;
        write(): Buffer;
    }
    class AttachMenuPeerTypeChat extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.AttachMenuPeerTypeChat>;
        write(): Buffer;
    }
    class AttachMenuPeerTypeBroadcast extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.AttachMenuPeerTypeBroadcast>;
        write(): Buffer;
    }
    class InputInvoiceMessage extends TLObject {
        peer: Raw.TypeInputPeer;
        msgId: int;
        constructor(params: {
            peer: Raw.TypeInputPeer;
            msgId: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputInvoiceMessage>;
        write(): Buffer;
    }
    class InputInvoiceSlug extends TLObject {
        slug: string;
        constructor(params: {
            slug: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputInvoiceSlug>;
        write(): Buffer;
    }
    class InputInvoicePremiumGiftCode extends TLObject {
        purpose: Raw.TypeInputStorePaymentPurpose;
        option: Raw.TypePremiumGiftCodeOption;
        constructor(params: {
            purpose: Raw.TypeInputStorePaymentPurpose;
            option: Raw.TypePremiumGiftCodeOption;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputInvoicePremiumGiftCode>;
        write(): Buffer;
    }
    class InputInvoiceStars extends TLObject {
        option: Raw.TypeStarsTopupOption;
        constructor(params: {
            option: Raw.TypeStarsTopupOption;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputInvoiceStars>;
        write(): Buffer;
    }
    class InputStorePaymentPremiumSubscription extends TLObject {
        restore?: boolean;
        upgrade?: boolean;
        constructor(params: {
            restore?: boolean;
            upgrade?: boolean;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputStorePaymentPremiumSubscription>;
        write(): Buffer;
    }
    class InputStorePaymentGiftPremium extends TLObject {
        userId: Raw.TypeInputUser;
        currency: string;
        amount: long;
        constructor(params: {
            userId: Raw.TypeInputUser;
            currency: string;
            amount: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputStorePaymentGiftPremium>;
        write(): Buffer;
    }
    class InputStorePaymentPremiumGiftCode extends TLObject {
        users: Vector<Raw.TypeInputUser>;
        boostPeer?: Raw.TypeInputPeer;
        currency: string;
        amount: long;
        constructor(params: {
            users: Vector<Raw.TypeInputUser>;
            boostPeer?: Raw.TypeInputPeer;
            currency: string;
            amount: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputStorePaymentPremiumGiftCode>;
        write(): Buffer;
    }
    class InputStorePaymentPremiumGiveaway extends TLObject {
        onlyNewSubscribers?: boolean;
        winnersAreVisible?: boolean;
        boostPeer: Raw.TypeInputPeer;
        additionalPeers?: Vector<Raw.TypeInputPeer>;
        countriesIso2?: Vector<string>;
        prizeDescription?: string;
        randomId: long;
        untilDate: int;
        currency: string;
        amount: long;
        constructor(params: {
            onlyNewSubscribers?: boolean;
            winnersAreVisible?: boolean;
            boostPeer: Raw.TypeInputPeer;
            additionalPeers?: Vector<Raw.TypeInputPeer>;
            countriesIso2?: Vector<string>;
            prizeDescription?: string;
            randomId: long;
            untilDate: int;
            currency: string;
            amount: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputStorePaymentPremiumGiveaway>;
        write(): Buffer;
    }
    class InputStorePaymentStars extends TLObject {
        stars: long;
        currency: string;
        amount: long;
        constructor(params: {
            stars: long;
            currency: string;
            amount: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputStorePaymentStars>;
        write(): Buffer;
    }
    class PremiumGiftOption extends TLObject {
        months: int;
        currency: string;
        amount: long;
        botUrl: string;
        storeProduct?: string;
        constructor(params: {
            months: int;
            currency: string;
            amount: long;
            botUrl: string;
            storeProduct?: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PremiumGiftOption>;
        write(): Buffer;
    }
    class PaymentFormMethod extends TLObject {
        url: string;
        title: string;
        constructor(params: {
            url: string;
            title: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PaymentFormMethod>;
        write(): Buffer;
    }
    class EmojiStatusEmpty extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.EmojiStatusEmpty>;
        write(): Buffer;
    }
    class EmojiStatus extends TLObject {
        documentId: long;
        constructor(params: {
            documentId: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.EmojiStatus>;
        write(): Buffer;
    }
    class EmojiStatusUntil extends TLObject {
        documentId: long;
        until: int;
        constructor(params: {
            documentId: long;
            until: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.EmojiStatusUntil>;
        write(): Buffer;
    }
    class ReactionEmpty extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ReactionEmpty>;
        write(): Buffer;
    }
    class ReactionEmoji extends TLObject {
        emoticon: string;
        constructor(params: {
            emoticon: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ReactionEmoji>;
        write(): Buffer;
    }
    class ReactionCustomEmoji extends TLObject {
        documentId: long;
        constructor(params: {
            documentId: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ReactionCustomEmoji>;
        write(): Buffer;
    }
    class ChatReactionsNone extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChatReactionsNone>;
        write(): Buffer;
    }
    class ChatReactionsAll extends TLObject {
        allowCustom?: boolean;
        constructor(params: {
            allowCustom?: boolean;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChatReactionsAll>;
        write(): Buffer;
    }
    class ChatReactionsSome extends TLObject {
        reactions: Vector<Raw.TypeReaction>;
        constructor(params: {
            reactions: Vector<Raw.TypeReaction>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ChatReactionsSome>;
        write(): Buffer;
    }
    class EmailVerifyPurposeLoginSetup extends TLObject {
        phoneNumber: string;
        phoneCodeHash: string;
        constructor(params: {
            phoneNumber: string;
            phoneCodeHash: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.EmailVerifyPurposeLoginSetup>;
        write(): Buffer;
    }
    class EmailVerifyPurposeLoginChange extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.EmailVerifyPurposeLoginChange>;
        write(): Buffer;
    }
    class EmailVerifyPurposePassport extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.EmailVerifyPurposePassport>;
        write(): Buffer;
    }
    class EmailVerificationCode extends TLObject {
        code: string;
        constructor(params: {
            code: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.EmailVerificationCode>;
        write(): Buffer;
    }
    class EmailVerificationGoogle extends TLObject {
        token: string;
        constructor(params: {
            token: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.EmailVerificationGoogle>;
        write(): Buffer;
    }
    class EmailVerificationApple extends TLObject {
        token: string;
        constructor(params: {
            token: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.EmailVerificationApple>;
        write(): Buffer;
    }
    class PremiumSubscriptionOption extends TLObject {
        current?: boolean;
        canPurchaseUpgrade?: boolean;
        transaction?: string;
        months: int;
        currency: string;
        amount: long;
        botUrl: string;
        storeProduct?: string;
        constructor(params: {
            current?: boolean;
            canPurchaseUpgrade?: boolean;
            transaction?: string;
            months: int;
            currency: string;
            amount: long;
            botUrl: string;
            storeProduct?: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PremiumSubscriptionOption>;
        write(): Buffer;
    }
    class SendAsPeer extends TLObject {
        premiumRequired?: boolean;
        peer: Raw.TypePeer;
        constructor(params: {
            premiumRequired?: boolean;
            peer: Raw.TypePeer;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SendAsPeer>;
        write(): Buffer;
    }
    class MessageExtendedMediaPreview extends TLObject {
        w?: int;
        h?: int;
        thumb?: Raw.TypePhotoSize;
        videoDuration?: int;
        constructor(params: {
            w?: int;
            h?: int;
            thumb?: Raw.TypePhotoSize;
            videoDuration?: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageExtendedMediaPreview>;
        write(): Buffer;
    }
    class MessageExtendedMedia extends TLObject {
        media: Raw.TypeMessageMedia;
        constructor(params: {
            media: Raw.TypeMessageMedia;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageExtendedMedia>;
        write(): Buffer;
    }
    class StickerKeyword extends TLObject {
        documentId: long;
        keyword: Vector<string>;
        constructor(params: {
            documentId: long;
            keyword: Vector<string>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.StickerKeyword>;
        write(): Buffer;
    }
    class Username extends TLObject {
        editable?: boolean;
        active?: boolean;
        username: string;
        constructor(params: {
            editable?: boolean;
            active?: boolean;
            username: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.Username>;
        write(): Buffer;
    }
    class ForumTopicDeleted extends TLObject {
        id: int;
        constructor(params: {
            id: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ForumTopicDeleted>;
        write(): Buffer;
    }
    class ForumTopic extends TLObject {
        my?: boolean;
        closed?: boolean;
        pinned?: boolean;
        short?: boolean;
        hidden?: boolean;
        id: int;
        date: int;
        title: string;
        iconColor: int;
        iconEmojiId?: long;
        topMessage: int;
        readInboxMaxId: int;
        readOutboxMaxId: int;
        unreadCount: int;
        unreadMentionsCount: int;
        unreadReactionsCount: int;
        fromId: Raw.TypePeer;
        notifySettings: Raw.TypePeerNotifySettings;
        draft?: Raw.TypeDraftMessage;
        constructor(params: {
            my?: boolean;
            closed?: boolean;
            pinned?: boolean;
            short?: boolean;
            hidden?: boolean;
            id: int;
            date: int;
            title: string;
            iconColor: int;
            iconEmojiId?: long;
            topMessage: int;
            readInboxMaxId: int;
            readOutboxMaxId: int;
            unreadCount: int;
            unreadMentionsCount: int;
            unreadReactionsCount: int;
            fromId: Raw.TypePeer;
            notifySettings: Raw.TypePeerNotifySettings;
            draft?: Raw.TypeDraftMessage;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ForumTopic>;
        write(): Buffer;
    }
    class DefaultHistoryTTL extends TLObject {
        period: int;
        constructor(params: {
            period: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DefaultHistoryTTL>;
        write(): Buffer;
    }
    class ExportedContactToken extends TLObject {
        url: string;
        expires: int;
        constructor(params: {
            url: string;
            expires: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ExportedContactToken>;
        write(): Buffer;
    }
    class RequestPeerTypeUser extends TLObject {
        bot?: Bool;
        premium?: Bool;
        constructor(params: {
            bot?: Bool;
            premium?: Bool;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.RequestPeerTypeUser>;
        write(): Buffer;
    }
    class RequestPeerTypeChat extends TLObject {
        creator?: boolean;
        botParticipant?: boolean;
        hasUsername?: Bool;
        forum?: Bool;
        userAdminRights?: Raw.TypeChatAdminRights;
        botAdminRights?: Raw.TypeChatAdminRights;
        constructor(params: {
            creator?: boolean;
            botParticipant?: boolean;
            hasUsername?: Bool;
            forum?: Bool;
            userAdminRights?: Raw.TypeChatAdminRights;
            botAdminRights?: Raw.TypeChatAdminRights;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.RequestPeerTypeChat>;
        write(): Buffer;
    }
    class RequestPeerTypeBroadcast extends TLObject {
        creator?: boolean;
        hasUsername?: Bool;
        userAdminRights?: Raw.TypeChatAdminRights;
        botAdminRights?: Raw.TypeChatAdminRights;
        constructor(params: {
            creator?: boolean;
            hasUsername?: Bool;
            userAdminRights?: Raw.TypeChatAdminRights;
            botAdminRights?: Raw.TypeChatAdminRights;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.RequestPeerTypeBroadcast>;
        write(): Buffer;
    }
    class EmojiListNotModified extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.EmojiListNotModified>;
        write(): Buffer;
    }
    class EmojiList extends TLObject {
        hash: long;
        documentId: Vector<long>;
        constructor(params: {
            hash: long;
            documentId: Vector<long>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.EmojiList>;
        write(): Buffer;
    }
    class EmojiGroup extends TLObject {
        title: string;
        iconEmojiId: long;
        emoticons: Vector<string>;
        constructor(params: {
            title: string;
            iconEmojiId: long;
            emoticons: Vector<string>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.EmojiGroup>;
        write(): Buffer;
    }
    class EmojiGroupGreeting extends TLObject {
        title: string;
        iconEmojiId: long;
        emoticons: Vector<string>;
        constructor(params: {
            title: string;
            iconEmojiId: long;
            emoticons: Vector<string>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.EmojiGroupGreeting>;
        write(): Buffer;
    }
    class EmojiGroupPremium extends TLObject {
        title: string;
        iconEmojiId: long;
        constructor(params: {
            title: string;
            iconEmojiId: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.EmojiGroupPremium>;
        write(): Buffer;
    }
    class TextWithEntities extends TLObject {
        text: string;
        entities: Vector<Raw.TypeMessageEntity>;
        constructor(params: {
            text: string;
            entities: Vector<Raw.TypeMessageEntity>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.TextWithEntities>;
        write(): Buffer;
    }
    class AutoSaveSettings extends TLObject {
        photos?: boolean;
        videos?: boolean;
        videoMaxSize?: long;
        constructor(params: {
            photos?: boolean;
            videos?: boolean;
            videoMaxSize?: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.AutoSaveSettings>;
        write(): Buffer;
    }
    class AutoSaveException extends TLObject {
        peer: Raw.TypePeer;
        settings: Raw.TypeAutoSaveSettings;
        constructor(params: {
            peer: Raw.TypePeer;
            settings: Raw.TypeAutoSaveSettings;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.AutoSaveException>;
        write(): Buffer;
    }
    class InputBotAppID extends TLObject {
        id: long;
        accessHash: long;
        constructor(params: {
            id: long;
            accessHash: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputBotAppID>;
        write(): Buffer;
    }
    class InputBotAppShortName extends TLObject {
        botId: Raw.TypeInputUser;
        shortName: string;
        constructor(params: {
            botId: Raw.TypeInputUser;
            shortName: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputBotAppShortName>;
        write(): Buffer;
    }
    class BotAppNotModified extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.BotAppNotModified>;
        write(): Buffer;
    }
    class BotApp extends TLObject {
        id: long;
        accessHash: long;
        shortName: string;
        title: string;
        description: string;
        photo: Raw.TypePhoto;
        document?: Raw.TypeDocument;
        hash: long;
        constructor(params: {
            id: long;
            accessHash: long;
            shortName: string;
            title: string;
            description: string;
            photo: Raw.TypePhoto;
            document?: Raw.TypeDocument;
            hash: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.BotApp>;
        write(): Buffer;
    }
    class AppWebViewResultUrl extends TLObject {
        url: string;
        constructor(params: {
            url: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.AppWebViewResultUrl>;
        write(): Buffer;
    }
    class InlineBotWebView extends TLObject {
        text: string;
        url: string;
        constructor(params: {
            text: string;
            url: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InlineBotWebView>;
        write(): Buffer;
    }
    class ReadParticipantDate extends TLObject {
        userId: long;
        date: int;
        constructor(params: {
            userId: long;
            date: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ReadParticipantDate>;
        write(): Buffer;
    }
    class InputChatlistDialogFilter extends TLObject {
        filterId: int;
        constructor(params: {
            filterId: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputChatlistDialogFilter>;
        write(): Buffer;
    }
    class ExportedChatlistInvite extends TLObject {
        title: string;
        url: string;
        peers: Vector<Raw.TypePeer>;
        constructor(params: {
            title: string;
            url: string;
            peers: Vector<Raw.TypePeer>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ExportedChatlistInvite>;
        write(): Buffer;
    }
    class MessagePeerVote extends TLObject {
        peer: Raw.TypePeer;
        option: bytes;
        date: int;
        constructor(params: {
            peer: Raw.TypePeer;
            option: bytes;
            date: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessagePeerVote>;
        write(): Buffer;
    }
    class MessagePeerVoteInputOption extends TLObject {
        peer: Raw.TypePeer;
        date: int;
        constructor(params: {
            peer: Raw.TypePeer;
            date: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessagePeerVoteInputOption>;
        write(): Buffer;
    }
    class MessagePeerVoteMultiple extends TLObject {
        peer: Raw.TypePeer;
        options: Vector<bytes>;
        date: int;
        constructor(params: {
            peer: Raw.TypePeer;
            options: Vector<bytes>;
            date: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessagePeerVoteMultiple>;
        write(): Buffer;
    }
    class StoryViews extends TLObject {
        hasViewers?: boolean;
        viewsCount: int;
        forwardsCount?: int;
        reactions?: Vector<Raw.TypeReactionCount>;
        reactionsCount?: int;
        recentViewers?: Vector<long>;
        constructor(params: {
            hasViewers?: boolean;
            viewsCount: int;
            forwardsCount?: int;
            reactions?: Vector<Raw.TypeReactionCount>;
            reactionsCount?: int;
            recentViewers?: Vector<long>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.StoryViews>;
        write(): Buffer;
    }
    class StoryItemDeleted extends TLObject {
        id: int;
        constructor(params: {
            id: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.StoryItemDeleted>;
        write(): Buffer;
    }
    class StoryItemSkipped extends TLObject {
        closeFriends?: boolean;
        id: int;
        date: int;
        expireDate: int;
        constructor(params: {
            closeFriends?: boolean;
            id: int;
            date: int;
            expireDate: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.StoryItemSkipped>;
        write(): Buffer;
    }
    class StoryItem extends TLObject {
        pinned?: boolean;
        public?: boolean;
        closeFriends?: boolean;
        min?: boolean;
        noforwards?: boolean;
        edited?: boolean;
        contacts?: boolean;
        selectedContacts?: boolean;
        out?: boolean;
        id: int;
        date: int;
        fromId?: Raw.TypePeer;
        fwdFrom?: Raw.TypeStoryFwdHeader;
        expireDate: int;
        caption?: string;
        entities?: Vector<Raw.TypeMessageEntity>;
        media: Raw.TypeMessageMedia;
        mediaAreas?: Vector<Raw.TypeMediaArea>;
        privacy?: Vector<Raw.TypePrivacyRule>;
        views?: Raw.TypeStoryViews;
        sentReaction?: Raw.TypeReaction;
        constructor(params: {
            pinned?: boolean;
            public?: boolean;
            closeFriends?: boolean;
            min?: boolean;
            noforwards?: boolean;
            edited?: boolean;
            contacts?: boolean;
            selectedContacts?: boolean;
            out?: boolean;
            id: int;
            date: int;
            fromId?: Raw.TypePeer;
            fwdFrom?: Raw.TypeStoryFwdHeader;
            expireDate: int;
            caption?: string;
            entities?: Vector<Raw.TypeMessageEntity>;
            media: Raw.TypeMessageMedia;
            mediaAreas?: Vector<Raw.TypeMediaArea>;
            privacy?: Vector<Raw.TypePrivacyRule>;
            views?: Raw.TypeStoryViews;
            sentReaction?: Raw.TypeReaction;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.StoryItem>;
        write(): Buffer;
    }
    class StoryView extends TLObject {
        blocked?: boolean;
        blockedMyStoriesFrom?: boolean;
        userId: long;
        date: int;
        reaction?: Raw.TypeReaction;
        constructor(params: {
            blocked?: boolean;
            blockedMyStoriesFrom?: boolean;
            userId: long;
            date: int;
            reaction?: Raw.TypeReaction;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.StoryView>;
        write(): Buffer;
    }
    class StoryViewPublicForward extends TLObject {
        blocked?: boolean;
        blockedMyStoriesFrom?: boolean;
        message: Raw.TypeMessage;
        constructor(params: {
            blocked?: boolean;
            blockedMyStoriesFrom?: boolean;
            message: Raw.TypeMessage;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.StoryViewPublicForward>;
        write(): Buffer;
    }
    class StoryViewPublicRepost extends TLObject {
        blocked?: boolean;
        blockedMyStoriesFrom?: boolean;
        peerId: Raw.TypePeer;
        story: Raw.TypeStoryItem;
        constructor(params: {
            blocked?: boolean;
            blockedMyStoriesFrom?: boolean;
            peerId: Raw.TypePeer;
            story: Raw.TypeStoryItem;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.StoryViewPublicRepost>;
        write(): Buffer;
    }
    class InputReplyToMessage extends TLObject {
        replyToMsgId: int;
        topMsgId?: int;
        replyToPeerId?: Raw.TypeInputPeer;
        quoteText?: string;
        quoteEntities?: Vector<Raw.TypeMessageEntity>;
        quoteOffset?: int;
        constructor(params: {
            replyToMsgId: int;
            topMsgId?: int;
            replyToPeerId?: Raw.TypeInputPeer;
            quoteText?: string;
            quoteEntities?: Vector<Raw.TypeMessageEntity>;
            quoteOffset?: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputReplyToMessage>;
        write(): Buffer;
    }
    class InputReplyToStory extends TLObject {
        peer: Raw.TypeInputPeer;
        storyId: int;
        constructor(params: {
            peer: Raw.TypeInputPeer;
            storyId: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputReplyToStory>;
        write(): Buffer;
    }
    class ExportedStoryLink extends TLObject {
        link: string;
        constructor(params: {
            link: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ExportedStoryLink>;
        write(): Buffer;
    }
    class StoriesStealthMode extends TLObject {
        activeUntilDate?: int;
        cooldownUntilDate?: int;
        constructor(params: {
            activeUntilDate?: int;
            cooldownUntilDate?: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.StoriesStealthMode>;
        write(): Buffer;
    }
    class MediaAreaCoordinates extends TLObject {
        x: double;
        y: double;
        w: double;
        h: double;
        rotation: double;
        constructor(params: {
            x: double;
            y: double;
            w: double;
            h: double;
            rotation: double;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MediaAreaCoordinates>;
        write(): Buffer;
    }
    class MediaAreaVenue extends TLObject {
        coordinates: Raw.TypeMediaAreaCoordinates;
        geo: Raw.TypeGeoPoint;
        title: string;
        address: string;
        provider: string;
        venueId: string;
        venueType: string;
        constructor(params: {
            coordinates: Raw.TypeMediaAreaCoordinates;
            geo: Raw.TypeGeoPoint;
            title: string;
            address: string;
            provider: string;
            venueId: string;
            venueType: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MediaAreaVenue>;
        write(): Buffer;
    }
    class InputMediaAreaVenue extends TLObject {
        coordinates: Raw.TypeMediaAreaCoordinates;
        queryId: long;
        resultId: string;
        constructor(params: {
            coordinates: Raw.TypeMediaAreaCoordinates;
            queryId: long;
            resultId: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputMediaAreaVenue>;
        write(): Buffer;
    }
    class MediaAreaGeoPoint extends TLObject {
        coordinates: Raw.TypeMediaAreaCoordinates;
        geo: Raw.TypeGeoPoint;
        constructor(params: {
            coordinates: Raw.TypeMediaAreaCoordinates;
            geo: Raw.TypeGeoPoint;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MediaAreaGeoPoint>;
        write(): Buffer;
    }
    class MediaAreaSuggestedReaction extends TLObject {
        dark?: boolean;
        flipped?: boolean;
        coordinates: Raw.TypeMediaAreaCoordinates;
        reaction: Raw.TypeReaction;
        constructor(params: {
            dark?: boolean;
            flipped?: boolean;
            coordinates: Raw.TypeMediaAreaCoordinates;
            reaction: Raw.TypeReaction;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MediaAreaSuggestedReaction>;
        write(): Buffer;
    }
    class MediaAreaChannelPost extends TLObject {
        coordinates: Raw.TypeMediaAreaCoordinates;
        channelId: long;
        msgId: int;
        constructor(params: {
            coordinates: Raw.TypeMediaAreaCoordinates;
            channelId: long;
            msgId: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MediaAreaChannelPost>;
        write(): Buffer;
    }
    class InputMediaAreaChannelPost extends TLObject {
        coordinates: Raw.TypeMediaAreaCoordinates;
        channel: Raw.TypeInputChannel;
        msgId: int;
        constructor(params: {
            coordinates: Raw.TypeMediaAreaCoordinates;
            channel: Raw.TypeInputChannel;
            msgId: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputMediaAreaChannelPost>;
        write(): Buffer;
    }
    class PeerStories extends TLObject {
        peer: Raw.TypePeer;
        maxReadId?: int;
        stories: Vector<Raw.TypeStoryItem>;
        constructor(params: {
            peer: Raw.TypePeer;
            maxReadId?: int;
            stories: Vector<Raw.TypeStoryItem>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PeerStories>;
        write(): Buffer;
    }
    class PremiumGiftCodeOption extends TLObject {
        users: int;
        months: int;
        storeProduct?: string;
        storeQuantity?: int;
        currency: string;
        amount: long;
        constructor(params: {
            users: int;
            months: int;
            storeProduct?: string;
            storeQuantity?: int;
            currency: string;
            amount: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PremiumGiftCodeOption>;
        write(): Buffer;
    }
    class PrepaidGiveaway extends TLObject {
        id: long;
        months: int;
        quantity: int;
        date: int;
        constructor(params: {
            id: long;
            months: int;
            quantity: int;
            date: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PrepaidGiveaway>;
        write(): Buffer;
    }
    class Boost extends TLObject {
        gift?: boolean;
        giveaway?: boolean;
        unclaimed?: boolean;
        id: string;
        userId?: long;
        giveawayMsgId?: int;
        date: int;
        expires: int;
        usedGiftSlug?: string;
        multiplier?: int;
        constructor(params: {
            gift?: boolean;
            giveaway?: boolean;
            unclaimed?: boolean;
            id: string;
            userId?: long;
            giveawayMsgId?: int;
            date: int;
            expires: int;
            usedGiftSlug?: string;
            multiplier?: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.Boost>;
        write(): Buffer;
    }
    class MyBoost extends TLObject {
        slot: int;
        peer?: Raw.TypePeer;
        date: int;
        expires: int;
        cooldownUntilDate?: int;
        constructor(params: {
            slot: int;
            peer?: Raw.TypePeer;
            date: int;
            expires: int;
            cooldownUntilDate?: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MyBoost>;
        write(): Buffer;
    }
    class StoryFwdHeader extends TLObject {
        modified?: boolean;
        from?: Raw.TypePeer;
        fromName?: string;
        storyId?: int;
        constructor(params: {
            modified?: boolean;
            from?: Raw.TypePeer;
            fromName?: string;
            storyId?: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.StoryFwdHeader>;
        write(): Buffer;
    }
    class PostInteractionCountersMessage extends TLObject {
        msgId: int;
        views: int;
        forwards: int;
        reactions: int;
        constructor(params: {
            msgId: int;
            views: int;
            forwards: int;
            reactions: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PostInteractionCountersMessage>;
        write(): Buffer;
    }
    class PostInteractionCountersStory extends TLObject {
        storyId: int;
        views: int;
        forwards: int;
        reactions: int;
        constructor(params: {
            storyId: int;
            views: int;
            forwards: int;
            reactions: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PostInteractionCountersStory>;
        write(): Buffer;
    }
    class PublicForwardMessage extends TLObject {
        message: Raw.TypeMessage;
        constructor(params: {
            message: Raw.TypeMessage;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PublicForwardMessage>;
        write(): Buffer;
    }
    class PublicForwardStory extends TLObject {
        peer: Raw.TypePeer;
        story: Raw.TypeStoryItem;
        constructor(params: {
            peer: Raw.TypePeer;
            story: Raw.TypeStoryItem;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PublicForwardStory>;
        write(): Buffer;
    }
    class PeerColor extends TLObject {
        color?: int;
        backgroundEmojiId?: long;
        constructor(params: {
            color?: int;
            backgroundEmojiId?: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PeerColor>;
        write(): Buffer;
    }
    class StoryReaction extends TLObject {
        peerId: Raw.TypePeer;
        date: int;
        reaction: Raw.TypeReaction;
        constructor(params: {
            peerId: Raw.TypePeer;
            date: int;
            reaction: Raw.TypeReaction;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.StoryReaction>;
        write(): Buffer;
    }
    class StoryReactionPublicForward extends TLObject {
        message: Raw.TypeMessage;
        constructor(params: {
            message: Raw.TypeMessage;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.StoryReactionPublicForward>;
        write(): Buffer;
    }
    class StoryReactionPublicRepost extends TLObject {
        peerId: Raw.TypePeer;
        story: Raw.TypeStoryItem;
        constructor(params: {
            peerId: Raw.TypePeer;
            story: Raw.TypeStoryItem;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.StoryReactionPublicRepost>;
        write(): Buffer;
    }
    class SavedDialog extends TLObject {
        pinned?: boolean;
        peer: Raw.TypePeer;
        topMessage: int;
        constructor(params: {
            pinned?: boolean;
            peer: Raw.TypePeer;
            topMessage: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SavedDialog>;
        write(): Buffer;
    }
    class SavedReactionTag extends TLObject {
        reaction: Raw.TypeReaction;
        title?: string;
        count: int;
        constructor(params: {
            reaction: Raw.TypeReaction;
            title?: string;
            count: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SavedReactionTag>;
        write(): Buffer;
    }
    class OutboxReadDate extends TLObject {
        date: int;
        constructor(params: {
            date: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.OutboxReadDate>;
        write(): Buffer;
    }
    class SmsJob extends TLObject {
        jobId: string;
        phoneNumber: string;
        text: string;
        constructor(params: {
            jobId: string;
            phoneNumber: string;
            text: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SmsJob>;
        write(): Buffer;
    }
    class BusinessWeeklyOpen extends TLObject {
        startMinute: int;
        endMinute: int;
        constructor(params: {
            startMinute: int;
            endMinute: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.BusinessWeeklyOpen>;
        write(): Buffer;
    }
    class BusinessWorkHours extends TLObject {
        openNow?: boolean;
        timezoneId: string;
        weeklyOpen: Vector<Raw.TypeBusinessWeeklyOpen>;
        constructor(params: {
            openNow?: boolean;
            timezoneId: string;
            weeklyOpen: Vector<Raw.TypeBusinessWeeklyOpen>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.BusinessWorkHours>;
        write(): Buffer;
    }
    class BusinessLocation extends TLObject {
        geoPoint?: Raw.TypeGeoPoint;
        address: string;
        constructor(params: {
            geoPoint?: Raw.TypeGeoPoint;
            address: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.BusinessLocation>;
        write(): Buffer;
    }
    class InputBusinessRecipients extends TLObject {
        existingChats?: boolean;
        newChats?: boolean;
        contacts?: boolean;
        nonContacts?: boolean;
        excludeSelected?: boolean;
        users?: Vector<Raw.TypeInputUser>;
        constructor(params: {
            existingChats?: boolean;
            newChats?: boolean;
            contacts?: boolean;
            nonContacts?: boolean;
            excludeSelected?: boolean;
            users?: Vector<Raw.TypeInputUser>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputBusinessRecipients>;
        write(): Buffer;
    }
    class BusinessRecipients extends TLObject {
        existingChats?: boolean;
        newChats?: boolean;
        contacts?: boolean;
        nonContacts?: boolean;
        excludeSelected?: boolean;
        users?: Vector<long>;
        constructor(params: {
            existingChats?: boolean;
            newChats?: boolean;
            contacts?: boolean;
            nonContacts?: boolean;
            excludeSelected?: boolean;
            users?: Vector<long>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.BusinessRecipients>;
        write(): Buffer;
    }
    class BusinessAwayMessageScheduleAlways extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.BusinessAwayMessageScheduleAlways>;
        write(): Buffer;
    }
    class BusinessAwayMessageScheduleOutsideWorkHours extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.BusinessAwayMessageScheduleOutsideWorkHours>;
        write(): Buffer;
    }
    class BusinessAwayMessageScheduleCustom extends TLObject {
        startDate: int;
        endDate: int;
        constructor(params: {
            startDate: int;
            endDate: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.BusinessAwayMessageScheduleCustom>;
        write(): Buffer;
    }
    class InputBusinessGreetingMessage extends TLObject {
        shortcutId: int;
        recipients: Raw.TypeInputBusinessRecipients;
        noActivityDays: int;
        constructor(params: {
            shortcutId: int;
            recipients: Raw.TypeInputBusinessRecipients;
            noActivityDays: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputBusinessGreetingMessage>;
        write(): Buffer;
    }
    class BusinessGreetingMessage extends TLObject {
        shortcutId: int;
        recipients: Raw.TypeBusinessRecipients;
        noActivityDays: int;
        constructor(params: {
            shortcutId: int;
            recipients: Raw.TypeBusinessRecipients;
            noActivityDays: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.BusinessGreetingMessage>;
        write(): Buffer;
    }
    class InputBusinessAwayMessage extends TLObject {
        offlineOnly?: boolean;
        shortcutId: int;
        schedule: Raw.TypeBusinessAwayMessageSchedule;
        recipients: Raw.TypeInputBusinessRecipients;
        constructor(params: {
            offlineOnly?: boolean;
            shortcutId: int;
            schedule: Raw.TypeBusinessAwayMessageSchedule;
            recipients: Raw.TypeInputBusinessRecipients;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputBusinessAwayMessage>;
        write(): Buffer;
    }
    class BusinessAwayMessage extends TLObject {
        offlineOnly?: boolean;
        shortcutId: int;
        schedule: Raw.TypeBusinessAwayMessageSchedule;
        recipients: Raw.TypeBusinessRecipients;
        constructor(params: {
            offlineOnly?: boolean;
            shortcutId: int;
            schedule: Raw.TypeBusinessAwayMessageSchedule;
            recipients: Raw.TypeBusinessRecipients;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.BusinessAwayMessage>;
        write(): Buffer;
    }
    class Timezone extends TLObject {
        id: string;
        name: string;
        utcOffset: int;
        constructor(params: {
            id: string;
            name: string;
            utcOffset: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.Timezone>;
        write(): Buffer;
    }
    class QuickReply extends TLObject {
        shortcutId: int;
        shortcut: string;
        topMessage: int;
        count: int;
        constructor(params: {
            shortcutId: int;
            shortcut: string;
            topMessage: int;
            count: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.QuickReply>;
        write(): Buffer;
    }
    class InputQuickReplyShortcut extends TLObject {
        shortcut: string;
        constructor(params: {
            shortcut: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputQuickReplyShortcut>;
        write(): Buffer;
    }
    class InputQuickReplyShortcutId extends TLObject {
        shortcutId: int;
        constructor(params: {
            shortcutId: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputQuickReplyShortcutId>;
        write(): Buffer;
    }
    class ConnectedBot extends TLObject {
        canReply?: boolean;
        botId: long;
        recipients: Raw.TypeBusinessBotRecipients;
        constructor(params: {
            canReply?: boolean;
            botId: long;
            recipients: Raw.TypeBusinessBotRecipients;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ConnectedBot>;
        write(): Buffer;
    }
    class Birthday extends TLObject {
        day: int;
        month: int;
        year?: int;
        constructor(params: {
            day: int;
            month: int;
            year?: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.Birthday>;
        write(): Buffer;
    }
    class BotBusinessConnection extends TLObject {
        canReply?: boolean;
        disabled?: boolean;
        connectionId: string;
        userId: long;
        dcId: int;
        date: int;
        constructor(params: {
            canReply?: boolean;
            disabled?: boolean;
            connectionId: string;
            userId: long;
            dcId: int;
            date: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.BotBusinessConnection>;
        write(): Buffer;
    }
    class InputBusinessIntro extends TLObject {
        title: string;
        description: string;
        sticker?: Raw.TypeInputDocument;
        constructor(params: {
            title: string;
            description: string;
            sticker?: Raw.TypeInputDocument;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputBusinessIntro>;
        write(): Buffer;
    }
    class BusinessIntro extends TLObject {
        title: string;
        description: string;
        sticker?: Raw.TypeDocument;
        constructor(params: {
            title: string;
            description: string;
            sticker?: Raw.TypeDocument;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.BusinessIntro>;
        write(): Buffer;
    }
    class InputCollectibleUsername extends TLObject {
        username: string;
        constructor(params: {
            username: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputCollectibleUsername>;
        write(): Buffer;
    }
    class InputCollectiblePhone extends TLObject {
        phone: string;
        constructor(params: {
            phone: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputCollectiblePhone>;
        write(): Buffer;
    }
    class InputBusinessBotRecipients extends TLObject {
        existingChats?: boolean;
        newChats?: boolean;
        contacts?: boolean;
        nonContacts?: boolean;
        excludeSelected?: boolean;
        users?: Vector<Raw.TypeInputUser>;
        excludeUsers?: Vector<Raw.TypeInputUser>;
        constructor(params: {
            existingChats?: boolean;
            newChats?: boolean;
            contacts?: boolean;
            nonContacts?: boolean;
            excludeSelected?: boolean;
            users?: Vector<Raw.TypeInputUser>;
            excludeUsers?: Vector<Raw.TypeInputUser>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputBusinessBotRecipients>;
        write(): Buffer;
    }
    class BusinessBotRecipients extends TLObject {
        existingChats?: boolean;
        newChats?: boolean;
        contacts?: boolean;
        nonContacts?: boolean;
        excludeSelected?: boolean;
        users?: Vector<long>;
        excludeUsers?: Vector<long>;
        constructor(params: {
            existingChats?: boolean;
            newChats?: boolean;
            contacts?: boolean;
            nonContacts?: boolean;
            excludeSelected?: boolean;
            users?: Vector<long>;
            excludeUsers?: Vector<long>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.BusinessBotRecipients>;
        write(): Buffer;
    }
    class ContactBirthday extends TLObject {
        contactId: long;
        birthday: Raw.TypeBirthday;
        constructor(params: {
            contactId: long;
            birthday: Raw.TypeBirthday;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ContactBirthday>;
        write(): Buffer;
    }
    class MissingInvitee extends TLObject {
        premiumWouldAllowInvite?: boolean;
        premiumRequiredForPm?: boolean;
        userId: long;
        constructor(params: {
            premiumWouldAllowInvite?: boolean;
            premiumRequiredForPm?: boolean;
            userId: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MissingInvitee>;
        write(): Buffer;
    }
    class InputBusinessChatLink extends TLObject {
        message: string;
        entities?: Vector<Raw.TypeMessageEntity>;
        title?: string;
        constructor(params: {
            message: string;
            entities?: Vector<Raw.TypeMessageEntity>;
            title?: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InputBusinessChatLink>;
        write(): Buffer;
    }
    class BusinessChatLink extends TLObject {
        link: string;
        message: string;
        entities?: Vector<Raw.TypeMessageEntity>;
        title?: string;
        views: int;
        constructor(params: {
            link: string;
            message: string;
            entities?: Vector<Raw.TypeMessageEntity>;
            title?: string;
            views: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.BusinessChatLink>;
        write(): Buffer;
    }
    class RequestedPeerUser extends TLObject {
        userId: long;
        firstName?: string;
        lastName?: string;
        username?: string;
        photo?: Raw.TypePhoto;
        constructor(params: {
            userId: long;
            firstName?: string;
            lastName?: string;
            username?: string;
            photo?: Raw.TypePhoto;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.RequestedPeerUser>;
        write(): Buffer;
    }
    class RequestedPeerChat extends TLObject {
        chatId: long;
        title?: string;
        photo?: Raw.TypePhoto;
        constructor(params: {
            chatId: long;
            title?: string;
            photo?: Raw.TypePhoto;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.RequestedPeerChat>;
        write(): Buffer;
    }
    class RequestedPeerChannel extends TLObject {
        channelId: long;
        title?: string;
        username?: string;
        photo?: Raw.TypePhoto;
        constructor(params: {
            channelId: long;
            title?: string;
            username?: string;
            photo?: Raw.TypePhoto;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.RequestedPeerChannel>;
        write(): Buffer;
    }
    class SponsoredMessageReportOption extends TLObject {
        text: string;
        option: bytes;
        constructor(params: {
            text: string;
            option: bytes;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SponsoredMessageReportOption>;
        write(): Buffer;
    }
    class BroadcastRevenueTransactionProceeds extends TLObject {
        amount: long;
        fromDate: int;
        toDate: int;
        constructor(params: {
            amount: long;
            fromDate: int;
            toDate: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.BroadcastRevenueTransactionProceeds>;
        write(): Buffer;
    }
    class BroadcastRevenueTransactionWithdrawal extends TLObject {
        pending?: boolean;
        failed?: boolean;
        amount: long;
        date: int;
        provider: string;
        transactionDate?: int;
        transactionUrl?: string;
        constructor(params: {
            pending?: boolean;
            failed?: boolean;
            amount: long;
            date: int;
            provider: string;
            transactionDate?: int;
            transactionUrl?: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.BroadcastRevenueTransactionWithdrawal>;
        write(): Buffer;
    }
    class BroadcastRevenueTransactionRefund extends TLObject {
        amount: long;
        date: int;
        provider: string;
        constructor(params: {
            amount: long;
            date: int;
            provider: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.BroadcastRevenueTransactionRefund>;
        write(): Buffer;
    }
    class ReactionNotificationsFromContacts extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ReactionNotificationsFromContacts>;
        write(): Buffer;
    }
    class ReactionNotificationsFromAll extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ReactionNotificationsFromAll>;
        write(): Buffer;
    }
    class ReactionsNotifySettings extends TLObject {
        messagesNotifyFrom?: Raw.TypeReactionNotificationsFrom;
        storiesNotifyFrom?: Raw.TypeReactionNotificationsFrom;
        sound: Raw.TypeNotificationSound;
        showPreviews: Bool;
        constructor(params: {
            messagesNotifyFrom?: Raw.TypeReactionNotificationsFrom;
            storiesNotifyFrom?: Raw.TypeReactionNotificationsFrom;
            sound: Raw.TypeNotificationSound;
            showPreviews: Bool;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.ReactionsNotifySettings>;
        write(): Buffer;
    }
    class BroadcastRevenueBalances extends TLObject {
        currentBalance: long;
        availableBalance: long;
        overallRevenue: long;
        constructor(params: {
            currentBalance: long;
            availableBalance: long;
            overallRevenue: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.BroadcastRevenueBalances>;
        write(): Buffer;
    }
    class AvailableEffect extends TLObject {
        premiumRequired?: boolean;
        id: long;
        emoticon: string;
        staticIconId?: long;
        effectStickerId: long;
        effectAnimationId?: long;
        constructor(params: {
            premiumRequired?: boolean;
            id: long;
            emoticon: string;
            staticIconId?: long;
            effectStickerId: long;
            effectAnimationId?: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.AvailableEffect>;
        write(): Buffer;
    }
    class FactCheck extends TLObject {
        needCheck?: boolean;
        country?: string;
        text?: Raw.TypeTextWithEntities;
        hash: long;
        constructor(params: {
            needCheck?: boolean;
            country?: string;
            text?: Raw.TypeTextWithEntities;
            hash: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.FactCheck>;
        write(): Buffer;
    }
    class StarsTransactionPeerUnsupported extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.StarsTransactionPeerUnsupported>;
        write(): Buffer;
    }
    class StarsTransactionPeerAppStore extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.StarsTransactionPeerAppStore>;
        write(): Buffer;
    }
    class StarsTransactionPeerPlayMarket extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.StarsTransactionPeerPlayMarket>;
        write(): Buffer;
    }
    class StarsTransactionPeerPremiumBot extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.StarsTransactionPeerPremiumBot>;
        write(): Buffer;
    }
    class StarsTransactionPeerFragment extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.StarsTransactionPeerFragment>;
        write(): Buffer;
    }
    class StarsTransactionPeer extends TLObject {
        peer: Raw.TypePeer;
        constructor(params: {
            peer: Raw.TypePeer;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.StarsTransactionPeer>;
        write(): Buffer;
    }
    class StarsTopupOption extends TLObject {
        extended?: boolean;
        stars: long;
        storeProduct?: string;
        currency: string;
        amount: long;
        constructor(params: {
            extended?: boolean;
            stars: long;
            storeProduct?: string;
            currency: string;
            amount: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.StarsTopupOption>;
        write(): Buffer;
    }
    class StarsTransaction extends TLObject {
        refund?: boolean;
        id: string;
        stars: long;
        date: int;
        peer: Raw.TypeStarsTransactionPeer;
        title?: string;
        description?: string;
        photo?: Raw.TypeWebDocument;
        constructor(params: {
            refund?: boolean;
            id: string;
            stars: long;
            date: int;
            peer: Raw.TypeStarsTransactionPeer;
            title?: string;
            description?: string;
            photo?: Raw.TypeWebDocument;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.StarsTransaction>;
        write(): Buffer;
    }
    class InvokeAfterMsg extends TLObject {
        __response__: X;
        msgId: long;
        query: X;
        constructor(params: {
            msgId: long;
            query: X;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InvokeAfterMsg>;
        write(): Buffer;
    }
    class InvokeAfterMsgs extends TLObject {
        __response__: X;
        msgIds: Vector<long>;
        query: X;
        constructor(params: {
            msgIds: Vector<long>;
            query: X;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InvokeAfterMsgs>;
        write(): Buffer;
    }
    class InitConnection extends TLObject {
        __response__: X;
        apiId: int;
        deviceModel: string;
        systemVersion: string;
        appVersion: string;
        systemLangCode: string;
        langPack: string;
        langCode: string;
        proxy?: Raw.TypeInputClientProxy;
        params?: Raw.TypeJSONValue;
        query: X;
        constructor(params: {
            apiId: int;
            deviceModel: string;
            systemVersion: string;
            appVersion: string;
            systemLangCode: string;
            langPack: string;
            langCode: string;
            proxy?: Raw.TypeInputClientProxy;
            params?: Raw.TypeJSONValue;
            query: X;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InitConnection>;
        write(): Buffer;
    }
    class InvokeWithLayer extends TLObject {
        __response__: X;
        layer: int;
        query: X;
        constructor(params: {
            layer: int;
            query: X;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InvokeWithLayer>;
        write(): Buffer;
    }
    class InvokeWithoutUpdates extends TLObject {
        __response__: X;
        query: X;
        constructor(params: {
            query: X;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InvokeWithoutUpdates>;
        write(): Buffer;
    }
    class InvokeWithMessagesRange extends TLObject {
        __response__: X;
        range: Raw.TypeMessageRange;
        query: X;
        constructor(params: {
            range: Raw.TypeMessageRange;
            query: X;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InvokeWithMessagesRange>;
        write(): Buffer;
    }
    class InvokeWithTakeout extends TLObject {
        __response__: X;
        takeoutId: long;
        query: X;
        constructor(params: {
            takeoutId: long;
            query: X;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InvokeWithTakeout>;
        write(): Buffer;
    }
    class InvokeWithBusinessConnection extends TLObject {
        __response__: X;
        connectionId: string;
        query: X;
        constructor(params: {
            connectionId: string;
            query: X;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InvokeWithBusinessConnection>;
        write(): Buffer;
    }
    class InvokeWithGooglePlayIntegrity extends TLObject {
        __response__: X;
        nonce: string;
        token: string;
        query: X;
        constructor(params: {
            nonce: string;
            token: string;
            query: X;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InvokeWithGooglePlayIntegrity>;
        write(): Buffer;
    }
    class InvokeWithApnsSecret extends TLObject {
        __response__: X;
        nonce: string;
        secret: string;
        query: X;
        constructor(params: {
            nonce: string;
            secret: string;
            query: X;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.InvokeWithApnsSecret>;
        write(): Buffer;
    }
    class DecryptedMessage8 extends TLObject {
        randomId: long;
        randomBytes: bytes;
        message: string;
        media: Raw.TypeDecryptedMessageMedia;
        constructor(params: {
            randomId: long;
            randomBytes: bytes;
            message: string;
            media: Raw.TypeDecryptedMessageMedia;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DecryptedMessage8>;
        write(): Buffer;
    }
    class DecryptedMessageService8 extends TLObject {
        randomId: long;
        randomBytes: bytes;
        action: Raw.TypeDecryptedMessageAction;
        constructor(params: {
            randomId: long;
            randomBytes: bytes;
            action: Raw.TypeDecryptedMessageAction;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DecryptedMessageService8>;
        write(): Buffer;
    }
    class DecryptedMessageMediaEmpty8 extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DecryptedMessageMediaEmpty8>;
        write(): Buffer;
    }
    class DecryptedMessageMediaPhoto8 extends TLObject {
        thumb: bytes;
        thumbW: int;
        thumbH: int;
        w: int;
        h: int;
        size: int;
        key: bytes;
        iv: bytes;
        constructor(params: {
            thumb: bytes;
            thumbW: int;
            thumbH: int;
            w: int;
            h: int;
            size: int;
            key: bytes;
            iv: bytes;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DecryptedMessageMediaPhoto8>;
        write(): Buffer;
    }
    class DecryptedMessageMediaVideo8 extends TLObject {
        thumb: bytes;
        thumbW: int;
        thumbH: int;
        duration: int;
        w: int;
        h: int;
        size: int;
        key: bytes;
        iv: bytes;
        constructor(params: {
            thumb: bytes;
            thumbW: int;
            thumbH: int;
            duration: int;
            w: int;
            h: int;
            size: int;
            key: bytes;
            iv: bytes;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DecryptedMessageMediaVideo8>;
        write(): Buffer;
    }
    class DecryptedMessageMediaGeoPoint8 extends TLObject {
        lat: double;
        long: double;
        constructor(params: {
            lat: double;
            long: double;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DecryptedMessageMediaGeoPoint8>;
        write(): Buffer;
    }
    class DecryptedMessageMediaContact8 extends TLObject {
        phoneNumber: string;
        firstName: string;
        lastName: string;
        userId: int;
        constructor(params: {
            phoneNumber: string;
            firstName: string;
            lastName: string;
            userId: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DecryptedMessageMediaContact8>;
        write(): Buffer;
    }
    class DecryptedMessageActionSetMessageTTL8 extends TLObject {
        ttlSeconds: int;
        constructor(params: {
            ttlSeconds: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DecryptedMessageActionSetMessageTTL8>;
        write(): Buffer;
    }
    class DecryptedMessageMediaDocument8 extends TLObject {
        thumb: bytes;
        thumbW: int;
        thumbH: int;
        fileName: string;
        mimeType: string;
        size: int;
        key: bytes;
        iv: bytes;
        constructor(params: {
            thumb: bytes;
            thumbW: int;
            thumbH: int;
            fileName: string;
            mimeType: string;
            size: int;
            key: bytes;
            iv: bytes;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DecryptedMessageMediaDocument8>;
        write(): Buffer;
    }
    class DecryptedMessageMediaAudio8 extends TLObject {
        duration: int;
        size: int;
        key: bytes;
        iv: bytes;
        constructor(params: {
            duration: int;
            size: int;
            key: bytes;
            iv: bytes;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DecryptedMessageMediaAudio8>;
        write(): Buffer;
    }
    class DecryptedMessageActionReadMessages8 extends TLObject {
        randomIds: Vector<long>;
        constructor(params: {
            randomIds: Vector<long>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DecryptedMessageActionReadMessages8>;
        write(): Buffer;
    }
    class DecryptedMessageActionDeleteMessages8 extends TLObject {
        randomIds: Vector<long>;
        constructor(params: {
            randomIds: Vector<long>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DecryptedMessageActionDeleteMessages8>;
        write(): Buffer;
    }
    class DecryptedMessageActionScreenshotMessages8 extends TLObject {
        randomIds: Vector<long>;
        constructor(params: {
            randomIds: Vector<long>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DecryptedMessageActionScreenshotMessages8>;
        write(): Buffer;
    }
    class DecryptedMessageActionFlushHistory8 extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DecryptedMessageActionFlushHistory8>;
        write(): Buffer;
    }
    class DecryptedMessage17 extends TLObject {
        randomId: long;
        ttl: int;
        message: string;
        media: Raw.TypeDecryptedMessageMedia;
        constructor(params: {
            randomId: long;
            ttl: int;
            message: string;
            media: Raw.TypeDecryptedMessageMedia;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DecryptedMessage17>;
        write(): Buffer;
    }
    class DecryptedMessageService17 extends TLObject {
        randomId: long;
        action: Raw.TypeDecryptedMessageAction;
        constructor(params: {
            randomId: long;
            action: Raw.TypeDecryptedMessageAction;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DecryptedMessageService17>;
        write(): Buffer;
    }
    class DecryptedMessageMediaVideo17 extends TLObject {
        thumb: bytes;
        thumbW: int;
        thumbH: int;
        duration: int;
        mimeType: string;
        w: int;
        h: int;
        size: int;
        key: bytes;
        iv: bytes;
        constructor(params: {
            thumb: bytes;
            thumbW: int;
            thumbH: int;
            duration: int;
            mimeType: string;
            w: int;
            h: int;
            size: int;
            key: bytes;
            iv: bytes;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DecryptedMessageMediaVideo17>;
        write(): Buffer;
    }
    class DecryptedMessageMediaAudio17 extends TLObject {
        duration: int;
        mimeType: string;
        size: int;
        key: bytes;
        iv: bytes;
        constructor(params: {
            duration: int;
            mimeType: string;
            size: int;
            key: bytes;
            iv: bytes;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DecryptedMessageMediaAudio17>;
        write(): Buffer;
    }
    class DecryptedMessageLayer17 extends TLObject {
        randomBytes: bytes;
        layer: int;
        inSeqNo: int;
        outSeqNo: int;
        message: Raw.TypeDecryptedMessage;
        constructor(params: {
            randomBytes: bytes;
            layer: int;
            inSeqNo: int;
            outSeqNo: int;
            message: Raw.TypeDecryptedMessage;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DecryptedMessageLayer17>;
        write(): Buffer;
    }
    class SendMessageUploadVideoAction17 extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SendMessageUploadVideoAction17>;
        write(): Buffer;
    }
    class SendMessageUploadAudioAction17 extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SendMessageUploadAudioAction17>;
        write(): Buffer;
    }
    class SendMessageUploadPhotoAction17 extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SendMessageUploadPhotoAction17>;
        write(): Buffer;
    }
    class SendMessageUploadDocumentAction17 extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SendMessageUploadDocumentAction17>;
        write(): Buffer;
    }
    class DecryptedMessageActionResend17 extends TLObject {
        startSeqNo: int;
        endSeqNo: int;
        constructor(params: {
            startSeqNo: int;
            endSeqNo: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DecryptedMessageActionResend17>;
        write(): Buffer;
    }
    class DecryptedMessageActionNotifyLayer17 extends TLObject {
        layer: int;
        constructor(params: {
            layer: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DecryptedMessageActionNotifyLayer17>;
        write(): Buffer;
    }
    class DecryptedMessageActionTyping17 extends TLObject {
        action: Raw.TypeSendMessageAction;
        constructor(params: {
            action: Raw.TypeSendMessageAction;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DecryptedMessageActionTyping17>;
        write(): Buffer;
    }
    class DecryptedMessageActionRequestKey20 extends TLObject {
        exchangeId: long;
        gA: bytes;
        constructor(params: {
            exchangeId: long;
            gA: bytes;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DecryptedMessageActionRequestKey20>;
        write(): Buffer;
    }
    class DecryptedMessageActionAcceptKey20 extends TLObject {
        exchangeId: long;
        gB: bytes;
        keyFingerprint: long;
        constructor(params: {
            exchangeId: long;
            gB: bytes;
            keyFingerprint: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DecryptedMessageActionAcceptKey20>;
        write(): Buffer;
    }
    class DecryptedMessageActionAbortKey20 extends TLObject {
        exchangeId: long;
        constructor(params: {
            exchangeId: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DecryptedMessageActionAbortKey20>;
        write(): Buffer;
    }
    class DecryptedMessageActionCommitKey20 extends TLObject {
        exchangeId: long;
        keyFingerprint: long;
        constructor(params: {
            exchangeId: long;
            keyFingerprint: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DecryptedMessageActionCommitKey20>;
        write(): Buffer;
    }
    class DecryptedMessageActionNoop20 extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DecryptedMessageActionNoop20>;
        write(): Buffer;
    }
    class DocumentAttributeSticker23 extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DocumentAttributeSticker23>;
        write(): Buffer;
    }
    class DocumentAttributeVideo23 extends TLObject {
        duration: int;
        w: int;
        h: int;
        constructor(params: {
            duration: int;
            w: int;
            h: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DocumentAttributeVideo23>;
        write(): Buffer;
    }
    class DocumentAttributeAudio23 extends TLObject {
        duration: int;
        constructor(params: {
            duration: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DocumentAttributeAudio23>;
        write(): Buffer;
    }
    class PhotoSize23 extends TLObject {
        type: string;
        location: Raw.TypeFileLocation;
        w: int;
        h: int;
        size: int;
        constructor(params: {
            type: string;
            location: Raw.TypeFileLocation;
            w: int;
            h: int;
            size: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PhotoSize23>;
        write(): Buffer;
    }
    class PhotoCachedSize23 extends TLObject {
        type: string;
        location: Raw.TypeFileLocation;
        w: int;
        h: int;
        bytes: bytes;
        constructor(params: {
            type: string;
            location: Raw.TypeFileLocation;
            w: int;
            h: int;
            bytes: bytes;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.PhotoCachedSize23>;
        write(): Buffer;
    }
    class FileLocationUnavailable23 extends TLObject {
        volumeId: long;
        localId: int;
        secret: long;
        constructor(params: {
            volumeId: long;
            localId: int;
            secret: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.FileLocationUnavailable23>;
        write(): Buffer;
    }
    class FileLocation23 extends TLObject {
        dcId: int;
        volumeId: long;
        localId: int;
        secret: long;
        constructor(params: {
            dcId: int;
            volumeId: long;
            localId: int;
            secret: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.FileLocation23>;
        write(): Buffer;
    }
    class DecryptedMessageMediaExternalDocument23 extends TLObject {
        id: long;
        accessHash: long;
        date: int;
        mimeType: string;
        size: int;
        thumb: Raw.TypePhotoSize;
        dcId: int;
        attributes: Vector<Raw.TypeDocumentAttribute>;
        constructor(params: {
            id: long;
            accessHash: long;
            date: int;
            mimeType: string;
            size: int;
            thumb: Raw.TypePhotoSize;
            dcId: int;
            attributes: Vector<Raw.TypeDocumentAttribute>;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DecryptedMessageMediaExternalDocument23>;
        write(): Buffer;
    }
    class DecryptedMessage45 extends TLObject {
        randomId: long;
        ttl: int;
        message: string;
        media?: Raw.TypeDecryptedMessageMedia;
        entities?: Vector<Raw.TypeMessageEntity>;
        viaBotName?: string;
        replyToRandomId?: long;
        constructor(params: {
            randomId: long;
            ttl: int;
            message: string;
            media?: Raw.TypeDecryptedMessageMedia;
            entities?: Vector<Raw.TypeMessageEntity>;
            viaBotName?: string;
            replyToRandomId?: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DecryptedMessage45>;
        write(): Buffer;
    }
    class DecryptedMessageMediaPhoto45 extends TLObject {
        thumb: bytes;
        thumbW: int;
        thumbH: int;
        w: int;
        h: int;
        size: int;
        key: bytes;
        iv: bytes;
        caption: string;
        constructor(params: {
            thumb: bytes;
            thumbW: int;
            thumbH: int;
            w: int;
            h: int;
            size: int;
            key: bytes;
            iv: bytes;
            caption: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DecryptedMessageMediaPhoto45>;
        write(): Buffer;
    }
    class DecryptedMessageMediaVideo45 extends TLObject {
        thumb: bytes;
        thumbW: int;
        thumbH: int;
        duration: int;
        mimeType: string;
        w: int;
        h: int;
        size: int;
        key: bytes;
        iv: bytes;
        caption: string;
        constructor(params: {
            thumb: bytes;
            thumbW: int;
            thumbH: int;
            duration: int;
            mimeType: string;
            w: int;
            h: int;
            size: int;
            key: bytes;
            iv: bytes;
            caption: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DecryptedMessageMediaVideo45>;
        write(): Buffer;
    }
    class DecryptedMessageMediaDocument45 extends TLObject {
        thumb: bytes;
        thumbW: int;
        thumbH: int;
        mimeType: string;
        size: int;
        key: bytes;
        iv: bytes;
        attributes: Vector<Raw.TypeDocumentAttribute>;
        caption: string;
        constructor(params: {
            thumb: bytes;
            thumbW: int;
            thumbH: int;
            mimeType: string;
            size: int;
            key: bytes;
            iv: bytes;
            attributes: Vector<Raw.TypeDocumentAttribute>;
            caption: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DecryptedMessageMediaDocument45>;
        write(): Buffer;
    }
    class DocumentAttributeSticker45 extends TLObject {
        alt: string;
        stickerset: Raw.TypeInputStickerSet;
        constructor(params: {
            alt: string;
            stickerset: Raw.TypeInputStickerSet;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DocumentAttributeSticker45>;
        write(): Buffer;
    }
    class DocumentAttributeAudio45 extends TLObject {
        duration: int;
        title: string;
        performer: string;
        constructor(params: {
            duration: int;
            title: string;
            performer: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DocumentAttributeAudio45>;
        write(): Buffer;
    }
    class DecryptedMessageMediaVenue45 extends TLObject {
        lat: double;
        long: double;
        title: string;
        address: string;
        provider: string;
        venueId: string;
        constructor(params: {
            lat: double;
            long: double;
            title: string;
            address: string;
            provider: string;
            venueId: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DecryptedMessageMediaVenue45>;
        write(): Buffer;
    }
    class DecryptedMessageMediaWebPage45 extends TLObject {
        url: string;
        constructor(params: {
            url: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DecryptedMessageMediaWebPage45>;
        write(): Buffer;
    }
    class DocumentAttributeVideo66 extends TLObject {
        roundMessage?: boolean;
        duration: int;
        w: int;
        h: int;
        constructor(params: {
            roundMessage?: boolean;
            duration: int;
            w: int;
            h: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DocumentAttributeVideo66>;
        write(): Buffer;
    }
    class SendMessageUploadRoundAction66 extends TLObject {
        constructor();
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.SendMessageUploadRoundAction66>;
        write(): Buffer;
    }
    class DecryptedMessage73 extends TLObject {
        noWebpage?: boolean;
        silent?: boolean;
        randomId: long;
        ttl: int;
        message: string;
        media?: Raw.TypeDecryptedMessageMedia;
        entities?: Vector<Raw.TypeMessageEntity>;
        viaBotName?: string;
        replyToRandomId?: long;
        groupedId?: long;
        constructor(params: {
            noWebpage?: boolean;
            silent?: boolean;
            randomId: long;
            ttl: int;
            message: string;
            media?: Raw.TypeDecryptedMessageMedia;
            entities?: Vector<Raw.TypeMessageEntity>;
            viaBotName?: string;
            replyToRandomId?: long;
            groupedId?: long;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DecryptedMessage73>;
        write(): Buffer;
    }
    class MessageEntityBlockquote101 extends TLObject {
        offset: int;
        length: int;
        constructor(params: {
            offset: int;
            length: int;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.MessageEntityBlockquote101>;
        write(): Buffer;
    }
    class DecryptedMessageMediaDocument143 extends TLObject {
        thumb: bytes;
        thumbW: int;
        thumbH: int;
        mimeType: string;
        size: long;
        key: bytes;
        iv: bytes;
        attributes: Vector<Raw.TypeDocumentAttribute>;
        caption: string;
        constructor(params: {
            thumb: bytes;
            thumbW: int;
            thumbH: int;
            mimeType: string;
            size: long;
            key: bytes;
            iv: bytes;
            attributes: Vector<Raw.TypeDocumentAttribute>;
            caption: string;
        });
        static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.DecryptedMessageMediaDocument143>;
        write(): Buffer;
    }
    namespace help {
        type TypeTimezonesList = Raw.help.TimezonesListNotModified | Raw.help.TimezonesList;
        type TypePeerColors = Raw.help.PeerColorsNotModified | Raw.help.PeerColors;
        type TypePremiumPromo = Raw.help.PremiumPromo;
        type TypeCountriesList = Raw.help.CountriesListNotModified | Raw.help.CountriesList;
        type TypePromoData = Raw.help.PromoDataEmpty | Raw.help.PromoData;
        type TypeUserInfo = Raw.help.UserInfoEmpty | Raw.help.UserInfo;
        type TypeSupportName = Raw.help.SupportName;
        type TypePassportConfig = Raw.help.PassportConfigNotModified | Raw.help.PassportConfig;
        type TypeAppConfig = Raw.help.AppConfigNotModified | Raw.help.AppConfig;
        type TypeDeepLinkInfo = Raw.help.DeepLinkInfoEmpty | Raw.help.DeepLinkInfo;
        type TypeTermsOfServiceUpdate = Raw.help.TermsOfServiceUpdateEmpty | Raw.help.TermsOfServiceUpdate;
        type TypeRecentMeUrls = Raw.help.RecentMeUrls;
        type TypeSupport = Raw.help.Support;
        type TypeInviteText = Raw.help.InviteText;
        type TypeAppUpdate = Raw.help.AppUpdate | Raw.help.NoAppUpdate;
        type TypePeerColorOption = Raw.help.PeerColorOption;
        type TypePeerColorSet = Raw.help.PeerColorSet | Raw.help.PeerColorProfileSet;
        type TypeCountry = Raw.help.Country;
        type TypeCountryCode = Raw.help.CountryCode;
        type TypeTermsOfService = Raw.help.TermsOfService;
        class ConfigSimple extends TLObject {
            date: int;
            expires: int;
            rules: Vector<Raw.TypeAccessPointRule>;
            constructor(params: {
                date: int;
                expires: int;
                rules: Vector<Raw.TypeAccessPointRule>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.ConfigSimple>;
            write(): Buffer;
        }
        class AppUpdate extends TLObject {
            canNotSkip?: boolean;
            id: int;
            version: string;
            text: string;
            entities: Vector<Raw.TypeMessageEntity>;
            document?: Raw.TypeDocument;
            url?: string;
            sticker?: Raw.TypeDocument;
            constructor(params: {
                canNotSkip?: boolean;
                id: int;
                version: string;
                text: string;
                entities: Vector<Raw.TypeMessageEntity>;
                document?: Raw.TypeDocument;
                url?: string;
                sticker?: Raw.TypeDocument;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.AppUpdate>;
            write(): Buffer;
        }
        class NoAppUpdate extends TLObject {
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.NoAppUpdate>;
            write(): Buffer;
        }
        class InviteText extends TLObject {
            message: string;
            constructor(params: {
                message: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.InviteText>;
            write(): Buffer;
        }
        class Support extends TLObject {
            phoneNumber: string;
            user: Raw.TypeUser;
            constructor(params: {
                phoneNumber: string;
                user: Raw.TypeUser;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.Support>;
            write(): Buffer;
        }
        class TermsOfService extends TLObject {
            popup?: boolean;
            id: Raw.TypeDataJSON;
            text: string;
            entities: Vector<Raw.TypeMessageEntity>;
            minAgeConfirm?: int;
            constructor(params: {
                popup?: boolean;
                id: Raw.TypeDataJSON;
                text: string;
                entities: Vector<Raw.TypeMessageEntity>;
                minAgeConfirm?: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.TermsOfService>;
            write(): Buffer;
        }
        class RecentMeUrls extends TLObject {
            urls: Vector<Raw.TypeRecentMeUrl>;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                urls: Vector<Raw.TypeRecentMeUrl>;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.RecentMeUrls>;
            write(): Buffer;
        }
        class TermsOfServiceUpdateEmpty extends TLObject {
            expires: int;
            constructor(params: {
                expires: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.TermsOfServiceUpdateEmpty>;
            write(): Buffer;
        }
        class TermsOfServiceUpdate extends TLObject {
            expires: int;
            termsOfService: Raw.help.TypeTermsOfService;
            constructor(params: {
                expires: int;
                termsOfService: Raw.help.TypeTermsOfService;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.TermsOfServiceUpdate>;
            write(): Buffer;
        }
        class DeepLinkInfoEmpty extends TLObject {
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.DeepLinkInfoEmpty>;
            write(): Buffer;
        }
        class DeepLinkInfo extends TLObject {
            updateApp?: boolean;
            message: string;
            entities?: Vector<Raw.TypeMessageEntity>;
            constructor(params: {
                updateApp?: boolean;
                message: string;
                entities?: Vector<Raw.TypeMessageEntity>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.DeepLinkInfo>;
            write(): Buffer;
        }
        class PassportConfigNotModified extends TLObject {
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.PassportConfigNotModified>;
            write(): Buffer;
        }
        class PassportConfig extends TLObject {
            hash: int;
            countriesLangs: Raw.TypeDataJSON;
            constructor(params: {
                hash: int;
                countriesLangs: Raw.TypeDataJSON;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.PassportConfig>;
            write(): Buffer;
        }
        class SupportName extends TLObject {
            name: string;
            constructor(params: {
                name: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.SupportName>;
            write(): Buffer;
        }
        class UserInfoEmpty extends TLObject {
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.UserInfoEmpty>;
            write(): Buffer;
        }
        class UserInfo extends TLObject {
            message: string;
            entities: Vector<Raw.TypeMessageEntity>;
            author: string;
            date: int;
            constructor(params: {
                message: string;
                entities: Vector<Raw.TypeMessageEntity>;
                author: string;
                date: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.UserInfo>;
            write(): Buffer;
        }
        class PromoDataEmpty extends TLObject {
            expires: int;
            constructor(params: {
                expires: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.PromoDataEmpty>;
            write(): Buffer;
        }
        class PromoData extends TLObject {
            proxy?: boolean;
            expires: int;
            peer: Raw.TypePeer;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            psaType?: string;
            psaMessage?: string;
            constructor(params: {
                proxy?: boolean;
                expires: int;
                peer: Raw.TypePeer;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
                psaType?: string;
                psaMessage?: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.PromoData>;
            write(): Buffer;
        }
        class CountryCode extends TLObject {
            countryCode: string;
            prefixes?: Vector<string>;
            patterns?: Vector<string>;
            constructor(params: {
                countryCode: string;
                prefixes?: Vector<string>;
                patterns?: Vector<string>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.CountryCode>;
            write(): Buffer;
        }
        class Country extends TLObject {
            hidden?: boolean;
            iso2: string;
            defaultName: string;
            name?: string;
            countryCodes: Vector<Raw.help.TypeCountryCode>;
            constructor(params: {
                hidden?: boolean;
                iso2: string;
                defaultName: string;
                name?: string;
                countryCodes: Vector<Raw.help.TypeCountryCode>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.Country>;
            write(): Buffer;
        }
        class CountriesListNotModified extends TLObject {
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.CountriesListNotModified>;
            write(): Buffer;
        }
        class CountriesList extends TLObject {
            countries: Vector<Raw.help.TypeCountry>;
            hash: int;
            constructor(params: {
                countries: Vector<Raw.help.TypeCountry>;
                hash: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.CountriesList>;
            write(): Buffer;
        }
        class PremiumPromo extends TLObject {
            statusText: string;
            statusEntities: Vector<Raw.TypeMessageEntity>;
            videoSections: Vector<string>;
            videos: Vector<Raw.TypeDocument>;
            periodOptions: Vector<Raw.TypePremiumSubscriptionOption>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                statusText: string;
                statusEntities: Vector<Raw.TypeMessageEntity>;
                videoSections: Vector<string>;
                videos: Vector<Raw.TypeDocument>;
                periodOptions: Vector<Raw.TypePremiumSubscriptionOption>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.PremiumPromo>;
            write(): Buffer;
        }
        class AppConfigNotModified extends TLObject {
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.AppConfigNotModified>;
            write(): Buffer;
        }
        class AppConfig extends TLObject {
            hash: int;
            config: Raw.TypeJSONValue;
            constructor(params: {
                hash: int;
                config: Raw.TypeJSONValue;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.AppConfig>;
            write(): Buffer;
        }
        class PeerColorSet extends TLObject {
            colors: Vector<int>;
            constructor(params: {
                colors: Vector<int>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.PeerColorSet>;
            write(): Buffer;
        }
        class PeerColorProfileSet extends TLObject {
            paletteColors: Vector<int>;
            bgColors: Vector<int>;
            storyColors: Vector<int>;
            constructor(params: {
                paletteColors: Vector<int>;
                bgColors: Vector<int>;
                storyColors: Vector<int>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.PeerColorProfileSet>;
            write(): Buffer;
        }
        class PeerColorOption extends TLObject {
            hidden?: boolean;
            colorId: int;
            colors?: Raw.help.TypePeerColorSet;
            darkColors?: Raw.help.TypePeerColorSet;
            channelMinLevel?: int;
            groupMinLevel?: int;
            constructor(params: {
                hidden?: boolean;
                colorId: int;
                colors?: Raw.help.TypePeerColorSet;
                darkColors?: Raw.help.TypePeerColorSet;
                channelMinLevel?: int;
                groupMinLevel?: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.PeerColorOption>;
            write(): Buffer;
        }
        class PeerColorsNotModified extends TLObject {
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.PeerColorsNotModified>;
            write(): Buffer;
        }
        class PeerColors extends TLObject {
            hash: int;
            colors: Vector<Raw.help.TypePeerColorOption>;
            constructor(params: {
                hash: int;
                colors: Vector<Raw.help.TypePeerColorOption>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.PeerColors>;
            write(): Buffer;
        }
        class TimezonesListNotModified extends TLObject {
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.TimezonesListNotModified>;
            write(): Buffer;
        }
        class TimezonesList extends TLObject {
            timezones: Vector<Raw.TypeTimezone>;
            hash: int;
            constructor(params: {
                timezones: Vector<Raw.TypeTimezone>;
                hash: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.TimezonesList>;
            write(): Buffer;
        }
        class GetConfig extends TLObject {
            __response__: Raw.TypeConfig;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.GetConfig>;
            write(): Buffer;
        }
        class GetNearestDc extends TLObject {
            __response__: Raw.TypeNearestDc;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.GetNearestDc>;
            write(): Buffer;
        }
        class GetAppUpdate extends TLObject {
            __response__: Raw.help.TypeAppUpdate;
            source: string;
            constructor(params: {
                source: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.GetAppUpdate>;
            write(): Buffer;
        }
        class GetInviteText extends TLObject {
            __response__: Raw.help.TypeInviteText;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.GetInviteText>;
            write(): Buffer;
        }
        class GetSupport extends TLObject {
            __response__: Raw.help.TypeSupport;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.GetSupport>;
            write(): Buffer;
        }
        class SetBotUpdatesStatus extends TLObject {
            __response__: Bool;
            pendingUpdatesCount: int;
            message: string;
            constructor(params: {
                pendingUpdatesCount: int;
                message: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.SetBotUpdatesStatus>;
            write(): Buffer;
        }
        class GetCdnConfig extends TLObject {
            __response__: Raw.TypeCdnConfig;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.GetCdnConfig>;
            write(): Buffer;
        }
        class GetRecentMeUrls extends TLObject {
            __response__: Raw.help.TypeRecentMeUrls;
            referer: string;
            constructor(params: {
                referer: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.GetRecentMeUrls>;
            write(): Buffer;
        }
        class GetTermsOfServiceUpdate extends TLObject {
            __response__: Raw.help.TypeTermsOfServiceUpdate;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.GetTermsOfServiceUpdate>;
            write(): Buffer;
        }
        class AcceptTermsOfService extends TLObject {
            __response__: Bool;
            id: Raw.TypeDataJSON;
            constructor(params: {
                id: Raw.TypeDataJSON;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.AcceptTermsOfService>;
            write(): Buffer;
        }
        class GetDeepLinkInfo extends TLObject {
            __response__: Raw.help.TypeDeepLinkInfo;
            path: string;
            constructor(params: {
                path: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.GetDeepLinkInfo>;
            write(): Buffer;
        }
        class GetAppConfig extends TLObject {
            __response__: Raw.help.TypeAppConfig;
            hash: int;
            constructor(params: {
                hash: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.GetAppConfig>;
            write(): Buffer;
        }
        class SaveAppLog extends TLObject {
            __response__: Bool;
            events: Vector<Raw.TypeInputAppEvent>;
            constructor(params: {
                events: Vector<Raw.TypeInputAppEvent>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.SaveAppLog>;
            write(): Buffer;
        }
        class GetPassportConfig extends TLObject {
            __response__: Raw.help.TypePassportConfig;
            hash: int;
            constructor(params: {
                hash: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.GetPassportConfig>;
            write(): Buffer;
        }
        class GetSupportName extends TLObject {
            __response__: Raw.help.TypeSupportName;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.GetSupportName>;
            write(): Buffer;
        }
        class GetUserInfo extends TLObject {
            __response__: Raw.help.TypeUserInfo;
            userId: Raw.TypeInputUser;
            constructor(params: {
                userId: Raw.TypeInputUser;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.GetUserInfo>;
            write(): Buffer;
        }
        class EditUserInfo extends TLObject {
            __response__: Raw.help.TypeUserInfo;
            userId: Raw.TypeInputUser;
            message: string;
            entities: Vector<Raw.TypeMessageEntity>;
            constructor(params: {
                userId: Raw.TypeInputUser;
                message: string;
                entities: Vector<Raw.TypeMessageEntity>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.EditUserInfo>;
            write(): Buffer;
        }
        class GetPromoData extends TLObject {
            __response__: Raw.help.TypePromoData;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.GetPromoData>;
            write(): Buffer;
        }
        class HidePromoData extends TLObject {
            __response__: Bool;
            peer: Raw.TypeInputPeer;
            constructor(params: {
                peer: Raw.TypeInputPeer;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.HidePromoData>;
            write(): Buffer;
        }
        class DismissSuggestion extends TLObject {
            __response__: Bool;
            peer: Raw.TypeInputPeer;
            suggestion: string;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                suggestion: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.DismissSuggestion>;
            write(): Buffer;
        }
        class GetCountriesList extends TLObject {
            __response__: Raw.help.TypeCountriesList;
            langCode: string;
            hash: int;
            constructor(params: {
                langCode: string;
                hash: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.GetCountriesList>;
            write(): Buffer;
        }
        class GetPremiumPromo extends TLObject {
            __response__: Raw.help.TypePremiumPromo;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.GetPremiumPromo>;
            write(): Buffer;
        }
        class GetPeerColors extends TLObject {
            __response__: Raw.help.TypePeerColors;
            hash: int;
            constructor(params: {
                hash: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.GetPeerColors>;
            write(): Buffer;
        }
        class GetPeerProfileColors extends TLObject {
            __response__: Raw.help.TypePeerColors;
            hash: int;
            constructor(params: {
                hash: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.GetPeerProfileColors>;
            write(): Buffer;
        }
        class GetTimezonesList extends TLObject {
            __response__: Raw.help.TypeTimezonesList;
            hash: int;
            constructor(params: {
                hash: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.help.GetTimezonesList>;
            write(): Buffer;
        }
    }
    namespace storage {
        type TypeFileType = Raw.storage.FileUnknown | Raw.storage.FilePartial | Raw.storage.FileJpeg | Raw.storage.FileGif | Raw.storage.FilePng | Raw.storage.FilePdf | Raw.storage.FileMp3 | Raw.storage.FileMov | Raw.storage.FileMp4 | Raw.storage.FileWebp;
        class FileUnknown extends TLObject {
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.storage.FileUnknown>;
            write(): Buffer;
        }
        class FilePartial extends TLObject {
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.storage.FilePartial>;
            write(): Buffer;
        }
        class FileJpeg extends TLObject {
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.storage.FileJpeg>;
            write(): Buffer;
        }
        class FileGif extends TLObject {
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.storage.FileGif>;
            write(): Buffer;
        }
        class FilePng extends TLObject {
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.storage.FilePng>;
            write(): Buffer;
        }
        class FilePdf extends TLObject {
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.storage.FilePdf>;
            write(): Buffer;
        }
        class FileMp3 extends TLObject {
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.storage.FileMp3>;
            write(): Buffer;
        }
        class FileMov extends TLObject {
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.storage.FileMov>;
            write(): Buffer;
        }
        class FileMp4 extends TLObject {
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.storage.FileMp4>;
            write(): Buffer;
        }
        class FileWebp extends TLObject {
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.storage.FileWebp>;
            write(): Buffer;
        }
    }
    namespace auth {
        type TypeLoginToken = Raw.auth.LoginToken | Raw.auth.LoginTokenMigrateTo | Raw.auth.LoginTokenSuccess;
        type TypePasswordRecovery = Raw.auth.PasswordRecovery;
        type TypeExportedAuthorization = Raw.auth.ExportedAuthorization;
        type TypeLoggedOut = Raw.auth.LoggedOut;
        type TypeSentCode = Raw.auth.SentCode | Raw.auth.SentCodeSuccess;
        type TypeAuthorization = Raw.auth.Authorization | Raw.auth.AuthorizationSignUpRequired;
        type TypeCodeType = Raw.auth.CodeTypeSms | Raw.auth.CodeTypeCall | Raw.auth.CodeTypeFlashCall | Raw.auth.CodeTypeMissedCall | Raw.auth.CodeTypeFragmentSms;
        type TypeSentCodeType = Raw.auth.SentCodeTypeApp | Raw.auth.SentCodeTypeSms | Raw.auth.SentCodeTypeCall | Raw.auth.SentCodeTypeFlashCall | Raw.auth.SentCodeTypeMissedCall | Raw.auth.SentCodeTypeEmailCode | Raw.auth.SentCodeTypeSetUpEmailRequired | Raw.auth.SentCodeTypeFragmentSms | Raw.auth.SentCodeTypeFirebaseSms | Raw.auth.SentCodeTypeSmsWord | Raw.auth.SentCodeTypeSmsPhrase;
        class SentCode extends TLObject {
            type: Raw.auth.TypeSentCodeType;
            phoneCodeHash: string;
            nextType?: Raw.auth.TypeCodeType;
            timeout?: int;
            constructor(params: {
                type: Raw.auth.TypeSentCodeType;
                phoneCodeHash: string;
                nextType?: Raw.auth.TypeCodeType;
                timeout?: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.auth.SentCode>;
            write(): Buffer;
        }
        class SentCodeSuccess extends TLObject {
            authorization: Raw.auth.TypeAuthorization;
            constructor(params: {
                authorization: Raw.auth.TypeAuthorization;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.auth.SentCodeSuccess>;
            write(): Buffer;
        }
        class Authorization extends TLObject {
            setupPasswordRequired?: boolean;
            otherwiseReloginDays?: int;
            tmpSessions?: int;
            futureAuthToken?: bytes;
            user: Raw.TypeUser;
            constructor(params: {
                setupPasswordRequired?: boolean;
                otherwiseReloginDays?: int;
                tmpSessions?: int;
                futureAuthToken?: bytes;
                user: Raw.TypeUser;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.auth.Authorization>;
            write(): Buffer;
        }
        class AuthorizationSignUpRequired extends TLObject {
            termsOfService?: Raw.help.TypeTermsOfService;
            constructor(params: {
                termsOfService?: Raw.help.TypeTermsOfService;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.auth.AuthorizationSignUpRequired>;
            write(): Buffer;
        }
        class ExportedAuthorization extends TLObject {
            id: long;
            bytes: bytes;
            constructor(params: {
                id: long;
                bytes: bytes;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.auth.ExportedAuthorization>;
            write(): Buffer;
        }
        class PasswordRecovery extends TLObject {
            emailPattern: string;
            constructor(params: {
                emailPattern: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.auth.PasswordRecovery>;
            write(): Buffer;
        }
        class CodeTypeSms extends TLObject {
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.auth.CodeTypeSms>;
            write(): Buffer;
        }
        class CodeTypeCall extends TLObject {
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.auth.CodeTypeCall>;
            write(): Buffer;
        }
        class CodeTypeFlashCall extends TLObject {
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.auth.CodeTypeFlashCall>;
            write(): Buffer;
        }
        class CodeTypeMissedCall extends TLObject {
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.auth.CodeTypeMissedCall>;
            write(): Buffer;
        }
        class CodeTypeFragmentSms extends TLObject {
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.auth.CodeTypeFragmentSms>;
            write(): Buffer;
        }
        class SentCodeTypeApp extends TLObject {
            length: int;
            constructor(params: {
                length: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.auth.SentCodeTypeApp>;
            write(): Buffer;
        }
        class SentCodeTypeSms extends TLObject {
            length: int;
            constructor(params: {
                length: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.auth.SentCodeTypeSms>;
            write(): Buffer;
        }
        class SentCodeTypeCall extends TLObject {
            length: int;
            constructor(params: {
                length: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.auth.SentCodeTypeCall>;
            write(): Buffer;
        }
        class SentCodeTypeFlashCall extends TLObject {
            pattern: string;
            constructor(params: {
                pattern: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.auth.SentCodeTypeFlashCall>;
            write(): Buffer;
        }
        class SentCodeTypeMissedCall extends TLObject {
            prefix: string;
            length: int;
            constructor(params: {
                prefix: string;
                length: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.auth.SentCodeTypeMissedCall>;
            write(): Buffer;
        }
        class SentCodeTypeEmailCode extends TLObject {
            appleSigninAllowed?: boolean;
            googleSigninAllowed?: boolean;
            emailPattern: string;
            length: int;
            resetAvailablePeriod?: int;
            resetPendingDate?: int;
            constructor(params: {
                appleSigninAllowed?: boolean;
                googleSigninAllowed?: boolean;
                emailPattern: string;
                length: int;
                resetAvailablePeriod?: int;
                resetPendingDate?: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.auth.SentCodeTypeEmailCode>;
            write(): Buffer;
        }
        class SentCodeTypeSetUpEmailRequired extends TLObject {
            appleSigninAllowed?: boolean;
            googleSigninAllowed?: boolean;
            constructor(params: {
                appleSigninAllowed?: boolean;
                googleSigninAllowed?: boolean;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.auth.SentCodeTypeSetUpEmailRequired>;
            write(): Buffer;
        }
        class SentCodeTypeFragmentSms extends TLObject {
            url: string;
            length: int;
            constructor(params: {
                url: string;
                length: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.auth.SentCodeTypeFragmentSms>;
            write(): Buffer;
        }
        class SentCodeTypeFirebaseSms extends TLObject {
            nonce?: bytes;
            playIntegrityNonce?: bytes;
            receipt?: string;
            pushTimeout?: int;
            length: int;
            constructor(params: {
                nonce?: bytes;
                playIntegrityNonce?: bytes;
                receipt?: string;
                pushTimeout?: int;
                length: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.auth.SentCodeTypeFirebaseSms>;
            write(): Buffer;
        }
        class SentCodeTypeSmsWord extends TLObject {
            beginning?: string;
            constructor(params: {
                beginning?: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.auth.SentCodeTypeSmsWord>;
            write(): Buffer;
        }
        class SentCodeTypeSmsPhrase extends TLObject {
            beginning?: string;
            constructor(params: {
                beginning?: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.auth.SentCodeTypeSmsPhrase>;
            write(): Buffer;
        }
        class LoginToken extends TLObject {
            expires: int;
            token: bytes;
            constructor(params: {
                expires: int;
                token: bytes;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.auth.LoginToken>;
            write(): Buffer;
        }
        class LoginTokenMigrateTo extends TLObject {
            dcId: int;
            token: bytes;
            constructor(params: {
                dcId: int;
                token: bytes;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.auth.LoginTokenMigrateTo>;
            write(): Buffer;
        }
        class LoginTokenSuccess extends TLObject {
            authorization: Raw.auth.TypeAuthorization;
            constructor(params: {
                authorization: Raw.auth.TypeAuthorization;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.auth.LoginTokenSuccess>;
            write(): Buffer;
        }
        class LoggedOut extends TLObject {
            futureAuthToken?: bytes;
            constructor(params: {
                futureAuthToken?: bytes;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.auth.LoggedOut>;
            write(): Buffer;
        }
        class SendCode extends TLObject {
            __response__: Raw.auth.TypeSentCode;
            phoneNumber: string;
            apiId: int;
            apiHash: string;
            settings: Raw.TypeCodeSettings;
            constructor(params: {
                phoneNumber: string;
                apiId: int;
                apiHash: string;
                settings: Raw.TypeCodeSettings;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.auth.SendCode>;
            write(): Buffer;
        }
        class SignUp extends TLObject {
            __response__: Raw.auth.TypeAuthorization;
            noJoinedNotifications?: boolean;
            phoneNumber: string;
            phoneCodeHash: string;
            firstName: string;
            lastName: string;
            constructor(params: {
                noJoinedNotifications?: boolean;
                phoneNumber: string;
                phoneCodeHash: string;
                firstName: string;
                lastName: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.auth.SignUp>;
            write(): Buffer;
        }
        class SignIn extends TLObject {
            __response__: Raw.auth.TypeAuthorization;
            phoneNumber: string;
            phoneCodeHash: string;
            phoneCode?: string;
            emailVerification?: Raw.TypeEmailVerification;
            constructor(params: {
                phoneNumber: string;
                phoneCodeHash: string;
                phoneCode?: string;
                emailVerification?: Raw.TypeEmailVerification;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.auth.SignIn>;
            write(): Buffer;
        }
        class LogOut extends TLObject {
            __response__: Raw.auth.TypeLoggedOut;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.auth.LogOut>;
            write(): Buffer;
        }
        class ResetAuthorizations extends TLObject {
            __response__: Bool;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.auth.ResetAuthorizations>;
            write(): Buffer;
        }
        class ExportAuthorization extends TLObject {
            __response__: Raw.auth.TypeExportedAuthorization;
            dcId: int;
            constructor(params: {
                dcId: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.auth.ExportAuthorization>;
            write(): Buffer;
        }
        class ImportAuthorization extends TLObject {
            __response__: Raw.auth.TypeAuthorization;
            id: long;
            bytes: bytes;
            constructor(params: {
                id: long;
                bytes: bytes;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.auth.ImportAuthorization>;
            write(): Buffer;
        }
        class BindTempAuthKey extends TLObject {
            __response__: Bool;
            permAuthKeyId: long;
            nonce: long;
            expiresAt: int;
            encryptedMessage: bytes;
            constructor(params: {
                permAuthKeyId: long;
                nonce: long;
                expiresAt: int;
                encryptedMessage: bytes;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.auth.BindTempAuthKey>;
            write(): Buffer;
        }
        class ImportBotAuthorization extends TLObject {
            __response__: Raw.auth.TypeAuthorization;
            flags: int;
            apiId: int;
            apiHash: string;
            botAuthToken: string;
            constructor(params: {
                flags: int;
                apiId: int;
                apiHash: string;
                botAuthToken: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.auth.ImportBotAuthorization>;
            write(): Buffer;
        }
        class CheckPassword extends TLObject {
            __response__: Raw.auth.TypeAuthorization;
            password: Raw.TypeInputCheckPasswordSRP;
            constructor(params: {
                password: Raw.TypeInputCheckPasswordSRP;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.auth.CheckPassword>;
            write(): Buffer;
        }
        class RequestPasswordRecovery extends TLObject {
            __response__: Raw.auth.TypePasswordRecovery;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.auth.RequestPasswordRecovery>;
            write(): Buffer;
        }
        class RecoverPassword extends TLObject {
            __response__: Raw.auth.TypeAuthorization;
            code: string;
            newSettings?: Raw.account.TypePasswordInputSettings;
            constructor(params: {
                code: string;
                newSettings?: Raw.account.TypePasswordInputSettings;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.auth.RecoverPassword>;
            write(): Buffer;
        }
        class ResendCode extends TLObject {
            __response__: Raw.auth.TypeSentCode;
            phoneNumber: string;
            phoneCodeHash: string;
            reason?: string;
            constructor(params: {
                phoneNumber: string;
                phoneCodeHash: string;
                reason?: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.auth.ResendCode>;
            write(): Buffer;
        }
        class CancelCode extends TLObject {
            __response__: Bool;
            phoneNumber: string;
            phoneCodeHash: string;
            constructor(params: {
                phoneNumber: string;
                phoneCodeHash: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.auth.CancelCode>;
            write(): Buffer;
        }
        class DropTempAuthKeys extends TLObject {
            __response__: Bool;
            exceptAuthKeys: Vector<long>;
            constructor(params: {
                exceptAuthKeys: Vector<long>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.auth.DropTempAuthKeys>;
            write(): Buffer;
        }
        class ExportLoginToken extends TLObject {
            __response__: Raw.auth.TypeLoginToken;
            apiId: int;
            apiHash: string;
            exceptIds: Vector<long>;
            constructor(params: {
                apiId: int;
                apiHash: string;
                exceptIds: Vector<long>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.auth.ExportLoginToken>;
            write(): Buffer;
        }
        class ImportLoginToken extends TLObject {
            __response__: Raw.auth.TypeLoginToken;
            token: bytes;
            constructor(params: {
                token: bytes;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.auth.ImportLoginToken>;
            write(): Buffer;
        }
        class AcceptLoginToken extends TLObject {
            __response__: Raw.TypeAuthorization;
            token: bytes;
            constructor(params: {
                token: bytes;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.auth.AcceptLoginToken>;
            write(): Buffer;
        }
        class CheckRecoveryPassword extends TLObject {
            __response__: Bool;
            code: string;
            constructor(params: {
                code: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.auth.CheckRecoveryPassword>;
            write(): Buffer;
        }
        class ImportWebTokenAuthorization extends TLObject {
            __response__: Raw.auth.TypeAuthorization;
            apiId: int;
            apiHash: string;
            webAuthToken: string;
            constructor(params: {
                apiId: int;
                apiHash: string;
                webAuthToken: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.auth.ImportWebTokenAuthorization>;
            write(): Buffer;
        }
        class RequestFirebaseSms extends TLObject {
            __response__: Bool;
            phoneNumber: string;
            phoneCodeHash: string;
            safetyNetToken?: string;
            playIntegrityToken?: string;
            iosPushSecret?: string;
            constructor(params: {
                phoneNumber: string;
                phoneCodeHash: string;
                safetyNetToken?: string;
                playIntegrityToken?: string;
                iosPushSecret?: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.auth.RequestFirebaseSms>;
            write(): Buffer;
        }
        class ResetLoginEmail extends TLObject {
            __response__: Raw.auth.TypeSentCode;
            phoneNumber: string;
            phoneCodeHash: string;
            constructor(params: {
                phoneNumber: string;
                phoneCodeHash: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.auth.ResetLoginEmail>;
            write(): Buffer;
        }
        class ReportMissingCode extends TLObject {
            __response__: Bool;
            phoneNumber: string;
            phoneCodeHash: string;
            mnc: string;
            constructor(params: {
                phoneNumber: string;
                phoneCodeHash: string;
                mnc: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.auth.ReportMissingCode>;
            write(): Buffer;
        }
    }
    namespace contacts {
        type TypeContactBirthdays = Raw.contacts.ContactBirthdays;
        type TypeTopPeers = Raw.contacts.TopPeersNotModified | Raw.contacts.TopPeers | Raw.contacts.TopPeersDisabled;
        type TypeResolvedPeer = Raw.contacts.ResolvedPeer;
        type TypeFound = Raw.contacts.Found;
        type TypeBlocked = Raw.contacts.Blocked | Raw.contacts.BlockedSlice;
        type TypeImportedContacts = Raw.contacts.ImportedContacts;
        type TypeContacts = Raw.contacts.ContactsNotModified | Raw.contacts.Contacts;
        class ContactsNotModified extends TLObject {
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.contacts.ContactsNotModified>;
            write(): Buffer;
        }
        class Contacts extends TLObject {
            contacts: Vector<Raw.TypeContact>;
            savedCount: int;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                contacts: Vector<Raw.TypeContact>;
                savedCount: int;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.contacts.Contacts>;
            write(): Buffer;
        }
        class ImportedContacts extends TLObject {
            imported: Vector<Raw.TypeImportedContact>;
            popularInvites: Vector<Raw.TypePopularContact>;
            retryContacts: Vector<long>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                imported: Vector<Raw.TypeImportedContact>;
                popularInvites: Vector<Raw.TypePopularContact>;
                retryContacts: Vector<long>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.contacts.ImportedContacts>;
            write(): Buffer;
        }
        class Blocked extends TLObject {
            blocked: Vector<Raw.TypePeerBlocked>;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                blocked: Vector<Raw.TypePeerBlocked>;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.contacts.Blocked>;
            write(): Buffer;
        }
        class BlockedSlice extends TLObject {
            count: int;
            blocked: Vector<Raw.TypePeerBlocked>;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                count: int;
                blocked: Vector<Raw.TypePeerBlocked>;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.contacts.BlockedSlice>;
            write(): Buffer;
        }
        class Found extends TLObject {
            myResults: Vector<Raw.TypePeer>;
            results: Vector<Raw.TypePeer>;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                myResults: Vector<Raw.TypePeer>;
                results: Vector<Raw.TypePeer>;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.contacts.Found>;
            write(): Buffer;
        }
        class ResolvedPeer extends TLObject {
            peer: Raw.TypePeer;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                peer: Raw.TypePeer;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.contacts.ResolvedPeer>;
            write(): Buffer;
        }
        class TopPeersNotModified extends TLObject {
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.contacts.TopPeersNotModified>;
            write(): Buffer;
        }
        class TopPeers extends TLObject {
            categories: Vector<Raw.TypeTopPeerCategoryPeers>;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                categories: Vector<Raw.TypeTopPeerCategoryPeers>;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.contacts.TopPeers>;
            write(): Buffer;
        }
        class TopPeersDisabled extends TLObject {
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.contacts.TopPeersDisabled>;
            write(): Buffer;
        }
        class ContactBirthdays extends TLObject {
            contacts: Vector<Raw.TypeContactBirthday>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                contacts: Vector<Raw.TypeContactBirthday>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.contacts.ContactBirthdays>;
            write(): Buffer;
        }
        class GetContactIDs extends TLObject {
            __response__: Vector<int>;
            hash: long;
            constructor(params: {
                hash: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.contacts.GetContactIDs>;
            write(): Buffer;
        }
        class GetStatuses extends TLObject {
            __response__: Vector<Raw.TypeContactStatus>;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.contacts.GetStatuses>;
            write(): Buffer;
        }
        class GetContacts extends TLObject {
            __response__: Raw.contacts.TypeContacts;
            hash: long;
            constructor(params: {
                hash: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.contacts.GetContacts>;
            write(): Buffer;
        }
        class ImportContacts extends TLObject {
            __response__: Raw.contacts.TypeImportedContacts;
            contacts: Vector<Raw.TypeInputContact>;
            constructor(params: {
                contacts: Vector<Raw.TypeInputContact>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.contacts.ImportContacts>;
            write(): Buffer;
        }
        class DeleteContacts extends TLObject {
            __response__: Raw.TypeUpdates;
            id: Vector<Raw.TypeInputUser>;
            constructor(params: {
                id: Vector<Raw.TypeInputUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.contacts.DeleteContacts>;
            write(): Buffer;
        }
        class DeleteByPhones extends TLObject {
            __response__: Bool;
            phones: Vector<string>;
            constructor(params: {
                phones: Vector<string>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.contacts.DeleteByPhones>;
            write(): Buffer;
        }
        class Block extends TLObject {
            __response__: Bool;
            myStoriesFrom?: boolean;
            id: Raw.TypeInputPeer;
            constructor(params: {
                myStoriesFrom?: boolean;
                id: Raw.TypeInputPeer;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.contacts.Block>;
            write(): Buffer;
        }
        class Unblock extends TLObject {
            __response__: Bool;
            myStoriesFrom?: boolean;
            id: Raw.TypeInputPeer;
            constructor(params: {
                myStoriesFrom?: boolean;
                id: Raw.TypeInputPeer;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.contacts.Unblock>;
            write(): Buffer;
        }
        class GetBlocked extends TLObject {
            __response__: Raw.contacts.TypeBlocked;
            myStoriesFrom?: boolean;
            offset: int;
            limit: int;
            constructor(params: {
                myStoriesFrom?: boolean;
                offset: int;
                limit: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.contacts.GetBlocked>;
            write(): Buffer;
        }
        class Search extends TLObject {
            __response__: Raw.contacts.TypeFound;
            q: string;
            limit: int;
            constructor(params: {
                q: string;
                limit: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.contacts.Search>;
            write(): Buffer;
        }
        class ResolveUsername extends TLObject {
            __response__: Raw.contacts.TypeResolvedPeer;
            username: string;
            constructor(params: {
                username: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.contacts.ResolveUsername>;
            write(): Buffer;
        }
        class GetTopPeers extends TLObject {
            __response__: Raw.contacts.TypeTopPeers;
            correspondents?: boolean;
            botsPm?: boolean;
            botsInline?: boolean;
            phoneCalls?: boolean;
            forwardUsers?: boolean;
            forwardChats?: boolean;
            groups?: boolean;
            channels?: boolean;
            offset: int;
            limit: int;
            hash: long;
            constructor(params: {
                correspondents?: boolean;
                botsPm?: boolean;
                botsInline?: boolean;
                phoneCalls?: boolean;
                forwardUsers?: boolean;
                forwardChats?: boolean;
                groups?: boolean;
                channels?: boolean;
                offset: int;
                limit: int;
                hash: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.contacts.GetTopPeers>;
            write(): Buffer;
        }
        class ResetTopPeerRating extends TLObject {
            __response__: Bool;
            category: Raw.TypeTopPeerCategory;
            peer: Raw.TypeInputPeer;
            constructor(params: {
                category: Raw.TypeTopPeerCategory;
                peer: Raw.TypeInputPeer;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.contacts.ResetTopPeerRating>;
            write(): Buffer;
        }
        class ResetSaved extends TLObject {
            __response__: Bool;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.contacts.ResetSaved>;
            write(): Buffer;
        }
        class GetSaved extends TLObject {
            __response__: Vector<Raw.TypeSavedContact>;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.contacts.GetSaved>;
            write(): Buffer;
        }
        class ToggleTopPeers extends TLObject {
            __response__: Bool;
            enabled: Bool;
            constructor(params: {
                enabled: Bool;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.contacts.ToggleTopPeers>;
            write(): Buffer;
        }
        class AddContact extends TLObject {
            __response__: Raw.TypeUpdates;
            addPhonePrivacyException?: boolean;
            id: Raw.TypeInputUser;
            firstName: string;
            lastName: string;
            phone: string;
            constructor(params: {
                addPhonePrivacyException?: boolean;
                id: Raw.TypeInputUser;
                firstName: string;
                lastName: string;
                phone: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.contacts.AddContact>;
            write(): Buffer;
        }
        class AcceptContact extends TLObject {
            __response__: Raw.TypeUpdates;
            id: Raw.TypeInputUser;
            constructor(params: {
                id: Raw.TypeInputUser;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.contacts.AcceptContact>;
            write(): Buffer;
        }
        class GetLocated extends TLObject {
            __response__: Raw.TypeUpdates;
            background?: boolean;
            geoPoint: Raw.TypeInputGeoPoint;
            selfExpires?: int;
            constructor(params: {
                background?: boolean;
                geoPoint: Raw.TypeInputGeoPoint;
                selfExpires?: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.contacts.GetLocated>;
            write(): Buffer;
        }
        class BlockFromReplies extends TLObject {
            __response__: Raw.TypeUpdates;
            deleteMessage?: boolean;
            deleteHistory?: boolean;
            reportSpam?: boolean;
            msgId: int;
            constructor(params: {
                deleteMessage?: boolean;
                deleteHistory?: boolean;
                reportSpam?: boolean;
                msgId: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.contacts.BlockFromReplies>;
            write(): Buffer;
        }
        class ResolvePhone extends TLObject {
            __response__: Raw.contacts.TypeResolvedPeer;
            phone: string;
            constructor(params: {
                phone: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.contacts.ResolvePhone>;
            write(): Buffer;
        }
        class ExportContactToken extends TLObject {
            __response__: Raw.TypeExportedContactToken;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.contacts.ExportContactToken>;
            write(): Buffer;
        }
        class ImportContactToken extends TLObject {
            __response__: Raw.TypeUser;
            token: string;
            constructor(params: {
                token: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.contacts.ImportContactToken>;
            write(): Buffer;
        }
        class EditCloseFriends extends TLObject {
            __response__: Bool;
            id: Vector<long>;
            constructor(params: {
                id: Vector<long>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.contacts.EditCloseFriends>;
            write(): Buffer;
        }
        class SetBlocked extends TLObject {
            __response__: Bool;
            myStoriesFrom?: boolean;
            id: Vector<Raw.TypeInputPeer>;
            limit: int;
            constructor(params: {
                myStoriesFrom?: boolean;
                id: Vector<Raw.TypeInputPeer>;
                limit: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.contacts.SetBlocked>;
            write(): Buffer;
        }
        class GetBirthdays extends TLObject {
            __response__: Raw.contacts.TypeContactBirthdays;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.contacts.GetBirthdays>;
            write(): Buffer;
        }
    }
    namespace messages {
        type TypeForumTopics = Raw.messages.ForumTopics;
        type TypeSponsoredMessages = Raw.messages.SponsoredMessages | Raw.messages.SponsoredMessagesEmpty;
        type TypeInactiveChats = Raw.messages.InactiveChats;
        type TypeAvailableEffects = Raw.messages.AvailableEffectsNotModified | Raw.messages.AvailableEffects;
        type TypeMyStickers = Raw.messages.MyStickers;
        type TypeQuickReplies = Raw.messages.QuickReplies | Raw.messages.QuickRepliesNotModified;
        type TypeSavedReactionTags = Raw.messages.SavedReactionTagsNotModified | Raw.messages.SavedReactionTags;
        type TypeSavedDialogs = Raw.messages.SavedDialogs | Raw.messages.SavedDialogsSlice | Raw.messages.SavedDialogsNotModified;
        type TypeBotApp = Raw.messages.BotApp;
        type TypeEmojiGroups = Raw.messages.EmojiGroupsNotModified | Raw.messages.EmojiGroups;
        type TypeReactions = Raw.messages.ReactionsNotModified | Raw.messages.Reactions;
        type TypeTranscribedAudio = Raw.messages.TranscribedAudio;
        type TypeTranslatedText = Raw.messages.TranslateResult;
        type TypeAvailableReactions = Raw.messages.AvailableReactionsNotModified | Raw.messages.AvailableReactions;
        type TypeMessageReactionsList = Raw.messages.MessageReactionsList;
        type TypeSearchResultsPositions = Raw.messages.SearchResultsPositions;
        type TypeSearchResultsCalendar = Raw.messages.SearchResultsCalendar;
        type TypeCheckedHistoryImportPeer = Raw.messages.CheckedHistoryImportPeer;
        type TypeChatInviteImporters = Raw.messages.ChatInviteImporters;
        type TypeChatAdminsWithInvites = Raw.messages.ChatAdminsWithInvites;
        type TypeExportedChatInvite = Raw.messages.ExportedChatInvite | Raw.messages.ExportedChatInviteReplaced;
        type TypeExportedChatInvites = Raw.messages.ExportedChatInvites;
        type TypeHistoryImport = Raw.messages.HistoryImport;
        type TypeHistoryImportParsed = Raw.messages.HistoryImportParsed;
        type TypeAffectedFoundMessages = Raw.messages.AffectedFoundMessages;
        type TypeDiscussionMessage = Raw.messages.DiscussionMessage;
        type TypeDialogFilters = Raw.messages.DialogFilters;
        type TypeVotesList = Raw.messages.VotesList;
        type TypeSearchCounter = Raw.messages.SearchCounter;
        type TypeFoundStickerSets = Raw.messages.FoundStickerSetsNotModified | Raw.messages.FoundStickerSets;
        type TypeFavedStickers = Raw.messages.FavedStickersNotModified | Raw.messages.FavedStickers;
        type TypeWebPage = Raw.messages.WebPage;
        type TypeHighScores = Raw.messages.HighScores;
        type TypeArchivedStickers = Raw.messages.ArchivedStickers;
        type TypeRecentStickers = Raw.messages.RecentStickersNotModified | Raw.messages.RecentStickers;
        type TypeFeaturedStickers = Raw.messages.FeaturedStickersNotModified | Raw.messages.FeaturedStickers;
        type TypePeerDialogs = Raw.messages.PeerDialogs;
        type TypeBotCallbackAnswer = Raw.messages.BotCallbackAnswer;
        type TypeMessageEditData = Raw.messages.MessageEditData;
        type TypeBotResults = Raw.messages.BotResults;
        type TypeSavedGifs = Raw.messages.SavedGifsNotModified | Raw.messages.SavedGifs;
        type TypeMessageViews = Raw.messages.MessageViews;
        type TypeStickerSetInstallResult = Raw.messages.StickerSetInstallResultSuccess | Raw.messages.StickerSetInstallResultArchive;
        type TypeAllStickers = Raw.messages.AllStickersNotModified | Raw.messages.AllStickers;
        type TypeStickers = Raw.messages.StickersNotModified | Raw.messages.Stickers;
        type TypeSentEncryptedMessage = Raw.messages.SentEncryptedMessage | Raw.messages.SentEncryptedFile;
        type TypeDhConfig = Raw.messages.DhConfigNotModified | Raw.messages.DhConfig;
        type TypeInvitedUsers = Raw.messages.InvitedUsers;
        type TypeChatFull = Raw.messages.ChatFull;
        type TypeChats = Raw.messages.Chats | Raw.messages.ChatsSlice;
        type TypePeerSettings = Raw.messages.PeerSettings;
        type TypeAffectedHistory = Raw.messages.AffectedHistory;
        type TypeAffectedMessages = Raw.messages.AffectedMessages;
        type TypeDialogs = Raw.messages.Dialogs | Raw.messages.DialogsSlice | Raw.messages.DialogsNotModified;
        type TypeMessages = Raw.messages.Messages | Raw.messages.MessagesSlice | Raw.messages.ChannelMessages | Raw.messages.MessagesNotModified;
        type TypeStickerSet = Raw.messages.StickerSet | Raw.messages.StickerSetNotModified;
        class Dialogs extends TLObject {
            dialogs: Vector<Raw.TypeDialog>;
            messages: Vector<Raw.TypeMessage>;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                dialogs: Vector<Raw.TypeDialog>;
                messages: Vector<Raw.TypeMessage>;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.Dialogs>;
            write(): Buffer;
        }
        class DialogsSlice extends TLObject {
            count: int;
            dialogs: Vector<Raw.TypeDialog>;
            messages: Vector<Raw.TypeMessage>;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                count: int;
                dialogs: Vector<Raw.TypeDialog>;
                messages: Vector<Raw.TypeMessage>;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.DialogsSlice>;
            write(): Buffer;
        }
        class DialogsNotModified extends TLObject {
            count: int;
            constructor(params: {
                count: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.DialogsNotModified>;
            write(): Buffer;
        }
        class Messages extends TLObject {
            messages: Vector<Raw.TypeMessage>;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                messages: Vector<Raw.TypeMessage>;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.Messages>;
            write(): Buffer;
        }
        class MessagesSlice extends TLObject {
            inexact?: boolean;
            count: int;
            nextRate?: int;
            offsetIdOffset?: int;
            messages: Vector<Raw.TypeMessage>;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                inexact?: boolean;
                count: int;
                nextRate?: int;
                offsetIdOffset?: int;
                messages: Vector<Raw.TypeMessage>;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.MessagesSlice>;
            write(): Buffer;
        }
        class ChannelMessages extends TLObject {
            inexact?: boolean;
            pts: int;
            count: int;
            offsetIdOffset?: int;
            messages: Vector<Raw.TypeMessage>;
            topics: Vector<Raw.TypeForumTopic>;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                inexact?: boolean;
                pts: int;
                count: int;
                offsetIdOffset?: int;
                messages: Vector<Raw.TypeMessage>;
                topics: Vector<Raw.TypeForumTopic>;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.ChannelMessages>;
            write(): Buffer;
        }
        class MessagesNotModified extends TLObject {
            count: int;
            constructor(params: {
                count: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.MessagesNotModified>;
            write(): Buffer;
        }
        class Chats extends TLObject {
            chats: Vector<Raw.TypeChat>;
            constructor(params: {
                chats: Vector<Raw.TypeChat>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.Chats>;
            write(): Buffer;
        }
        class ChatsSlice extends TLObject {
            count: int;
            chats: Vector<Raw.TypeChat>;
            constructor(params: {
                count: int;
                chats: Vector<Raw.TypeChat>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.ChatsSlice>;
            write(): Buffer;
        }
        class ChatFull extends TLObject {
            fullChat: Raw.TypeChatFull;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                fullChat: Raw.TypeChatFull;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.ChatFull>;
            write(): Buffer;
        }
        class AffectedHistory extends TLObject {
            pts: int;
            ptsCount: int;
            offset: int;
            constructor(params: {
                pts: int;
                ptsCount: int;
                offset: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.AffectedHistory>;
            write(): Buffer;
        }
        class DhConfigNotModified extends TLObject {
            random: bytes;
            constructor(params: {
                random: bytes;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.DhConfigNotModified>;
            write(): Buffer;
        }
        class DhConfig extends TLObject {
            g: int;
            p: bytes;
            version: int;
            random: bytes;
            constructor(params: {
                g: int;
                p: bytes;
                version: int;
                random: bytes;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.DhConfig>;
            write(): Buffer;
        }
        class SentEncryptedMessage extends TLObject {
            date: int;
            constructor(params: {
                date: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SentEncryptedMessage>;
            write(): Buffer;
        }
        class SentEncryptedFile extends TLObject {
            date: int;
            file: Raw.TypeEncryptedFile;
            constructor(params: {
                date: int;
                file: Raw.TypeEncryptedFile;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SentEncryptedFile>;
            write(): Buffer;
        }
        class StickersNotModified extends TLObject {
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.StickersNotModified>;
            write(): Buffer;
        }
        class Stickers extends TLObject {
            hash: long;
            stickers: Vector<Raw.TypeDocument>;
            constructor(params: {
                hash: long;
                stickers: Vector<Raw.TypeDocument>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.Stickers>;
            write(): Buffer;
        }
        class AllStickersNotModified extends TLObject {
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.AllStickersNotModified>;
            write(): Buffer;
        }
        class AllStickers extends TLObject {
            hash: long;
            sets: Vector<Raw.TypeStickerSet>;
            constructor(params: {
                hash: long;
                sets: Vector<Raw.TypeStickerSet>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.AllStickers>;
            write(): Buffer;
        }
        class AffectedMessages extends TLObject {
            pts: int;
            ptsCount: int;
            constructor(params: {
                pts: int;
                ptsCount: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.AffectedMessages>;
            write(): Buffer;
        }
        class StickerSet extends TLObject {
            set: Raw.TypeStickerSet;
            packs: Vector<Raw.TypeStickerPack>;
            keywords: Vector<Raw.TypeStickerKeyword>;
            documents: Vector<Raw.TypeDocument>;
            constructor(params: {
                set: Raw.TypeStickerSet;
                packs: Vector<Raw.TypeStickerPack>;
                keywords: Vector<Raw.TypeStickerKeyword>;
                documents: Vector<Raw.TypeDocument>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.StickerSet>;
            write(): Buffer;
        }
        class StickerSetNotModified extends TLObject {
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.StickerSetNotModified>;
            write(): Buffer;
        }
        class SavedGifsNotModified extends TLObject {
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SavedGifsNotModified>;
            write(): Buffer;
        }
        class SavedGifs extends TLObject {
            hash: long;
            gifs: Vector<Raw.TypeDocument>;
            constructor(params: {
                hash: long;
                gifs: Vector<Raw.TypeDocument>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SavedGifs>;
            write(): Buffer;
        }
        class BotResults extends TLObject {
            gallery?: boolean;
            queryId: long;
            nextOffset?: string;
            switchPm?: Raw.TypeInlineBotSwitchPM;
            switchWebview?: Raw.TypeInlineBotWebView;
            results: Vector<Raw.TypeBotInlineResult>;
            cacheTime: int;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                gallery?: boolean;
                queryId: long;
                nextOffset?: string;
                switchPm?: Raw.TypeInlineBotSwitchPM;
                switchWebview?: Raw.TypeInlineBotWebView;
                results: Vector<Raw.TypeBotInlineResult>;
                cacheTime: int;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.BotResults>;
            write(): Buffer;
        }
        class BotCallbackAnswer extends TLObject {
            alert?: boolean;
            hasUrl?: boolean;
            nativeUi?: boolean;
            message?: string;
            url?: string;
            cacheTime: int;
            constructor(params: {
                alert?: boolean;
                hasUrl?: boolean;
                nativeUi?: boolean;
                message?: string;
                url?: string;
                cacheTime: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.BotCallbackAnswer>;
            write(): Buffer;
        }
        class MessageEditData extends TLObject {
            caption?: boolean;
            constructor(params: {
                caption?: boolean;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.MessageEditData>;
            write(): Buffer;
        }
        class PeerDialogs extends TLObject {
            dialogs: Vector<Raw.TypeDialog>;
            messages: Vector<Raw.TypeMessage>;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            state: Raw.updates.TypeState;
            constructor(params: {
                dialogs: Vector<Raw.TypeDialog>;
                messages: Vector<Raw.TypeMessage>;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
                state: Raw.updates.TypeState;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.PeerDialogs>;
            write(): Buffer;
        }
        class FeaturedStickersNotModified extends TLObject {
            count: int;
            constructor(params: {
                count: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.FeaturedStickersNotModified>;
            write(): Buffer;
        }
        class FeaturedStickers extends TLObject {
            premium?: boolean;
            hash: long;
            count: int;
            sets: Vector<Raw.TypeStickerSetCovered>;
            unread: Vector<long>;
            constructor(params: {
                premium?: boolean;
                hash: long;
                count: int;
                sets: Vector<Raw.TypeStickerSetCovered>;
                unread: Vector<long>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.FeaturedStickers>;
            write(): Buffer;
        }
        class RecentStickersNotModified extends TLObject {
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.RecentStickersNotModified>;
            write(): Buffer;
        }
        class RecentStickers extends TLObject {
            hash: long;
            packs: Vector<Raw.TypeStickerPack>;
            stickers: Vector<Raw.TypeDocument>;
            dates: Vector<int>;
            constructor(params: {
                hash: long;
                packs: Vector<Raw.TypeStickerPack>;
                stickers: Vector<Raw.TypeDocument>;
                dates: Vector<int>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.RecentStickers>;
            write(): Buffer;
        }
        class ArchivedStickers extends TLObject {
            count: int;
            sets: Vector<Raw.TypeStickerSetCovered>;
            constructor(params: {
                count: int;
                sets: Vector<Raw.TypeStickerSetCovered>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.ArchivedStickers>;
            write(): Buffer;
        }
        class StickerSetInstallResultSuccess extends TLObject {
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.StickerSetInstallResultSuccess>;
            write(): Buffer;
        }
        class StickerSetInstallResultArchive extends TLObject {
            sets: Vector<Raw.TypeStickerSetCovered>;
            constructor(params: {
                sets: Vector<Raw.TypeStickerSetCovered>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.StickerSetInstallResultArchive>;
            write(): Buffer;
        }
        class HighScores extends TLObject {
            scores: Vector<Raw.TypeHighScore>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                scores: Vector<Raw.TypeHighScore>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.HighScores>;
            write(): Buffer;
        }
        class FavedStickersNotModified extends TLObject {
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.FavedStickersNotModified>;
            write(): Buffer;
        }
        class FavedStickers extends TLObject {
            hash: long;
            packs: Vector<Raw.TypeStickerPack>;
            stickers: Vector<Raw.TypeDocument>;
            constructor(params: {
                hash: long;
                packs: Vector<Raw.TypeStickerPack>;
                stickers: Vector<Raw.TypeDocument>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.FavedStickers>;
            write(): Buffer;
        }
        class FoundStickerSetsNotModified extends TLObject {
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.FoundStickerSetsNotModified>;
            write(): Buffer;
        }
        class FoundStickerSets extends TLObject {
            hash: long;
            sets: Vector<Raw.TypeStickerSetCovered>;
            constructor(params: {
                hash: long;
                sets: Vector<Raw.TypeStickerSetCovered>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.FoundStickerSets>;
            write(): Buffer;
        }
        class SearchCounter extends TLObject {
            inexact?: boolean;
            filter: Raw.TypeMessagesFilter;
            count: int;
            constructor(params: {
                inexact?: boolean;
                filter: Raw.TypeMessagesFilter;
                count: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SearchCounter>;
            write(): Buffer;
        }
        class InactiveChats extends TLObject {
            dates: Vector<int>;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                dates: Vector<int>;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.InactiveChats>;
            write(): Buffer;
        }
        class VotesList extends TLObject {
            count: int;
            votes: Vector<Raw.TypeMessagePeerVote>;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            nextOffset?: string;
            constructor(params: {
                count: int;
                votes: Vector<Raw.TypeMessagePeerVote>;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
                nextOffset?: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.VotesList>;
            write(): Buffer;
        }
        class MessageViews extends TLObject {
            views: Vector<Raw.TypeMessageViews>;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                views: Vector<Raw.TypeMessageViews>;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.MessageViews>;
            write(): Buffer;
        }
        class DiscussionMessage extends TLObject {
            messages: Vector<Raw.TypeMessage>;
            maxId?: int;
            readInboxMaxId?: int;
            readOutboxMaxId?: int;
            unreadCount: int;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                messages: Vector<Raw.TypeMessage>;
                maxId?: int;
                readInboxMaxId?: int;
                readOutboxMaxId?: int;
                unreadCount: int;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.DiscussionMessage>;
            write(): Buffer;
        }
        class HistoryImport extends TLObject {
            id: long;
            constructor(params: {
                id: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.HistoryImport>;
            write(): Buffer;
        }
        class HistoryImportParsed extends TLObject {
            pm?: boolean;
            group?: boolean;
            title?: string;
            constructor(params: {
                pm?: boolean;
                group?: boolean;
                title?: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.HistoryImportParsed>;
            write(): Buffer;
        }
        class AffectedFoundMessages extends TLObject {
            pts: int;
            ptsCount: int;
            offset: int;
            messages: Vector<int>;
            constructor(params: {
                pts: int;
                ptsCount: int;
                offset: int;
                messages: Vector<int>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.AffectedFoundMessages>;
            write(): Buffer;
        }
        class ExportedChatInvites extends TLObject {
            count: int;
            invites: Vector<Raw.TypeExportedChatInvite>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                count: int;
                invites: Vector<Raw.TypeExportedChatInvite>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.ExportedChatInvites>;
            write(): Buffer;
        }
        class ExportedChatInvite extends TLObject {
            invite: Raw.TypeExportedChatInvite;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                invite: Raw.TypeExportedChatInvite;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.ExportedChatInvite>;
            write(): Buffer;
        }
        class ExportedChatInviteReplaced extends TLObject {
            invite: Raw.TypeExportedChatInvite;
            newInvite: Raw.TypeExportedChatInvite;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                invite: Raw.TypeExportedChatInvite;
                newInvite: Raw.TypeExportedChatInvite;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.ExportedChatInviteReplaced>;
            write(): Buffer;
        }
        class ChatInviteImporters extends TLObject {
            count: int;
            importers: Vector<Raw.TypeChatInviteImporter>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                count: int;
                importers: Vector<Raw.TypeChatInviteImporter>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.ChatInviteImporters>;
            write(): Buffer;
        }
        class ChatAdminsWithInvites extends TLObject {
            admins: Vector<Raw.TypeChatAdminWithInvites>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                admins: Vector<Raw.TypeChatAdminWithInvites>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.ChatAdminsWithInvites>;
            write(): Buffer;
        }
        class CheckedHistoryImportPeer extends TLObject {
            confirmText: string;
            constructor(params: {
                confirmText: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.CheckedHistoryImportPeer>;
            write(): Buffer;
        }
        class SponsoredMessages extends TLObject {
            postsBetween?: int;
            messages: Vector<Raw.TypeSponsoredMessage>;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                postsBetween?: int;
                messages: Vector<Raw.TypeSponsoredMessage>;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SponsoredMessages>;
            write(): Buffer;
        }
        class SponsoredMessagesEmpty extends TLObject {
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SponsoredMessagesEmpty>;
            write(): Buffer;
        }
        class SearchResultsCalendar extends TLObject {
            inexact?: boolean;
            count: int;
            minDate: int;
            minMsgId: int;
            offsetIdOffset?: int;
            periods: Vector<Raw.TypeSearchResultsCalendarPeriod>;
            messages: Vector<Raw.TypeMessage>;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                inexact?: boolean;
                count: int;
                minDate: int;
                minMsgId: int;
                offsetIdOffset?: int;
                periods: Vector<Raw.TypeSearchResultsCalendarPeriod>;
                messages: Vector<Raw.TypeMessage>;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SearchResultsCalendar>;
            write(): Buffer;
        }
        class SearchResultsPositions extends TLObject {
            count: int;
            positions: Vector<Raw.TypeSearchResultsPosition>;
            constructor(params: {
                count: int;
                positions: Vector<Raw.TypeSearchResultsPosition>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SearchResultsPositions>;
            write(): Buffer;
        }
        class PeerSettings extends TLObject {
            settings: Raw.TypePeerSettings;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                settings: Raw.TypePeerSettings;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.PeerSettings>;
            write(): Buffer;
        }
        class MessageReactionsList extends TLObject {
            count: int;
            reactions: Vector<Raw.TypeMessagePeerReaction>;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            nextOffset?: string;
            constructor(params: {
                count: int;
                reactions: Vector<Raw.TypeMessagePeerReaction>;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
                nextOffset?: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.MessageReactionsList>;
            write(): Buffer;
        }
        class AvailableReactionsNotModified extends TLObject {
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.AvailableReactionsNotModified>;
            write(): Buffer;
        }
        class AvailableReactions extends TLObject {
            hash: int;
            reactions: Vector<Raw.TypeAvailableReaction>;
            constructor(params: {
                hash: int;
                reactions: Vector<Raw.TypeAvailableReaction>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.AvailableReactions>;
            write(): Buffer;
        }
        class TranscribedAudio extends TLObject {
            pending?: boolean;
            transcriptionId: long;
            text: string;
            trialRemainsNum?: int;
            trialRemainsUntilDate?: int;
            constructor(params: {
                pending?: boolean;
                transcriptionId: long;
                text: string;
                trialRemainsNum?: int;
                trialRemainsUntilDate?: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.TranscribedAudio>;
            write(): Buffer;
        }
        class ReactionsNotModified extends TLObject {
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.ReactionsNotModified>;
            write(): Buffer;
        }
        class Reactions extends TLObject {
            hash: long;
            reactions: Vector<Raw.TypeReaction>;
            constructor(params: {
                hash: long;
                reactions: Vector<Raw.TypeReaction>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.Reactions>;
            write(): Buffer;
        }
        class ForumTopics extends TLObject {
            orderByCreateDate?: boolean;
            count: int;
            topics: Vector<Raw.TypeForumTopic>;
            messages: Vector<Raw.TypeMessage>;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            pts: int;
            constructor(params: {
                orderByCreateDate?: boolean;
                count: int;
                topics: Vector<Raw.TypeForumTopic>;
                messages: Vector<Raw.TypeMessage>;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
                pts: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.ForumTopics>;
            write(): Buffer;
        }
        class EmojiGroupsNotModified extends TLObject {
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.EmojiGroupsNotModified>;
            write(): Buffer;
        }
        class EmojiGroups extends TLObject {
            hash: int;
            groups: Vector<Raw.TypeEmojiGroup>;
            constructor(params: {
                hash: int;
                groups: Vector<Raw.TypeEmojiGroup>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.EmojiGroups>;
            write(): Buffer;
        }
        class TranslateResult extends TLObject {
            result: Vector<Raw.TypeTextWithEntities>;
            constructor(params: {
                result: Vector<Raw.TypeTextWithEntities>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.TranslateResult>;
            write(): Buffer;
        }
        class BotApp extends TLObject {
            inactive?: boolean;
            requestWriteAccess?: boolean;
            hasSettings?: boolean;
            app: Raw.TypeBotApp;
            constructor(params: {
                inactive?: boolean;
                requestWriteAccess?: boolean;
                hasSettings?: boolean;
                app: Raw.TypeBotApp;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.BotApp>;
            write(): Buffer;
        }
        class WebPage extends TLObject {
            webpage: Raw.TypeWebPage;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                webpage: Raw.TypeWebPage;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.WebPage>;
            write(): Buffer;
        }
        class SavedDialogs extends TLObject {
            dialogs: Vector<Raw.TypeSavedDialog>;
            messages: Vector<Raw.TypeMessage>;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                dialogs: Vector<Raw.TypeSavedDialog>;
                messages: Vector<Raw.TypeMessage>;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SavedDialogs>;
            write(): Buffer;
        }
        class SavedDialogsSlice extends TLObject {
            count: int;
            dialogs: Vector<Raw.TypeSavedDialog>;
            messages: Vector<Raw.TypeMessage>;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                count: int;
                dialogs: Vector<Raw.TypeSavedDialog>;
                messages: Vector<Raw.TypeMessage>;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SavedDialogsSlice>;
            write(): Buffer;
        }
        class SavedDialogsNotModified extends TLObject {
            count: int;
            constructor(params: {
                count: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SavedDialogsNotModified>;
            write(): Buffer;
        }
        class SavedReactionTagsNotModified extends TLObject {
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SavedReactionTagsNotModified>;
            write(): Buffer;
        }
        class SavedReactionTags extends TLObject {
            tags: Vector<Raw.TypeSavedReactionTag>;
            hash: long;
            constructor(params: {
                tags: Vector<Raw.TypeSavedReactionTag>;
                hash: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SavedReactionTags>;
            write(): Buffer;
        }
        class QuickReplies extends TLObject {
            quickReplies: Vector<Raw.TypeQuickReply>;
            messages: Vector<Raw.TypeMessage>;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                quickReplies: Vector<Raw.TypeQuickReply>;
                messages: Vector<Raw.TypeMessage>;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.QuickReplies>;
            write(): Buffer;
        }
        class QuickRepliesNotModified extends TLObject {
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.QuickRepliesNotModified>;
            write(): Buffer;
        }
        class DialogFilters extends TLObject {
            tagsEnabled?: boolean;
            filters: Vector<Raw.TypeDialogFilter>;
            constructor(params: {
                tagsEnabled?: boolean;
                filters: Vector<Raw.TypeDialogFilter>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.DialogFilters>;
            write(): Buffer;
        }
        class MyStickers extends TLObject {
            count: int;
            sets: Vector<Raw.TypeStickerSetCovered>;
            constructor(params: {
                count: int;
                sets: Vector<Raw.TypeStickerSetCovered>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.MyStickers>;
            write(): Buffer;
        }
        class InvitedUsers extends TLObject {
            updates: Raw.TypeUpdates;
            missingInvitees: Vector<Raw.TypeMissingInvitee>;
            constructor(params: {
                updates: Raw.TypeUpdates;
                missingInvitees: Vector<Raw.TypeMissingInvitee>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.InvitedUsers>;
            write(): Buffer;
        }
        class AvailableEffectsNotModified extends TLObject {
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.AvailableEffectsNotModified>;
            write(): Buffer;
        }
        class AvailableEffects extends TLObject {
            hash: int;
            effects: Vector<Raw.TypeAvailableEffect>;
            documents: Vector<Raw.TypeDocument>;
            constructor(params: {
                hash: int;
                effects: Vector<Raw.TypeAvailableEffect>;
                documents: Vector<Raw.TypeDocument>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.AvailableEffects>;
            write(): Buffer;
        }
        class GetMessages extends TLObject {
            __response__: Raw.messages.TypeMessages;
            id: Vector<Raw.TypeInputMessage>;
            constructor(params: {
                id: Vector<Raw.TypeInputMessage>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetMessages>;
            write(): Buffer;
        }
        class GetDialogs extends TLObject {
            __response__: Raw.messages.TypeDialogs;
            excludePinned?: boolean;
            folderId?: int;
            offsetDate: int;
            offsetId: int;
            offsetPeer: Raw.TypeInputPeer;
            limit: int;
            hash: long;
            constructor(params: {
                excludePinned?: boolean;
                folderId?: int;
                offsetDate: int;
                offsetId: int;
                offsetPeer: Raw.TypeInputPeer;
                limit: int;
                hash: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetDialogs>;
            write(): Buffer;
        }
        class GetHistory extends TLObject {
            __response__: Raw.messages.TypeMessages;
            peer: Raw.TypeInputPeer;
            offsetId: int;
            offsetDate: int;
            addOffset: int;
            limit: int;
            maxId: int;
            minId: int;
            hash: long;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                offsetId: int;
                offsetDate: int;
                addOffset: int;
                limit: int;
                maxId: int;
                minId: int;
                hash: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetHistory>;
            write(): Buffer;
        }
        class Search extends TLObject {
            __response__: Raw.messages.TypeMessages;
            peer: Raw.TypeInputPeer;
            q: string;
            fromId?: Raw.TypeInputPeer;
            savedPeerId?: Raw.TypeInputPeer;
            savedReaction?: Vector<Raw.TypeReaction>;
            topMsgId?: int;
            filter: Raw.TypeMessagesFilter;
            minDate: int;
            maxDate: int;
            offsetId: int;
            addOffset: int;
            limit: int;
            maxId: int;
            minId: int;
            hash: long;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                q: string;
                fromId?: Raw.TypeInputPeer;
                savedPeerId?: Raw.TypeInputPeer;
                savedReaction?: Vector<Raw.TypeReaction>;
                topMsgId?: int;
                filter: Raw.TypeMessagesFilter;
                minDate: int;
                maxDate: int;
                offsetId: int;
                addOffset: int;
                limit: int;
                maxId: int;
                minId: int;
                hash: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.Search>;
            write(): Buffer;
        }
        class ReadHistory extends TLObject {
            __response__: Raw.messages.TypeAffectedMessages;
            peer: Raw.TypeInputPeer;
            maxId: int;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                maxId: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.ReadHistory>;
            write(): Buffer;
        }
        class DeleteHistory extends TLObject {
            __response__: Raw.messages.TypeAffectedHistory;
            justClear?: boolean;
            revoke?: boolean;
            peer: Raw.TypeInputPeer;
            maxId: int;
            minDate?: int;
            maxDate?: int;
            constructor(params: {
                justClear?: boolean;
                revoke?: boolean;
                peer: Raw.TypeInputPeer;
                maxId: int;
                minDate?: int;
                maxDate?: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.DeleteHistory>;
            write(): Buffer;
        }
        class DeleteMessages extends TLObject {
            __response__: Raw.messages.TypeAffectedMessages;
            revoke?: boolean;
            id: Vector<int>;
            constructor(params: {
                revoke?: boolean;
                id: Vector<int>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.DeleteMessages>;
            write(): Buffer;
        }
        class ReceivedMessages extends TLObject {
            __response__: Vector<Raw.TypeReceivedNotifyMessage>;
            maxId: int;
            constructor(params: {
                maxId: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.ReceivedMessages>;
            write(): Buffer;
        }
        class SetTyping extends TLObject {
            __response__: Bool;
            peer: Raw.TypeInputPeer;
            topMsgId?: int;
            action: Raw.TypeSendMessageAction;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                topMsgId?: int;
                action: Raw.TypeSendMessageAction;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SetTyping>;
            write(): Buffer;
        }
        class SendMessage extends TLObject {
            __response__: Raw.TypeUpdates;
            noWebpage?: boolean;
            silent?: boolean;
            background?: boolean;
            clearDraft?: boolean;
            noforwards?: boolean;
            updateStickersetsOrder?: boolean;
            invertMedia?: boolean;
            peer: Raw.TypeInputPeer;
            replyTo?: Raw.TypeInputReplyTo;
            message: string;
            randomId: long;
            replyMarkup?: Raw.TypeReplyMarkup;
            entities?: Vector<Raw.TypeMessageEntity>;
            scheduleDate?: int;
            sendAs?: Raw.TypeInputPeer;
            quickReplyShortcut?: Raw.TypeInputQuickReplyShortcut;
            effect?: long;
            constructor(params: {
                noWebpage?: boolean;
                silent?: boolean;
                background?: boolean;
                clearDraft?: boolean;
                noforwards?: boolean;
                updateStickersetsOrder?: boolean;
                invertMedia?: boolean;
                peer: Raw.TypeInputPeer;
                replyTo?: Raw.TypeInputReplyTo;
                message: string;
                randomId: long;
                replyMarkup?: Raw.TypeReplyMarkup;
                entities?: Vector<Raw.TypeMessageEntity>;
                scheduleDate?: int;
                sendAs?: Raw.TypeInputPeer;
                quickReplyShortcut?: Raw.TypeInputQuickReplyShortcut;
                effect?: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SendMessage>;
            write(): Buffer;
        }
        class SendMedia extends TLObject {
            __response__: Raw.TypeUpdates;
            silent?: boolean;
            background?: boolean;
            clearDraft?: boolean;
            noforwards?: boolean;
            updateStickersetsOrder?: boolean;
            invertMedia?: boolean;
            peer: Raw.TypeInputPeer;
            replyTo?: Raw.TypeInputReplyTo;
            media: Raw.TypeInputMedia;
            message: string;
            randomId: long;
            replyMarkup?: Raw.TypeReplyMarkup;
            entities?: Vector<Raw.TypeMessageEntity>;
            scheduleDate?: int;
            sendAs?: Raw.TypeInputPeer;
            quickReplyShortcut?: Raw.TypeInputQuickReplyShortcut;
            effect?: long;
            constructor(params: {
                silent?: boolean;
                background?: boolean;
                clearDraft?: boolean;
                noforwards?: boolean;
                updateStickersetsOrder?: boolean;
                invertMedia?: boolean;
                peer: Raw.TypeInputPeer;
                replyTo?: Raw.TypeInputReplyTo;
                media: Raw.TypeInputMedia;
                message: string;
                randomId: long;
                replyMarkup?: Raw.TypeReplyMarkup;
                entities?: Vector<Raw.TypeMessageEntity>;
                scheduleDate?: int;
                sendAs?: Raw.TypeInputPeer;
                quickReplyShortcut?: Raw.TypeInputQuickReplyShortcut;
                effect?: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SendMedia>;
            write(): Buffer;
        }
        class ForwardMessages extends TLObject {
            __response__: Raw.TypeUpdates;
            silent?: boolean;
            background?: boolean;
            withMyScore?: boolean;
            dropAuthor?: boolean;
            dropMediaCaptions?: boolean;
            noforwards?: boolean;
            fromPeer: Raw.TypeInputPeer;
            id: Vector<int>;
            randomId: Vector<long>;
            toPeer: Raw.TypeInputPeer;
            topMsgId?: int;
            scheduleDate?: int;
            sendAs?: Raw.TypeInputPeer;
            quickReplyShortcut?: Raw.TypeInputQuickReplyShortcut;
            constructor(params: {
                silent?: boolean;
                background?: boolean;
                withMyScore?: boolean;
                dropAuthor?: boolean;
                dropMediaCaptions?: boolean;
                noforwards?: boolean;
                fromPeer: Raw.TypeInputPeer;
                id: Vector<int>;
                randomId: Vector<long>;
                toPeer: Raw.TypeInputPeer;
                topMsgId?: int;
                scheduleDate?: int;
                sendAs?: Raw.TypeInputPeer;
                quickReplyShortcut?: Raw.TypeInputQuickReplyShortcut;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.ForwardMessages>;
            write(): Buffer;
        }
        class ReportSpam extends TLObject {
            __response__: Bool;
            peer: Raw.TypeInputPeer;
            constructor(params: {
                peer: Raw.TypeInputPeer;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.ReportSpam>;
            write(): Buffer;
        }
        class GetPeerSettings extends TLObject {
            __response__: Raw.messages.TypePeerSettings;
            peer: Raw.TypeInputPeer;
            constructor(params: {
                peer: Raw.TypeInputPeer;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetPeerSettings>;
            write(): Buffer;
        }
        class Report extends TLObject {
            __response__: Bool;
            peer: Raw.TypeInputPeer;
            id: Vector<int>;
            reason: Raw.TypeReportReason;
            message: string;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                id: Vector<int>;
                reason: Raw.TypeReportReason;
                message: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.Report>;
            write(): Buffer;
        }
        class GetChats extends TLObject {
            __response__: Raw.messages.TypeChats;
            id: Vector<long>;
            constructor(params: {
                id: Vector<long>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetChats>;
            write(): Buffer;
        }
        class GetFullChat extends TLObject {
            __response__: Raw.messages.TypeChatFull;
            chatId: long;
            constructor(params: {
                chatId: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetFullChat>;
            write(): Buffer;
        }
        class EditChatTitle extends TLObject {
            __response__: Raw.TypeUpdates;
            chatId: long;
            title: string;
            constructor(params: {
                chatId: long;
                title: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.EditChatTitle>;
            write(): Buffer;
        }
        class EditChatPhoto extends TLObject {
            __response__: Raw.TypeUpdates;
            chatId: long;
            photo: Raw.TypeInputChatPhoto;
            constructor(params: {
                chatId: long;
                photo: Raw.TypeInputChatPhoto;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.EditChatPhoto>;
            write(): Buffer;
        }
        class AddChatUser extends TLObject {
            __response__: Raw.messages.TypeInvitedUsers;
            chatId: long;
            userId: Raw.TypeInputUser;
            fwdLimit: int;
            constructor(params: {
                chatId: long;
                userId: Raw.TypeInputUser;
                fwdLimit: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.AddChatUser>;
            write(): Buffer;
        }
        class DeleteChatUser extends TLObject {
            __response__: Raw.TypeUpdates;
            revokeHistory?: boolean;
            chatId: long;
            userId: Raw.TypeInputUser;
            constructor(params: {
                revokeHistory?: boolean;
                chatId: long;
                userId: Raw.TypeInputUser;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.DeleteChatUser>;
            write(): Buffer;
        }
        class CreateChat extends TLObject {
            __response__: Raw.messages.TypeInvitedUsers;
            users: Vector<Raw.TypeInputUser>;
            title: string;
            ttlPeriod?: int;
            constructor(params: {
                users: Vector<Raw.TypeInputUser>;
                title: string;
                ttlPeriod?: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.CreateChat>;
            write(): Buffer;
        }
        class GetDhConfig extends TLObject {
            __response__: Raw.messages.TypeDhConfig;
            version: int;
            randomLength: int;
            constructor(params: {
                version: int;
                randomLength: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetDhConfig>;
            write(): Buffer;
        }
        class RequestEncryption extends TLObject {
            __response__: Raw.TypeEncryptedChat;
            userId: Raw.TypeInputUser;
            randomId: int;
            gA: bytes;
            constructor(params: {
                userId: Raw.TypeInputUser;
                randomId: int;
                gA: bytes;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.RequestEncryption>;
            write(): Buffer;
        }
        class AcceptEncryption extends TLObject {
            __response__: Raw.TypeEncryptedChat;
            peer: Raw.TypeInputEncryptedChat;
            gB: bytes;
            keyFingerprint: long;
            constructor(params: {
                peer: Raw.TypeInputEncryptedChat;
                gB: bytes;
                keyFingerprint: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.AcceptEncryption>;
            write(): Buffer;
        }
        class DiscardEncryption extends TLObject {
            __response__: Bool;
            deleteHistory?: boolean;
            chatId: int;
            constructor(params: {
                deleteHistory?: boolean;
                chatId: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.DiscardEncryption>;
            write(): Buffer;
        }
        class SetEncryptedTyping extends TLObject {
            __response__: Bool;
            peer: Raw.TypeInputEncryptedChat;
            typing: Bool;
            constructor(params: {
                peer: Raw.TypeInputEncryptedChat;
                typing: Bool;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SetEncryptedTyping>;
            write(): Buffer;
        }
        class ReadEncryptedHistory extends TLObject {
            __response__: Bool;
            peer: Raw.TypeInputEncryptedChat;
            maxDate: int;
            constructor(params: {
                peer: Raw.TypeInputEncryptedChat;
                maxDate: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.ReadEncryptedHistory>;
            write(): Buffer;
        }
        class SendEncrypted extends TLObject {
            __response__: Raw.messages.TypeSentEncryptedMessage;
            silent?: boolean;
            peer: Raw.TypeInputEncryptedChat;
            randomId: long;
            data: bytes;
            constructor(params: {
                silent?: boolean;
                peer: Raw.TypeInputEncryptedChat;
                randomId: long;
                data: bytes;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SendEncrypted>;
            write(): Buffer;
        }
        class SendEncryptedFile extends TLObject {
            __response__: Raw.messages.TypeSentEncryptedMessage;
            silent?: boolean;
            peer: Raw.TypeInputEncryptedChat;
            randomId: long;
            data: bytes;
            file: Raw.TypeInputEncryptedFile;
            constructor(params: {
                silent?: boolean;
                peer: Raw.TypeInputEncryptedChat;
                randomId: long;
                data: bytes;
                file: Raw.TypeInputEncryptedFile;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SendEncryptedFile>;
            write(): Buffer;
        }
        class SendEncryptedService extends TLObject {
            __response__: Raw.messages.TypeSentEncryptedMessage;
            peer: Raw.TypeInputEncryptedChat;
            randomId: long;
            data: bytes;
            constructor(params: {
                peer: Raw.TypeInputEncryptedChat;
                randomId: long;
                data: bytes;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SendEncryptedService>;
            write(): Buffer;
        }
        class ReceivedQueue extends TLObject {
            __response__: Vector<long>;
            maxQts: int;
            constructor(params: {
                maxQts: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.ReceivedQueue>;
            write(): Buffer;
        }
        class ReportEncryptedSpam extends TLObject {
            __response__: Bool;
            peer: Raw.TypeInputEncryptedChat;
            constructor(params: {
                peer: Raw.TypeInputEncryptedChat;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.ReportEncryptedSpam>;
            write(): Buffer;
        }
        class ReadMessageContents extends TLObject {
            __response__: Raw.messages.TypeAffectedMessages;
            id: Vector<int>;
            constructor(params: {
                id: Vector<int>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.ReadMessageContents>;
            write(): Buffer;
        }
        class GetStickers extends TLObject {
            __response__: Raw.messages.TypeStickers;
            emoticon: string;
            hash: long;
            constructor(params: {
                emoticon: string;
                hash: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetStickers>;
            write(): Buffer;
        }
        class GetAllStickers extends TLObject {
            __response__: Raw.messages.TypeAllStickers;
            hash: long;
            constructor(params: {
                hash: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetAllStickers>;
            write(): Buffer;
        }
        class GetWebPagePreview extends TLObject {
            __response__: Raw.TypeMessageMedia;
            message: string;
            entities?: Vector<Raw.TypeMessageEntity>;
            constructor(params: {
                message: string;
                entities?: Vector<Raw.TypeMessageEntity>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetWebPagePreview>;
            write(): Buffer;
        }
        class ExportChatInvite extends TLObject {
            __response__: Raw.TypeExportedChatInvite;
            legacyRevokePermanent?: boolean;
            requestNeeded?: boolean;
            peer: Raw.TypeInputPeer;
            expireDate?: int;
            usageLimit?: int;
            title?: string;
            constructor(params: {
                legacyRevokePermanent?: boolean;
                requestNeeded?: boolean;
                peer: Raw.TypeInputPeer;
                expireDate?: int;
                usageLimit?: int;
                title?: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.ExportChatInvite>;
            write(): Buffer;
        }
        class CheckChatInvite extends TLObject {
            __response__: Raw.TypeChatInvite;
            hash: string;
            constructor(params: {
                hash: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.CheckChatInvite>;
            write(): Buffer;
        }
        class ImportChatInvite extends TLObject {
            __response__: Raw.TypeUpdates;
            hash: string;
            constructor(params: {
                hash: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.ImportChatInvite>;
            write(): Buffer;
        }
        class GetStickerSet extends TLObject {
            __response__: Raw.messages.TypeStickerSet;
            stickerset: Raw.TypeInputStickerSet;
            hash: int;
            constructor(params: {
                stickerset: Raw.TypeInputStickerSet;
                hash: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetStickerSet>;
            write(): Buffer;
        }
        class InstallStickerSet extends TLObject {
            __response__: Raw.messages.TypeStickerSetInstallResult;
            stickerset: Raw.TypeInputStickerSet;
            archived: Bool;
            constructor(params: {
                stickerset: Raw.TypeInputStickerSet;
                archived: Bool;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.InstallStickerSet>;
            write(): Buffer;
        }
        class UninstallStickerSet extends TLObject {
            __response__: Bool;
            stickerset: Raw.TypeInputStickerSet;
            constructor(params: {
                stickerset: Raw.TypeInputStickerSet;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.UninstallStickerSet>;
            write(): Buffer;
        }
        class StartBot extends TLObject {
            __response__: Raw.TypeUpdates;
            bot: Raw.TypeInputUser;
            peer: Raw.TypeInputPeer;
            randomId: long;
            startParam: string;
            constructor(params: {
                bot: Raw.TypeInputUser;
                peer: Raw.TypeInputPeer;
                randomId: long;
                startParam: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.StartBot>;
            write(): Buffer;
        }
        class GetMessagesViews extends TLObject {
            __response__: Raw.messages.TypeMessageViews;
            peer: Raw.TypeInputPeer;
            id: Vector<int>;
            increment: Bool;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                id: Vector<int>;
                increment: Bool;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetMessagesViews>;
            write(): Buffer;
        }
        class EditChatAdmin extends TLObject {
            __response__: Bool;
            chatId: long;
            userId: Raw.TypeInputUser;
            isAdmin: Bool;
            constructor(params: {
                chatId: long;
                userId: Raw.TypeInputUser;
                isAdmin: Bool;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.EditChatAdmin>;
            write(): Buffer;
        }
        class MigrateChat extends TLObject {
            __response__: Raw.TypeUpdates;
            chatId: long;
            constructor(params: {
                chatId: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.MigrateChat>;
            write(): Buffer;
        }
        class SearchGlobal extends TLObject {
            __response__: Raw.messages.TypeMessages;
            broadcastsOnly?: boolean;
            folderId?: int;
            q: string;
            filter: Raw.TypeMessagesFilter;
            minDate: int;
            maxDate: int;
            offsetRate: int;
            offsetPeer: Raw.TypeInputPeer;
            offsetId: int;
            limit: int;
            constructor(params: {
                broadcastsOnly?: boolean;
                folderId?: int;
                q: string;
                filter: Raw.TypeMessagesFilter;
                minDate: int;
                maxDate: int;
                offsetRate: int;
                offsetPeer: Raw.TypeInputPeer;
                offsetId: int;
                limit: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SearchGlobal>;
            write(): Buffer;
        }
        class ReorderStickerSets extends TLObject {
            __response__: Bool;
            masks?: boolean;
            emojis?: boolean;
            order: Vector<long>;
            constructor(params: {
                masks?: boolean;
                emojis?: boolean;
                order: Vector<long>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.ReorderStickerSets>;
            write(): Buffer;
        }
        class GetDocumentByHash extends TLObject {
            __response__: Raw.TypeDocument;
            sha256: bytes;
            size: long;
            mimeType: string;
            constructor(params: {
                sha256: bytes;
                size: long;
                mimeType: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetDocumentByHash>;
            write(): Buffer;
        }
        class GetSavedGifs extends TLObject {
            __response__: Raw.messages.TypeSavedGifs;
            hash: long;
            constructor(params: {
                hash: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetSavedGifs>;
            write(): Buffer;
        }
        class SaveGif extends TLObject {
            __response__: Bool;
            id: Raw.TypeInputDocument;
            unsave: Bool;
            constructor(params: {
                id: Raw.TypeInputDocument;
                unsave: Bool;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SaveGif>;
            write(): Buffer;
        }
        class GetInlineBotResults extends TLObject {
            __response__: Raw.messages.TypeBotResults;
            bot: Raw.TypeInputUser;
            peer: Raw.TypeInputPeer;
            geoPoint?: Raw.TypeInputGeoPoint;
            query: string;
            offset: string;
            constructor(params: {
                bot: Raw.TypeInputUser;
                peer: Raw.TypeInputPeer;
                geoPoint?: Raw.TypeInputGeoPoint;
                query: string;
                offset: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetInlineBotResults>;
            write(): Buffer;
        }
        class SetInlineBotResults extends TLObject {
            __response__: Bool;
            gallery?: boolean;
            private?: boolean;
            queryId: long;
            results: Vector<Raw.TypeInputBotInlineResult>;
            cacheTime: int;
            nextOffset?: string;
            switchPm?: Raw.TypeInlineBotSwitchPM;
            switchWebview?: Raw.TypeInlineBotWebView;
            constructor(params: {
                gallery?: boolean;
                private?: boolean;
                queryId: long;
                results: Vector<Raw.TypeInputBotInlineResult>;
                cacheTime: int;
                nextOffset?: string;
                switchPm?: Raw.TypeInlineBotSwitchPM;
                switchWebview?: Raw.TypeInlineBotWebView;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SetInlineBotResults>;
            write(): Buffer;
        }
        class SendInlineBotResult extends TLObject {
            __response__: Raw.TypeUpdates;
            silent?: boolean;
            background?: boolean;
            clearDraft?: boolean;
            hideVia?: boolean;
            peer: Raw.TypeInputPeer;
            replyTo?: Raw.TypeInputReplyTo;
            randomId: long;
            queryId: long;
            id: string;
            scheduleDate?: int;
            sendAs?: Raw.TypeInputPeer;
            quickReplyShortcut?: Raw.TypeInputQuickReplyShortcut;
            constructor(params: {
                silent?: boolean;
                background?: boolean;
                clearDraft?: boolean;
                hideVia?: boolean;
                peer: Raw.TypeInputPeer;
                replyTo?: Raw.TypeInputReplyTo;
                randomId: long;
                queryId: long;
                id: string;
                scheduleDate?: int;
                sendAs?: Raw.TypeInputPeer;
                quickReplyShortcut?: Raw.TypeInputQuickReplyShortcut;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SendInlineBotResult>;
            write(): Buffer;
        }
        class GetMessageEditData extends TLObject {
            __response__: Raw.messages.TypeMessageEditData;
            peer: Raw.TypeInputPeer;
            id: int;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                id: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetMessageEditData>;
            write(): Buffer;
        }
        class EditMessage extends TLObject {
            __response__: Raw.TypeUpdates;
            noWebpage?: boolean;
            invertMedia?: boolean;
            peer: Raw.TypeInputPeer;
            id: int;
            message?: string;
            media?: Raw.TypeInputMedia;
            replyMarkup?: Raw.TypeReplyMarkup;
            entities?: Vector<Raw.TypeMessageEntity>;
            scheduleDate?: int;
            quickReplyShortcutId?: int;
            constructor(params: {
                noWebpage?: boolean;
                invertMedia?: boolean;
                peer: Raw.TypeInputPeer;
                id: int;
                message?: string;
                media?: Raw.TypeInputMedia;
                replyMarkup?: Raw.TypeReplyMarkup;
                entities?: Vector<Raw.TypeMessageEntity>;
                scheduleDate?: int;
                quickReplyShortcutId?: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.EditMessage>;
            write(): Buffer;
        }
        class EditInlineBotMessage extends TLObject {
            __response__: Bool;
            noWebpage?: boolean;
            invertMedia?: boolean;
            id: Raw.TypeInputBotInlineMessageID;
            message?: string;
            media?: Raw.TypeInputMedia;
            replyMarkup?: Raw.TypeReplyMarkup;
            entities?: Vector<Raw.TypeMessageEntity>;
            constructor(params: {
                noWebpage?: boolean;
                invertMedia?: boolean;
                id: Raw.TypeInputBotInlineMessageID;
                message?: string;
                media?: Raw.TypeInputMedia;
                replyMarkup?: Raw.TypeReplyMarkup;
                entities?: Vector<Raw.TypeMessageEntity>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.EditInlineBotMessage>;
            write(): Buffer;
        }
        class GetBotCallbackAnswer extends TLObject {
            __response__: Raw.messages.TypeBotCallbackAnswer;
            game?: boolean;
            peer: Raw.TypeInputPeer;
            msgId: int;
            data?: bytes;
            password?: Raw.TypeInputCheckPasswordSRP;
            constructor(params: {
                game?: boolean;
                peer: Raw.TypeInputPeer;
                msgId: int;
                data?: bytes;
                password?: Raw.TypeInputCheckPasswordSRP;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetBotCallbackAnswer>;
            write(): Buffer;
        }
        class SetBotCallbackAnswer extends TLObject {
            __response__: Bool;
            alert?: boolean;
            queryId: long;
            message?: string;
            url?: string;
            cacheTime: int;
            constructor(params: {
                alert?: boolean;
                queryId: long;
                message?: string;
                url?: string;
                cacheTime: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SetBotCallbackAnswer>;
            write(): Buffer;
        }
        class GetPeerDialogs extends TLObject {
            __response__: Raw.messages.TypePeerDialogs;
            peers: Vector<Raw.TypeInputDialogPeer>;
            constructor(params: {
                peers: Vector<Raw.TypeInputDialogPeer>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetPeerDialogs>;
            write(): Buffer;
        }
        class SaveDraft extends TLObject {
            __response__: Bool;
            noWebpage?: boolean;
            invertMedia?: boolean;
            replyTo?: Raw.TypeInputReplyTo;
            peer: Raw.TypeInputPeer;
            message: string;
            entities?: Vector<Raw.TypeMessageEntity>;
            media?: Raw.TypeInputMedia;
            constructor(params: {
                noWebpage?: boolean;
                invertMedia?: boolean;
                replyTo?: Raw.TypeInputReplyTo;
                peer: Raw.TypeInputPeer;
                message: string;
                entities?: Vector<Raw.TypeMessageEntity>;
                media?: Raw.TypeInputMedia;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SaveDraft>;
            write(): Buffer;
        }
        class GetAllDrafts extends TLObject {
            __response__: Raw.TypeUpdates;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetAllDrafts>;
            write(): Buffer;
        }
        class GetFeaturedStickers extends TLObject {
            __response__: Raw.messages.TypeFeaturedStickers;
            hash: long;
            constructor(params: {
                hash: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetFeaturedStickers>;
            write(): Buffer;
        }
        class ReadFeaturedStickers extends TLObject {
            __response__: Bool;
            id: Vector<long>;
            constructor(params: {
                id: Vector<long>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.ReadFeaturedStickers>;
            write(): Buffer;
        }
        class GetRecentStickers extends TLObject {
            __response__: Raw.messages.TypeRecentStickers;
            attached?: boolean;
            hash: long;
            constructor(params: {
                attached?: boolean;
                hash: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetRecentStickers>;
            write(): Buffer;
        }
        class SaveRecentSticker extends TLObject {
            __response__: Bool;
            attached?: boolean;
            id: Raw.TypeInputDocument;
            unsave: Bool;
            constructor(params: {
                attached?: boolean;
                id: Raw.TypeInputDocument;
                unsave: Bool;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SaveRecentSticker>;
            write(): Buffer;
        }
        class ClearRecentStickers extends TLObject {
            __response__: Bool;
            attached?: boolean;
            constructor(params: {
                attached?: boolean;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.ClearRecentStickers>;
            write(): Buffer;
        }
        class GetArchivedStickers extends TLObject {
            __response__: Raw.messages.TypeArchivedStickers;
            masks?: boolean;
            emojis?: boolean;
            offsetId: long;
            limit: int;
            constructor(params: {
                masks?: boolean;
                emojis?: boolean;
                offsetId: long;
                limit: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetArchivedStickers>;
            write(): Buffer;
        }
        class GetMaskStickers extends TLObject {
            __response__: Raw.messages.TypeAllStickers;
            hash: long;
            constructor(params: {
                hash: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetMaskStickers>;
            write(): Buffer;
        }
        class GetAttachedStickers extends TLObject {
            __response__: Vector<Raw.TypeStickerSetCovered>;
            media: Raw.TypeInputStickeredMedia;
            constructor(params: {
                media: Raw.TypeInputStickeredMedia;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetAttachedStickers>;
            write(): Buffer;
        }
        class SetGameScore extends TLObject {
            __response__: Raw.TypeUpdates;
            editMessage?: boolean;
            force?: boolean;
            peer: Raw.TypeInputPeer;
            id: int;
            userId: Raw.TypeInputUser;
            score: int;
            constructor(params: {
                editMessage?: boolean;
                force?: boolean;
                peer: Raw.TypeInputPeer;
                id: int;
                userId: Raw.TypeInputUser;
                score: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SetGameScore>;
            write(): Buffer;
        }
        class SetInlineGameScore extends TLObject {
            __response__: Bool;
            editMessage?: boolean;
            force?: boolean;
            id: Raw.TypeInputBotInlineMessageID;
            userId: Raw.TypeInputUser;
            score: int;
            constructor(params: {
                editMessage?: boolean;
                force?: boolean;
                id: Raw.TypeInputBotInlineMessageID;
                userId: Raw.TypeInputUser;
                score: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SetInlineGameScore>;
            write(): Buffer;
        }
        class GetGameHighScores extends TLObject {
            __response__: Raw.messages.TypeHighScores;
            peer: Raw.TypeInputPeer;
            id: int;
            userId: Raw.TypeInputUser;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                id: int;
                userId: Raw.TypeInputUser;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetGameHighScores>;
            write(): Buffer;
        }
        class GetInlineGameHighScores extends TLObject {
            __response__: Raw.messages.TypeHighScores;
            id: Raw.TypeInputBotInlineMessageID;
            userId: Raw.TypeInputUser;
            constructor(params: {
                id: Raw.TypeInputBotInlineMessageID;
                userId: Raw.TypeInputUser;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetInlineGameHighScores>;
            write(): Buffer;
        }
        class GetCommonChats extends TLObject {
            __response__: Raw.messages.TypeChats;
            userId: Raw.TypeInputUser;
            maxId: long;
            limit: int;
            constructor(params: {
                userId: Raw.TypeInputUser;
                maxId: long;
                limit: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetCommonChats>;
            write(): Buffer;
        }
        class GetWebPage extends TLObject {
            __response__: Raw.messages.TypeWebPage;
            url: string;
            hash: int;
            constructor(params: {
                url: string;
                hash: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetWebPage>;
            write(): Buffer;
        }
        class ToggleDialogPin extends TLObject {
            __response__: Bool;
            pinned?: boolean;
            peer: Raw.TypeInputDialogPeer;
            constructor(params: {
                pinned?: boolean;
                peer: Raw.TypeInputDialogPeer;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.ToggleDialogPin>;
            write(): Buffer;
        }
        class ReorderPinnedDialogs extends TLObject {
            __response__: Bool;
            force?: boolean;
            folderId: int;
            order: Vector<Raw.TypeInputDialogPeer>;
            constructor(params: {
                force?: boolean;
                folderId: int;
                order: Vector<Raw.TypeInputDialogPeer>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.ReorderPinnedDialogs>;
            write(): Buffer;
        }
        class GetPinnedDialogs extends TLObject {
            __response__: Raw.messages.TypePeerDialogs;
            folderId: int;
            constructor(params: {
                folderId: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetPinnedDialogs>;
            write(): Buffer;
        }
        class SetBotShippingResults extends TLObject {
            __response__: Bool;
            queryId: long;
            error?: string;
            shippingOptions?: Vector<Raw.TypeShippingOption>;
            constructor(params: {
                queryId: long;
                error?: string;
                shippingOptions?: Vector<Raw.TypeShippingOption>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SetBotShippingResults>;
            write(): Buffer;
        }
        class SetBotPrecheckoutResults extends TLObject {
            __response__: Bool;
            success?: boolean;
            queryId: long;
            error?: string;
            constructor(params: {
                success?: boolean;
                queryId: long;
                error?: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SetBotPrecheckoutResults>;
            write(): Buffer;
        }
        class UploadMedia extends TLObject {
            __response__: Raw.TypeMessageMedia;
            businessConnectionId?: string;
            peer: Raw.TypeInputPeer;
            media: Raw.TypeInputMedia;
            constructor(params: {
                businessConnectionId?: string;
                peer: Raw.TypeInputPeer;
                media: Raw.TypeInputMedia;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.UploadMedia>;
            write(): Buffer;
        }
        class SendScreenshotNotification extends TLObject {
            __response__: Raw.TypeUpdates;
            peer: Raw.TypeInputPeer;
            replyTo: Raw.TypeInputReplyTo;
            randomId: long;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                replyTo: Raw.TypeInputReplyTo;
                randomId: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SendScreenshotNotification>;
            write(): Buffer;
        }
        class GetFavedStickers extends TLObject {
            __response__: Raw.messages.TypeFavedStickers;
            hash: long;
            constructor(params: {
                hash: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetFavedStickers>;
            write(): Buffer;
        }
        class FaveSticker extends TLObject {
            __response__: Bool;
            id: Raw.TypeInputDocument;
            unfave: Bool;
            constructor(params: {
                id: Raw.TypeInputDocument;
                unfave: Bool;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.FaveSticker>;
            write(): Buffer;
        }
        class GetUnreadMentions extends TLObject {
            __response__: Raw.messages.TypeMessages;
            peer: Raw.TypeInputPeer;
            topMsgId?: int;
            offsetId: int;
            addOffset: int;
            limit: int;
            maxId: int;
            minId: int;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                topMsgId?: int;
                offsetId: int;
                addOffset: int;
                limit: int;
                maxId: int;
                minId: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetUnreadMentions>;
            write(): Buffer;
        }
        class ReadMentions extends TLObject {
            __response__: Raw.messages.TypeAffectedHistory;
            peer: Raw.TypeInputPeer;
            topMsgId?: int;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                topMsgId?: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.ReadMentions>;
            write(): Buffer;
        }
        class GetRecentLocations extends TLObject {
            __response__: Raw.messages.TypeMessages;
            peer: Raw.TypeInputPeer;
            limit: int;
            hash: long;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                limit: int;
                hash: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetRecentLocations>;
            write(): Buffer;
        }
        class SendMultiMedia extends TLObject {
            __response__: Raw.TypeUpdates;
            silent?: boolean;
            background?: boolean;
            clearDraft?: boolean;
            noforwards?: boolean;
            updateStickersetsOrder?: boolean;
            invertMedia?: boolean;
            peer: Raw.TypeInputPeer;
            replyTo?: Raw.TypeInputReplyTo;
            multiMedia: Vector<Raw.TypeInputSingleMedia>;
            scheduleDate?: int;
            sendAs?: Raw.TypeInputPeer;
            quickReplyShortcut?: Raw.TypeInputQuickReplyShortcut;
            effect?: long;
            constructor(params: {
                silent?: boolean;
                background?: boolean;
                clearDraft?: boolean;
                noforwards?: boolean;
                updateStickersetsOrder?: boolean;
                invertMedia?: boolean;
                peer: Raw.TypeInputPeer;
                replyTo?: Raw.TypeInputReplyTo;
                multiMedia: Vector<Raw.TypeInputSingleMedia>;
                scheduleDate?: int;
                sendAs?: Raw.TypeInputPeer;
                quickReplyShortcut?: Raw.TypeInputQuickReplyShortcut;
                effect?: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SendMultiMedia>;
            write(): Buffer;
        }
        class UploadEncryptedFile extends TLObject {
            __response__: Raw.TypeEncryptedFile;
            peer: Raw.TypeInputEncryptedChat;
            file: Raw.TypeInputEncryptedFile;
            constructor(params: {
                peer: Raw.TypeInputEncryptedChat;
                file: Raw.TypeInputEncryptedFile;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.UploadEncryptedFile>;
            write(): Buffer;
        }
        class SearchStickerSets extends TLObject {
            __response__: Raw.messages.TypeFoundStickerSets;
            excludeFeatured?: boolean;
            q: string;
            hash: long;
            constructor(params: {
                excludeFeatured?: boolean;
                q: string;
                hash: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SearchStickerSets>;
            write(): Buffer;
        }
        class GetSplitRanges extends TLObject {
            __response__: Vector<Raw.TypeMessageRange>;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetSplitRanges>;
            write(): Buffer;
        }
        class MarkDialogUnread extends TLObject {
            __response__: Bool;
            unread?: boolean;
            peer: Raw.TypeInputDialogPeer;
            constructor(params: {
                unread?: boolean;
                peer: Raw.TypeInputDialogPeer;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.MarkDialogUnread>;
            write(): Buffer;
        }
        class GetDialogUnreadMarks extends TLObject {
            __response__: Vector<Raw.TypeDialogPeer>;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetDialogUnreadMarks>;
            write(): Buffer;
        }
        class ClearAllDrafts extends TLObject {
            __response__: Bool;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.ClearAllDrafts>;
            write(): Buffer;
        }
        class UpdatePinnedMessage extends TLObject {
            __response__: Raw.TypeUpdates;
            silent?: boolean;
            unpin?: boolean;
            pmOneside?: boolean;
            peer: Raw.TypeInputPeer;
            id: int;
            constructor(params: {
                silent?: boolean;
                unpin?: boolean;
                pmOneside?: boolean;
                peer: Raw.TypeInputPeer;
                id: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.UpdatePinnedMessage>;
            write(): Buffer;
        }
        class SendVote extends TLObject {
            __response__: Raw.TypeUpdates;
            peer: Raw.TypeInputPeer;
            msgId: int;
            options: Vector<bytes>;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                msgId: int;
                options: Vector<bytes>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SendVote>;
            write(): Buffer;
        }
        class GetPollResults extends TLObject {
            __response__: Raw.TypeUpdates;
            peer: Raw.TypeInputPeer;
            msgId: int;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                msgId: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetPollResults>;
            write(): Buffer;
        }
        class GetOnlines extends TLObject {
            __response__: Raw.TypeChatOnlines;
            peer: Raw.TypeInputPeer;
            constructor(params: {
                peer: Raw.TypeInputPeer;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetOnlines>;
            write(): Buffer;
        }
        class EditChatAbout extends TLObject {
            __response__: Bool;
            peer: Raw.TypeInputPeer;
            about: string;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                about: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.EditChatAbout>;
            write(): Buffer;
        }
        class EditChatDefaultBannedRights extends TLObject {
            __response__: Raw.TypeUpdates;
            peer: Raw.TypeInputPeer;
            bannedRights: Raw.TypeChatBannedRights;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                bannedRights: Raw.TypeChatBannedRights;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.EditChatDefaultBannedRights>;
            write(): Buffer;
        }
        class GetEmojiKeywords extends TLObject {
            __response__: Raw.TypeEmojiKeywordsDifference;
            langCode: string;
            constructor(params: {
                langCode: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetEmojiKeywords>;
            write(): Buffer;
        }
        class GetEmojiKeywordsDifference extends TLObject {
            __response__: Raw.TypeEmojiKeywordsDifference;
            langCode: string;
            fromVersion: int;
            constructor(params: {
                langCode: string;
                fromVersion: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetEmojiKeywordsDifference>;
            write(): Buffer;
        }
        class GetEmojiKeywordsLanguages extends TLObject {
            __response__: Vector<Raw.TypeEmojiLanguage>;
            langCodes: Vector<string>;
            constructor(params: {
                langCodes: Vector<string>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetEmojiKeywordsLanguages>;
            write(): Buffer;
        }
        class GetEmojiURL extends TLObject {
            __response__: Raw.TypeEmojiURL;
            langCode: string;
            constructor(params: {
                langCode: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetEmojiURL>;
            write(): Buffer;
        }
        class GetSearchCounters extends TLObject {
            __response__: Vector<Raw.messages.TypeSearchCounter>;
            peer: Raw.TypeInputPeer;
            savedPeerId?: Raw.TypeInputPeer;
            topMsgId?: int;
            filters: Vector<Raw.TypeMessagesFilter>;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                savedPeerId?: Raw.TypeInputPeer;
                topMsgId?: int;
                filters: Vector<Raw.TypeMessagesFilter>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetSearchCounters>;
            write(): Buffer;
        }
        class RequestUrlAuth extends TLObject {
            __response__: Raw.TypeUrlAuthResult;
            peer?: Raw.TypeInputPeer;
            msgId?: int;
            buttonId?: int;
            url?: string;
            constructor(params: {
                peer?: Raw.TypeInputPeer;
                msgId?: int;
                buttonId?: int;
                url?: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.RequestUrlAuth>;
            write(): Buffer;
        }
        class AcceptUrlAuth extends TLObject {
            __response__: Raw.TypeUrlAuthResult;
            writeAllowed?: boolean;
            peer?: Raw.TypeInputPeer;
            msgId?: int;
            buttonId?: int;
            url?: string;
            constructor(params: {
                writeAllowed?: boolean;
                peer?: Raw.TypeInputPeer;
                msgId?: int;
                buttonId?: int;
                url?: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.AcceptUrlAuth>;
            write(): Buffer;
        }
        class HidePeerSettingsBar extends TLObject {
            __response__: Bool;
            peer: Raw.TypeInputPeer;
            constructor(params: {
                peer: Raw.TypeInputPeer;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.HidePeerSettingsBar>;
            write(): Buffer;
        }
        class GetScheduledHistory extends TLObject {
            __response__: Raw.messages.TypeMessages;
            peer: Raw.TypeInputPeer;
            hash: long;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                hash: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetScheduledHistory>;
            write(): Buffer;
        }
        class GetScheduledMessages extends TLObject {
            __response__: Raw.messages.TypeMessages;
            peer: Raw.TypeInputPeer;
            id: Vector<int>;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                id: Vector<int>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetScheduledMessages>;
            write(): Buffer;
        }
        class SendScheduledMessages extends TLObject {
            __response__: Raw.TypeUpdates;
            peer: Raw.TypeInputPeer;
            id: Vector<int>;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                id: Vector<int>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SendScheduledMessages>;
            write(): Buffer;
        }
        class DeleteScheduledMessages extends TLObject {
            __response__: Raw.TypeUpdates;
            peer: Raw.TypeInputPeer;
            id: Vector<int>;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                id: Vector<int>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.DeleteScheduledMessages>;
            write(): Buffer;
        }
        class GetPollVotes extends TLObject {
            __response__: Raw.messages.TypeVotesList;
            peer: Raw.TypeInputPeer;
            id: int;
            option?: bytes;
            offset?: string;
            limit: int;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                id: int;
                option?: bytes;
                offset?: string;
                limit: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetPollVotes>;
            write(): Buffer;
        }
        class ToggleStickerSets extends TLObject {
            __response__: Bool;
            uninstall?: boolean;
            archive?: boolean;
            unarchive?: boolean;
            stickersets: Vector<Raw.TypeInputStickerSet>;
            constructor(params: {
                uninstall?: boolean;
                archive?: boolean;
                unarchive?: boolean;
                stickersets: Vector<Raw.TypeInputStickerSet>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.ToggleStickerSets>;
            write(): Buffer;
        }
        class GetDialogFilters extends TLObject {
            __response__: Raw.messages.TypeDialogFilters;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetDialogFilters>;
            write(): Buffer;
        }
        class GetSuggestedDialogFilters extends TLObject {
            __response__: Vector<Raw.TypeDialogFilterSuggested>;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetSuggestedDialogFilters>;
            write(): Buffer;
        }
        class UpdateDialogFilter extends TLObject {
            __response__: Bool;
            id: int;
            filter?: Raw.TypeDialogFilter;
            constructor(params: {
                id: int;
                filter?: Raw.TypeDialogFilter;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.UpdateDialogFilter>;
            write(): Buffer;
        }
        class UpdateDialogFiltersOrder extends TLObject {
            __response__: Bool;
            order: Vector<int>;
            constructor(params: {
                order: Vector<int>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.UpdateDialogFiltersOrder>;
            write(): Buffer;
        }
        class GetOldFeaturedStickers extends TLObject {
            __response__: Raw.messages.TypeFeaturedStickers;
            offset: int;
            limit: int;
            hash: long;
            constructor(params: {
                offset: int;
                limit: int;
                hash: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetOldFeaturedStickers>;
            write(): Buffer;
        }
        class GetReplies extends TLObject {
            __response__: Raw.messages.TypeMessages;
            peer: Raw.TypeInputPeer;
            msgId: int;
            offsetId: int;
            offsetDate: int;
            addOffset: int;
            limit: int;
            maxId: int;
            minId: int;
            hash: long;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                msgId: int;
                offsetId: int;
                offsetDate: int;
                addOffset: int;
                limit: int;
                maxId: int;
                minId: int;
                hash: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetReplies>;
            write(): Buffer;
        }
        class GetDiscussionMessage extends TLObject {
            __response__: Raw.messages.TypeDiscussionMessage;
            peer: Raw.TypeInputPeer;
            msgId: int;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                msgId: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetDiscussionMessage>;
            write(): Buffer;
        }
        class ReadDiscussion extends TLObject {
            __response__: Bool;
            peer: Raw.TypeInputPeer;
            msgId: int;
            readMaxId: int;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                msgId: int;
                readMaxId: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.ReadDiscussion>;
            write(): Buffer;
        }
        class UnpinAllMessages extends TLObject {
            __response__: Raw.messages.TypeAffectedHistory;
            peer: Raw.TypeInputPeer;
            topMsgId?: int;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                topMsgId?: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.UnpinAllMessages>;
            write(): Buffer;
        }
        class DeleteChat extends TLObject {
            __response__: Bool;
            chatId: long;
            constructor(params: {
                chatId: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.DeleteChat>;
            write(): Buffer;
        }
        class DeletePhoneCallHistory extends TLObject {
            __response__: Raw.messages.TypeAffectedFoundMessages;
            revoke?: boolean;
            constructor(params: {
                revoke?: boolean;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.DeletePhoneCallHistory>;
            write(): Buffer;
        }
        class CheckHistoryImport extends TLObject {
            __response__: Raw.messages.TypeHistoryImportParsed;
            importHead: string;
            constructor(params: {
                importHead: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.CheckHistoryImport>;
            write(): Buffer;
        }
        class InitHistoryImport extends TLObject {
            __response__: Raw.messages.TypeHistoryImport;
            peer: Raw.TypeInputPeer;
            file: Raw.TypeInputFile;
            mediaCount: int;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                file: Raw.TypeInputFile;
                mediaCount: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.InitHistoryImport>;
            write(): Buffer;
        }
        class UploadImportedMedia extends TLObject {
            __response__: Raw.TypeMessageMedia;
            peer: Raw.TypeInputPeer;
            importId: long;
            fileName: string;
            media: Raw.TypeInputMedia;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                importId: long;
                fileName: string;
                media: Raw.TypeInputMedia;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.UploadImportedMedia>;
            write(): Buffer;
        }
        class StartHistoryImport extends TLObject {
            __response__: Bool;
            peer: Raw.TypeInputPeer;
            importId: long;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                importId: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.StartHistoryImport>;
            write(): Buffer;
        }
        class GetExportedChatInvites extends TLObject {
            __response__: Raw.messages.TypeExportedChatInvites;
            revoked?: boolean;
            peer: Raw.TypeInputPeer;
            adminId: Raw.TypeInputUser;
            offsetDate?: int;
            offsetLink?: string;
            limit: int;
            constructor(params: {
                revoked?: boolean;
                peer: Raw.TypeInputPeer;
                adminId: Raw.TypeInputUser;
                offsetDate?: int;
                offsetLink?: string;
                limit: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetExportedChatInvites>;
            write(): Buffer;
        }
        class GetExportedChatInvite extends TLObject {
            __response__: Raw.messages.TypeExportedChatInvite;
            peer: Raw.TypeInputPeer;
            link: string;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                link: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetExportedChatInvite>;
            write(): Buffer;
        }
        class EditExportedChatInvite extends TLObject {
            __response__: Raw.messages.TypeExportedChatInvite;
            revoked?: boolean;
            peer: Raw.TypeInputPeer;
            link: string;
            expireDate?: int;
            usageLimit?: int;
            requestNeeded?: Bool;
            title?: string;
            constructor(params: {
                revoked?: boolean;
                peer: Raw.TypeInputPeer;
                link: string;
                expireDate?: int;
                usageLimit?: int;
                requestNeeded?: Bool;
                title?: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.EditExportedChatInvite>;
            write(): Buffer;
        }
        class DeleteRevokedExportedChatInvites extends TLObject {
            __response__: Bool;
            peer: Raw.TypeInputPeer;
            adminId: Raw.TypeInputUser;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                adminId: Raw.TypeInputUser;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.DeleteRevokedExportedChatInvites>;
            write(): Buffer;
        }
        class DeleteExportedChatInvite extends TLObject {
            __response__: Bool;
            peer: Raw.TypeInputPeer;
            link: string;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                link: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.DeleteExportedChatInvite>;
            write(): Buffer;
        }
        class GetAdminsWithInvites extends TLObject {
            __response__: Raw.messages.TypeChatAdminsWithInvites;
            peer: Raw.TypeInputPeer;
            constructor(params: {
                peer: Raw.TypeInputPeer;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetAdminsWithInvites>;
            write(): Buffer;
        }
        class GetChatInviteImporters extends TLObject {
            __response__: Raw.messages.TypeChatInviteImporters;
            requested?: boolean;
            peer: Raw.TypeInputPeer;
            link?: string;
            q?: string;
            offsetDate: int;
            offsetUser: Raw.TypeInputUser;
            limit: int;
            constructor(params: {
                requested?: boolean;
                peer: Raw.TypeInputPeer;
                link?: string;
                q?: string;
                offsetDate: int;
                offsetUser: Raw.TypeInputUser;
                limit: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetChatInviteImporters>;
            write(): Buffer;
        }
        class SetHistoryTTL extends TLObject {
            __response__: Raw.TypeUpdates;
            peer: Raw.TypeInputPeer;
            period: int;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                period: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SetHistoryTTL>;
            write(): Buffer;
        }
        class CheckHistoryImportPeer extends TLObject {
            __response__: Raw.messages.TypeCheckedHistoryImportPeer;
            peer: Raw.TypeInputPeer;
            constructor(params: {
                peer: Raw.TypeInputPeer;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.CheckHistoryImportPeer>;
            write(): Buffer;
        }
        class SetChatTheme extends TLObject {
            __response__: Raw.TypeUpdates;
            peer: Raw.TypeInputPeer;
            emoticon: string;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                emoticon: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SetChatTheme>;
            write(): Buffer;
        }
        class GetMessageReadParticipants extends TLObject {
            __response__: Vector<Raw.TypeReadParticipantDate>;
            peer: Raw.TypeInputPeer;
            msgId: int;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                msgId: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetMessageReadParticipants>;
            write(): Buffer;
        }
        class GetSearchResultsCalendar extends TLObject {
            __response__: Raw.messages.TypeSearchResultsCalendar;
            peer: Raw.TypeInputPeer;
            savedPeerId?: Raw.TypeInputPeer;
            filter: Raw.TypeMessagesFilter;
            offsetId: int;
            offsetDate: int;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                savedPeerId?: Raw.TypeInputPeer;
                filter: Raw.TypeMessagesFilter;
                offsetId: int;
                offsetDate: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetSearchResultsCalendar>;
            write(): Buffer;
        }
        class GetSearchResultsPositions extends TLObject {
            __response__: Raw.messages.TypeSearchResultsPositions;
            peer: Raw.TypeInputPeer;
            savedPeerId?: Raw.TypeInputPeer;
            filter: Raw.TypeMessagesFilter;
            offsetId: int;
            limit: int;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                savedPeerId?: Raw.TypeInputPeer;
                filter: Raw.TypeMessagesFilter;
                offsetId: int;
                limit: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetSearchResultsPositions>;
            write(): Buffer;
        }
        class HideChatJoinRequest extends TLObject {
            __response__: Raw.TypeUpdates;
            approved?: boolean;
            peer: Raw.TypeInputPeer;
            userId: Raw.TypeInputUser;
            constructor(params: {
                approved?: boolean;
                peer: Raw.TypeInputPeer;
                userId: Raw.TypeInputUser;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.HideChatJoinRequest>;
            write(): Buffer;
        }
        class HideAllChatJoinRequests extends TLObject {
            __response__: Raw.TypeUpdates;
            approved?: boolean;
            peer: Raw.TypeInputPeer;
            link?: string;
            constructor(params: {
                approved?: boolean;
                peer: Raw.TypeInputPeer;
                link?: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.HideAllChatJoinRequests>;
            write(): Buffer;
        }
        class ToggleNoForwards extends TLObject {
            __response__: Raw.TypeUpdates;
            peer: Raw.TypeInputPeer;
            enabled: Bool;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                enabled: Bool;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.ToggleNoForwards>;
            write(): Buffer;
        }
        class SaveDefaultSendAs extends TLObject {
            __response__: Bool;
            peer: Raw.TypeInputPeer;
            sendAs: Raw.TypeInputPeer;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                sendAs: Raw.TypeInputPeer;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SaveDefaultSendAs>;
            write(): Buffer;
        }
        class SendReaction extends TLObject {
            __response__: Raw.TypeUpdates;
            big?: boolean;
            addToRecent?: boolean;
            peer: Raw.TypeInputPeer;
            msgId: int;
            reaction?: Vector<Raw.TypeReaction>;
            constructor(params: {
                big?: boolean;
                addToRecent?: boolean;
                peer: Raw.TypeInputPeer;
                msgId: int;
                reaction?: Vector<Raw.TypeReaction>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SendReaction>;
            write(): Buffer;
        }
        class GetMessagesReactions extends TLObject {
            __response__: Raw.TypeUpdates;
            peer: Raw.TypeInputPeer;
            id: Vector<int>;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                id: Vector<int>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetMessagesReactions>;
            write(): Buffer;
        }
        class GetMessageReactionsList extends TLObject {
            __response__: Raw.messages.TypeMessageReactionsList;
            peer: Raw.TypeInputPeer;
            id: int;
            reaction?: Raw.TypeReaction;
            offset?: string;
            limit: int;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                id: int;
                reaction?: Raw.TypeReaction;
                offset?: string;
                limit: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetMessageReactionsList>;
            write(): Buffer;
        }
        class SetChatAvailableReactions extends TLObject {
            __response__: Raw.TypeUpdates;
            peer: Raw.TypeInputPeer;
            availableReactions: Raw.TypeChatReactions;
            reactionsLimit?: int;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                availableReactions: Raw.TypeChatReactions;
                reactionsLimit?: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SetChatAvailableReactions>;
            write(): Buffer;
        }
        class GetAvailableReactions extends TLObject {
            __response__: Raw.messages.TypeAvailableReactions;
            hash: int;
            constructor(params: {
                hash: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetAvailableReactions>;
            write(): Buffer;
        }
        class SetDefaultReaction extends TLObject {
            __response__: Bool;
            reaction: Raw.TypeReaction;
            constructor(params: {
                reaction: Raw.TypeReaction;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SetDefaultReaction>;
            write(): Buffer;
        }
        class TranslateText extends TLObject {
            __response__: Raw.messages.TypeTranslatedText;
            peer?: Raw.TypeInputPeer;
            id?: Vector<int>;
            text?: Vector<Raw.TypeTextWithEntities>;
            toLang: string;
            constructor(params: {
                peer?: Raw.TypeInputPeer;
                id?: Vector<int>;
                text?: Vector<Raw.TypeTextWithEntities>;
                toLang: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.TranslateText>;
            write(): Buffer;
        }
        class GetUnreadReactions extends TLObject {
            __response__: Raw.messages.TypeMessages;
            peer: Raw.TypeInputPeer;
            topMsgId?: int;
            offsetId: int;
            addOffset: int;
            limit: int;
            maxId: int;
            minId: int;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                topMsgId?: int;
                offsetId: int;
                addOffset: int;
                limit: int;
                maxId: int;
                minId: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetUnreadReactions>;
            write(): Buffer;
        }
        class ReadReactions extends TLObject {
            __response__: Raw.messages.TypeAffectedHistory;
            peer: Raw.TypeInputPeer;
            topMsgId?: int;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                topMsgId?: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.ReadReactions>;
            write(): Buffer;
        }
        class SearchSentMedia extends TLObject {
            __response__: Raw.messages.TypeMessages;
            q: string;
            filter: Raw.TypeMessagesFilter;
            limit: int;
            constructor(params: {
                q: string;
                filter: Raw.TypeMessagesFilter;
                limit: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SearchSentMedia>;
            write(): Buffer;
        }
        class GetAttachMenuBots extends TLObject {
            __response__: Raw.TypeAttachMenuBots;
            hash: long;
            constructor(params: {
                hash: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetAttachMenuBots>;
            write(): Buffer;
        }
        class GetAttachMenuBot extends TLObject {
            __response__: Raw.TypeAttachMenuBotsBot;
            bot: Raw.TypeInputUser;
            constructor(params: {
                bot: Raw.TypeInputUser;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetAttachMenuBot>;
            write(): Buffer;
        }
        class ToggleBotInAttachMenu extends TLObject {
            __response__: Bool;
            writeAllowed?: boolean;
            bot: Raw.TypeInputUser;
            enabled: Bool;
            constructor(params: {
                writeAllowed?: boolean;
                bot: Raw.TypeInputUser;
                enabled: Bool;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.ToggleBotInAttachMenu>;
            write(): Buffer;
        }
        class RequestWebView extends TLObject {
            __response__: Raw.TypeWebViewResult;
            fromBotMenu?: boolean;
            silent?: boolean;
            peer: Raw.TypeInputPeer;
            bot: Raw.TypeInputUser;
            url?: string;
            startParam?: string;
            themeParams?: Raw.TypeDataJSON;
            platform: string;
            replyTo?: Raw.TypeInputReplyTo;
            sendAs?: Raw.TypeInputPeer;
            constructor(params: {
                fromBotMenu?: boolean;
                silent?: boolean;
                peer: Raw.TypeInputPeer;
                bot: Raw.TypeInputUser;
                url?: string;
                startParam?: string;
                themeParams?: Raw.TypeDataJSON;
                platform: string;
                replyTo?: Raw.TypeInputReplyTo;
                sendAs?: Raw.TypeInputPeer;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.RequestWebView>;
            write(): Buffer;
        }
        class ProlongWebView extends TLObject {
            __response__: Bool;
            silent?: boolean;
            peer: Raw.TypeInputPeer;
            bot: Raw.TypeInputUser;
            queryId: long;
            replyTo?: Raw.TypeInputReplyTo;
            sendAs?: Raw.TypeInputPeer;
            constructor(params: {
                silent?: boolean;
                peer: Raw.TypeInputPeer;
                bot: Raw.TypeInputUser;
                queryId: long;
                replyTo?: Raw.TypeInputReplyTo;
                sendAs?: Raw.TypeInputPeer;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.ProlongWebView>;
            write(): Buffer;
        }
        class RequestSimpleWebView extends TLObject {
            __response__: Raw.TypeSimpleWebViewResult;
            fromSwitchWebview?: boolean;
            fromSideMenu?: boolean;
            bot: Raw.TypeInputUser;
            url?: string;
            startParam?: string;
            themeParams?: Raw.TypeDataJSON;
            platform: string;
            constructor(params: {
                fromSwitchWebview?: boolean;
                fromSideMenu?: boolean;
                bot: Raw.TypeInputUser;
                url?: string;
                startParam?: string;
                themeParams?: Raw.TypeDataJSON;
                platform: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.RequestSimpleWebView>;
            write(): Buffer;
        }
        class SendWebViewResultMessage extends TLObject {
            __response__: Raw.TypeWebViewMessageSent;
            botQueryId: string;
            result: Raw.TypeInputBotInlineResult;
            constructor(params: {
                botQueryId: string;
                result: Raw.TypeInputBotInlineResult;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SendWebViewResultMessage>;
            write(): Buffer;
        }
        class SendWebViewData extends TLObject {
            __response__: Raw.TypeUpdates;
            bot: Raw.TypeInputUser;
            randomId: long;
            buttonText: string;
            data: string;
            constructor(params: {
                bot: Raw.TypeInputUser;
                randomId: long;
                buttonText: string;
                data: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SendWebViewData>;
            write(): Buffer;
        }
        class TranscribeAudio extends TLObject {
            __response__: Raw.messages.TypeTranscribedAudio;
            peer: Raw.TypeInputPeer;
            msgId: int;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                msgId: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.TranscribeAudio>;
            write(): Buffer;
        }
        class RateTranscribedAudio extends TLObject {
            __response__: Bool;
            peer: Raw.TypeInputPeer;
            msgId: int;
            transcriptionId: long;
            good: Bool;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                msgId: int;
                transcriptionId: long;
                good: Bool;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.RateTranscribedAudio>;
            write(): Buffer;
        }
        class GetCustomEmojiDocuments extends TLObject {
            __response__: Vector<Raw.TypeDocument>;
            documentId: Vector<long>;
            constructor(params: {
                documentId: Vector<long>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetCustomEmojiDocuments>;
            write(): Buffer;
        }
        class GetEmojiStickers extends TLObject {
            __response__: Raw.messages.TypeAllStickers;
            hash: long;
            constructor(params: {
                hash: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetEmojiStickers>;
            write(): Buffer;
        }
        class GetFeaturedEmojiStickers extends TLObject {
            __response__: Raw.messages.TypeFeaturedStickers;
            hash: long;
            constructor(params: {
                hash: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetFeaturedEmojiStickers>;
            write(): Buffer;
        }
        class ReportReaction extends TLObject {
            __response__: Bool;
            peer: Raw.TypeInputPeer;
            id: int;
            reactionPeer: Raw.TypeInputPeer;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                id: int;
                reactionPeer: Raw.TypeInputPeer;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.ReportReaction>;
            write(): Buffer;
        }
        class GetTopReactions extends TLObject {
            __response__: Raw.messages.TypeReactions;
            limit: int;
            hash: long;
            constructor(params: {
                limit: int;
                hash: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetTopReactions>;
            write(): Buffer;
        }
        class GetRecentReactions extends TLObject {
            __response__: Raw.messages.TypeReactions;
            limit: int;
            hash: long;
            constructor(params: {
                limit: int;
                hash: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetRecentReactions>;
            write(): Buffer;
        }
        class ClearRecentReactions extends TLObject {
            __response__: Bool;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.ClearRecentReactions>;
            write(): Buffer;
        }
        class GetExtendedMedia extends TLObject {
            __response__: Raw.TypeUpdates;
            peer: Raw.TypeInputPeer;
            id: Vector<int>;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                id: Vector<int>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetExtendedMedia>;
            write(): Buffer;
        }
        class SetDefaultHistoryTTL extends TLObject {
            __response__: Bool;
            period: int;
            constructor(params: {
                period: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SetDefaultHistoryTTL>;
            write(): Buffer;
        }
        class GetDefaultHistoryTTL extends TLObject {
            __response__: Raw.TypeDefaultHistoryTTL;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetDefaultHistoryTTL>;
            write(): Buffer;
        }
        class SendBotRequestedPeer extends TLObject {
            __response__: Raw.TypeUpdates;
            peer: Raw.TypeInputPeer;
            msgId: int;
            buttonId: int;
            requestedPeers: Vector<Raw.TypeInputPeer>;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                msgId: int;
                buttonId: int;
                requestedPeers: Vector<Raw.TypeInputPeer>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SendBotRequestedPeer>;
            write(): Buffer;
        }
        class GetEmojiGroups extends TLObject {
            __response__: Raw.messages.TypeEmojiGroups;
            hash: int;
            constructor(params: {
                hash: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetEmojiGroups>;
            write(): Buffer;
        }
        class GetEmojiStatusGroups extends TLObject {
            __response__: Raw.messages.TypeEmojiGroups;
            hash: int;
            constructor(params: {
                hash: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetEmojiStatusGroups>;
            write(): Buffer;
        }
        class GetEmojiProfilePhotoGroups extends TLObject {
            __response__: Raw.messages.TypeEmojiGroups;
            hash: int;
            constructor(params: {
                hash: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetEmojiProfilePhotoGroups>;
            write(): Buffer;
        }
        class SearchCustomEmoji extends TLObject {
            __response__: Raw.TypeEmojiList;
            emoticon: string;
            hash: long;
            constructor(params: {
                emoticon: string;
                hash: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SearchCustomEmoji>;
            write(): Buffer;
        }
        class TogglePeerTranslations extends TLObject {
            __response__: Bool;
            disabled?: boolean;
            peer: Raw.TypeInputPeer;
            constructor(params: {
                disabled?: boolean;
                peer: Raw.TypeInputPeer;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.TogglePeerTranslations>;
            write(): Buffer;
        }
        class GetBotApp extends TLObject {
            __response__: Raw.messages.TypeBotApp;
            app: Raw.TypeInputBotApp;
            hash: long;
            constructor(params: {
                app: Raw.TypeInputBotApp;
                hash: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetBotApp>;
            write(): Buffer;
        }
        class RequestAppWebView extends TLObject {
            __response__: Raw.TypeAppWebViewResult;
            writeAllowed?: boolean;
            peer: Raw.TypeInputPeer;
            app: Raw.TypeInputBotApp;
            startParam?: string;
            themeParams?: Raw.TypeDataJSON;
            platform: string;
            constructor(params: {
                writeAllowed?: boolean;
                peer: Raw.TypeInputPeer;
                app: Raw.TypeInputBotApp;
                startParam?: string;
                themeParams?: Raw.TypeDataJSON;
                platform: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.RequestAppWebView>;
            write(): Buffer;
        }
        class SetChatWallPaper extends TLObject {
            __response__: Raw.TypeUpdates;
            forBoth?: boolean;
            revert?: boolean;
            peer: Raw.TypeInputPeer;
            wallpaper?: Raw.TypeInputWallPaper;
            settings?: Raw.TypeWallPaperSettings;
            id?: int;
            constructor(params: {
                forBoth?: boolean;
                revert?: boolean;
                peer: Raw.TypeInputPeer;
                wallpaper?: Raw.TypeInputWallPaper;
                settings?: Raw.TypeWallPaperSettings;
                id?: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SetChatWallPaper>;
            write(): Buffer;
        }
        class SearchEmojiStickerSets extends TLObject {
            __response__: Raw.messages.TypeFoundStickerSets;
            excludeFeatured?: boolean;
            q: string;
            hash: long;
            constructor(params: {
                excludeFeatured?: boolean;
                q: string;
                hash: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SearchEmojiStickerSets>;
            write(): Buffer;
        }
        class GetSavedDialogs extends TLObject {
            __response__: Raw.messages.TypeSavedDialogs;
            excludePinned?: boolean;
            offsetDate: int;
            offsetId: int;
            offsetPeer: Raw.TypeInputPeer;
            limit: int;
            hash: long;
            constructor(params: {
                excludePinned?: boolean;
                offsetDate: int;
                offsetId: int;
                offsetPeer: Raw.TypeInputPeer;
                limit: int;
                hash: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetSavedDialogs>;
            write(): Buffer;
        }
        class GetSavedHistory extends TLObject {
            __response__: Raw.messages.TypeMessages;
            peer: Raw.TypeInputPeer;
            offsetId: int;
            offsetDate: int;
            addOffset: int;
            limit: int;
            maxId: int;
            minId: int;
            hash: long;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                offsetId: int;
                offsetDate: int;
                addOffset: int;
                limit: int;
                maxId: int;
                minId: int;
                hash: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetSavedHistory>;
            write(): Buffer;
        }
        class DeleteSavedHistory extends TLObject {
            __response__: Raw.messages.TypeAffectedHistory;
            peer: Raw.TypeInputPeer;
            maxId: int;
            minDate?: int;
            maxDate?: int;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                maxId: int;
                minDate?: int;
                maxDate?: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.DeleteSavedHistory>;
            write(): Buffer;
        }
        class GetPinnedSavedDialogs extends TLObject {
            __response__: Raw.messages.TypeSavedDialogs;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetPinnedSavedDialogs>;
            write(): Buffer;
        }
        class ToggleSavedDialogPin extends TLObject {
            __response__: Bool;
            pinned?: boolean;
            peer: Raw.TypeInputDialogPeer;
            constructor(params: {
                pinned?: boolean;
                peer: Raw.TypeInputDialogPeer;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.ToggleSavedDialogPin>;
            write(): Buffer;
        }
        class ReorderPinnedSavedDialogs extends TLObject {
            __response__: Bool;
            force?: boolean;
            order: Vector<Raw.TypeInputDialogPeer>;
            constructor(params: {
                force?: boolean;
                order: Vector<Raw.TypeInputDialogPeer>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.ReorderPinnedSavedDialogs>;
            write(): Buffer;
        }
        class GetSavedReactionTags extends TLObject {
            __response__: Raw.messages.TypeSavedReactionTags;
            peer?: Raw.TypeInputPeer;
            hash: long;
            constructor(params: {
                peer?: Raw.TypeInputPeer;
                hash: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetSavedReactionTags>;
            write(): Buffer;
        }
        class UpdateSavedReactionTag extends TLObject {
            __response__: Bool;
            reaction: Raw.TypeReaction;
            title?: string;
            constructor(params: {
                reaction: Raw.TypeReaction;
                title?: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.UpdateSavedReactionTag>;
            write(): Buffer;
        }
        class GetDefaultTagReactions extends TLObject {
            __response__: Raw.messages.TypeReactions;
            hash: long;
            constructor(params: {
                hash: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetDefaultTagReactions>;
            write(): Buffer;
        }
        class GetOutboxReadDate extends TLObject {
            __response__: Raw.TypeOutboxReadDate;
            peer: Raw.TypeInputPeer;
            msgId: int;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                msgId: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetOutboxReadDate>;
            write(): Buffer;
        }
        class GetQuickReplies extends TLObject {
            __response__: Raw.messages.TypeQuickReplies;
            hash: long;
            constructor(params: {
                hash: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetQuickReplies>;
            write(): Buffer;
        }
        class ReorderQuickReplies extends TLObject {
            __response__: Bool;
            order: Vector<int>;
            constructor(params: {
                order: Vector<int>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.ReorderQuickReplies>;
            write(): Buffer;
        }
        class CheckQuickReplyShortcut extends TLObject {
            __response__: Bool;
            shortcut: string;
            constructor(params: {
                shortcut: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.CheckQuickReplyShortcut>;
            write(): Buffer;
        }
        class EditQuickReplyShortcut extends TLObject {
            __response__: Bool;
            shortcutId: int;
            shortcut: string;
            constructor(params: {
                shortcutId: int;
                shortcut: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.EditQuickReplyShortcut>;
            write(): Buffer;
        }
        class DeleteQuickReplyShortcut extends TLObject {
            __response__: Bool;
            shortcutId: int;
            constructor(params: {
                shortcutId: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.DeleteQuickReplyShortcut>;
            write(): Buffer;
        }
        class GetQuickReplyMessages extends TLObject {
            __response__: Raw.messages.TypeMessages;
            shortcutId: int;
            id?: Vector<int>;
            hash: long;
            constructor(params: {
                shortcutId: int;
                id?: Vector<int>;
                hash: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetQuickReplyMessages>;
            write(): Buffer;
        }
        class SendQuickReplyMessages extends TLObject {
            __response__: Raw.TypeUpdates;
            peer: Raw.TypeInputPeer;
            shortcutId: int;
            id: Vector<int>;
            randomId: Vector<long>;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                shortcutId: int;
                id: Vector<int>;
                randomId: Vector<long>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.SendQuickReplyMessages>;
            write(): Buffer;
        }
        class DeleteQuickReplyMessages extends TLObject {
            __response__: Raw.TypeUpdates;
            shortcutId: int;
            id: Vector<int>;
            constructor(params: {
                shortcutId: int;
                id: Vector<int>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.DeleteQuickReplyMessages>;
            write(): Buffer;
        }
        class ToggleDialogFilterTags extends TLObject {
            __response__: Bool;
            enabled: Bool;
            constructor(params: {
                enabled: Bool;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.ToggleDialogFilterTags>;
            write(): Buffer;
        }
        class GetMyStickers extends TLObject {
            __response__: Raw.messages.TypeMyStickers;
            offsetId: long;
            limit: int;
            constructor(params: {
                offsetId: long;
                limit: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetMyStickers>;
            write(): Buffer;
        }
        class GetEmojiStickerGroups extends TLObject {
            __response__: Raw.messages.TypeEmojiGroups;
            hash: int;
            constructor(params: {
                hash: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetEmojiStickerGroups>;
            write(): Buffer;
        }
        class GetAvailableEffects extends TLObject {
            __response__: Raw.messages.TypeAvailableEffects;
            hash: int;
            constructor(params: {
                hash: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetAvailableEffects>;
            write(): Buffer;
        }
        class EditFactCheck extends TLObject {
            __response__: Raw.TypeUpdates;
            peer: Raw.TypeInputPeer;
            msgId: int;
            text: Raw.TypeTextWithEntities;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                msgId: int;
                text: Raw.TypeTextWithEntities;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.EditFactCheck>;
            write(): Buffer;
        }
        class DeleteFactCheck extends TLObject {
            __response__: Raw.TypeUpdates;
            peer: Raw.TypeInputPeer;
            msgId: int;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                msgId: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.DeleteFactCheck>;
            write(): Buffer;
        }
        class GetFactCheck extends TLObject {
            __response__: Vector<Raw.TypeFactCheck>;
            peer: Raw.TypeInputPeer;
            msgId: Vector<int>;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                msgId: Vector<int>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.messages.GetFactCheck>;
            write(): Buffer;
        }
    }
    namespace updates {
        type TypeChannelDifference = Raw.updates.ChannelDifferenceEmpty | Raw.updates.ChannelDifferenceTooLong | Raw.updates.ChannelDifference;
        type TypeDifference = Raw.updates.DifferenceEmpty | Raw.updates.Difference | Raw.updates.DifferenceSlice | Raw.updates.DifferenceTooLong;
        type TypeState = Raw.updates.State;
        class State extends TLObject {
            pts: int;
            qts: int;
            date: int;
            seq: int;
            unreadCount: int;
            constructor(params: {
                pts: int;
                qts: int;
                date: int;
                seq: int;
                unreadCount: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.updates.State>;
            write(): Buffer;
        }
        class DifferenceEmpty extends TLObject {
            date: int;
            seq: int;
            constructor(params: {
                date: int;
                seq: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.updates.DifferenceEmpty>;
            write(): Buffer;
        }
        class Difference extends TLObject {
            newMessages: Vector<Raw.TypeMessage>;
            newEncryptedMessages: Vector<Raw.TypeEncryptedMessage>;
            otherUpdates: Vector<Raw.TypeUpdate>;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            state: Raw.updates.TypeState;
            constructor(params: {
                newMessages: Vector<Raw.TypeMessage>;
                newEncryptedMessages: Vector<Raw.TypeEncryptedMessage>;
                otherUpdates: Vector<Raw.TypeUpdate>;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
                state: Raw.updates.TypeState;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.updates.Difference>;
            write(): Buffer;
        }
        class DifferenceSlice extends TLObject {
            newMessages: Vector<Raw.TypeMessage>;
            newEncryptedMessages: Vector<Raw.TypeEncryptedMessage>;
            otherUpdates: Vector<Raw.TypeUpdate>;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            intermediateState: Raw.updates.TypeState;
            constructor(params: {
                newMessages: Vector<Raw.TypeMessage>;
                newEncryptedMessages: Vector<Raw.TypeEncryptedMessage>;
                otherUpdates: Vector<Raw.TypeUpdate>;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
                intermediateState: Raw.updates.TypeState;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.updates.DifferenceSlice>;
            write(): Buffer;
        }
        class DifferenceTooLong extends TLObject {
            pts: int;
            constructor(params: {
                pts: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.updates.DifferenceTooLong>;
            write(): Buffer;
        }
        class ChannelDifferenceEmpty extends TLObject {
            final?: boolean;
            pts: int;
            timeout?: int;
            constructor(params: {
                final?: boolean;
                pts: int;
                timeout?: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.updates.ChannelDifferenceEmpty>;
            write(): Buffer;
        }
        class ChannelDifferenceTooLong extends TLObject {
            final?: boolean;
            timeout?: int;
            dialog: Raw.TypeDialog;
            messages: Vector<Raw.TypeMessage>;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                final?: boolean;
                timeout?: int;
                dialog: Raw.TypeDialog;
                messages: Vector<Raw.TypeMessage>;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.updates.ChannelDifferenceTooLong>;
            write(): Buffer;
        }
        class ChannelDifference extends TLObject {
            final?: boolean;
            pts: int;
            timeout?: int;
            newMessages: Vector<Raw.TypeMessage>;
            otherUpdates: Vector<Raw.TypeUpdate>;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                final?: boolean;
                pts: int;
                timeout?: int;
                newMessages: Vector<Raw.TypeMessage>;
                otherUpdates: Vector<Raw.TypeUpdate>;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.updates.ChannelDifference>;
            write(): Buffer;
        }
        class GetState extends TLObject {
            __response__: Raw.updates.TypeState;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.updates.GetState>;
            write(): Buffer;
        }
        class GetDifference extends TLObject {
            __response__: Raw.updates.TypeDifference;
            pts: int;
            ptsLimit?: int;
            ptsTotalLimit?: int;
            date: int;
            qts: int;
            qtsLimit?: int;
            constructor(params: {
                pts: int;
                ptsLimit?: int;
                ptsTotalLimit?: int;
                date: int;
                qts: int;
                qtsLimit?: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.updates.GetDifference>;
            write(): Buffer;
        }
        class GetChannelDifference extends TLObject {
            __response__: Raw.updates.TypeChannelDifference;
            force?: boolean;
            channel: Raw.TypeInputChannel;
            filter: Raw.TypeChannelMessagesFilter;
            pts: int;
            limit: int;
            constructor(params: {
                force?: boolean;
                channel: Raw.TypeInputChannel;
                filter: Raw.TypeChannelMessagesFilter;
                pts: int;
                limit: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.updates.GetChannelDifference>;
            write(): Buffer;
        }
    }
    namespace photos {
        type TypePhotos = Raw.photos.Photos | Raw.photos.PhotosSlice;
        type TypePhoto = Raw.photos.Photo;
        class Photos extends TLObject {
            photos: Vector<Raw.TypePhoto>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                photos: Vector<Raw.TypePhoto>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.photos.Photos>;
            write(): Buffer;
        }
        class PhotosSlice extends TLObject {
            count: int;
            photos: Vector<Raw.TypePhoto>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                count: int;
                photos: Vector<Raw.TypePhoto>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.photos.PhotosSlice>;
            write(): Buffer;
        }
        class Photo extends TLObject {
            photo: Raw.TypePhoto;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                photo: Raw.TypePhoto;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.photos.Photo>;
            write(): Buffer;
        }
        class UpdateProfilePhoto extends TLObject {
            __response__: Raw.photos.TypePhoto;
            fallback?: boolean;
            bot?: Raw.TypeInputUser;
            id: Raw.TypeInputPhoto;
            constructor(params: {
                fallback?: boolean;
                bot?: Raw.TypeInputUser;
                id: Raw.TypeInputPhoto;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.photos.UpdateProfilePhoto>;
            write(): Buffer;
        }
        class UploadProfilePhoto extends TLObject {
            __response__: Raw.photos.TypePhoto;
            fallback?: boolean;
            bot?: Raw.TypeInputUser;
            file?: Raw.TypeInputFile;
            video?: Raw.TypeInputFile;
            videoStartTs?: double;
            videoEmojiMarkup?: Raw.TypeVideoSize;
            constructor(params: {
                fallback?: boolean;
                bot?: Raw.TypeInputUser;
                file?: Raw.TypeInputFile;
                video?: Raw.TypeInputFile;
                videoStartTs?: double;
                videoEmojiMarkup?: Raw.TypeVideoSize;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.photos.UploadProfilePhoto>;
            write(): Buffer;
        }
        class DeletePhotos extends TLObject {
            __response__: Vector<long>;
            id: Vector<Raw.TypeInputPhoto>;
            constructor(params: {
                id: Vector<Raw.TypeInputPhoto>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.photos.DeletePhotos>;
            write(): Buffer;
        }
        class GetUserPhotos extends TLObject {
            __response__: Raw.photos.TypePhotos;
            userId: Raw.TypeInputUser;
            offset: int;
            maxId: long;
            limit: int;
            constructor(params: {
                userId: Raw.TypeInputUser;
                offset: int;
                maxId: long;
                limit: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.photos.GetUserPhotos>;
            write(): Buffer;
        }
        class UploadContactProfilePhoto extends TLObject {
            __response__: Raw.photos.TypePhoto;
            suggest?: boolean;
            save?: boolean;
            userId: Raw.TypeInputUser;
            file?: Raw.TypeInputFile;
            video?: Raw.TypeInputFile;
            videoStartTs?: double;
            videoEmojiMarkup?: Raw.TypeVideoSize;
            constructor(params: {
                suggest?: boolean;
                save?: boolean;
                userId: Raw.TypeInputUser;
                file?: Raw.TypeInputFile;
                video?: Raw.TypeInputFile;
                videoStartTs?: double;
                videoEmojiMarkup?: Raw.TypeVideoSize;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.photos.UploadContactProfilePhoto>;
            write(): Buffer;
        }
    }
    namespace upload {
        type TypeCdnFile = Raw.upload.CdnFileReuploadNeeded | Raw.upload.CdnFile;
        type TypeWebFile = Raw.upload.WebFile;
        type TypeFile = Raw.upload.File | Raw.upload.FileCdnRedirect;
        class File extends TLObject {
            type: Raw.storage.TypeFileType;
            mtime: int;
            bytes: bytes;
            constructor(params: {
                type: Raw.storage.TypeFileType;
                mtime: int;
                bytes: bytes;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.upload.File>;
            write(): Buffer;
        }
        class FileCdnRedirect extends TLObject {
            dcId: int;
            fileToken: bytes;
            encryptionKey: bytes;
            encryptionIv: bytes;
            fileHashes: Vector<Raw.TypeFileHash>;
            constructor(params: {
                dcId: int;
                fileToken: bytes;
                encryptionKey: bytes;
                encryptionIv: bytes;
                fileHashes: Vector<Raw.TypeFileHash>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.upload.FileCdnRedirect>;
            write(): Buffer;
        }
        class WebFile extends TLObject {
            size: int;
            mimeType: string;
            fileType: Raw.storage.TypeFileType;
            mtime: int;
            bytes: bytes;
            constructor(params: {
                size: int;
                mimeType: string;
                fileType: Raw.storage.TypeFileType;
                mtime: int;
                bytes: bytes;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.upload.WebFile>;
            write(): Buffer;
        }
        class CdnFileReuploadNeeded extends TLObject {
            requestToken: bytes;
            constructor(params: {
                requestToken: bytes;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.upload.CdnFileReuploadNeeded>;
            write(): Buffer;
        }
        class CdnFile extends TLObject {
            bytes: bytes;
            constructor(params: {
                bytes: bytes;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.upload.CdnFile>;
            write(): Buffer;
        }
        class SaveFilePart extends TLObject {
            __response__: Bool;
            fileId: long;
            filePart: int;
            bytes: bytes;
            constructor(params: {
                fileId: long;
                filePart: int;
                bytes: bytes;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.upload.SaveFilePart>;
            write(): Buffer;
        }
        class GetFile extends TLObject {
            __response__: Raw.upload.TypeFile;
            precise?: boolean;
            cdnSupported?: boolean;
            location: Raw.TypeInputFileLocation;
            offset: long;
            limit: int;
            constructor(params: {
                precise?: boolean;
                cdnSupported?: boolean;
                location: Raw.TypeInputFileLocation;
                offset: long;
                limit: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.upload.GetFile>;
            write(): Buffer;
        }
        class SaveBigFilePart extends TLObject {
            __response__: Bool;
            fileId: long;
            filePart: int;
            fileTotalParts: int;
            bytes: bytes;
            constructor(params: {
                fileId: long;
                filePart: int;
                fileTotalParts: int;
                bytes: bytes;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.upload.SaveBigFilePart>;
            write(): Buffer;
        }
        class GetWebFile extends TLObject {
            __response__: Raw.upload.TypeWebFile;
            location: Raw.TypeInputWebFileLocation;
            offset: int;
            limit: int;
            constructor(params: {
                location: Raw.TypeInputWebFileLocation;
                offset: int;
                limit: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.upload.GetWebFile>;
            write(): Buffer;
        }
        class GetCdnFile extends TLObject {
            __response__: Raw.upload.TypeCdnFile;
            fileToken: bytes;
            offset: long;
            limit: int;
            constructor(params: {
                fileToken: bytes;
                offset: long;
                limit: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.upload.GetCdnFile>;
            write(): Buffer;
        }
        class ReuploadCdnFile extends TLObject {
            __response__: Vector<Raw.TypeFileHash>;
            fileToken: bytes;
            requestToken: bytes;
            constructor(params: {
                fileToken: bytes;
                requestToken: bytes;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.upload.ReuploadCdnFile>;
            write(): Buffer;
        }
        class GetCdnFileHashes extends TLObject {
            __response__: Vector<Raw.TypeFileHash>;
            fileToken: bytes;
            offset: long;
            constructor(params: {
                fileToken: bytes;
                offset: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.upload.GetCdnFileHashes>;
            write(): Buffer;
        }
        class GetFileHashes extends TLObject {
            __response__: Vector<Raw.TypeFileHash>;
            location: Raw.TypeInputFileLocation;
            offset: long;
            constructor(params: {
                location: Raw.TypeInputFileLocation;
                offset: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.upload.GetFileHashes>;
            write(): Buffer;
        }
    }
    namespace account {
        type TypeResolvedBusinessChatLinks = Raw.account.ResolvedBusinessChatLinks;
        type TypeBusinessChatLinks = Raw.account.BusinessChatLinks;
        type TypeConnectedBots = Raw.account.ConnectedBots;
        type TypeAutoSaveSettings = Raw.account.AutoSaveSettings;
        type TypeEmojiStatuses = Raw.account.EmojiStatusesNotModified | Raw.account.EmojiStatuses;
        type TypeSavedRingtone = Raw.account.SavedRingtone | Raw.account.SavedRingtoneConverted;
        type TypeSavedRingtones = Raw.account.SavedRingtonesNotModified | Raw.account.SavedRingtones;
        type TypeResetPasswordResult = Raw.account.ResetPasswordFailedWait | Raw.account.ResetPasswordRequestedWait | Raw.account.ResetPasswordOk;
        type TypeContentSettings = Raw.account.ContentSettings;
        type TypeThemes = Raw.account.ThemesNotModified | Raw.account.Themes;
        type TypeAutoDownloadSettings = Raw.account.AutoDownloadSettings;
        type TypeTakeout = Raw.account.Takeout;
        type TypeEmailVerified = Raw.account.EmailVerified | Raw.account.EmailVerifiedLogin;
        type TypeSentEmailCode = Raw.account.SentEmailCode;
        type TypeAuthorizationForm = Raw.account.AuthorizationForm;
        type TypeWebAuthorizations = Raw.account.WebAuthorizations;
        type TypeTmpPassword = Raw.account.TmpPassword;
        type TypePasswordSettings = Raw.account.PasswordSettings;
        type TypePassword = Raw.account.Password;
        type TypeAuthorizations = Raw.account.Authorizations;
        type TypePrivacyRules = Raw.account.PrivacyRules;
        type TypeWallPapers = Raw.account.WallPapersNotModified | Raw.account.WallPapers;
        type TypePasswordInputSettings = Raw.account.PasswordInputSettings;
        class PrivacyRules extends TLObject {
            rules: Vector<Raw.TypePrivacyRule>;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                rules: Vector<Raw.TypePrivacyRule>;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.PrivacyRules>;
            write(): Buffer;
        }
        class Authorizations extends TLObject {
            authorizationTtlDays: int;
            authorizations: Vector<Raw.TypeAuthorization>;
            constructor(params: {
                authorizationTtlDays: int;
                authorizations: Vector<Raw.TypeAuthorization>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.Authorizations>;
            write(): Buffer;
        }
        class Password extends TLObject {
            hasRecovery?: boolean;
            hasSecureValues?: boolean;
            hasPassword?: boolean;
            currentAlgo?: Raw.TypePasswordKdfAlgo;
            srpB?: bytes;
            srpId?: long;
            hint?: string;
            emailUnconfirmedPattern?: string;
            newAlgo: Raw.TypePasswordKdfAlgo;
            newSecureAlgo: Raw.TypeSecurePasswordKdfAlgo;
            secureRandom: bytes;
            pendingResetDate?: int;
            loginEmailPattern?: string;
            constructor(params: {
                hasRecovery?: boolean;
                hasSecureValues?: boolean;
                hasPassword?: boolean;
                currentAlgo?: Raw.TypePasswordKdfAlgo;
                srpB?: bytes;
                srpId?: long;
                hint?: string;
                emailUnconfirmedPattern?: string;
                newAlgo: Raw.TypePasswordKdfAlgo;
                newSecureAlgo: Raw.TypeSecurePasswordKdfAlgo;
                secureRandom: bytes;
                pendingResetDate?: int;
                loginEmailPattern?: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.Password>;
            write(): Buffer;
        }
        class PasswordSettings extends TLObject {
            email?: string;
            secureSettings?: Raw.TypeSecureSecretSettings;
            constructor(params: {
                email?: string;
                secureSettings?: Raw.TypeSecureSecretSettings;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.PasswordSettings>;
            write(): Buffer;
        }
        class PasswordInputSettings extends TLObject {
            newAlgo?: Raw.TypePasswordKdfAlgo;
            newPasswordHash?: bytes;
            hint?: string;
            email?: string;
            newSecureSettings?: Raw.TypeSecureSecretSettings;
            constructor(params: {
                newAlgo?: Raw.TypePasswordKdfAlgo;
                newPasswordHash?: bytes;
                hint?: string;
                email?: string;
                newSecureSettings?: Raw.TypeSecureSecretSettings;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.PasswordInputSettings>;
            write(): Buffer;
        }
        class TmpPassword extends TLObject {
            tmpPassword: bytes;
            validUntil: int;
            constructor(params: {
                tmpPassword: bytes;
                validUntil: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.TmpPassword>;
            write(): Buffer;
        }
        class WebAuthorizations extends TLObject {
            authorizations: Vector<Raw.TypeWebAuthorization>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                authorizations: Vector<Raw.TypeWebAuthorization>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.WebAuthorizations>;
            write(): Buffer;
        }
        class AuthorizationForm extends TLObject {
            requiredTypes: Vector<Raw.TypeSecureRequiredType>;
            values: Vector<Raw.TypeSecureValue>;
            errors: Vector<Raw.TypeSecureValueError>;
            users: Vector<Raw.TypeUser>;
            privacyPolicyUrl?: string;
            constructor(params: {
                requiredTypes: Vector<Raw.TypeSecureRequiredType>;
                values: Vector<Raw.TypeSecureValue>;
                errors: Vector<Raw.TypeSecureValueError>;
                users: Vector<Raw.TypeUser>;
                privacyPolicyUrl?: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.AuthorizationForm>;
            write(): Buffer;
        }
        class SentEmailCode extends TLObject {
            emailPattern: string;
            length: int;
            constructor(params: {
                emailPattern: string;
                length: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.SentEmailCode>;
            write(): Buffer;
        }
        class Takeout extends TLObject {
            id: long;
            constructor(params: {
                id: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.Takeout>;
            write(): Buffer;
        }
        class WallPapersNotModified extends TLObject {
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.WallPapersNotModified>;
            write(): Buffer;
        }
        class WallPapers extends TLObject {
            hash: long;
            wallpapers: Vector<Raw.TypeWallPaper>;
            constructor(params: {
                hash: long;
                wallpapers: Vector<Raw.TypeWallPaper>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.WallPapers>;
            write(): Buffer;
        }
        class AutoDownloadSettings extends TLObject {
            low: Raw.TypeAutoDownloadSettings;
            medium: Raw.TypeAutoDownloadSettings;
            high: Raw.TypeAutoDownloadSettings;
            constructor(params: {
                low: Raw.TypeAutoDownloadSettings;
                medium: Raw.TypeAutoDownloadSettings;
                high: Raw.TypeAutoDownloadSettings;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.AutoDownloadSettings>;
            write(): Buffer;
        }
        class ThemesNotModified extends TLObject {
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.ThemesNotModified>;
            write(): Buffer;
        }
        class Themes extends TLObject {
            hash: long;
            themes: Vector<Raw.TypeTheme>;
            constructor(params: {
                hash: long;
                themes: Vector<Raw.TypeTheme>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.Themes>;
            write(): Buffer;
        }
        class ContentSettings extends TLObject {
            sensitiveEnabled?: boolean;
            sensitiveCanChange?: boolean;
            constructor(params: {
                sensitiveEnabled?: boolean;
                sensitiveCanChange?: boolean;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.ContentSettings>;
            write(): Buffer;
        }
        class ResetPasswordFailedWait extends TLObject {
            retryDate: int;
            constructor(params: {
                retryDate: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.ResetPasswordFailedWait>;
            write(): Buffer;
        }
        class ResetPasswordRequestedWait extends TLObject {
            untilDate: int;
            constructor(params: {
                untilDate: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.ResetPasswordRequestedWait>;
            write(): Buffer;
        }
        class ResetPasswordOk extends TLObject {
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.ResetPasswordOk>;
            write(): Buffer;
        }
        class SavedRingtonesNotModified extends TLObject {
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.SavedRingtonesNotModified>;
            write(): Buffer;
        }
        class SavedRingtones extends TLObject {
            hash: long;
            ringtones: Vector<Raw.TypeDocument>;
            constructor(params: {
                hash: long;
                ringtones: Vector<Raw.TypeDocument>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.SavedRingtones>;
            write(): Buffer;
        }
        class SavedRingtone extends TLObject {
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.SavedRingtone>;
            write(): Buffer;
        }
        class SavedRingtoneConverted extends TLObject {
            document: Raw.TypeDocument;
            constructor(params: {
                document: Raw.TypeDocument;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.SavedRingtoneConverted>;
            write(): Buffer;
        }
        class EmojiStatusesNotModified extends TLObject {
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.EmojiStatusesNotModified>;
            write(): Buffer;
        }
        class EmojiStatuses extends TLObject {
            hash: long;
            statuses: Vector<Raw.TypeEmojiStatus>;
            constructor(params: {
                hash: long;
                statuses: Vector<Raw.TypeEmojiStatus>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.EmojiStatuses>;
            write(): Buffer;
        }
        class EmailVerified extends TLObject {
            email: string;
            constructor(params: {
                email: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.EmailVerified>;
            write(): Buffer;
        }
        class EmailVerifiedLogin extends TLObject {
            email: string;
            sentCode: Raw.auth.TypeSentCode;
            constructor(params: {
                email: string;
                sentCode: Raw.auth.TypeSentCode;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.EmailVerifiedLogin>;
            write(): Buffer;
        }
        class AutoSaveSettings extends TLObject {
            usersSettings: Raw.TypeAutoSaveSettings;
            chatsSettings: Raw.TypeAutoSaveSettings;
            broadcastsSettings: Raw.TypeAutoSaveSettings;
            exceptions: Vector<Raw.TypeAutoSaveException>;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                usersSettings: Raw.TypeAutoSaveSettings;
                chatsSettings: Raw.TypeAutoSaveSettings;
                broadcastsSettings: Raw.TypeAutoSaveSettings;
                exceptions: Vector<Raw.TypeAutoSaveException>;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.AutoSaveSettings>;
            write(): Buffer;
        }
        class ConnectedBots extends TLObject {
            connectedBots: Vector<Raw.TypeConnectedBot>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                connectedBots: Vector<Raw.TypeConnectedBot>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.ConnectedBots>;
            write(): Buffer;
        }
        class BusinessChatLinks extends TLObject {
            links: Vector<Raw.TypeBusinessChatLink>;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                links: Vector<Raw.TypeBusinessChatLink>;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.BusinessChatLinks>;
            write(): Buffer;
        }
        class ResolvedBusinessChatLinks extends TLObject {
            peer: Raw.TypePeer;
            message: string;
            entities?: Vector<Raw.TypeMessageEntity>;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                peer: Raw.TypePeer;
                message: string;
                entities?: Vector<Raw.TypeMessageEntity>;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.ResolvedBusinessChatLinks>;
            write(): Buffer;
        }
        class RegisterDevice extends TLObject {
            __response__: Bool;
            noMuted?: boolean;
            tokenType: int;
            token: string;
            appSandbox: Bool;
            secret: bytes;
            otherUids: Vector<long>;
            constructor(params: {
                noMuted?: boolean;
                tokenType: int;
                token: string;
                appSandbox: Bool;
                secret: bytes;
                otherUids: Vector<long>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.RegisterDevice>;
            write(): Buffer;
        }
        class UnregisterDevice extends TLObject {
            __response__: Bool;
            tokenType: int;
            token: string;
            otherUids: Vector<long>;
            constructor(params: {
                tokenType: int;
                token: string;
                otherUids: Vector<long>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.UnregisterDevice>;
            write(): Buffer;
        }
        class UpdateNotifySettings extends TLObject {
            __response__: Bool;
            peer: Raw.TypeInputNotifyPeer;
            settings: Raw.TypeInputPeerNotifySettings;
            constructor(params: {
                peer: Raw.TypeInputNotifyPeer;
                settings: Raw.TypeInputPeerNotifySettings;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.UpdateNotifySettings>;
            write(): Buffer;
        }
        class GetNotifySettings extends TLObject {
            __response__: Raw.TypePeerNotifySettings;
            peer: Raw.TypeInputNotifyPeer;
            constructor(params: {
                peer: Raw.TypeInputNotifyPeer;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.GetNotifySettings>;
            write(): Buffer;
        }
        class ResetNotifySettings extends TLObject {
            __response__: Bool;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.ResetNotifySettings>;
            write(): Buffer;
        }
        class UpdateProfile extends TLObject {
            __response__: Raw.TypeUser;
            firstName?: string;
            lastName?: string;
            about?: string;
            constructor(params: {
                firstName?: string;
                lastName?: string;
                about?: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.UpdateProfile>;
            write(): Buffer;
        }
        class UpdateStatus extends TLObject {
            __response__: Bool;
            offline: Bool;
            constructor(params: {
                offline: Bool;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.UpdateStatus>;
            write(): Buffer;
        }
        class GetWallPapers extends TLObject {
            __response__: Raw.account.TypeWallPapers;
            hash: long;
            constructor(params: {
                hash: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.GetWallPapers>;
            write(): Buffer;
        }
        class ReportPeer extends TLObject {
            __response__: Bool;
            peer: Raw.TypeInputPeer;
            reason: Raw.TypeReportReason;
            message: string;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                reason: Raw.TypeReportReason;
                message: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.ReportPeer>;
            write(): Buffer;
        }
        class CheckUsername extends TLObject {
            __response__: Bool;
            username: string;
            constructor(params: {
                username: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.CheckUsername>;
            write(): Buffer;
        }
        class UpdateUsername extends TLObject {
            __response__: Raw.TypeUser;
            username: string;
            constructor(params: {
                username: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.UpdateUsername>;
            write(): Buffer;
        }
        class GetPrivacy extends TLObject {
            __response__: Raw.account.TypePrivacyRules;
            key: Raw.TypeInputPrivacyKey;
            constructor(params: {
                key: Raw.TypeInputPrivacyKey;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.GetPrivacy>;
            write(): Buffer;
        }
        class SetPrivacy extends TLObject {
            __response__: Raw.account.TypePrivacyRules;
            key: Raw.TypeInputPrivacyKey;
            rules: Vector<Raw.TypeInputPrivacyRule>;
            constructor(params: {
                key: Raw.TypeInputPrivacyKey;
                rules: Vector<Raw.TypeInputPrivacyRule>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.SetPrivacy>;
            write(): Buffer;
        }
        class DeleteAccount extends TLObject {
            __response__: Bool;
            reason: string;
            password?: Raw.TypeInputCheckPasswordSRP;
            constructor(params: {
                reason: string;
                password?: Raw.TypeInputCheckPasswordSRP;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.DeleteAccount>;
            write(): Buffer;
        }
        class GetAccountTTL extends TLObject {
            __response__: Raw.TypeAccountDaysTTL;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.GetAccountTTL>;
            write(): Buffer;
        }
        class SetAccountTTL extends TLObject {
            __response__: Bool;
            ttl: Raw.TypeAccountDaysTTL;
            constructor(params: {
                ttl: Raw.TypeAccountDaysTTL;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.SetAccountTTL>;
            write(): Buffer;
        }
        class SendChangePhoneCode extends TLObject {
            __response__: Raw.auth.TypeSentCode;
            phoneNumber: string;
            settings: Raw.TypeCodeSettings;
            constructor(params: {
                phoneNumber: string;
                settings: Raw.TypeCodeSettings;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.SendChangePhoneCode>;
            write(): Buffer;
        }
        class ChangePhone extends TLObject {
            __response__: Raw.TypeUser;
            phoneNumber: string;
            phoneCodeHash: string;
            phoneCode: string;
            constructor(params: {
                phoneNumber: string;
                phoneCodeHash: string;
                phoneCode: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.ChangePhone>;
            write(): Buffer;
        }
        class UpdateDeviceLocked extends TLObject {
            __response__: Bool;
            period: int;
            constructor(params: {
                period: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.UpdateDeviceLocked>;
            write(): Buffer;
        }
        class GetAuthorizations extends TLObject {
            __response__: Raw.account.TypeAuthorizations;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.GetAuthorizations>;
            write(): Buffer;
        }
        class ResetAuthorization extends TLObject {
            __response__: Bool;
            hash: long;
            constructor(params: {
                hash: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.ResetAuthorization>;
            write(): Buffer;
        }
        class GetPassword extends TLObject {
            __response__: Raw.account.TypePassword;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.GetPassword>;
            write(): Buffer;
        }
        class GetPasswordSettings extends TLObject {
            __response__: Raw.account.TypePasswordSettings;
            password: Raw.TypeInputCheckPasswordSRP;
            constructor(params: {
                password: Raw.TypeInputCheckPasswordSRP;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.GetPasswordSettings>;
            write(): Buffer;
        }
        class UpdatePasswordSettings extends TLObject {
            __response__: Bool;
            password: Raw.TypeInputCheckPasswordSRP;
            newSettings: Raw.account.TypePasswordInputSettings;
            constructor(params: {
                password: Raw.TypeInputCheckPasswordSRP;
                newSettings: Raw.account.TypePasswordInputSettings;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.UpdatePasswordSettings>;
            write(): Buffer;
        }
        class SendConfirmPhoneCode extends TLObject {
            __response__: Raw.auth.TypeSentCode;
            hash: string;
            settings: Raw.TypeCodeSettings;
            constructor(params: {
                hash: string;
                settings: Raw.TypeCodeSettings;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.SendConfirmPhoneCode>;
            write(): Buffer;
        }
        class ConfirmPhone extends TLObject {
            __response__: Bool;
            phoneCodeHash: string;
            phoneCode: string;
            constructor(params: {
                phoneCodeHash: string;
                phoneCode: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.ConfirmPhone>;
            write(): Buffer;
        }
        class GetTmpPassword extends TLObject {
            __response__: Raw.account.TypeTmpPassword;
            password: Raw.TypeInputCheckPasswordSRP;
            period: int;
            constructor(params: {
                password: Raw.TypeInputCheckPasswordSRP;
                period: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.GetTmpPassword>;
            write(): Buffer;
        }
        class GetWebAuthorizations extends TLObject {
            __response__: Raw.account.TypeWebAuthorizations;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.GetWebAuthorizations>;
            write(): Buffer;
        }
        class ResetWebAuthorization extends TLObject {
            __response__: Bool;
            hash: long;
            constructor(params: {
                hash: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.ResetWebAuthorization>;
            write(): Buffer;
        }
        class ResetWebAuthorizations extends TLObject {
            __response__: Bool;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.ResetWebAuthorizations>;
            write(): Buffer;
        }
        class GetAllSecureValues extends TLObject {
            __response__: Vector<Raw.TypeSecureValue>;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.GetAllSecureValues>;
            write(): Buffer;
        }
        class GetSecureValue extends TLObject {
            __response__: Vector<Raw.TypeSecureValue>;
            types: Vector<Raw.TypeSecureValueType>;
            constructor(params: {
                types: Vector<Raw.TypeSecureValueType>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.GetSecureValue>;
            write(): Buffer;
        }
        class SaveSecureValue extends TLObject {
            __response__: Raw.TypeSecureValue;
            value: Raw.TypeInputSecureValue;
            secureSecretId: long;
            constructor(params: {
                value: Raw.TypeInputSecureValue;
                secureSecretId: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.SaveSecureValue>;
            write(): Buffer;
        }
        class DeleteSecureValue extends TLObject {
            __response__: Bool;
            types: Vector<Raw.TypeSecureValueType>;
            constructor(params: {
                types: Vector<Raw.TypeSecureValueType>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.DeleteSecureValue>;
            write(): Buffer;
        }
        class GetAuthorizationForm extends TLObject {
            __response__: Raw.account.TypeAuthorizationForm;
            botId: long;
            scope: string;
            publicKey: string;
            constructor(params: {
                botId: long;
                scope: string;
                publicKey: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.GetAuthorizationForm>;
            write(): Buffer;
        }
        class AcceptAuthorization extends TLObject {
            __response__: Bool;
            botId: long;
            scope: string;
            publicKey: string;
            valueHashes: Vector<Raw.TypeSecureValueHash>;
            credentials: Raw.TypeSecureCredentialsEncrypted;
            constructor(params: {
                botId: long;
                scope: string;
                publicKey: string;
                valueHashes: Vector<Raw.TypeSecureValueHash>;
                credentials: Raw.TypeSecureCredentialsEncrypted;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.AcceptAuthorization>;
            write(): Buffer;
        }
        class SendVerifyPhoneCode extends TLObject {
            __response__: Raw.auth.TypeSentCode;
            phoneNumber: string;
            settings: Raw.TypeCodeSettings;
            constructor(params: {
                phoneNumber: string;
                settings: Raw.TypeCodeSettings;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.SendVerifyPhoneCode>;
            write(): Buffer;
        }
        class VerifyPhone extends TLObject {
            __response__: Bool;
            phoneNumber: string;
            phoneCodeHash: string;
            phoneCode: string;
            constructor(params: {
                phoneNumber: string;
                phoneCodeHash: string;
                phoneCode: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.VerifyPhone>;
            write(): Buffer;
        }
        class SendVerifyEmailCode extends TLObject {
            __response__: Raw.account.TypeSentEmailCode;
            purpose: Raw.TypeEmailVerifyPurpose;
            email: string;
            constructor(params: {
                purpose: Raw.TypeEmailVerifyPurpose;
                email: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.SendVerifyEmailCode>;
            write(): Buffer;
        }
        class VerifyEmail extends TLObject {
            __response__: Raw.account.TypeEmailVerified;
            purpose: Raw.TypeEmailVerifyPurpose;
            verification: Raw.TypeEmailVerification;
            constructor(params: {
                purpose: Raw.TypeEmailVerifyPurpose;
                verification: Raw.TypeEmailVerification;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.VerifyEmail>;
            write(): Buffer;
        }
        class InitTakeoutSession extends TLObject {
            __response__: Raw.account.TypeTakeout;
            contacts?: boolean;
            messageUsers?: boolean;
            messageChats?: boolean;
            messageMegagroups?: boolean;
            messageChannels?: boolean;
            files?: boolean;
            fileMaxSize?: long;
            constructor(params: {
                contacts?: boolean;
                messageUsers?: boolean;
                messageChats?: boolean;
                messageMegagroups?: boolean;
                messageChannels?: boolean;
                files?: boolean;
                fileMaxSize?: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.InitTakeoutSession>;
            write(): Buffer;
        }
        class FinishTakeoutSession extends TLObject {
            __response__: Bool;
            success?: boolean;
            constructor(params: {
                success?: boolean;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.FinishTakeoutSession>;
            write(): Buffer;
        }
        class ConfirmPasswordEmail extends TLObject {
            __response__: Bool;
            code: string;
            constructor(params: {
                code: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.ConfirmPasswordEmail>;
            write(): Buffer;
        }
        class ResendPasswordEmail extends TLObject {
            __response__: Bool;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.ResendPasswordEmail>;
            write(): Buffer;
        }
        class CancelPasswordEmail extends TLObject {
            __response__: Bool;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.CancelPasswordEmail>;
            write(): Buffer;
        }
        class GetContactSignUpNotification extends TLObject {
            __response__: Bool;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.GetContactSignUpNotification>;
            write(): Buffer;
        }
        class SetContactSignUpNotification extends TLObject {
            __response__: Bool;
            silent: Bool;
            constructor(params: {
                silent: Bool;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.SetContactSignUpNotification>;
            write(): Buffer;
        }
        class GetNotifyExceptions extends TLObject {
            __response__: Raw.TypeUpdates;
            compareSound?: boolean;
            compareStories?: boolean;
            peer?: Raw.TypeInputNotifyPeer;
            constructor(params: {
                compareSound?: boolean;
                compareStories?: boolean;
                peer?: Raw.TypeInputNotifyPeer;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.GetNotifyExceptions>;
            write(): Buffer;
        }
        class GetWallPaper extends TLObject {
            __response__: Raw.TypeWallPaper;
            wallpaper: Raw.TypeInputWallPaper;
            constructor(params: {
                wallpaper: Raw.TypeInputWallPaper;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.GetWallPaper>;
            write(): Buffer;
        }
        class UploadWallPaper extends TLObject {
            __response__: Raw.TypeWallPaper;
            forChat?: boolean;
            file: Raw.TypeInputFile;
            mimeType: string;
            settings: Raw.TypeWallPaperSettings;
            constructor(params: {
                forChat?: boolean;
                file: Raw.TypeInputFile;
                mimeType: string;
                settings: Raw.TypeWallPaperSettings;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.UploadWallPaper>;
            write(): Buffer;
        }
        class SaveWallPaper extends TLObject {
            __response__: Bool;
            wallpaper: Raw.TypeInputWallPaper;
            unsave: Bool;
            settings: Raw.TypeWallPaperSettings;
            constructor(params: {
                wallpaper: Raw.TypeInputWallPaper;
                unsave: Bool;
                settings: Raw.TypeWallPaperSettings;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.SaveWallPaper>;
            write(): Buffer;
        }
        class InstallWallPaper extends TLObject {
            __response__: Bool;
            wallpaper: Raw.TypeInputWallPaper;
            settings: Raw.TypeWallPaperSettings;
            constructor(params: {
                wallpaper: Raw.TypeInputWallPaper;
                settings: Raw.TypeWallPaperSettings;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.InstallWallPaper>;
            write(): Buffer;
        }
        class ResetWallPapers extends TLObject {
            __response__: Bool;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.ResetWallPapers>;
            write(): Buffer;
        }
        class GetAutoDownloadSettings extends TLObject {
            __response__: Raw.account.TypeAutoDownloadSettings;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.GetAutoDownloadSettings>;
            write(): Buffer;
        }
        class SaveAutoDownloadSettings extends TLObject {
            __response__: Bool;
            low?: boolean;
            high?: boolean;
            settings: Raw.TypeAutoDownloadSettings;
            constructor(params: {
                low?: boolean;
                high?: boolean;
                settings: Raw.TypeAutoDownloadSettings;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.SaveAutoDownloadSettings>;
            write(): Buffer;
        }
        class UploadTheme extends TLObject {
            __response__: Raw.TypeDocument;
            file: Raw.TypeInputFile;
            thumb?: Raw.TypeInputFile;
            fileName: string;
            mimeType: string;
            constructor(params: {
                file: Raw.TypeInputFile;
                thumb?: Raw.TypeInputFile;
                fileName: string;
                mimeType: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.UploadTheme>;
            write(): Buffer;
        }
        class CreateTheme extends TLObject {
            __response__: Raw.TypeTheme;
            slug: string;
            title: string;
            document?: Raw.TypeInputDocument;
            settings?: Vector<Raw.TypeInputThemeSettings>;
            constructor(params: {
                slug: string;
                title: string;
                document?: Raw.TypeInputDocument;
                settings?: Vector<Raw.TypeInputThemeSettings>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.CreateTheme>;
            write(): Buffer;
        }
        class UpdateTheme extends TLObject {
            __response__: Raw.TypeTheme;
            format: string;
            theme: Raw.TypeInputTheme;
            slug?: string;
            title?: string;
            document?: Raw.TypeInputDocument;
            settings?: Vector<Raw.TypeInputThemeSettings>;
            constructor(params: {
                format: string;
                theme: Raw.TypeInputTheme;
                slug?: string;
                title?: string;
                document?: Raw.TypeInputDocument;
                settings?: Vector<Raw.TypeInputThemeSettings>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.UpdateTheme>;
            write(): Buffer;
        }
        class SaveTheme extends TLObject {
            __response__: Bool;
            theme: Raw.TypeInputTheme;
            unsave: Bool;
            constructor(params: {
                theme: Raw.TypeInputTheme;
                unsave: Bool;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.SaveTheme>;
            write(): Buffer;
        }
        class InstallTheme extends TLObject {
            __response__: Bool;
            dark?: boolean;
            theme?: Raw.TypeInputTheme;
            format?: string;
            baseTheme?: Raw.TypeBaseTheme;
            constructor(params: {
                dark?: boolean;
                theme?: Raw.TypeInputTheme;
                format?: string;
                baseTheme?: Raw.TypeBaseTheme;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.InstallTheme>;
            write(): Buffer;
        }
        class GetTheme extends TLObject {
            __response__: Raw.TypeTheme;
            format: string;
            theme: Raw.TypeInputTheme;
            constructor(params: {
                format: string;
                theme: Raw.TypeInputTheme;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.GetTheme>;
            write(): Buffer;
        }
        class GetThemes extends TLObject {
            __response__: Raw.account.TypeThemes;
            format: string;
            hash: long;
            constructor(params: {
                format: string;
                hash: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.GetThemes>;
            write(): Buffer;
        }
        class SetContentSettings extends TLObject {
            __response__: Bool;
            sensitiveEnabled?: boolean;
            constructor(params: {
                sensitiveEnabled?: boolean;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.SetContentSettings>;
            write(): Buffer;
        }
        class GetContentSettings extends TLObject {
            __response__: Raw.account.TypeContentSettings;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.GetContentSettings>;
            write(): Buffer;
        }
        class GetMultiWallPapers extends TLObject {
            __response__: Vector<Raw.TypeWallPaper>;
            wallpapers: Vector<Raw.TypeInputWallPaper>;
            constructor(params: {
                wallpapers: Vector<Raw.TypeInputWallPaper>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.GetMultiWallPapers>;
            write(): Buffer;
        }
        class GetGlobalPrivacySettings extends TLObject {
            __response__: Raw.TypeGlobalPrivacySettings;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.GetGlobalPrivacySettings>;
            write(): Buffer;
        }
        class SetGlobalPrivacySettings extends TLObject {
            __response__: Raw.TypeGlobalPrivacySettings;
            settings: Raw.TypeGlobalPrivacySettings;
            constructor(params: {
                settings: Raw.TypeGlobalPrivacySettings;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.SetGlobalPrivacySettings>;
            write(): Buffer;
        }
        class ReportProfilePhoto extends TLObject {
            __response__: Bool;
            peer: Raw.TypeInputPeer;
            photoId: Raw.TypeInputPhoto;
            reason: Raw.TypeReportReason;
            message: string;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                photoId: Raw.TypeInputPhoto;
                reason: Raw.TypeReportReason;
                message: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.ReportProfilePhoto>;
            write(): Buffer;
        }
        class ResetPassword extends TLObject {
            __response__: Raw.account.TypeResetPasswordResult;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.ResetPassword>;
            write(): Buffer;
        }
        class DeclinePasswordReset extends TLObject {
            __response__: Bool;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.DeclinePasswordReset>;
            write(): Buffer;
        }
        class GetChatThemes extends TLObject {
            __response__: Raw.account.TypeThemes;
            hash: long;
            constructor(params: {
                hash: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.GetChatThemes>;
            write(): Buffer;
        }
        class SetAuthorizationTTL extends TLObject {
            __response__: Bool;
            authorizationTtlDays: int;
            constructor(params: {
                authorizationTtlDays: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.SetAuthorizationTTL>;
            write(): Buffer;
        }
        class ChangeAuthorizationSettings extends TLObject {
            __response__: Bool;
            confirmed?: boolean;
            hash: long;
            encryptedRequestsDisabled?: Bool;
            callRequestsDisabled?: Bool;
            constructor(params: {
                confirmed?: boolean;
                hash: long;
                encryptedRequestsDisabled?: Bool;
                callRequestsDisabled?: Bool;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.ChangeAuthorizationSettings>;
            write(): Buffer;
        }
        class GetSavedRingtones extends TLObject {
            __response__: Raw.account.TypeSavedRingtones;
            hash: long;
            constructor(params: {
                hash: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.GetSavedRingtones>;
            write(): Buffer;
        }
        class SaveRingtone extends TLObject {
            __response__: Raw.account.TypeSavedRingtone;
            id: Raw.TypeInputDocument;
            unsave: Bool;
            constructor(params: {
                id: Raw.TypeInputDocument;
                unsave: Bool;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.SaveRingtone>;
            write(): Buffer;
        }
        class UploadRingtone extends TLObject {
            __response__: Raw.TypeDocument;
            file: Raw.TypeInputFile;
            fileName: string;
            mimeType: string;
            constructor(params: {
                file: Raw.TypeInputFile;
                fileName: string;
                mimeType: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.UploadRingtone>;
            write(): Buffer;
        }
        class UpdateEmojiStatus extends TLObject {
            __response__: Bool;
            emojiStatus: Raw.TypeEmojiStatus;
            constructor(params: {
                emojiStatus: Raw.TypeEmojiStatus;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.UpdateEmojiStatus>;
            write(): Buffer;
        }
        class GetDefaultEmojiStatuses extends TLObject {
            __response__: Raw.account.TypeEmojiStatuses;
            hash: long;
            constructor(params: {
                hash: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.GetDefaultEmojiStatuses>;
            write(): Buffer;
        }
        class GetRecentEmojiStatuses extends TLObject {
            __response__: Raw.account.TypeEmojiStatuses;
            hash: long;
            constructor(params: {
                hash: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.GetRecentEmojiStatuses>;
            write(): Buffer;
        }
        class ClearRecentEmojiStatuses extends TLObject {
            __response__: Bool;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.ClearRecentEmojiStatuses>;
            write(): Buffer;
        }
        class ReorderUsernames extends TLObject {
            __response__: Bool;
            order: Vector<string>;
            constructor(params: {
                order: Vector<string>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.ReorderUsernames>;
            write(): Buffer;
        }
        class ToggleUsername extends TLObject {
            __response__: Bool;
            username: string;
            active: Bool;
            constructor(params: {
                username: string;
                active: Bool;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.ToggleUsername>;
            write(): Buffer;
        }
        class GetDefaultProfilePhotoEmojis extends TLObject {
            __response__: Raw.TypeEmojiList;
            hash: long;
            constructor(params: {
                hash: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.GetDefaultProfilePhotoEmojis>;
            write(): Buffer;
        }
        class GetDefaultGroupPhotoEmojis extends TLObject {
            __response__: Raw.TypeEmojiList;
            hash: long;
            constructor(params: {
                hash: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.GetDefaultGroupPhotoEmojis>;
            write(): Buffer;
        }
        class GetAutoSaveSettings extends TLObject {
            __response__: Raw.account.TypeAutoSaveSettings;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.GetAutoSaveSettings>;
            write(): Buffer;
        }
        class SaveAutoSaveSettings extends TLObject {
            __response__: Bool;
            users?: boolean;
            chats?: boolean;
            broadcasts?: boolean;
            peer?: Raw.TypeInputPeer;
            settings: Raw.TypeAutoSaveSettings;
            constructor(params: {
                users?: boolean;
                chats?: boolean;
                broadcasts?: boolean;
                peer?: Raw.TypeInputPeer;
                settings: Raw.TypeAutoSaveSettings;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.SaveAutoSaveSettings>;
            write(): Buffer;
        }
        class DeleteAutoSaveExceptions extends TLObject {
            __response__: Bool;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.DeleteAutoSaveExceptions>;
            write(): Buffer;
        }
        class InvalidateSignInCodes extends TLObject {
            __response__: Bool;
            codes: Vector<string>;
            constructor(params: {
                codes: Vector<string>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.InvalidateSignInCodes>;
            write(): Buffer;
        }
        class UpdateColor extends TLObject {
            __response__: Bool;
            forProfile?: boolean;
            color?: int;
            backgroundEmojiId?: long;
            constructor(params: {
                forProfile?: boolean;
                color?: int;
                backgroundEmojiId?: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.UpdateColor>;
            write(): Buffer;
        }
        class GetDefaultBackgroundEmojis extends TLObject {
            __response__: Raw.TypeEmojiList;
            hash: long;
            constructor(params: {
                hash: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.GetDefaultBackgroundEmojis>;
            write(): Buffer;
        }
        class GetChannelDefaultEmojiStatuses extends TLObject {
            __response__: Raw.account.TypeEmojiStatuses;
            hash: long;
            constructor(params: {
                hash: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.GetChannelDefaultEmojiStatuses>;
            write(): Buffer;
        }
        class GetChannelRestrictedStatusEmojis extends TLObject {
            __response__: Raw.TypeEmojiList;
            hash: long;
            constructor(params: {
                hash: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.GetChannelRestrictedStatusEmojis>;
            write(): Buffer;
        }
        class UpdateBusinessWorkHours extends TLObject {
            __response__: Bool;
            businessWorkHours?: Raw.TypeBusinessWorkHours;
            constructor(params: {
                businessWorkHours?: Raw.TypeBusinessWorkHours;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.UpdateBusinessWorkHours>;
            write(): Buffer;
        }
        class UpdateBusinessLocation extends TLObject {
            __response__: Bool;
            geoPoint?: Raw.TypeInputGeoPoint;
            address?: string;
            constructor(params: {
                geoPoint?: Raw.TypeInputGeoPoint;
                address?: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.UpdateBusinessLocation>;
            write(): Buffer;
        }
        class UpdateBusinessGreetingMessage extends TLObject {
            __response__: Bool;
            message?: Raw.TypeInputBusinessGreetingMessage;
            constructor(params: {
                message?: Raw.TypeInputBusinessGreetingMessage;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.UpdateBusinessGreetingMessage>;
            write(): Buffer;
        }
        class UpdateBusinessAwayMessage extends TLObject {
            __response__: Bool;
            message?: Raw.TypeInputBusinessAwayMessage;
            constructor(params: {
                message?: Raw.TypeInputBusinessAwayMessage;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.UpdateBusinessAwayMessage>;
            write(): Buffer;
        }
        class UpdateConnectedBot extends TLObject {
            __response__: Raw.TypeUpdates;
            canReply?: boolean;
            deleted?: boolean;
            bot: Raw.TypeInputUser;
            recipients: Raw.TypeInputBusinessBotRecipients;
            constructor(params: {
                canReply?: boolean;
                deleted?: boolean;
                bot: Raw.TypeInputUser;
                recipients: Raw.TypeInputBusinessBotRecipients;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.UpdateConnectedBot>;
            write(): Buffer;
        }
        class GetConnectedBots extends TLObject {
            __response__: Raw.account.TypeConnectedBots;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.GetConnectedBots>;
            write(): Buffer;
        }
        class GetBotBusinessConnection extends TLObject {
            __response__: Raw.TypeUpdates;
            connectionId: string;
            constructor(params: {
                connectionId: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.GetBotBusinessConnection>;
            write(): Buffer;
        }
        class UpdateBusinessIntro extends TLObject {
            __response__: Bool;
            intro?: Raw.TypeInputBusinessIntro;
            constructor(params: {
                intro?: Raw.TypeInputBusinessIntro;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.UpdateBusinessIntro>;
            write(): Buffer;
        }
        class ToggleConnectedBotPaused extends TLObject {
            __response__: Bool;
            peer: Raw.TypeInputPeer;
            paused: Bool;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                paused: Bool;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.ToggleConnectedBotPaused>;
            write(): Buffer;
        }
        class DisablePeerConnectedBot extends TLObject {
            __response__: Bool;
            peer: Raw.TypeInputPeer;
            constructor(params: {
                peer: Raw.TypeInputPeer;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.DisablePeerConnectedBot>;
            write(): Buffer;
        }
        class UpdateBirthday extends TLObject {
            __response__: Bool;
            birthday?: Raw.TypeBirthday;
            constructor(params: {
                birthday?: Raw.TypeBirthday;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.UpdateBirthday>;
            write(): Buffer;
        }
        class CreateBusinessChatLink extends TLObject {
            __response__: Raw.TypeBusinessChatLink;
            link: Raw.TypeInputBusinessChatLink;
            constructor(params: {
                link: Raw.TypeInputBusinessChatLink;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.CreateBusinessChatLink>;
            write(): Buffer;
        }
        class EditBusinessChatLink extends TLObject {
            __response__: Raw.TypeBusinessChatLink;
            slug: string;
            link: Raw.TypeInputBusinessChatLink;
            constructor(params: {
                slug: string;
                link: Raw.TypeInputBusinessChatLink;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.EditBusinessChatLink>;
            write(): Buffer;
        }
        class DeleteBusinessChatLink extends TLObject {
            __response__: Bool;
            slug: string;
            constructor(params: {
                slug: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.DeleteBusinessChatLink>;
            write(): Buffer;
        }
        class GetBusinessChatLinks extends TLObject {
            __response__: Raw.account.TypeBusinessChatLinks;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.GetBusinessChatLinks>;
            write(): Buffer;
        }
        class ResolveBusinessChatLink extends TLObject {
            __response__: Raw.account.TypeResolvedBusinessChatLinks;
            slug: string;
            constructor(params: {
                slug: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.ResolveBusinessChatLink>;
            write(): Buffer;
        }
        class UpdatePersonalChannel extends TLObject {
            __response__: Bool;
            channel: Raw.TypeInputChannel;
            constructor(params: {
                channel: Raw.TypeInputChannel;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.UpdatePersonalChannel>;
            write(): Buffer;
        }
        class ToggleSponsoredMessages extends TLObject {
            __response__: Bool;
            enabled: Bool;
            constructor(params: {
                enabled: Bool;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.ToggleSponsoredMessages>;
            write(): Buffer;
        }
        class GetReactionsNotifySettings extends TLObject {
            __response__: Raw.TypeReactionsNotifySettings;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.GetReactionsNotifySettings>;
            write(): Buffer;
        }
        class SetReactionsNotifySettings extends TLObject {
            __response__: Raw.TypeReactionsNotifySettings;
            settings: Raw.TypeReactionsNotifySettings;
            constructor(params: {
                settings: Raw.TypeReactionsNotifySettings;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.account.SetReactionsNotifySettings>;
            write(): Buffer;
        }
    }
    namespace channels {
        type TypeSponsoredMessageReportResult = Raw.channels.SponsoredMessageReportResultChooseOption | Raw.channels.SponsoredMessageReportResultAdsHidden | Raw.channels.SponsoredMessageReportResultReported;
        type TypeSendAsPeers = Raw.channels.SendAsPeers;
        type TypeAdminLogResults = Raw.channels.AdminLogResults;
        type TypeChannelParticipant = Raw.channels.ChannelParticipant;
        type TypeChannelParticipants = Raw.channels.ChannelParticipants | Raw.channels.ChannelParticipantsNotModified;
        class ChannelParticipants extends TLObject {
            count: int;
            participants: Vector<Raw.TypeChannelParticipant>;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                count: int;
                participants: Vector<Raw.TypeChannelParticipant>;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.ChannelParticipants>;
            write(): Buffer;
        }
        class ChannelParticipantsNotModified extends TLObject {
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.ChannelParticipantsNotModified>;
            write(): Buffer;
        }
        class ChannelParticipant extends TLObject {
            participant: Raw.TypeChannelParticipant;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                participant: Raw.TypeChannelParticipant;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.ChannelParticipant>;
            write(): Buffer;
        }
        class AdminLogResults extends TLObject {
            events: Vector<Raw.TypeChannelAdminLogEvent>;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                events: Vector<Raw.TypeChannelAdminLogEvent>;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.AdminLogResults>;
            write(): Buffer;
        }
        class SendAsPeers extends TLObject {
            peers: Vector<Raw.TypeSendAsPeer>;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                peers: Vector<Raw.TypeSendAsPeer>;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.SendAsPeers>;
            write(): Buffer;
        }
        class SponsoredMessageReportResultChooseOption extends TLObject {
            title: string;
            options: Vector<Raw.TypeSponsoredMessageReportOption>;
            constructor(params: {
                title: string;
                options: Vector<Raw.TypeSponsoredMessageReportOption>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.SponsoredMessageReportResultChooseOption>;
            write(): Buffer;
        }
        class SponsoredMessageReportResultAdsHidden extends TLObject {
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.SponsoredMessageReportResultAdsHidden>;
            write(): Buffer;
        }
        class SponsoredMessageReportResultReported extends TLObject {
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.SponsoredMessageReportResultReported>;
            write(): Buffer;
        }
        class ReadHistory extends TLObject {
            __response__: Bool;
            channel: Raw.TypeInputChannel;
            maxId: int;
            constructor(params: {
                channel: Raw.TypeInputChannel;
                maxId: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.ReadHistory>;
            write(): Buffer;
        }
        class DeleteMessages extends TLObject {
            __response__: Raw.messages.TypeAffectedMessages;
            channel: Raw.TypeInputChannel;
            id: Vector<int>;
            constructor(params: {
                channel: Raw.TypeInputChannel;
                id: Vector<int>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.DeleteMessages>;
            write(): Buffer;
        }
        class ReportSpam extends TLObject {
            __response__: Bool;
            channel: Raw.TypeInputChannel;
            participant: Raw.TypeInputPeer;
            id: Vector<int>;
            constructor(params: {
                channel: Raw.TypeInputChannel;
                participant: Raw.TypeInputPeer;
                id: Vector<int>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.ReportSpam>;
            write(): Buffer;
        }
        class GetMessages extends TLObject {
            __response__: Raw.messages.TypeMessages;
            channel: Raw.TypeInputChannel;
            id: Vector<Raw.TypeInputMessage>;
            constructor(params: {
                channel: Raw.TypeInputChannel;
                id: Vector<Raw.TypeInputMessage>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.GetMessages>;
            write(): Buffer;
        }
        class GetParticipants extends TLObject {
            __response__: Raw.channels.TypeChannelParticipants;
            channel: Raw.TypeInputChannel;
            filter: Raw.TypeChannelParticipantsFilter;
            offset: int;
            limit: int;
            hash: long;
            constructor(params: {
                channel: Raw.TypeInputChannel;
                filter: Raw.TypeChannelParticipantsFilter;
                offset: int;
                limit: int;
                hash: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.GetParticipants>;
            write(): Buffer;
        }
        class GetParticipant extends TLObject {
            __response__: Raw.channels.TypeChannelParticipant;
            channel: Raw.TypeInputChannel;
            participant: Raw.TypeInputPeer;
            constructor(params: {
                channel: Raw.TypeInputChannel;
                participant: Raw.TypeInputPeer;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.GetParticipant>;
            write(): Buffer;
        }
        class GetChannels extends TLObject {
            __response__: Raw.messages.TypeChats;
            id: Vector<Raw.TypeInputChannel>;
            constructor(params: {
                id: Vector<Raw.TypeInputChannel>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.GetChannels>;
            write(): Buffer;
        }
        class GetFullChannel extends TLObject {
            __response__: Raw.messages.TypeChatFull;
            channel: Raw.TypeInputChannel;
            constructor(params: {
                channel: Raw.TypeInputChannel;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.GetFullChannel>;
            write(): Buffer;
        }
        class CreateChannel extends TLObject {
            __response__: Raw.TypeUpdates;
            broadcast?: boolean;
            megagroup?: boolean;
            forImport?: boolean;
            forum?: boolean;
            title: string;
            about: string;
            geoPoint?: Raw.TypeInputGeoPoint;
            address?: string;
            ttlPeriod?: int;
            constructor(params: {
                broadcast?: boolean;
                megagroup?: boolean;
                forImport?: boolean;
                forum?: boolean;
                title: string;
                about: string;
                geoPoint?: Raw.TypeInputGeoPoint;
                address?: string;
                ttlPeriod?: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.CreateChannel>;
            write(): Buffer;
        }
        class EditAdmin extends TLObject {
            __response__: Raw.TypeUpdates;
            channel: Raw.TypeInputChannel;
            userId: Raw.TypeInputUser;
            adminRights: Raw.TypeChatAdminRights;
            rank: string;
            constructor(params: {
                channel: Raw.TypeInputChannel;
                userId: Raw.TypeInputUser;
                adminRights: Raw.TypeChatAdminRights;
                rank: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.EditAdmin>;
            write(): Buffer;
        }
        class EditTitle extends TLObject {
            __response__: Raw.TypeUpdates;
            channel: Raw.TypeInputChannel;
            title: string;
            constructor(params: {
                channel: Raw.TypeInputChannel;
                title: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.EditTitle>;
            write(): Buffer;
        }
        class EditPhoto extends TLObject {
            __response__: Raw.TypeUpdates;
            channel: Raw.TypeInputChannel;
            photo: Raw.TypeInputChatPhoto;
            constructor(params: {
                channel: Raw.TypeInputChannel;
                photo: Raw.TypeInputChatPhoto;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.EditPhoto>;
            write(): Buffer;
        }
        class CheckUsername extends TLObject {
            __response__: Bool;
            channel: Raw.TypeInputChannel;
            username: string;
            constructor(params: {
                channel: Raw.TypeInputChannel;
                username: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.CheckUsername>;
            write(): Buffer;
        }
        class UpdateUsername extends TLObject {
            __response__: Bool;
            channel: Raw.TypeInputChannel;
            username: string;
            constructor(params: {
                channel: Raw.TypeInputChannel;
                username: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.UpdateUsername>;
            write(): Buffer;
        }
        class JoinChannel extends TLObject {
            __response__: Raw.TypeUpdates;
            channel: Raw.TypeInputChannel;
            constructor(params: {
                channel: Raw.TypeInputChannel;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.JoinChannel>;
            write(): Buffer;
        }
        class LeaveChannel extends TLObject {
            __response__: Raw.TypeUpdates;
            channel: Raw.TypeInputChannel;
            constructor(params: {
                channel: Raw.TypeInputChannel;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.LeaveChannel>;
            write(): Buffer;
        }
        class InviteToChannel extends TLObject {
            __response__: Raw.messages.TypeInvitedUsers;
            channel: Raw.TypeInputChannel;
            users: Vector<Raw.TypeInputUser>;
            constructor(params: {
                channel: Raw.TypeInputChannel;
                users: Vector<Raw.TypeInputUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.InviteToChannel>;
            write(): Buffer;
        }
        class DeleteChannel extends TLObject {
            __response__: Raw.TypeUpdates;
            channel: Raw.TypeInputChannel;
            constructor(params: {
                channel: Raw.TypeInputChannel;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.DeleteChannel>;
            write(): Buffer;
        }
        class ExportMessageLink extends TLObject {
            __response__: Raw.TypeExportedMessageLink;
            grouped?: boolean;
            thread?: boolean;
            channel: Raw.TypeInputChannel;
            id: int;
            constructor(params: {
                grouped?: boolean;
                thread?: boolean;
                channel: Raw.TypeInputChannel;
                id: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.ExportMessageLink>;
            write(): Buffer;
        }
        class ToggleSignatures extends TLObject {
            __response__: Raw.TypeUpdates;
            channel: Raw.TypeInputChannel;
            enabled: Bool;
            constructor(params: {
                channel: Raw.TypeInputChannel;
                enabled: Bool;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.ToggleSignatures>;
            write(): Buffer;
        }
        class GetAdminedPublicChannels extends TLObject {
            __response__: Raw.messages.TypeChats;
            byLocation?: boolean;
            checkLimit?: boolean;
            forPersonal?: boolean;
            constructor(params: {
                byLocation?: boolean;
                checkLimit?: boolean;
                forPersonal?: boolean;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.GetAdminedPublicChannels>;
            write(): Buffer;
        }
        class EditBanned extends TLObject {
            __response__: Raw.TypeUpdates;
            channel: Raw.TypeInputChannel;
            participant: Raw.TypeInputPeer;
            bannedRights: Raw.TypeChatBannedRights;
            constructor(params: {
                channel: Raw.TypeInputChannel;
                participant: Raw.TypeInputPeer;
                bannedRights: Raw.TypeChatBannedRights;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.EditBanned>;
            write(): Buffer;
        }
        class GetAdminLog extends TLObject {
            __response__: Raw.channels.TypeAdminLogResults;
            channel: Raw.TypeInputChannel;
            q: string;
            eventsFilter?: Raw.TypeChannelAdminLogEventsFilter;
            admins?: Vector<Raw.TypeInputUser>;
            maxId: long;
            minId: long;
            limit: int;
            constructor(params: {
                channel: Raw.TypeInputChannel;
                q: string;
                eventsFilter?: Raw.TypeChannelAdminLogEventsFilter;
                admins?: Vector<Raw.TypeInputUser>;
                maxId: long;
                minId: long;
                limit: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.GetAdminLog>;
            write(): Buffer;
        }
        class SetStickers extends TLObject {
            __response__: Bool;
            channel: Raw.TypeInputChannel;
            stickerset: Raw.TypeInputStickerSet;
            constructor(params: {
                channel: Raw.TypeInputChannel;
                stickerset: Raw.TypeInputStickerSet;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.SetStickers>;
            write(): Buffer;
        }
        class ReadMessageContents extends TLObject {
            __response__: Bool;
            channel: Raw.TypeInputChannel;
            id: Vector<int>;
            constructor(params: {
                channel: Raw.TypeInputChannel;
                id: Vector<int>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.ReadMessageContents>;
            write(): Buffer;
        }
        class DeleteHistory extends TLObject {
            __response__: Raw.TypeUpdates;
            forEveryone?: boolean;
            channel: Raw.TypeInputChannel;
            maxId: int;
            constructor(params: {
                forEveryone?: boolean;
                channel: Raw.TypeInputChannel;
                maxId: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.DeleteHistory>;
            write(): Buffer;
        }
        class TogglePreHistoryHidden extends TLObject {
            __response__: Raw.TypeUpdates;
            channel: Raw.TypeInputChannel;
            enabled: Bool;
            constructor(params: {
                channel: Raw.TypeInputChannel;
                enabled: Bool;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.TogglePreHistoryHidden>;
            write(): Buffer;
        }
        class GetLeftChannels extends TLObject {
            __response__: Raw.messages.TypeChats;
            offset: int;
            constructor(params: {
                offset: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.GetLeftChannels>;
            write(): Buffer;
        }
        class GetGroupsForDiscussion extends TLObject {
            __response__: Raw.messages.TypeChats;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.GetGroupsForDiscussion>;
            write(): Buffer;
        }
        class SetDiscussionGroup extends TLObject {
            __response__: Bool;
            broadcast: Raw.TypeInputChannel;
            group: Raw.TypeInputChannel;
            constructor(params: {
                broadcast: Raw.TypeInputChannel;
                group: Raw.TypeInputChannel;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.SetDiscussionGroup>;
            write(): Buffer;
        }
        class EditCreator extends TLObject {
            __response__: Raw.TypeUpdates;
            channel: Raw.TypeInputChannel;
            userId: Raw.TypeInputUser;
            password: Raw.TypeInputCheckPasswordSRP;
            constructor(params: {
                channel: Raw.TypeInputChannel;
                userId: Raw.TypeInputUser;
                password: Raw.TypeInputCheckPasswordSRP;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.EditCreator>;
            write(): Buffer;
        }
        class EditLocation extends TLObject {
            __response__: Bool;
            channel: Raw.TypeInputChannel;
            geoPoint: Raw.TypeInputGeoPoint;
            address: string;
            constructor(params: {
                channel: Raw.TypeInputChannel;
                geoPoint: Raw.TypeInputGeoPoint;
                address: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.EditLocation>;
            write(): Buffer;
        }
        class ToggleSlowMode extends TLObject {
            __response__: Raw.TypeUpdates;
            channel: Raw.TypeInputChannel;
            seconds: int;
            constructor(params: {
                channel: Raw.TypeInputChannel;
                seconds: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.ToggleSlowMode>;
            write(): Buffer;
        }
        class GetInactiveChannels extends TLObject {
            __response__: Raw.messages.TypeInactiveChats;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.GetInactiveChannels>;
            write(): Buffer;
        }
        class ConvertToGigagroup extends TLObject {
            __response__: Raw.TypeUpdates;
            channel: Raw.TypeInputChannel;
            constructor(params: {
                channel: Raw.TypeInputChannel;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.ConvertToGigagroup>;
            write(): Buffer;
        }
        class ViewSponsoredMessage extends TLObject {
            __response__: Bool;
            channel: Raw.TypeInputChannel;
            randomId: bytes;
            constructor(params: {
                channel: Raw.TypeInputChannel;
                randomId: bytes;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.ViewSponsoredMessage>;
            write(): Buffer;
        }
        class GetSponsoredMessages extends TLObject {
            __response__: Raw.messages.TypeSponsoredMessages;
            channel: Raw.TypeInputChannel;
            constructor(params: {
                channel: Raw.TypeInputChannel;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.GetSponsoredMessages>;
            write(): Buffer;
        }
        class GetSendAs extends TLObject {
            __response__: Raw.channels.TypeSendAsPeers;
            peer: Raw.TypeInputPeer;
            constructor(params: {
                peer: Raw.TypeInputPeer;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.GetSendAs>;
            write(): Buffer;
        }
        class DeleteParticipantHistory extends TLObject {
            __response__: Raw.messages.TypeAffectedHistory;
            channel: Raw.TypeInputChannel;
            participant: Raw.TypeInputPeer;
            constructor(params: {
                channel: Raw.TypeInputChannel;
                participant: Raw.TypeInputPeer;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.DeleteParticipantHistory>;
            write(): Buffer;
        }
        class ToggleJoinToSend extends TLObject {
            __response__: Raw.TypeUpdates;
            channel: Raw.TypeInputChannel;
            enabled: Bool;
            constructor(params: {
                channel: Raw.TypeInputChannel;
                enabled: Bool;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.ToggleJoinToSend>;
            write(): Buffer;
        }
        class ToggleJoinRequest extends TLObject {
            __response__: Raw.TypeUpdates;
            channel: Raw.TypeInputChannel;
            enabled: Bool;
            constructor(params: {
                channel: Raw.TypeInputChannel;
                enabled: Bool;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.ToggleJoinRequest>;
            write(): Buffer;
        }
        class ReorderUsernames extends TLObject {
            __response__: Bool;
            channel: Raw.TypeInputChannel;
            order: Vector<string>;
            constructor(params: {
                channel: Raw.TypeInputChannel;
                order: Vector<string>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.ReorderUsernames>;
            write(): Buffer;
        }
        class ToggleUsername extends TLObject {
            __response__: Bool;
            channel: Raw.TypeInputChannel;
            username: string;
            active: Bool;
            constructor(params: {
                channel: Raw.TypeInputChannel;
                username: string;
                active: Bool;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.ToggleUsername>;
            write(): Buffer;
        }
        class DeactivateAllUsernames extends TLObject {
            __response__: Bool;
            channel: Raw.TypeInputChannel;
            constructor(params: {
                channel: Raw.TypeInputChannel;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.DeactivateAllUsernames>;
            write(): Buffer;
        }
        class ToggleForum extends TLObject {
            __response__: Raw.TypeUpdates;
            channel: Raw.TypeInputChannel;
            enabled: Bool;
            constructor(params: {
                channel: Raw.TypeInputChannel;
                enabled: Bool;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.ToggleForum>;
            write(): Buffer;
        }
        class CreateForumTopic extends TLObject {
            __response__: Raw.TypeUpdates;
            channel: Raw.TypeInputChannel;
            title: string;
            iconColor?: int;
            iconEmojiId?: long;
            randomId: long;
            sendAs?: Raw.TypeInputPeer;
            constructor(params: {
                channel: Raw.TypeInputChannel;
                title: string;
                iconColor?: int;
                iconEmojiId?: long;
                randomId: long;
                sendAs?: Raw.TypeInputPeer;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.CreateForumTopic>;
            write(): Buffer;
        }
        class GetForumTopics extends TLObject {
            __response__: Raw.messages.TypeForumTopics;
            channel: Raw.TypeInputChannel;
            q?: string;
            offsetDate: int;
            offsetId: int;
            offsetTopic: int;
            limit: int;
            constructor(params: {
                channel: Raw.TypeInputChannel;
                q?: string;
                offsetDate: int;
                offsetId: int;
                offsetTopic: int;
                limit: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.GetForumTopics>;
            write(): Buffer;
        }
        class GetForumTopicsByID extends TLObject {
            __response__: Raw.messages.TypeForumTopics;
            channel: Raw.TypeInputChannel;
            topics: Vector<int>;
            constructor(params: {
                channel: Raw.TypeInputChannel;
                topics: Vector<int>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.GetForumTopicsByID>;
            write(): Buffer;
        }
        class EditForumTopic extends TLObject {
            __response__: Raw.TypeUpdates;
            channel: Raw.TypeInputChannel;
            topicId: int;
            title?: string;
            iconEmojiId?: long;
            closed?: Bool;
            hidden?: Bool;
            constructor(params: {
                channel: Raw.TypeInputChannel;
                topicId: int;
                title?: string;
                iconEmojiId?: long;
                closed?: Bool;
                hidden?: Bool;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.EditForumTopic>;
            write(): Buffer;
        }
        class UpdatePinnedForumTopic extends TLObject {
            __response__: Raw.TypeUpdates;
            channel: Raw.TypeInputChannel;
            topicId: int;
            pinned: Bool;
            constructor(params: {
                channel: Raw.TypeInputChannel;
                topicId: int;
                pinned: Bool;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.UpdatePinnedForumTopic>;
            write(): Buffer;
        }
        class DeleteTopicHistory extends TLObject {
            __response__: Raw.messages.TypeAffectedHistory;
            channel: Raw.TypeInputChannel;
            topMsgId: int;
            constructor(params: {
                channel: Raw.TypeInputChannel;
                topMsgId: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.DeleteTopicHistory>;
            write(): Buffer;
        }
        class ReorderPinnedForumTopics extends TLObject {
            __response__: Raw.TypeUpdates;
            force?: boolean;
            channel: Raw.TypeInputChannel;
            order: Vector<int>;
            constructor(params: {
                force?: boolean;
                channel: Raw.TypeInputChannel;
                order: Vector<int>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.ReorderPinnedForumTopics>;
            write(): Buffer;
        }
        class ToggleAntiSpam extends TLObject {
            __response__: Raw.TypeUpdates;
            channel: Raw.TypeInputChannel;
            enabled: Bool;
            constructor(params: {
                channel: Raw.TypeInputChannel;
                enabled: Bool;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.ToggleAntiSpam>;
            write(): Buffer;
        }
        class ReportAntiSpamFalsePositive extends TLObject {
            __response__: Bool;
            channel: Raw.TypeInputChannel;
            msgId: int;
            constructor(params: {
                channel: Raw.TypeInputChannel;
                msgId: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.ReportAntiSpamFalsePositive>;
            write(): Buffer;
        }
        class ToggleParticipantsHidden extends TLObject {
            __response__: Raw.TypeUpdates;
            channel: Raw.TypeInputChannel;
            enabled: Bool;
            constructor(params: {
                channel: Raw.TypeInputChannel;
                enabled: Bool;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.ToggleParticipantsHidden>;
            write(): Buffer;
        }
        class ClickSponsoredMessage extends TLObject {
            __response__: Bool;
            channel: Raw.TypeInputChannel;
            randomId: bytes;
            constructor(params: {
                channel: Raw.TypeInputChannel;
                randomId: bytes;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.ClickSponsoredMessage>;
            write(): Buffer;
        }
        class UpdateColor extends TLObject {
            __response__: Raw.TypeUpdates;
            forProfile?: boolean;
            channel: Raw.TypeInputChannel;
            color?: int;
            backgroundEmojiId?: long;
            constructor(params: {
                forProfile?: boolean;
                channel: Raw.TypeInputChannel;
                color?: int;
                backgroundEmojiId?: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.UpdateColor>;
            write(): Buffer;
        }
        class ToggleViewForumAsMessages extends TLObject {
            __response__: Raw.TypeUpdates;
            channel: Raw.TypeInputChannel;
            enabled: Bool;
            constructor(params: {
                channel: Raw.TypeInputChannel;
                enabled: Bool;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.ToggleViewForumAsMessages>;
            write(): Buffer;
        }
        class GetChannelRecommendations extends TLObject {
            __response__: Raw.messages.TypeChats;
            channel?: Raw.TypeInputChannel;
            constructor(params: {
                channel?: Raw.TypeInputChannel;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.GetChannelRecommendations>;
            write(): Buffer;
        }
        class UpdateEmojiStatus extends TLObject {
            __response__: Raw.TypeUpdates;
            channel: Raw.TypeInputChannel;
            emojiStatus: Raw.TypeEmojiStatus;
            constructor(params: {
                channel: Raw.TypeInputChannel;
                emojiStatus: Raw.TypeEmojiStatus;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.UpdateEmojiStatus>;
            write(): Buffer;
        }
        class SetBoostsToUnblockRestrictions extends TLObject {
            __response__: Raw.TypeUpdates;
            channel: Raw.TypeInputChannel;
            boosts: int;
            constructor(params: {
                channel: Raw.TypeInputChannel;
                boosts: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.SetBoostsToUnblockRestrictions>;
            write(): Buffer;
        }
        class SetEmojiStickers extends TLObject {
            __response__: Bool;
            channel: Raw.TypeInputChannel;
            stickerset: Raw.TypeInputStickerSet;
            constructor(params: {
                channel: Raw.TypeInputChannel;
                stickerset: Raw.TypeInputStickerSet;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.SetEmojiStickers>;
            write(): Buffer;
        }
        class ReportSponsoredMessage extends TLObject {
            __response__: Raw.channels.TypeSponsoredMessageReportResult;
            channel: Raw.TypeInputChannel;
            randomId: bytes;
            option: bytes;
            constructor(params: {
                channel: Raw.TypeInputChannel;
                randomId: bytes;
                option: bytes;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.ReportSponsoredMessage>;
            write(): Buffer;
        }
        class RestrictSponsoredMessages extends TLObject {
            __response__: Raw.TypeUpdates;
            channel: Raw.TypeInputChannel;
            restricted: Bool;
            constructor(params: {
                channel: Raw.TypeInputChannel;
                restricted: Bool;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.RestrictSponsoredMessages>;
            write(): Buffer;
        }
        class SearchPosts extends TLObject {
            __response__: Raw.messages.TypeMessages;
            hashtag: string;
            offsetRate: int;
            offsetPeer: Raw.TypeInputPeer;
            offsetId: int;
            limit: int;
            constructor(params: {
                hashtag: string;
                offsetRate: int;
                offsetPeer: Raw.TypeInputPeer;
                offsetId: int;
                limit: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.channels.SearchPosts>;
            write(): Buffer;
        }
    }
    namespace payments {
        type TypeStarsStatus = Raw.payments.StarsStatus;
        type TypeGiveawayInfo = Raw.payments.GiveawayInfo | Raw.payments.GiveawayInfoResults;
        type TypeCheckedGiftCode = Raw.payments.CheckedGiftCode;
        type TypeExportedInvoice = Raw.payments.ExportedInvoice;
        type TypeBankCardData = Raw.payments.BankCardData;
        type TypeSavedInfo = Raw.payments.SavedInfo;
        type TypePaymentResult = Raw.payments.PaymentResult | Raw.payments.PaymentVerificationNeeded;
        type TypeValidatedRequestedInfo = Raw.payments.ValidatedRequestedInfo;
        type TypePaymentReceipt = Raw.payments.PaymentReceipt | Raw.payments.PaymentReceiptStars;
        type TypePaymentForm = Raw.payments.PaymentForm | Raw.payments.PaymentFormStars;
        class PaymentForm extends TLObject {
            canSaveCredentials?: boolean;
            passwordMissing?: boolean;
            formId: long;
            botId: long;
            title: string;
            description: string;
            photo?: Raw.TypeWebDocument;
            invoice: Raw.TypeInvoice;
            providerId: long;
            url: string;
            nativeProvider?: string;
            nativeParams?: Raw.TypeDataJSON;
            additionalMethods?: Vector<Raw.TypePaymentFormMethod>;
            savedInfo?: Raw.TypePaymentRequestedInfo;
            savedCredentials?: Vector<Raw.TypePaymentSavedCredentials>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                canSaveCredentials?: boolean;
                passwordMissing?: boolean;
                formId: long;
                botId: long;
                title: string;
                description: string;
                photo?: Raw.TypeWebDocument;
                invoice: Raw.TypeInvoice;
                providerId: long;
                url: string;
                nativeProvider?: string;
                nativeParams?: Raw.TypeDataJSON;
                additionalMethods?: Vector<Raw.TypePaymentFormMethod>;
                savedInfo?: Raw.TypePaymentRequestedInfo;
                savedCredentials?: Vector<Raw.TypePaymentSavedCredentials>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.payments.PaymentForm>;
            write(): Buffer;
        }
        class PaymentFormStars extends TLObject {
            formId: long;
            botId: long;
            title: string;
            description: string;
            photo?: Raw.TypeWebDocument;
            invoice: Raw.TypeInvoice;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                formId: long;
                botId: long;
                title: string;
                description: string;
                photo?: Raw.TypeWebDocument;
                invoice: Raw.TypeInvoice;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.payments.PaymentFormStars>;
            write(): Buffer;
        }
        class ValidatedRequestedInfo extends TLObject {
            id?: string;
            shippingOptions?: Vector<Raw.TypeShippingOption>;
            constructor(params: {
                id?: string;
                shippingOptions?: Vector<Raw.TypeShippingOption>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.payments.ValidatedRequestedInfo>;
            write(): Buffer;
        }
        class PaymentResult extends TLObject {
            updates: Raw.TypeUpdates;
            constructor(params: {
                updates: Raw.TypeUpdates;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.payments.PaymentResult>;
            write(): Buffer;
        }
        class PaymentVerificationNeeded extends TLObject {
            url: string;
            constructor(params: {
                url: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.payments.PaymentVerificationNeeded>;
            write(): Buffer;
        }
        class PaymentReceipt extends TLObject {
            date: int;
            botId: long;
            providerId: long;
            title: string;
            description: string;
            photo?: Raw.TypeWebDocument;
            invoice: Raw.TypeInvoice;
            info?: Raw.TypePaymentRequestedInfo;
            shipping?: Raw.TypeShippingOption;
            tipAmount?: long;
            currency: string;
            totalAmount: long;
            credentialsTitle: string;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                date: int;
                botId: long;
                providerId: long;
                title: string;
                description: string;
                photo?: Raw.TypeWebDocument;
                invoice: Raw.TypeInvoice;
                info?: Raw.TypePaymentRequestedInfo;
                shipping?: Raw.TypeShippingOption;
                tipAmount?: long;
                currency: string;
                totalAmount: long;
                credentialsTitle: string;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.payments.PaymentReceipt>;
            write(): Buffer;
        }
        class PaymentReceiptStars extends TLObject {
            date: int;
            botId: long;
            title: string;
            description: string;
            photo?: Raw.TypeWebDocument;
            invoice: Raw.TypeInvoice;
            currency: string;
            totalAmount: long;
            transactionId: string;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                date: int;
                botId: long;
                title: string;
                description: string;
                photo?: Raw.TypeWebDocument;
                invoice: Raw.TypeInvoice;
                currency: string;
                totalAmount: long;
                transactionId: string;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.payments.PaymentReceiptStars>;
            write(): Buffer;
        }
        class SavedInfo extends TLObject {
            hasSavedCredentials?: boolean;
            savedInfo?: Raw.TypePaymentRequestedInfo;
            constructor(params: {
                hasSavedCredentials?: boolean;
                savedInfo?: Raw.TypePaymentRequestedInfo;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.payments.SavedInfo>;
            write(): Buffer;
        }
        class BankCardData extends TLObject {
            title: string;
            openUrls: Vector<Raw.TypeBankCardOpenUrl>;
            constructor(params: {
                title: string;
                openUrls: Vector<Raw.TypeBankCardOpenUrl>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.payments.BankCardData>;
            write(): Buffer;
        }
        class ExportedInvoice extends TLObject {
            url: string;
            constructor(params: {
                url: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.payments.ExportedInvoice>;
            write(): Buffer;
        }
        class CheckedGiftCode extends TLObject {
            viaGiveaway?: boolean;
            fromId?: Raw.TypePeer;
            giveawayMsgId?: int;
            toId?: long;
            date: int;
            months: int;
            usedDate?: int;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                viaGiveaway?: boolean;
                fromId?: Raw.TypePeer;
                giveawayMsgId?: int;
                toId?: long;
                date: int;
                months: int;
                usedDate?: int;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.payments.CheckedGiftCode>;
            write(): Buffer;
        }
        class GiveawayInfo extends TLObject {
            participating?: boolean;
            preparingResults?: boolean;
            startDate: int;
            joinedTooEarlyDate?: int;
            adminDisallowedChatId?: long;
            disallowedCountry?: string;
            constructor(params: {
                participating?: boolean;
                preparingResults?: boolean;
                startDate: int;
                joinedTooEarlyDate?: int;
                adminDisallowedChatId?: long;
                disallowedCountry?: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.payments.GiveawayInfo>;
            write(): Buffer;
        }
        class GiveawayInfoResults extends TLObject {
            winner?: boolean;
            refunded?: boolean;
            startDate: int;
            giftCodeSlug?: string;
            finishDate: int;
            winnersCount: int;
            activatedCount: int;
            constructor(params: {
                winner?: boolean;
                refunded?: boolean;
                startDate: int;
                giftCodeSlug?: string;
                finishDate: int;
                winnersCount: int;
                activatedCount: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.payments.GiveawayInfoResults>;
            write(): Buffer;
        }
        class StarsStatus extends TLObject {
            balance: long;
            history: Vector<Raw.TypeStarsTransaction>;
            nextOffset?: string;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                balance: long;
                history: Vector<Raw.TypeStarsTransaction>;
                nextOffset?: string;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.payments.StarsStatus>;
            write(): Buffer;
        }
        class GetPaymentForm extends TLObject {
            __response__: Raw.payments.TypePaymentForm;
            invoice: Raw.TypeInputInvoice;
            themeParams?: Raw.TypeDataJSON;
            constructor(params: {
                invoice: Raw.TypeInputInvoice;
                themeParams?: Raw.TypeDataJSON;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.payments.GetPaymentForm>;
            write(): Buffer;
        }
        class GetPaymentReceipt extends TLObject {
            __response__: Raw.payments.TypePaymentReceipt;
            peer: Raw.TypeInputPeer;
            msgId: int;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                msgId: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.payments.GetPaymentReceipt>;
            write(): Buffer;
        }
        class ValidateRequestedInfo extends TLObject {
            __response__: Raw.payments.TypeValidatedRequestedInfo;
            save?: boolean;
            invoice: Raw.TypeInputInvoice;
            info: Raw.TypePaymentRequestedInfo;
            constructor(params: {
                save?: boolean;
                invoice: Raw.TypeInputInvoice;
                info: Raw.TypePaymentRequestedInfo;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.payments.ValidateRequestedInfo>;
            write(): Buffer;
        }
        class SendPaymentForm extends TLObject {
            __response__: Raw.payments.TypePaymentResult;
            formId: long;
            invoice: Raw.TypeInputInvoice;
            requestedInfoId?: string;
            shippingOptionId?: string;
            credentials: Raw.TypeInputPaymentCredentials;
            tipAmount?: long;
            constructor(params: {
                formId: long;
                invoice: Raw.TypeInputInvoice;
                requestedInfoId?: string;
                shippingOptionId?: string;
                credentials: Raw.TypeInputPaymentCredentials;
                tipAmount?: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.payments.SendPaymentForm>;
            write(): Buffer;
        }
        class GetSavedInfo extends TLObject {
            __response__: Raw.payments.TypeSavedInfo;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.payments.GetSavedInfo>;
            write(): Buffer;
        }
        class ClearSavedInfo extends TLObject {
            __response__: Bool;
            credentials?: boolean;
            info?: boolean;
            constructor(params: {
                credentials?: boolean;
                info?: boolean;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.payments.ClearSavedInfo>;
            write(): Buffer;
        }
        class GetBankCardData extends TLObject {
            __response__: Raw.payments.TypeBankCardData;
            number: string;
            constructor(params: {
                number: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.payments.GetBankCardData>;
            write(): Buffer;
        }
        class ExportInvoice extends TLObject {
            __response__: Raw.payments.TypeExportedInvoice;
            invoiceMedia: Raw.TypeInputMedia;
            constructor(params: {
                invoiceMedia: Raw.TypeInputMedia;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.payments.ExportInvoice>;
            write(): Buffer;
        }
        class AssignAppStoreTransaction extends TLObject {
            __response__: Raw.TypeUpdates;
            receipt: bytes;
            purpose: Raw.TypeInputStorePaymentPurpose;
            constructor(params: {
                receipt: bytes;
                purpose: Raw.TypeInputStorePaymentPurpose;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.payments.AssignAppStoreTransaction>;
            write(): Buffer;
        }
        class AssignPlayMarketTransaction extends TLObject {
            __response__: Raw.TypeUpdates;
            receipt: Raw.TypeDataJSON;
            purpose: Raw.TypeInputStorePaymentPurpose;
            constructor(params: {
                receipt: Raw.TypeDataJSON;
                purpose: Raw.TypeInputStorePaymentPurpose;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.payments.AssignPlayMarketTransaction>;
            write(): Buffer;
        }
        class CanPurchasePremium extends TLObject {
            __response__: Bool;
            purpose: Raw.TypeInputStorePaymentPurpose;
            constructor(params: {
                purpose: Raw.TypeInputStorePaymentPurpose;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.payments.CanPurchasePremium>;
            write(): Buffer;
        }
        class GetPremiumGiftCodeOptions extends TLObject {
            __response__: Vector<Raw.TypePremiumGiftCodeOption>;
            boostPeer?: Raw.TypeInputPeer;
            constructor(params: {
                boostPeer?: Raw.TypeInputPeer;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.payments.GetPremiumGiftCodeOptions>;
            write(): Buffer;
        }
        class CheckGiftCode extends TLObject {
            __response__: Raw.payments.TypeCheckedGiftCode;
            slug: string;
            constructor(params: {
                slug: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.payments.CheckGiftCode>;
            write(): Buffer;
        }
        class ApplyGiftCode extends TLObject {
            __response__: Raw.TypeUpdates;
            slug: string;
            constructor(params: {
                slug: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.payments.ApplyGiftCode>;
            write(): Buffer;
        }
        class GetGiveawayInfo extends TLObject {
            __response__: Raw.payments.TypeGiveawayInfo;
            peer: Raw.TypeInputPeer;
            msgId: int;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                msgId: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.payments.GetGiveawayInfo>;
            write(): Buffer;
        }
        class LaunchPrepaidGiveaway extends TLObject {
            __response__: Raw.TypeUpdates;
            peer: Raw.TypeInputPeer;
            giveawayId: long;
            purpose: Raw.TypeInputStorePaymentPurpose;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                giveawayId: long;
                purpose: Raw.TypeInputStorePaymentPurpose;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.payments.LaunchPrepaidGiveaway>;
            write(): Buffer;
        }
        class GetStarsTopupOptions extends TLObject {
            __response__: Vector<Raw.TypeStarsTopupOption>;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.payments.GetStarsTopupOptions>;
            write(): Buffer;
        }
        class GetStarsStatus extends TLObject {
            __response__: Raw.payments.TypeStarsStatus;
            peer: Raw.TypeInputPeer;
            constructor(params: {
                peer: Raw.TypeInputPeer;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.payments.GetStarsStatus>;
            write(): Buffer;
        }
        class GetStarsTransactions extends TLObject {
            __response__: Raw.payments.TypeStarsStatus;
            inbound?: boolean;
            outbound?: boolean;
            peer: Raw.TypeInputPeer;
            offset: string;
            constructor(params: {
                inbound?: boolean;
                outbound?: boolean;
                peer: Raw.TypeInputPeer;
                offset: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.payments.GetStarsTransactions>;
            write(): Buffer;
        }
        class SendStarsForm extends TLObject {
            __response__: Raw.payments.TypePaymentResult;
            formId: long;
            invoice: Raw.TypeInputInvoice;
            constructor(params: {
                formId: long;
                invoice: Raw.TypeInputInvoice;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.payments.SendStarsForm>;
            write(): Buffer;
        }
        class RefundStarsCharge extends TLObject {
            __response__: Raw.TypeUpdates;
            userId: Raw.TypeInputUser;
            chargeId: string;
            constructor(params: {
                userId: Raw.TypeInputUser;
                chargeId: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.payments.RefundStarsCharge>;
            write(): Buffer;
        }
    }
    namespace phone {
        type TypeGroupCallStreamRtmpUrl = Raw.phone.GroupCallStreamRtmpUrl;
        type TypeGroupCallStreamChannels = Raw.phone.GroupCallStreamChannels;
        type TypeExportedGroupCallInvite = Raw.phone.ExportedGroupCallInvite;
        type TypeJoinAsPeers = Raw.phone.JoinAsPeers;
        type TypeGroupParticipants = Raw.phone.GroupParticipants;
        type TypeGroupCall = Raw.phone.GroupCall;
        type TypePhoneCall = Raw.phone.PhoneCall;
        class PhoneCall extends TLObject {
            phoneCall: Raw.TypePhoneCall;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                phoneCall: Raw.TypePhoneCall;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.phone.PhoneCall>;
            write(): Buffer;
        }
        class GroupCall extends TLObject {
            call: Raw.TypeGroupCall;
            participants: Vector<Raw.TypeGroupCallParticipant>;
            participantsNextOffset: string;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                call: Raw.TypeGroupCall;
                participants: Vector<Raw.TypeGroupCallParticipant>;
                participantsNextOffset: string;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.phone.GroupCall>;
            write(): Buffer;
        }
        class GroupParticipants extends TLObject {
            count: int;
            participants: Vector<Raw.TypeGroupCallParticipant>;
            nextOffset: string;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            version: int;
            constructor(params: {
                count: int;
                participants: Vector<Raw.TypeGroupCallParticipant>;
                nextOffset: string;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
                version: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.phone.GroupParticipants>;
            write(): Buffer;
        }
        class JoinAsPeers extends TLObject {
            peers: Vector<Raw.TypePeer>;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                peers: Vector<Raw.TypePeer>;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.phone.JoinAsPeers>;
            write(): Buffer;
        }
        class ExportedGroupCallInvite extends TLObject {
            link: string;
            constructor(params: {
                link: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.phone.ExportedGroupCallInvite>;
            write(): Buffer;
        }
        class GroupCallStreamChannels extends TLObject {
            channels: Vector<Raw.TypeGroupCallStreamChannel>;
            constructor(params: {
                channels: Vector<Raw.TypeGroupCallStreamChannel>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.phone.GroupCallStreamChannels>;
            write(): Buffer;
        }
        class GroupCallStreamRtmpUrl extends TLObject {
            url: string;
            key: string;
            constructor(params: {
                url: string;
                key: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.phone.GroupCallStreamRtmpUrl>;
            write(): Buffer;
        }
        class GetCallConfig extends TLObject {
            __response__: Raw.TypeDataJSON;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.phone.GetCallConfig>;
            write(): Buffer;
        }
        class RequestCall extends TLObject {
            __response__: Raw.phone.TypePhoneCall;
            video?: boolean;
            userId: Raw.TypeInputUser;
            randomId: int;
            gAHash: bytes;
            protocol: Raw.TypePhoneCallProtocol;
            constructor(params: {
                video?: boolean;
                userId: Raw.TypeInputUser;
                randomId: int;
                gAHash: bytes;
                protocol: Raw.TypePhoneCallProtocol;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.phone.RequestCall>;
            write(): Buffer;
        }
        class AcceptCall extends TLObject {
            __response__: Raw.phone.TypePhoneCall;
            peer: Raw.TypeInputPhoneCall;
            gB: bytes;
            protocol: Raw.TypePhoneCallProtocol;
            constructor(params: {
                peer: Raw.TypeInputPhoneCall;
                gB: bytes;
                protocol: Raw.TypePhoneCallProtocol;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.phone.AcceptCall>;
            write(): Buffer;
        }
        class ConfirmCall extends TLObject {
            __response__: Raw.phone.TypePhoneCall;
            peer: Raw.TypeInputPhoneCall;
            gA: bytes;
            keyFingerprint: long;
            protocol: Raw.TypePhoneCallProtocol;
            constructor(params: {
                peer: Raw.TypeInputPhoneCall;
                gA: bytes;
                keyFingerprint: long;
                protocol: Raw.TypePhoneCallProtocol;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.phone.ConfirmCall>;
            write(): Buffer;
        }
        class ReceivedCall extends TLObject {
            __response__: Bool;
            peer: Raw.TypeInputPhoneCall;
            constructor(params: {
                peer: Raw.TypeInputPhoneCall;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.phone.ReceivedCall>;
            write(): Buffer;
        }
        class DiscardCall extends TLObject {
            __response__: Raw.TypeUpdates;
            video?: boolean;
            peer: Raw.TypeInputPhoneCall;
            duration: int;
            reason: Raw.TypePhoneCallDiscardReason;
            connectionId: long;
            constructor(params: {
                video?: boolean;
                peer: Raw.TypeInputPhoneCall;
                duration: int;
                reason: Raw.TypePhoneCallDiscardReason;
                connectionId: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.phone.DiscardCall>;
            write(): Buffer;
        }
        class SetCallRating extends TLObject {
            __response__: Raw.TypeUpdates;
            userInitiative?: boolean;
            peer: Raw.TypeInputPhoneCall;
            rating: int;
            comment: string;
            constructor(params: {
                userInitiative?: boolean;
                peer: Raw.TypeInputPhoneCall;
                rating: int;
                comment: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.phone.SetCallRating>;
            write(): Buffer;
        }
        class SaveCallDebug extends TLObject {
            __response__: Bool;
            peer: Raw.TypeInputPhoneCall;
            debug: Raw.TypeDataJSON;
            constructor(params: {
                peer: Raw.TypeInputPhoneCall;
                debug: Raw.TypeDataJSON;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.phone.SaveCallDebug>;
            write(): Buffer;
        }
        class SendSignalingData extends TLObject {
            __response__: Bool;
            peer: Raw.TypeInputPhoneCall;
            data: bytes;
            constructor(params: {
                peer: Raw.TypeInputPhoneCall;
                data: bytes;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.phone.SendSignalingData>;
            write(): Buffer;
        }
        class CreateGroupCall extends TLObject {
            __response__: Raw.TypeUpdates;
            rtmpStream?: boolean;
            peer: Raw.TypeInputPeer;
            randomId: int;
            title?: string;
            scheduleDate?: int;
            constructor(params: {
                rtmpStream?: boolean;
                peer: Raw.TypeInputPeer;
                randomId: int;
                title?: string;
                scheduleDate?: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.phone.CreateGroupCall>;
            write(): Buffer;
        }
        class JoinGroupCall extends TLObject {
            __response__: Raw.TypeUpdates;
            muted?: boolean;
            videoStopped?: boolean;
            call: Raw.TypeInputGroupCall;
            joinAs: Raw.TypeInputPeer;
            inviteHash?: string;
            params: Raw.TypeDataJSON;
            constructor(params: {
                muted?: boolean;
                videoStopped?: boolean;
                call: Raw.TypeInputGroupCall;
                joinAs: Raw.TypeInputPeer;
                inviteHash?: string;
                params: Raw.TypeDataJSON;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.phone.JoinGroupCall>;
            write(): Buffer;
        }
        class LeaveGroupCall extends TLObject {
            __response__: Raw.TypeUpdates;
            call: Raw.TypeInputGroupCall;
            source: int;
            constructor(params: {
                call: Raw.TypeInputGroupCall;
                source: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.phone.LeaveGroupCall>;
            write(): Buffer;
        }
        class InviteToGroupCall extends TLObject {
            __response__: Raw.TypeUpdates;
            call: Raw.TypeInputGroupCall;
            users: Vector<Raw.TypeInputUser>;
            constructor(params: {
                call: Raw.TypeInputGroupCall;
                users: Vector<Raw.TypeInputUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.phone.InviteToGroupCall>;
            write(): Buffer;
        }
        class DiscardGroupCall extends TLObject {
            __response__: Raw.TypeUpdates;
            call: Raw.TypeInputGroupCall;
            constructor(params: {
                call: Raw.TypeInputGroupCall;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.phone.DiscardGroupCall>;
            write(): Buffer;
        }
        class ToggleGroupCallSettings extends TLObject {
            __response__: Raw.TypeUpdates;
            resetInviteHash?: boolean;
            call: Raw.TypeInputGroupCall;
            joinMuted?: Bool;
            constructor(params: {
                resetInviteHash?: boolean;
                call: Raw.TypeInputGroupCall;
                joinMuted?: Bool;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.phone.ToggleGroupCallSettings>;
            write(): Buffer;
        }
        class GetGroupCall extends TLObject {
            __response__: Raw.phone.TypeGroupCall;
            call: Raw.TypeInputGroupCall;
            limit: int;
            constructor(params: {
                call: Raw.TypeInputGroupCall;
                limit: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.phone.GetGroupCall>;
            write(): Buffer;
        }
        class GetGroupParticipants extends TLObject {
            __response__: Raw.phone.TypeGroupParticipants;
            call: Raw.TypeInputGroupCall;
            ids: Vector<Raw.TypeInputPeer>;
            sources: Vector<int>;
            offset: string;
            limit: int;
            constructor(params: {
                call: Raw.TypeInputGroupCall;
                ids: Vector<Raw.TypeInputPeer>;
                sources: Vector<int>;
                offset: string;
                limit: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.phone.GetGroupParticipants>;
            write(): Buffer;
        }
        class CheckGroupCall extends TLObject {
            __response__: Vector<int>;
            call: Raw.TypeInputGroupCall;
            sources: Vector<int>;
            constructor(params: {
                call: Raw.TypeInputGroupCall;
                sources: Vector<int>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.phone.CheckGroupCall>;
            write(): Buffer;
        }
        class ToggleGroupCallRecord extends TLObject {
            __response__: Raw.TypeUpdates;
            start?: boolean;
            video?: boolean;
            call: Raw.TypeInputGroupCall;
            title?: string;
            videoPortrait?: Bool;
            constructor(params: {
                start?: boolean;
                video?: boolean;
                call: Raw.TypeInputGroupCall;
                title?: string;
                videoPortrait?: Bool;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.phone.ToggleGroupCallRecord>;
            write(): Buffer;
        }
        class EditGroupCallParticipant extends TLObject {
            __response__: Raw.TypeUpdates;
            call: Raw.TypeInputGroupCall;
            participant: Raw.TypeInputPeer;
            muted?: Bool;
            volume?: int;
            raiseHand?: Bool;
            videoStopped?: Bool;
            videoPaused?: Bool;
            presentationPaused?: Bool;
            constructor(params: {
                call: Raw.TypeInputGroupCall;
                participant: Raw.TypeInputPeer;
                muted?: Bool;
                volume?: int;
                raiseHand?: Bool;
                videoStopped?: Bool;
                videoPaused?: Bool;
                presentationPaused?: Bool;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.phone.EditGroupCallParticipant>;
            write(): Buffer;
        }
        class EditGroupCallTitle extends TLObject {
            __response__: Raw.TypeUpdates;
            call: Raw.TypeInputGroupCall;
            title: string;
            constructor(params: {
                call: Raw.TypeInputGroupCall;
                title: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.phone.EditGroupCallTitle>;
            write(): Buffer;
        }
        class GetGroupCallJoinAs extends TLObject {
            __response__: Raw.phone.TypeJoinAsPeers;
            peer: Raw.TypeInputPeer;
            constructor(params: {
                peer: Raw.TypeInputPeer;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.phone.GetGroupCallJoinAs>;
            write(): Buffer;
        }
        class ExportGroupCallInvite extends TLObject {
            __response__: Raw.phone.TypeExportedGroupCallInvite;
            canSelfUnmute?: boolean;
            call: Raw.TypeInputGroupCall;
            constructor(params: {
                canSelfUnmute?: boolean;
                call: Raw.TypeInputGroupCall;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.phone.ExportGroupCallInvite>;
            write(): Buffer;
        }
        class ToggleGroupCallStartSubscription extends TLObject {
            __response__: Raw.TypeUpdates;
            call: Raw.TypeInputGroupCall;
            subscribed: Bool;
            constructor(params: {
                call: Raw.TypeInputGroupCall;
                subscribed: Bool;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.phone.ToggleGroupCallStartSubscription>;
            write(): Buffer;
        }
        class StartScheduledGroupCall extends TLObject {
            __response__: Raw.TypeUpdates;
            call: Raw.TypeInputGroupCall;
            constructor(params: {
                call: Raw.TypeInputGroupCall;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.phone.StartScheduledGroupCall>;
            write(): Buffer;
        }
        class SaveDefaultGroupCallJoinAs extends TLObject {
            __response__: Bool;
            peer: Raw.TypeInputPeer;
            joinAs: Raw.TypeInputPeer;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                joinAs: Raw.TypeInputPeer;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.phone.SaveDefaultGroupCallJoinAs>;
            write(): Buffer;
        }
        class JoinGroupCallPresentation extends TLObject {
            __response__: Raw.TypeUpdates;
            call: Raw.TypeInputGroupCall;
            params: Raw.TypeDataJSON;
            constructor(params: {
                call: Raw.TypeInputGroupCall;
                params: Raw.TypeDataJSON;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.phone.JoinGroupCallPresentation>;
            write(): Buffer;
        }
        class LeaveGroupCallPresentation extends TLObject {
            __response__: Raw.TypeUpdates;
            call: Raw.TypeInputGroupCall;
            constructor(params: {
                call: Raw.TypeInputGroupCall;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.phone.LeaveGroupCallPresentation>;
            write(): Buffer;
        }
        class GetGroupCallStreamChannels extends TLObject {
            __response__: Raw.phone.TypeGroupCallStreamChannels;
            call: Raw.TypeInputGroupCall;
            constructor(params: {
                call: Raw.TypeInputGroupCall;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.phone.GetGroupCallStreamChannels>;
            write(): Buffer;
        }
        class GetGroupCallStreamRtmpUrl extends TLObject {
            __response__: Raw.phone.TypeGroupCallStreamRtmpUrl;
            peer: Raw.TypeInputPeer;
            revoke: Bool;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                revoke: Bool;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.phone.GetGroupCallStreamRtmpUrl>;
            write(): Buffer;
        }
        class SaveCallLog extends TLObject {
            __response__: Bool;
            peer: Raw.TypeInputPhoneCall;
            file: Raw.TypeInputFile;
            constructor(params: {
                peer: Raw.TypeInputPhoneCall;
                file: Raw.TypeInputFile;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.phone.SaveCallLog>;
            write(): Buffer;
        }
    }
    namespace stats {
        type TypeBroadcastRevenueTransactions = Raw.stats.BroadcastRevenueTransactions;
        type TypeBroadcastRevenueWithdrawalUrl = Raw.stats.BroadcastRevenueWithdrawalUrl;
        type TypeBroadcastRevenueStats = Raw.stats.BroadcastRevenueStats;
        type TypeStoryStats = Raw.stats.StoryStats;
        type TypeMessageStats = Raw.stats.MessageStats;
        type TypePublicForwards = Raw.stats.PublicForwards;
        type TypeMegagroupStats = Raw.stats.MegagroupStats;
        type TypeBroadcastStats = Raw.stats.BroadcastStats;
        class BroadcastStats extends TLObject {
            period: Raw.TypeStatsDateRangeDays;
            followers: Raw.TypeStatsAbsValueAndPrev;
            viewsPerPost: Raw.TypeStatsAbsValueAndPrev;
            sharesPerPost: Raw.TypeStatsAbsValueAndPrev;
            reactionsPerPost: Raw.TypeStatsAbsValueAndPrev;
            viewsPerStory: Raw.TypeStatsAbsValueAndPrev;
            sharesPerStory: Raw.TypeStatsAbsValueAndPrev;
            reactionsPerStory: Raw.TypeStatsAbsValueAndPrev;
            enabledNotifications: Raw.TypeStatsPercentValue;
            growthGraph: Raw.TypeStatsGraph;
            followersGraph: Raw.TypeStatsGraph;
            muteGraph: Raw.TypeStatsGraph;
            topHoursGraph: Raw.TypeStatsGraph;
            interactionsGraph: Raw.TypeStatsGraph;
            ivInteractionsGraph: Raw.TypeStatsGraph;
            viewsBySourceGraph: Raw.TypeStatsGraph;
            newFollowersBySourceGraph: Raw.TypeStatsGraph;
            languagesGraph: Raw.TypeStatsGraph;
            reactionsByEmotionGraph: Raw.TypeStatsGraph;
            storyInteractionsGraph: Raw.TypeStatsGraph;
            storyReactionsByEmotionGraph: Raw.TypeStatsGraph;
            recentPostsInteractions: Vector<Raw.TypePostInteractionCounters>;
            constructor(params: {
                period: Raw.TypeStatsDateRangeDays;
                followers: Raw.TypeStatsAbsValueAndPrev;
                viewsPerPost: Raw.TypeStatsAbsValueAndPrev;
                sharesPerPost: Raw.TypeStatsAbsValueAndPrev;
                reactionsPerPost: Raw.TypeStatsAbsValueAndPrev;
                viewsPerStory: Raw.TypeStatsAbsValueAndPrev;
                sharesPerStory: Raw.TypeStatsAbsValueAndPrev;
                reactionsPerStory: Raw.TypeStatsAbsValueAndPrev;
                enabledNotifications: Raw.TypeStatsPercentValue;
                growthGraph: Raw.TypeStatsGraph;
                followersGraph: Raw.TypeStatsGraph;
                muteGraph: Raw.TypeStatsGraph;
                topHoursGraph: Raw.TypeStatsGraph;
                interactionsGraph: Raw.TypeStatsGraph;
                ivInteractionsGraph: Raw.TypeStatsGraph;
                viewsBySourceGraph: Raw.TypeStatsGraph;
                newFollowersBySourceGraph: Raw.TypeStatsGraph;
                languagesGraph: Raw.TypeStatsGraph;
                reactionsByEmotionGraph: Raw.TypeStatsGraph;
                storyInteractionsGraph: Raw.TypeStatsGraph;
                storyReactionsByEmotionGraph: Raw.TypeStatsGraph;
                recentPostsInteractions: Vector<Raw.TypePostInteractionCounters>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stats.BroadcastStats>;
            write(): Buffer;
        }
        class MegagroupStats extends TLObject {
            period: Raw.TypeStatsDateRangeDays;
            members: Raw.TypeStatsAbsValueAndPrev;
            messages: Raw.TypeStatsAbsValueAndPrev;
            viewers: Raw.TypeStatsAbsValueAndPrev;
            posters: Raw.TypeStatsAbsValueAndPrev;
            growthGraph: Raw.TypeStatsGraph;
            membersGraph: Raw.TypeStatsGraph;
            newMembersBySourceGraph: Raw.TypeStatsGraph;
            languagesGraph: Raw.TypeStatsGraph;
            messagesGraph: Raw.TypeStatsGraph;
            actionsGraph: Raw.TypeStatsGraph;
            topHoursGraph: Raw.TypeStatsGraph;
            weekdaysGraph: Raw.TypeStatsGraph;
            topPosters: Vector<Raw.TypeStatsGroupTopPoster>;
            topAdmins: Vector<Raw.TypeStatsGroupTopAdmin>;
            topInviters: Vector<Raw.TypeStatsGroupTopInviter>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                period: Raw.TypeStatsDateRangeDays;
                members: Raw.TypeStatsAbsValueAndPrev;
                messages: Raw.TypeStatsAbsValueAndPrev;
                viewers: Raw.TypeStatsAbsValueAndPrev;
                posters: Raw.TypeStatsAbsValueAndPrev;
                growthGraph: Raw.TypeStatsGraph;
                membersGraph: Raw.TypeStatsGraph;
                newMembersBySourceGraph: Raw.TypeStatsGraph;
                languagesGraph: Raw.TypeStatsGraph;
                messagesGraph: Raw.TypeStatsGraph;
                actionsGraph: Raw.TypeStatsGraph;
                topHoursGraph: Raw.TypeStatsGraph;
                weekdaysGraph: Raw.TypeStatsGraph;
                topPosters: Vector<Raw.TypeStatsGroupTopPoster>;
                topAdmins: Vector<Raw.TypeStatsGroupTopAdmin>;
                topInviters: Vector<Raw.TypeStatsGroupTopInviter>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stats.MegagroupStats>;
            write(): Buffer;
        }
        class MessageStats extends TLObject {
            viewsGraph: Raw.TypeStatsGraph;
            reactionsByEmotionGraph: Raw.TypeStatsGraph;
            constructor(params: {
                viewsGraph: Raw.TypeStatsGraph;
                reactionsByEmotionGraph: Raw.TypeStatsGraph;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stats.MessageStats>;
            write(): Buffer;
        }
        class StoryStats extends TLObject {
            viewsGraph: Raw.TypeStatsGraph;
            reactionsByEmotionGraph: Raw.TypeStatsGraph;
            constructor(params: {
                viewsGraph: Raw.TypeStatsGraph;
                reactionsByEmotionGraph: Raw.TypeStatsGraph;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stats.StoryStats>;
            write(): Buffer;
        }
        class PublicForwards extends TLObject {
            count: int;
            forwards: Vector<Raw.TypePublicForward>;
            nextOffset?: string;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                count: int;
                forwards: Vector<Raw.TypePublicForward>;
                nextOffset?: string;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stats.PublicForwards>;
            write(): Buffer;
        }
        class BroadcastRevenueStats extends TLObject {
            topHoursGraph: Raw.TypeStatsGraph;
            revenueGraph: Raw.TypeStatsGraph;
            balances: Raw.TypeBroadcastRevenueBalances;
            usdRate: double;
            constructor(params: {
                topHoursGraph: Raw.TypeStatsGraph;
                revenueGraph: Raw.TypeStatsGraph;
                balances: Raw.TypeBroadcastRevenueBalances;
                usdRate: double;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stats.BroadcastRevenueStats>;
            write(): Buffer;
        }
        class BroadcastRevenueWithdrawalUrl extends TLObject {
            url: string;
            constructor(params: {
                url: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stats.BroadcastRevenueWithdrawalUrl>;
            write(): Buffer;
        }
        class BroadcastRevenueTransactions extends TLObject {
            count: int;
            transactions: Vector<Raw.TypeBroadcastRevenueTransaction>;
            constructor(params: {
                count: int;
                transactions: Vector<Raw.TypeBroadcastRevenueTransaction>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stats.BroadcastRevenueTransactions>;
            write(): Buffer;
        }
        class GetBroadcastStats extends TLObject {
            __response__: Raw.stats.TypeBroadcastStats;
            dark?: boolean;
            channel: Raw.TypeInputChannel;
            constructor(params: {
                dark?: boolean;
                channel: Raw.TypeInputChannel;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stats.GetBroadcastStats>;
            write(): Buffer;
        }
        class LoadAsyncGraph extends TLObject {
            __response__: Raw.TypeStatsGraph;
            token: string;
            x?: long;
            constructor(params: {
                token: string;
                x?: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stats.LoadAsyncGraph>;
            write(): Buffer;
        }
        class GetMegagroupStats extends TLObject {
            __response__: Raw.stats.TypeMegagroupStats;
            dark?: boolean;
            channel: Raw.TypeInputChannel;
            constructor(params: {
                dark?: boolean;
                channel: Raw.TypeInputChannel;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stats.GetMegagroupStats>;
            write(): Buffer;
        }
        class GetMessagePublicForwards extends TLObject {
            __response__: Raw.stats.TypePublicForwards;
            channel: Raw.TypeInputChannel;
            msgId: int;
            offset: string;
            limit: int;
            constructor(params: {
                channel: Raw.TypeInputChannel;
                msgId: int;
                offset: string;
                limit: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stats.GetMessagePublicForwards>;
            write(): Buffer;
        }
        class GetMessageStats extends TLObject {
            __response__: Raw.stats.TypeMessageStats;
            dark?: boolean;
            channel: Raw.TypeInputChannel;
            msgId: int;
            constructor(params: {
                dark?: boolean;
                channel: Raw.TypeInputChannel;
                msgId: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stats.GetMessageStats>;
            write(): Buffer;
        }
        class GetStoryStats extends TLObject {
            __response__: Raw.stats.TypeStoryStats;
            dark?: boolean;
            peer: Raw.TypeInputPeer;
            id: int;
            constructor(params: {
                dark?: boolean;
                peer: Raw.TypeInputPeer;
                id: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stats.GetStoryStats>;
            write(): Buffer;
        }
        class GetStoryPublicForwards extends TLObject {
            __response__: Raw.stats.TypePublicForwards;
            peer: Raw.TypeInputPeer;
            id: int;
            offset: string;
            limit: int;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                id: int;
                offset: string;
                limit: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stats.GetStoryPublicForwards>;
            write(): Buffer;
        }
        class GetBroadcastRevenueStats extends TLObject {
            __response__: Raw.stats.TypeBroadcastRevenueStats;
            dark?: boolean;
            channel: Raw.TypeInputChannel;
            constructor(params: {
                dark?: boolean;
                channel: Raw.TypeInputChannel;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stats.GetBroadcastRevenueStats>;
            write(): Buffer;
        }
        class GetBroadcastRevenueWithdrawalUrl extends TLObject {
            __response__: Raw.stats.TypeBroadcastRevenueWithdrawalUrl;
            channel: Raw.TypeInputChannel;
            password: Raw.TypeInputCheckPasswordSRP;
            constructor(params: {
                channel: Raw.TypeInputChannel;
                password: Raw.TypeInputCheckPasswordSRP;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stats.GetBroadcastRevenueWithdrawalUrl>;
            write(): Buffer;
        }
        class GetBroadcastRevenueTransactions extends TLObject {
            __response__: Raw.stats.TypeBroadcastRevenueTransactions;
            channel: Raw.TypeInputChannel;
            offset: int;
            limit: int;
            constructor(params: {
                channel: Raw.TypeInputChannel;
                offset: int;
                limit: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stats.GetBroadcastRevenueTransactions>;
            write(): Buffer;
        }
    }
    namespace stickers {
        type TypeSuggestedShortName = Raw.stickers.SuggestedShortName;
        class SuggestedShortName extends TLObject {
            shortName: string;
            constructor(params: {
                shortName: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stickers.SuggestedShortName>;
            write(): Buffer;
        }
        class CreateStickerSet extends TLObject {
            __response__: Raw.messages.TypeStickerSet;
            masks?: boolean;
            emojis?: boolean;
            textColor?: boolean;
            userId: Raw.TypeInputUser;
            title: string;
            shortName: string;
            thumb?: Raw.TypeInputDocument;
            stickers: Vector<Raw.TypeInputStickerSetItem>;
            software?: string;
            constructor(params: {
                masks?: boolean;
                emojis?: boolean;
                textColor?: boolean;
                userId: Raw.TypeInputUser;
                title: string;
                shortName: string;
                thumb?: Raw.TypeInputDocument;
                stickers: Vector<Raw.TypeInputStickerSetItem>;
                software?: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stickers.CreateStickerSet>;
            write(): Buffer;
        }
        class RemoveStickerFromSet extends TLObject {
            __response__: Raw.messages.TypeStickerSet;
            sticker: Raw.TypeInputDocument;
            constructor(params: {
                sticker: Raw.TypeInputDocument;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stickers.RemoveStickerFromSet>;
            write(): Buffer;
        }
        class ChangeStickerPosition extends TLObject {
            __response__: Raw.messages.TypeStickerSet;
            sticker: Raw.TypeInputDocument;
            position: int;
            constructor(params: {
                sticker: Raw.TypeInputDocument;
                position: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stickers.ChangeStickerPosition>;
            write(): Buffer;
        }
        class AddStickerToSet extends TLObject {
            __response__: Raw.messages.TypeStickerSet;
            stickerset: Raw.TypeInputStickerSet;
            sticker: Raw.TypeInputStickerSetItem;
            constructor(params: {
                stickerset: Raw.TypeInputStickerSet;
                sticker: Raw.TypeInputStickerSetItem;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stickers.AddStickerToSet>;
            write(): Buffer;
        }
        class SetStickerSetThumb extends TLObject {
            __response__: Raw.messages.TypeStickerSet;
            stickerset: Raw.TypeInputStickerSet;
            thumb?: Raw.TypeInputDocument;
            thumbDocumentId?: long;
            constructor(params: {
                stickerset: Raw.TypeInputStickerSet;
                thumb?: Raw.TypeInputDocument;
                thumbDocumentId?: long;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stickers.SetStickerSetThumb>;
            write(): Buffer;
        }
        class CheckShortName extends TLObject {
            __response__: Bool;
            shortName: string;
            constructor(params: {
                shortName: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stickers.CheckShortName>;
            write(): Buffer;
        }
        class SuggestShortName extends TLObject {
            __response__: Raw.stickers.TypeSuggestedShortName;
            title: string;
            constructor(params: {
                title: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stickers.SuggestShortName>;
            write(): Buffer;
        }
        class ChangeSticker extends TLObject {
            __response__: Raw.messages.TypeStickerSet;
            sticker: Raw.TypeInputDocument;
            emoji?: string;
            maskCoords?: Raw.TypeMaskCoords;
            keywords?: string;
            constructor(params: {
                sticker: Raw.TypeInputDocument;
                emoji?: string;
                maskCoords?: Raw.TypeMaskCoords;
                keywords?: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stickers.ChangeSticker>;
            write(): Buffer;
        }
        class RenameStickerSet extends TLObject {
            __response__: Raw.messages.TypeStickerSet;
            stickerset: Raw.TypeInputStickerSet;
            title: string;
            constructor(params: {
                stickerset: Raw.TypeInputStickerSet;
                title: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stickers.RenameStickerSet>;
            write(): Buffer;
        }
        class DeleteStickerSet extends TLObject {
            __response__: Bool;
            stickerset: Raw.TypeInputStickerSet;
            constructor(params: {
                stickerset: Raw.TypeInputStickerSet;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stickers.DeleteStickerSet>;
            write(): Buffer;
        }
        class ReplaceSticker extends TLObject {
            __response__: Raw.messages.TypeStickerSet;
            sticker: Raw.TypeInputDocument;
            newSticker: Raw.TypeInputStickerSetItem;
            constructor(params: {
                sticker: Raw.TypeInputDocument;
                newSticker: Raw.TypeInputStickerSetItem;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stickers.ReplaceSticker>;
            write(): Buffer;
        }
    }
    namespace users {
        type TypeUserFull = Raw.users.UserFull;
        class UserFull extends TLObject {
            fullUser: Raw.TypeUserFull;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                fullUser: Raw.TypeUserFull;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.users.UserFull>;
            write(): Buffer;
        }
        class GetUsers extends TLObject {
            __response__: Vector<Raw.TypeUser>;
            id: Vector<Raw.TypeInputUser>;
            constructor(params: {
                id: Vector<Raw.TypeInputUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.users.GetUsers>;
            write(): Buffer;
        }
        class GetFullUser extends TLObject {
            __response__: Raw.users.TypeUserFull;
            id: Raw.TypeInputUser;
            constructor(params: {
                id: Raw.TypeInputUser;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.users.GetFullUser>;
            write(): Buffer;
        }
        class SetSecureValueErrors extends TLObject {
            __response__: Bool;
            id: Raw.TypeInputUser;
            errors: Vector<Raw.TypeSecureValueError>;
            constructor(params: {
                id: Raw.TypeInputUser;
                errors: Vector<Raw.TypeSecureValueError>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.users.SetSecureValueErrors>;
            write(): Buffer;
        }
        class GetIsPremiumRequiredToContact extends TLObject {
            __response__: Vector<Bool>;
            id: Vector<Raw.TypeInputUser>;
            constructor(params: {
                id: Vector<Raw.TypeInputUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.users.GetIsPremiumRequiredToContact>;
            write(): Buffer;
        }
    }
    namespace chatlists {
        type TypeChatlistUpdates = Raw.chatlists.ChatlistUpdates;
        type TypeChatlistInvite = Raw.chatlists.ChatlistInviteAlready | Raw.chatlists.ChatlistInvite;
        type TypeExportedInvites = Raw.chatlists.ExportedInvites;
        type TypeExportedChatlistInvite = Raw.chatlists.ExportedChatlistInvite;
        class ExportedChatlistInvite extends TLObject {
            filter: Raw.TypeDialogFilter;
            invite: Raw.TypeExportedChatlistInvite;
            constructor(params: {
                filter: Raw.TypeDialogFilter;
                invite: Raw.TypeExportedChatlistInvite;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.chatlists.ExportedChatlistInvite>;
            write(): Buffer;
        }
        class ExportedInvites extends TLObject {
            invites: Vector<Raw.TypeExportedChatlistInvite>;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                invites: Vector<Raw.TypeExportedChatlistInvite>;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.chatlists.ExportedInvites>;
            write(): Buffer;
        }
        class ChatlistInviteAlready extends TLObject {
            filterId: int;
            missingPeers: Vector<Raw.TypePeer>;
            alreadyPeers: Vector<Raw.TypePeer>;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                filterId: int;
                missingPeers: Vector<Raw.TypePeer>;
                alreadyPeers: Vector<Raw.TypePeer>;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.chatlists.ChatlistInviteAlready>;
            write(): Buffer;
        }
        class ChatlistInvite extends TLObject {
            title: string;
            emoticon?: string;
            peers: Vector<Raw.TypePeer>;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                title: string;
                emoticon?: string;
                peers: Vector<Raw.TypePeer>;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.chatlists.ChatlistInvite>;
            write(): Buffer;
        }
        class ChatlistUpdates extends TLObject {
            missingPeers: Vector<Raw.TypePeer>;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                missingPeers: Vector<Raw.TypePeer>;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.chatlists.ChatlistUpdates>;
            write(): Buffer;
        }
        class ExportChatlistInvite extends TLObject {
            __response__: Raw.chatlists.TypeExportedChatlistInvite;
            chatlist: Raw.TypeInputChatlist;
            title: string;
            peers: Vector<Raw.TypeInputPeer>;
            constructor(params: {
                chatlist: Raw.TypeInputChatlist;
                title: string;
                peers: Vector<Raw.TypeInputPeer>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.chatlists.ExportChatlistInvite>;
            write(): Buffer;
        }
        class DeleteExportedInvite extends TLObject {
            __response__: Bool;
            chatlist: Raw.TypeInputChatlist;
            slug: string;
            constructor(params: {
                chatlist: Raw.TypeInputChatlist;
                slug: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.chatlists.DeleteExportedInvite>;
            write(): Buffer;
        }
        class EditExportedInvite extends TLObject {
            __response__: Raw.TypeExportedChatlistInvite;
            chatlist: Raw.TypeInputChatlist;
            slug: string;
            title?: string;
            peers?: Vector<Raw.TypeInputPeer>;
            constructor(params: {
                chatlist: Raw.TypeInputChatlist;
                slug: string;
                title?: string;
                peers?: Vector<Raw.TypeInputPeer>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.chatlists.EditExportedInvite>;
            write(): Buffer;
        }
        class GetExportedInvites extends TLObject {
            __response__: Raw.chatlists.TypeExportedInvites;
            chatlist: Raw.TypeInputChatlist;
            constructor(params: {
                chatlist: Raw.TypeInputChatlist;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.chatlists.GetExportedInvites>;
            write(): Buffer;
        }
        class CheckChatlistInvite extends TLObject {
            __response__: Raw.chatlists.TypeChatlistInvite;
            slug: string;
            constructor(params: {
                slug: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.chatlists.CheckChatlistInvite>;
            write(): Buffer;
        }
        class JoinChatlistInvite extends TLObject {
            __response__: Raw.TypeUpdates;
            slug: string;
            peers: Vector<Raw.TypeInputPeer>;
            constructor(params: {
                slug: string;
                peers: Vector<Raw.TypeInputPeer>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.chatlists.JoinChatlistInvite>;
            write(): Buffer;
        }
        class GetChatlistUpdates extends TLObject {
            __response__: Raw.chatlists.TypeChatlistUpdates;
            chatlist: Raw.TypeInputChatlist;
            constructor(params: {
                chatlist: Raw.TypeInputChatlist;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.chatlists.GetChatlistUpdates>;
            write(): Buffer;
        }
        class JoinChatlistUpdates extends TLObject {
            __response__: Raw.TypeUpdates;
            chatlist: Raw.TypeInputChatlist;
            peers: Vector<Raw.TypeInputPeer>;
            constructor(params: {
                chatlist: Raw.TypeInputChatlist;
                peers: Vector<Raw.TypeInputPeer>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.chatlists.JoinChatlistUpdates>;
            write(): Buffer;
        }
        class HideChatlistUpdates extends TLObject {
            __response__: Bool;
            chatlist: Raw.TypeInputChatlist;
            constructor(params: {
                chatlist: Raw.TypeInputChatlist;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.chatlists.HideChatlistUpdates>;
            write(): Buffer;
        }
        class GetLeaveChatlistSuggestions extends TLObject {
            __response__: Vector<Raw.TypePeer>;
            chatlist: Raw.TypeInputChatlist;
            constructor(params: {
                chatlist: Raw.TypeInputChatlist;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.chatlists.GetLeaveChatlistSuggestions>;
            write(): Buffer;
        }
        class LeaveChatlist extends TLObject {
            __response__: Raw.TypeUpdates;
            chatlist: Raw.TypeInputChatlist;
            peers: Vector<Raw.TypeInputPeer>;
            constructor(params: {
                chatlist: Raw.TypeInputChatlist;
                peers: Vector<Raw.TypeInputPeer>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.chatlists.LeaveChatlist>;
            write(): Buffer;
        }
    }
    namespace bots {
        type TypeBotInfo = Raw.bots.BotInfo;
        class BotInfo extends TLObject {
            name: string;
            about: string;
            description: string;
            constructor(params: {
                name: string;
                about: string;
                description: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.bots.BotInfo>;
            write(): Buffer;
        }
        class SendCustomRequest extends TLObject {
            __response__: Raw.TypeDataJSON;
            customMethod: string;
            params: Raw.TypeDataJSON;
            constructor(params: {
                customMethod: string;
                params: Raw.TypeDataJSON;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.bots.SendCustomRequest>;
            write(): Buffer;
        }
        class AnswerWebhookJSONQuery extends TLObject {
            __response__: Bool;
            queryId: long;
            data: Raw.TypeDataJSON;
            constructor(params: {
                queryId: long;
                data: Raw.TypeDataJSON;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.bots.AnswerWebhookJSONQuery>;
            write(): Buffer;
        }
        class SetBotCommands extends TLObject {
            __response__: Bool;
            scope: Raw.TypeBotCommandScope;
            langCode: string;
            commands: Vector<Raw.TypeBotCommand>;
            constructor(params: {
                scope: Raw.TypeBotCommandScope;
                langCode: string;
                commands: Vector<Raw.TypeBotCommand>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.bots.SetBotCommands>;
            write(): Buffer;
        }
        class ResetBotCommands extends TLObject {
            __response__: Bool;
            scope: Raw.TypeBotCommandScope;
            langCode: string;
            constructor(params: {
                scope: Raw.TypeBotCommandScope;
                langCode: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.bots.ResetBotCommands>;
            write(): Buffer;
        }
        class GetBotCommands extends TLObject {
            __response__: Vector<Raw.TypeBotCommand>;
            scope: Raw.TypeBotCommandScope;
            langCode: string;
            constructor(params: {
                scope: Raw.TypeBotCommandScope;
                langCode: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.bots.GetBotCommands>;
            write(): Buffer;
        }
        class SetBotMenuButton extends TLObject {
            __response__: Bool;
            userId: Raw.TypeInputUser;
            button: Raw.TypeBotMenuButton;
            constructor(params: {
                userId: Raw.TypeInputUser;
                button: Raw.TypeBotMenuButton;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.bots.SetBotMenuButton>;
            write(): Buffer;
        }
        class GetBotMenuButton extends TLObject {
            __response__: Raw.TypeBotMenuButton;
            userId: Raw.TypeInputUser;
            constructor(params: {
                userId: Raw.TypeInputUser;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.bots.GetBotMenuButton>;
            write(): Buffer;
        }
        class SetBotBroadcastDefaultAdminRights extends TLObject {
            __response__: Bool;
            adminRights: Raw.TypeChatAdminRights;
            constructor(params: {
                adminRights: Raw.TypeChatAdminRights;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.bots.SetBotBroadcastDefaultAdminRights>;
            write(): Buffer;
        }
        class SetBotGroupDefaultAdminRights extends TLObject {
            __response__: Bool;
            adminRights: Raw.TypeChatAdminRights;
            constructor(params: {
                adminRights: Raw.TypeChatAdminRights;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.bots.SetBotGroupDefaultAdminRights>;
            write(): Buffer;
        }
        class SetBotInfo extends TLObject {
            __response__: Bool;
            bot?: Raw.TypeInputUser;
            langCode: string;
            name?: string;
            about?: string;
            description?: string;
            constructor(params: {
                bot?: Raw.TypeInputUser;
                langCode: string;
                name?: string;
                about?: string;
                description?: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.bots.SetBotInfo>;
            write(): Buffer;
        }
        class GetBotInfo extends TLObject {
            __response__: Raw.bots.TypeBotInfo;
            bot?: Raw.TypeInputUser;
            langCode: string;
            constructor(params: {
                bot?: Raw.TypeInputUser;
                langCode: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.bots.GetBotInfo>;
            write(): Buffer;
        }
        class ReorderUsernames extends TLObject {
            __response__: Bool;
            bot: Raw.TypeInputUser;
            order: Vector<string>;
            constructor(params: {
                bot: Raw.TypeInputUser;
                order: Vector<string>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.bots.ReorderUsernames>;
            write(): Buffer;
        }
        class ToggleUsername extends TLObject {
            __response__: Bool;
            bot: Raw.TypeInputUser;
            username: string;
            active: Bool;
            constructor(params: {
                bot: Raw.TypeInputUser;
                username: string;
                active: Bool;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.bots.ToggleUsername>;
            write(): Buffer;
        }
        class CanSendMessage extends TLObject {
            __response__: Bool;
            bot: Raw.TypeInputUser;
            constructor(params: {
                bot: Raw.TypeInputUser;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.bots.CanSendMessage>;
            write(): Buffer;
        }
        class AllowSendMessage extends TLObject {
            __response__: Raw.TypeUpdates;
            bot: Raw.TypeInputUser;
            constructor(params: {
                bot: Raw.TypeInputUser;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.bots.AllowSendMessage>;
            write(): Buffer;
        }
        class InvokeWebViewCustomMethod extends TLObject {
            __response__: Raw.TypeDataJSON;
            bot: Raw.TypeInputUser;
            customMethod: string;
            params: Raw.TypeDataJSON;
            constructor(params: {
                bot: Raw.TypeInputUser;
                customMethod: string;
                params: Raw.TypeDataJSON;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.bots.InvokeWebViewCustomMethod>;
            write(): Buffer;
        }
    }
    namespace stories {
        type TypeStoryReactionsList = Raw.stories.StoryReactionsList;
        type TypePeerStories = Raw.stories.PeerStories;
        type TypeStoryViews = Raw.stories.StoryViews;
        type TypeStoryViewsList = Raw.stories.StoryViewsList;
        type TypeStories = Raw.stories.Stories;
        type TypeAllStories = Raw.stories.AllStoriesNotModified | Raw.stories.AllStories;
        class AllStoriesNotModified extends TLObject {
            state: string;
            stealthMode: Raw.TypeStoriesStealthMode;
            constructor(params: {
                state: string;
                stealthMode: Raw.TypeStoriesStealthMode;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stories.AllStoriesNotModified>;
            write(): Buffer;
        }
        class AllStories extends TLObject {
            hasMore?: boolean;
            count: int;
            state: string;
            peerStories: Vector<Raw.TypePeerStories>;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            stealthMode: Raw.TypeStoriesStealthMode;
            constructor(params: {
                hasMore?: boolean;
                count: int;
                state: string;
                peerStories: Vector<Raw.TypePeerStories>;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
                stealthMode: Raw.TypeStoriesStealthMode;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stories.AllStories>;
            write(): Buffer;
        }
        class Stories extends TLObject {
            count: int;
            stories: Vector<Raw.TypeStoryItem>;
            pinnedToTop?: Vector<int>;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                count: int;
                stories: Vector<Raw.TypeStoryItem>;
                pinnedToTop?: Vector<int>;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stories.Stories>;
            write(): Buffer;
        }
        class StoryViewsList extends TLObject {
            count: int;
            viewsCount: int;
            forwardsCount: int;
            reactionsCount: int;
            views: Vector<Raw.TypeStoryView>;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            nextOffset?: string;
            constructor(params: {
                count: int;
                viewsCount: int;
                forwardsCount: int;
                reactionsCount: int;
                views: Vector<Raw.TypeStoryView>;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
                nextOffset?: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stories.StoryViewsList>;
            write(): Buffer;
        }
        class StoryViews extends TLObject {
            views: Vector<Raw.TypeStoryViews>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                views: Vector<Raw.TypeStoryViews>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stories.StoryViews>;
            write(): Buffer;
        }
        class PeerStories extends TLObject {
            stories: Raw.TypePeerStories;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                stories: Raw.TypePeerStories;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stories.PeerStories>;
            write(): Buffer;
        }
        class StoryReactionsList extends TLObject {
            count: int;
            reactions: Vector<Raw.TypeStoryReaction>;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            nextOffset?: string;
            constructor(params: {
                count: int;
                reactions: Vector<Raw.TypeStoryReaction>;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
                nextOffset?: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stories.StoryReactionsList>;
            write(): Buffer;
        }
        class CanSendStory extends TLObject {
            __response__: Bool;
            peer: Raw.TypeInputPeer;
            constructor(params: {
                peer: Raw.TypeInputPeer;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stories.CanSendStory>;
            write(): Buffer;
        }
        class SendStory extends TLObject {
            __response__: Raw.TypeUpdates;
            pinned?: boolean;
            noforwards?: boolean;
            fwdModified?: boolean;
            peer: Raw.TypeInputPeer;
            media: Raw.TypeInputMedia;
            mediaAreas?: Vector<Raw.TypeMediaArea>;
            caption?: string;
            entities?: Vector<Raw.TypeMessageEntity>;
            privacyRules: Vector<Raw.TypeInputPrivacyRule>;
            randomId: long;
            period?: int;
            fwdFromId?: Raw.TypeInputPeer;
            fwdFromStory?: int;
            constructor(params: {
                pinned?: boolean;
                noforwards?: boolean;
                fwdModified?: boolean;
                peer: Raw.TypeInputPeer;
                media: Raw.TypeInputMedia;
                mediaAreas?: Vector<Raw.TypeMediaArea>;
                caption?: string;
                entities?: Vector<Raw.TypeMessageEntity>;
                privacyRules: Vector<Raw.TypeInputPrivacyRule>;
                randomId: long;
                period?: int;
                fwdFromId?: Raw.TypeInputPeer;
                fwdFromStory?: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stories.SendStory>;
            write(): Buffer;
        }
        class EditStory extends TLObject {
            __response__: Raw.TypeUpdates;
            peer: Raw.TypeInputPeer;
            id: int;
            media?: Raw.TypeInputMedia;
            mediaAreas?: Vector<Raw.TypeMediaArea>;
            caption?: string;
            entities?: Vector<Raw.TypeMessageEntity>;
            privacyRules?: Vector<Raw.TypeInputPrivacyRule>;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                id: int;
                media?: Raw.TypeInputMedia;
                mediaAreas?: Vector<Raw.TypeMediaArea>;
                caption?: string;
                entities?: Vector<Raw.TypeMessageEntity>;
                privacyRules?: Vector<Raw.TypeInputPrivacyRule>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stories.EditStory>;
            write(): Buffer;
        }
        class DeleteStories extends TLObject {
            __response__: Vector<int>;
            peer: Raw.TypeInputPeer;
            id: Vector<int>;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                id: Vector<int>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stories.DeleteStories>;
            write(): Buffer;
        }
        class TogglePinned extends TLObject {
            __response__: Vector<int>;
            peer: Raw.TypeInputPeer;
            id: Vector<int>;
            pinned: Bool;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                id: Vector<int>;
                pinned: Bool;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stories.TogglePinned>;
            write(): Buffer;
        }
        class GetAllStories extends TLObject {
            __response__: Raw.stories.TypeAllStories;
            next?: boolean;
            hidden?: boolean;
            state?: string;
            constructor(params: {
                next?: boolean;
                hidden?: boolean;
                state?: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stories.GetAllStories>;
            write(): Buffer;
        }
        class GetPinnedStories extends TLObject {
            __response__: Raw.stories.TypeStories;
            peer: Raw.TypeInputPeer;
            offsetId: int;
            limit: int;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                offsetId: int;
                limit: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stories.GetPinnedStories>;
            write(): Buffer;
        }
        class GetStoriesArchive extends TLObject {
            __response__: Raw.stories.TypeStories;
            peer: Raw.TypeInputPeer;
            offsetId: int;
            limit: int;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                offsetId: int;
                limit: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stories.GetStoriesArchive>;
            write(): Buffer;
        }
        class GetStoriesByID extends TLObject {
            __response__: Raw.stories.TypeStories;
            peer: Raw.TypeInputPeer;
            id: Vector<int>;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                id: Vector<int>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stories.GetStoriesByID>;
            write(): Buffer;
        }
        class ToggleAllStoriesHidden extends TLObject {
            __response__: Bool;
            hidden: Bool;
            constructor(params: {
                hidden: Bool;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stories.ToggleAllStoriesHidden>;
            write(): Buffer;
        }
        class ReadStories extends TLObject {
            __response__: Vector<int>;
            peer: Raw.TypeInputPeer;
            maxId: int;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                maxId: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stories.ReadStories>;
            write(): Buffer;
        }
        class IncrementStoryViews extends TLObject {
            __response__: Bool;
            peer: Raw.TypeInputPeer;
            id: Vector<int>;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                id: Vector<int>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stories.IncrementStoryViews>;
            write(): Buffer;
        }
        class GetStoryViewsList extends TLObject {
            __response__: Raw.stories.TypeStoryViewsList;
            justContacts?: boolean;
            reactionsFirst?: boolean;
            forwardsFirst?: boolean;
            peer: Raw.TypeInputPeer;
            q?: string;
            id: int;
            offset: string;
            limit: int;
            constructor(params: {
                justContacts?: boolean;
                reactionsFirst?: boolean;
                forwardsFirst?: boolean;
                peer: Raw.TypeInputPeer;
                q?: string;
                id: int;
                offset: string;
                limit: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stories.GetStoryViewsList>;
            write(): Buffer;
        }
        class GetStoriesViews extends TLObject {
            __response__: Raw.stories.TypeStoryViews;
            peer: Raw.TypeInputPeer;
            id: Vector<int>;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                id: Vector<int>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stories.GetStoriesViews>;
            write(): Buffer;
        }
        class ExportStoryLink extends TLObject {
            __response__: Raw.TypeExportedStoryLink;
            peer: Raw.TypeInputPeer;
            id: int;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                id: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stories.ExportStoryLink>;
            write(): Buffer;
        }
        class Report extends TLObject {
            __response__: Bool;
            peer: Raw.TypeInputPeer;
            id: Vector<int>;
            reason: Raw.TypeReportReason;
            message: string;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                id: Vector<int>;
                reason: Raw.TypeReportReason;
                message: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stories.Report>;
            write(): Buffer;
        }
        class ActivateStealthMode extends TLObject {
            __response__: Raw.TypeUpdates;
            past?: boolean;
            future?: boolean;
            constructor(params: {
                past?: boolean;
                future?: boolean;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stories.ActivateStealthMode>;
            write(): Buffer;
        }
        class SendReaction extends TLObject {
            __response__: Raw.TypeUpdates;
            addToRecent?: boolean;
            peer: Raw.TypeInputPeer;
            storyId: int;
            reaction: Raw.TypeReaction;
            constructor(params: {
                addToRecent?: boolean;
                peer: Raw.TypeInputPeer;
                storyId: int;
                reaction: Raw.TypeReaction;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stories.SendReaction>;
            write(): Buffer;
        }
        class GetPeerStories extends TLObject {
            __response__: Raw.stories.TypePeerStories;
            peer: Raw.TypeInputPeer;
            constructor(params: {
                peer: Raw.TypeInputPeer;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stories.GetPeerStories>;
            write(): Buffer;
        }
        class GetAllReadPeerStories extends TLObject {
            __response__: Raw.TypeUpdates;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stories.GetAllReadPeerStories>;
            write(): Buffer;
        }
        class GetPeerMaxIDs extends TLObject {
            __response__: Vector<int>;
            id: Vector<Raw.TypeInputPeer>;
            constructor(params: {
                id: Vector<Raw.TypeInputPeer>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stories.GetPeerMaxIDs>;
            write(): Buffer;
        }
        class GetChatsToSend extends TLObject {
            __response__: Raw.messages.TypeChats;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stories.GetChatsToSend>;
            write(): Buffer;
        }
        class TogglePeerStoriesHidden extends TLObject {
            __response__: Bool;
            peer: Raw.TypeInputPeer;
            hidden: Bool;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                hidden: Bool;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stories.TogglePeerStoriesHidden>;
            write(): Buffer;
        }
        class GetStoryReactionsList extends TLObject {
            __response__: Raw.stories.TypeStoryReactionsList;
            forwardsFirst?: boolean;
            peer: Raw.TypeInputPeer;
            id: int;
            reaction?: Raw.TypeReaction;
            offset?: string;
            limit: int;
            constructor(params: {
                forwardsFirst?: boolean;
                peer: Raw.TypeInputPeer;
                id: int;
                reaction?: Raw.TypeReaction;
                offset?: string;
                limit: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stories.GetStoryReactionsList>;
            write(): Buffer;
        }
        class TogglePinnedToTop extends TLObject {
            __response__: Bool;
            peer: Raw.TypeInputPeer;
            id: Vector<int>;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                id: Vector<int>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.stories.TogglePinnedToTop>;
            write(): Buffer;
        }
    }
    namespace premium {
        type TypeBoostsStatus = Raw.premium.BoostsStatus;
        type TypeMyBoosts = Raw.premium.MyBoosts;
        type TypeBoostsList = Raw.premium.BoostsList;
        class BoostsList extends TLObject {
            count: int;
            boosts: Vector<Raw.TypeBoost>;
            nextOffset?: string;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                count: int;
                boosts: Vector<Raw.TypeBoost>;
                nextOffset?: string;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.premium.BoostsList>;
            write(): Buffer;
        }
        class MyBoosts extends TLObject {
            myBoosts: Vector<Raw.TypeMyBoost>;
            chats: Vector<Raw.TypeChat>;
            users: Vector<Raw.TypeUser>;
            constructor(params: {
                myBoosts: Vector<Raw.TypeMyBoost>;
                chats: Vector<Raw.TypeChat>;
                users: Vector<Raw.TypeUser>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.premium.MyBoosts>;
            write(): Buffer;
        }
        class BoostsStatus extends TLObject {
            myBoost?: boolean;
            level: int;
            currentLevelBoosts: int;
            boosts: int;
            giftBoosts?: int;
            nextLevelBoosts?: int;
            premiumAudience?: Raw.TypeStatsPercentValue;
            boostUrl: string;
            prepaidGiveaways?: Vector<Raw.TypePrepaidGiveaway>;
            myBoostSlots?: Vector<int>;
            constructor(params: {
                myBoost?: boolean;
                level: int;
                currentLevelBoosts: int;
                boosts: int;
                giftBoosts?: int;
                nextLevelBoosts?: int;
                premiumAudience?: Raw.TypeStatsPercentValue;
                boostUrl: string;
                prepaidGiveaways?: Vector<Raw.TypePrepaidGiveaway>;
                myBoostSlots?: Vector<int>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.premium.BoostsStatus>;
            write(): Buffer;
        }
        class GetBoostsList extends TLObject {
            __response__: Raw.premium.TypeBoostsList;
            gifts?: boolean;
            peer: Raw.TypeInputPeer;
            offset: string;
            limit: int;
            constructor(params: {
                gifts?: boolean;
                peer: Raw.TypeInputPeer;
                offset: string;
                limit: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.premium.GetBoostsList>;
            write(): Buffer;
        }
        class GetMyBoosts extends TLObject {
            __response__: Raw.premium.TypeMyBoosts;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.premium.GetMyBoosts>;
            write(): Buffer;
        }
        class ApplyBoost extends TLObject {
            __response__: Raw.premium.TypeMyBoosts;
            slots?: Vector<int>;
            peer: Raw.TypeInputPeer;
            constructor(params: {
                slots?: Vector<int>;
                peer: Raw.TypeInputPeer;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.premium.ApplyBoost>;
            write(): Buffer;
        }
        class GetBoostsStatus extends TLObject {
            __response__: Raw.premium.TypeBoostsStatus;
            peer: Raw.TypeInputPeer;
            constructor(params: {
                peer: Raw.TypeInputPeer;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.premium.GetBoostsStatus>;
            write(): Buffer;
        }
        class GetUserBoosts extends TLObject {
            __response__: Raw.premium.TypeBoostsList;
            peer: Raw.TypeInputPeer;
            userId: Raw.TypeInputUser;
            constructor(params: {
                peer: Raw.TypeInputPeer;
                userId: Raw.TypeInputUser;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.premium.GetUserBoosts>;
            write(): Buffer;
        }
    }
    namespace smsjobs {
        type TypeStatus = Raw.smsjobs.Status;
        type TypeEligibilityToJoin = Raw.smsjobs.EligibleToJoin;
        class EligibleToJoin extends TLObject {
            termsUrl: string;
            monthlySentSms: int;
            constructor(params: {
                termsUrl: string;
                monthlySentSms: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.smsjobs.EligibleToJoin>;
            write(): Buffer;
        }
        class Status extends TLObject {
            allowInternational?: boolean;
            recentSent: int;
            recentSince: int;
            recentRemains: int;
            totalSent: int;
            totalSince: int;
            lastGiftSlug?: string;
            termsUrl: string;
            constructor(params: {
                allowInternational?: boolean;
                recentSent: int;
                recentSince: int;
                recentRemains: int;
                totalSent: int;
                totalSince: int;
                lastGiftSlug?: string;
                termsUrl: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.smsjobs.Status>;
            write(): Buffer;
        }
        class IsEligibleToJoin extends TLObject {
            __response__: Raw.smsjobs.TypeEligibilityToJoin;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.smsjobs.IsEligibleToJoin>;
            write(): Buffer;
        }
        class Join extends TLObject {
            __response__: Bool;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.smsjobs.Join>;
            write(): Buffer;
        }
        class Leave extends TLObject {
            __response__: Bool;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.smsjobs.Leave>;
            write(): Buffer;
        }
        class UpdateSettings extends TLObject {
            __response__: Bool;
            allowInternational?: boolean;
            constructor(params: {
                allowInternational?: boolean;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.smsjobs.UpdateSettings>;
            write(): Buffer;
        }
        class GetStatus extends TLObject {
            __response__: Raw.smsjobs.TypeStatus;
            constructor();
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.smsjobs.GetStatus>;
            write(): Buffer;
        }
        class GetSmsJob extends TLObject {
            __response__: Raw.TypeSmsJob;
            jobId: string;
            constructor(params: {
                jobId: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.smsjobs.GetSmsJob>;
            write(): Buffer;
        }
        class FinishJob extends TLObject {
            __response__: Bool;
            jobId: string;
            error?: string;
            constructor(params: {
                jobId: string;
                error?: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.smsjobs.FinishJob>;
            write(): Buffer;
        }
    }
    namespace fragment {
        type TypeCollectibleInfo = Raw.fragment.CollectibleInfo;
        class CollectibleInfo extends TLObject {
            purchaseDate: int;
            currency: string;
            amount: long;
            cryptoCurrency: string;
            cryptoAmount: long;
            url: string;
            constructor(params: {
                purchaseDate: int;
                currency: string;
                amount: long;
                cryptoCurrency: string;
                cryptoAmount: long;
                url: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.fragment.CollectibleInfo>;
            write(): Buffer;
        }
        class GetCollectibleInfo extends TLObject {
            __response__: Raw.fragment.TypeCollectibleInfo;
            collectible: Raw.TypeInputCollectible;
            constructor(params: {
                collectible: Raw.TypeInputCollectible;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.fragment.GetCollectibleInfo>;
            write(): Buffer;
        }
    }
    namespace langpack {
        class GetLangPack extends TLObject {
            __response__: Raw.TypeLangPackDifference;
            langPack: string;
            langCode: string;
            constructor(params: {
                langPack: string;
                langCode: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.langpack.GetLangPack>;
            write(): Buffer;
        }
        class GetStrings extends TLObject {
            __response__: Vector<Raw.TypeLangPackString>;
            langPack: string;
            langCode: string;
            keys: Vector<string>;
            constructor(params: {
                langPack: string;
                langCode: string;
                keys: Vector<string>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.langpack.GetStrings>;
            write(): Buffer;
        }
        class GetDifference extends TLObject {
            __response__: Raw.TypeLangPackDifference;
            langPack: string;
            langCode: string;
            fromVersion: int;
            constructor(params: {
                langPack: string;
                langCode: string;
                fromVersion: int;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.langpack.GetDifference>;
            write(): Buffer;
        }
        class GetLanguages extends TLObject {
            __response__: Vector<Raw.TypeLangPackLanguage>;
            langPack: string;
            constructor(params: {
                langPack: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.langpack.GetLanguages>;
            write(): Buffer;
        }
        class GetLanguage extends TLObject {
            __response__: Raw.TypeLangPackLanguage;
            langPack: string;
            langCode: string;
            constructor(params: {
                langPack: string;
                langCode: string;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.langpack.GetLanguage>;
            write(): Buffer;
        }
    }
    namespace folders {
        class EditPeerFolders extends TLObject {
            __response__: Raw.TypeUpdates;
            folderPeers: Vector<Raw.TypeInputFolderPeer>;
            constructor(params: {
                folderPeers: Vector<Raw.TypeInputFolderPeer>;
            });
            static read(_data: BytesIO, ..._args: Array<any>): Promise<Raw.folders.EditPeerFolders>;
            write(): Buffer;
        }
    }
}
