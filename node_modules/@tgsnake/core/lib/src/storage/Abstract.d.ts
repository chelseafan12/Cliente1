/// <reference types="node" />
import { Raw } from '../raw/index.js';
import { type SecretChat } from './SecretChat.js';
export declare abstract class AbstractSession {
    protected abstract _ip: string;
    protected abstract _dcId: number;
    protected abstract _port: number;
    protected abstract _peers: Map<bigint, [
        id: bigint,
        accessHash: bigint,
        type: string,
        username?: string,
        phoneNumber?: string
    ]>;
    protected abstract _secretChats: Map<number, SecretChat>;
    protected abstract _authKey: Buffer;
    protected abstract _testMode: boolean;
    protected abstract _apiId: number;
    protected abstract _userId: bigint;
    protected abstract _isBot: boolean;
    abstract setAddress(dcId: number, ip: string, port: number, testMode: boolean): Promise<void>;
    abstract setAuthKey(authKey: Buffer, dcId: number): Promise<void>;
    abstract setApiId(apiId: number): Promise<void>;
    abstract setIsBot(isbot: boolean): Promise<void>;
    abstract setUserId(userId: bigint): Promise<void>;
    abstract get authKey(): Buffer;
    abstract get isBot(): boolean;
    abstract get testMode(): boolean;
    abstract get userId(): bigint;
    abstract get apiId(): number;
    abstract get dcId(): number;
    abstract get port(): number;
    abstract get ip(): string;
    abstract get peers(): Map<bigint, [
        id: bigint,
        accessHash: bigint,
        type: string,
        username?: string | undefined,
        phoneNumber?: string | undefined
    ]>;
    abstract get secretChats(): Map<number, SecretChat>;
    abstract load(): Promise<void>;
    abstract delete(): Promise<void>;
    abstract save(): Promise<void>;
    abstract move(session: AbstractSession): Promise<void>;
    abstract updatePeers(peers: Array<[
        id: bigint,
        accessHash: bigint,
        type: string,
        username?: string,
        phoneNumber?: string
    ]>): Promise<void>;
    abstract updateSecretChats(chats: Array<SecretChat>): any;
    abstract getSecretChatById(id: number): Promise<SecretChat | undefined>;
    abstract getPeerById(id: bigint): Promise<Raw.InputPeerUser | Raw.InputPeerChat | Raw.InputPeerChannel | undefined>;
    abstract getPeerByUsername(username: string): Promise<Raw.InputPeerUser | Raw.InputPeerChat | Raw.InputPeerChannel | undefined>;
    abstract getPeerByPhoneNumber(phoneNumber: string): Promise<Raw.InputPeerUser | Raw.InputPeerChat | Raw.InputPeerChannel | undefined>;
    abstract removeSecretChatById(id: number): Promise<boolean>;
    abstract updatePts(pts: number, date: number): Promise<void>;
    abstract getPts(): Promise<[pts: number, date: number]>;
    abstract exportString(): string;
    abstract toJSON(): {
        [key: string]: any;
    };
    abstract toString(): string;
}
