"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMe = exports.signup = exports.getPasswordHint = exports.acceptTOS = exports.checkPassword = exports.sendRecoveryCode = exports.recoverPassword = exports.sigin = exports.sendCode = exports.siginUser = exports.siginBot = void 0;
const index_js_1 = require("../raw/index.js");
const index_js_2 = require("../session/index.js");
const Password_js_1 = require("../crypto/Password.js");
const Logger_js_1 = require("../Logger.js");
const Errors = __importStar(require("../errors/index.js"));
async function siginBot(client, botToken) {
    while (true) {
        let user;
        try {
            user = await client.invoke(new index_js_1.Raw.auth.ImportBotAuthorization({
                botAuthToken: botToken,
                apiId: client._apiId,
                apiHash: client._apiHash,
                flags: 0,
            }), 0);
        }
        catch (error) {
            if (error instanceof Errors.Exceptions.SeeOther.UserMigrate) {
                error;
                await client._session.stop();
                const [ip, port] = await index_js_2.DataCenter.DataCenter(error.value, client._testMode, client._ipv6, false);
                const auth = new index_js_2.Auth(error.value, client._testMode, client._ipv6);
                client._storage.setAddress(error.value, ip, port, client._testMode);
                client._storage.setApiId(client._apiId);
                client._storage.setAuthKey(await auth.create(), client._storage.dcId);
                client._session = new index_js_2.Session(client, client._storage.dcId, client._storage.authKey, client._storage.testMode);
                await client._session.start();
            }
            else {
                throw error;
            }
        }
        finally {
            if (user) {
                await client._storage.setUserId(user.user.id);
                await client._storage.setIsBot(true);
                return user.user;
            }
        }
    }
}
exports.siginBot = siginBot;
async function siginUser(client, auth) {
    let _phoneNumber;
    let _sendCode;
    let _signedIn;
    let _signedUp;
    while (true) {
        try {
            _phoneNumber = await auth.phoneNumber();
            _sendCode = await sendCode(client, _phoneNumber);
            break;
        }
        catch (error) {
            if (error instanceof Errors.Exceptions.BadRequest.BadRequest) {
                Logger_js_1.Logger.error(error);
                if (auth.authError) {
                    await auth.authError(error);
                }
            }
            else {
                throw error;
            }
        }
    }
    Logger_js_1.Logger.info('[101] The confirmation code has been sent.');
    while (true) {
        let code = await auth.code();
        try {
            _signedIn = await sigin(client, _phoneNumber, _sendCode.phoneCodeHash, code);
            break;
        }
        catch (error) {
            if (error instanceof Errors.Exceptions.BadRequest.BadRequest) {
                Logger_js_1.Logger.error(error);
                if (auth.authError) {
                    await auth.authError(error);
                }
            }
            else if (error instanceof Errors.Exceptions.Unauthorized.SessionPasswordNeeded) {
                let trying = 1;
                while (true) {
                    try {
                        if (trying <= 3) {
                            if (!auth.password) {
                                throw new Error('2FA password required');
                            }
                            return await checkPassword(client, await auth.password(await getPasswordHint(client)));
                        }
                        else {
                            Logger_js_1.Logger.info('[102] Look you are forgotten the password');
                            if (auth.recoveryCode) {
                                let emailPattern = await sendRecoveryCode(client);
                                Logger_js_1.Logger.info(`[103] The recovery code has been sent to ${emailPattern}`);
                                while (true) {
                                    let recoveryCode = await auth.recoveryCode();
                                    try {
                                        return await recoverPassword(client, recoveryCode);
                                    }
                                    catch (error) {
                                        if (error instanceof Errors.Exceptions.BadRequest.BadRequest) {
                                            Logger_js_1.Logger.error(error);
                                            if (auth.authError) {
                                                await auth.authError(error);
                                            }
                                        }
                                        else {
                                            throw error;
                                        }
                                    }
                                }
                            }
                            else {
                                break;
                            }
                        }
                    }
                    catch (error) {
                        if (error instanceof Errors.Exceptions.BadRequest.BadRequest) {
                            Logger_js_1.Logger.error(error);
                            if (auth.authError) {
                                await auth.authError(error);
                            }
                            trying++;
                        }
                        else {
                            throw error;
                        }
                    }
                }
            }
            else {
                throw error;
            }
        }
    }
    if (_signedIn && _signedIn instanceof index_js_1.Raw.User) {
        return _signedIn;
    }
    while (true) {
        try {
            _signedUp = await signup(client, _phoneNumber, _sendCode.phoneCodeHash, auth.firstname ? await auth.firstname() : String(Date.now()), auth.lastname ? await auth.lastname() : '');
            break;
        }
        catch (error) {
            if (error instanceof Errors.Exceptions.BadRequest.BadRequest) {
                Logger_js_1.Logger.error(error);
                if (auth.authError) {
                    await auth.authError(error);
                }
            }
            else {
                throw error;
            }
        }
    }
    if (_signedIn instanceof index_js_1.Raw.help.TermsOfService) {
        Logger_js_1.Logger.info(`\n${_signedIn.text}\n`);
        await acceptTOS(client, _signedIn.id.data);
    }
    return _signedUp;
}
exports.siginUser = siginUser;
async function sendCode(client, phoneNumber) {
    phoneNumber = phoneNumber.replace(/\+/g, '').trim();
    while (true) {
        try {
            let r = await client.invoke(new index_js_1.Raw.auth.SendCode({
                phoneNumber: phoneNumber,
                apiId: client._apiId,
                apiHash: client._apiHash,
                settings: new index_js_1.Raw.CodeSettings({}),
            }), 0);
            return r;
        }
        catch (error) {
            if (error instanceof Errors.Exceptions.SeeOther.NetworkMigrate ||
                error instanceof Errors.Exceptions.SeeOther.PhoneMigrate) {
                await client._session.stop();
                const [ip, port] = await index_js_2.DataCenter.DataCenter(error.value, client._testMode, client._ipv6, false);
                const auth = new index_js_2.Auth(error.value, client._testMode, client._ipv6);
                client._storage.setAddress(error.value, ip, port, client._testMode);
                client._storage.setApiId(client._apiId);
                client._storage.setAuthKey(await auth.create(), client._storage.dcId);
                client._session = new index_js_2.Session(client, client._storage.dcId, client._storage.authKey, client._storage.testMode);
                await client._session.start();
            }
            else {
                throw error;
            }
        }
    }
}
exports.sendCode = sendCode;
async function sigin(client, phoneNumber, phoneCodeHash, phoneCode) {
    let r = await client.invoke(new index_js_1.Raw.auth.SignIn({
        phoneNumber: phoneNumber.replace(/\+/g, '').trim(),
        phoneCodeHash,
        phoneCode,
    }), 0);
    if (r instanceof index_js_1.Raw.auth.AuthorizationSignUpRequired) {
        if (r.termsOfService) {
            return r.termsOfService;
        }
        return false;
    }
    else {
        await client._storage.setUserId(r.user.id);
        await client._storage.setIsBot(false);
        return r.user;
    }
}
exports.sigin = sigin;
async function recoverPassword(client, code) {
    let r = await client.invoke(new index_js_1.Raw.auth.RecoverPassword({
        code: code,
    }), 0);
    if ('user' in r) {
        await client._storage.setUserId(r.user.id);
        await client._storage.setIsBot(false);
        return r.user;
    }
    return;
}
exports.recoverPassword = recoverPassword;
async function sendRecoveryCode(client) {
    let r = await client.invoke(new index_js_1.Raw.auth.RequestPasswordRecovery(), 0);
    return r.emailPattern;
}
exports.sendRecoveryCode = sendRecoveryCode;
async function checkPassword(client, password) {
    let r = await client.invoke(new index_js_1.Raw.auth.CheckPassword({
        password: (0, Password_js_1.computePasswordCheck)(await client.invoke(new index_js_1.Raw.account.GetPassword(), 0), password),
    }), 0);
    if ('user' in r) {
        await client._storage.setUserId(r.user.id);
        await client._storage.setIsBot(false);
        return r.user;
    }
    return;
}
exports.checkPassword = checkPassword;
async function acceptTOS(client, id) {
    let r = await client.invoke(new index_js_1.Raw.help.AcceptTermsOfService({
        id: new index_js_1.Raw.DataJSON({
            data: id,
        }),
    }));
    return Boolean(r);
}
exports.acceptTOS = acceptTOS;
async function getPasswordHint(client) {
    let r = await client.invoke(new index_js_1.Raw.account.GetPassword(), 0);
    return r.hint ?? '';
}
exports.getPasswordHint = getPasswordHint;
async function signup(client, phoneNumber, phoneCodeHash, firstname, lastname = '') {
    let r = await client.invoke(new index_js_1.Raw.auth.SignUp({
        phoneNumber: phoneNumber.replace(/\+/g, '').trim(),
        phoneCodeHash,
        firstName: firstname,
        lastName: lastname,
    }));
    if ('user' in r) {
        await client._storage.setUserId(r.user.id);
        await client._storage.setIsBot(false);
        return r.user;
    }
    return;
}
exports.signup = signup;
async function getMe(client) {
    return await client.invoke(new index_js_1.Raw.users.GetFullUser({
        id: new index_js_1.Raw.InputUserSelf(),
    }));
}
exports.getMe = getMe;
