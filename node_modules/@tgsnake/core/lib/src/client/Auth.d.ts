import type { Client } from './Client.js';
import { Raw } from '../raw/index.js';
import * as Errors from '../errors/index.js';
export interface SigInBot {
    botToken: string | Promise<string>;
}
export interface SigInUser {
    phoneNumber: {
        (): Promise<string>;
    };
    password?: {
        (hint: string): Promise<string>;
    };
    recoveryCode?: {
        (): Promise<string>;
    };
    code: {
        (): Promise<string>;
    };
    firstname?: {
        (): Promise<string>;
    };
    lastname?: {
        (): Promise<string>;
    };
    authError?: {
        (error: Errors.Exceptions.BadRequest.BadRequest): any;
    };
}
export declare function siginBot(client: Client, botToken: string): Promise<Raw.User | undefined>;
export declare function siginUser(client: Client, auth: SigInUser): Promise<Raw.User | undefined>;
export declare function sendCode(client: Client, phoneNumber: string): Promise<Raw.auth.TypeSentCode>;
export declare function sigin(client: Client, phoneNumber: string, phoneCodeHash: string, phoneCode: string): Promise<Raw.User | Raw.help.TermsOfService | boolean>;
export declare function recoverPassword(client: Client, code: string): Promise<Raw.User | undefined>;
export declare function sendRecoveryCode(client: Client): Promise<string>;
export declare function checkPassword(client: Client, password: string): Promise<Raw.User | undefined>;
export declare function acceptTOS(client: Client, id: string): Promise<boolean>;
export declare function getPasswordHint(client: Client): Promise<string>;
export declare function signup(client: Client, phoneNumber: string, phoneCodeHash: string, firstname: string, lastname?: string): Promise<Raw.User | undefined>;
export declare function getMe(client: Client): Promise<Raw.users.UserFull>;
