"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.invoke = exports.exportSession = exports.logout = exports.start = exports.connect = exports.loadSession = void 0;
const index_js_1 = require("../raw/index.js");
const index_js_2 = require("../session/index.js");
const Logger_js_1 = require("../Logger.js");
const Errors = __importStar(require("../errors/index.js"));
const _Auth = __importStar(require("./Auth.js"));
const Version = __importStar(require("../Version.node.js"));
async function loadSession(client) {
    await client._storage.load();
    if (!client._storage.authKey) {
        const [ip, port] = await index_js_2.DataCenter.DataCenter(2, client._testMode, client._ipv6, false);
        const auth = new index_js_2.Auth(2, client._testMode, client._ipv6);
        client._storage.setAddress(2, ip, port, client._testMode);
        client._storage.setApiId(client._apiId);
        client._storage.setAuthKey(await auth.create(), 2);
    }
    if (!client._storage.apiId) {
        client._storage.setApiId(client._apiId);
    }
    if (client._storage.testMode === undefined) {
        client._storage.setAddress(client._storage.dcId, client._storage.ip, client._storage.port, client._testMode);
    }
}
exports.loadSession = loadSession;
async function connect(client) {
    if (!client._isConnected) {
        Logger_js_1.Logger.info(`[100] Using version: ${Version.version} - ${Version.getType()}`);
        await loadSession(client);
        client._session = new index_js_2.Session(client, client._storage.dcId, client._storage.authKey, client._storage.testMode, client._proxy, false, client._isCdn);
        await client._session.start();
        client._isConnected = true;
    }
}
exports.connect = connect;
async function start(client, auth) {
    await connect(client);
    if (client._storage.userId === undefined) {
        if (auth) {
            if (auth?.botToken) {
                await _Auth.siginBot(client, await auth?.botToken);
            }
            else {
                await _Auth.siginUser(client, { ...auth });
            }
        }
    }
    if (!client._storage.authKey) {
        throw new Errors.ClientError.AuthKeyMissing();
    }
    if (!client._storage.isBot && client._takeout) {
        let takeout = await client.invoke(new index_js_1.Raw.account.InitTakeoutSession({}));
        client._takeoutId = takeout.id;
        Logger_js_1.Logger.warning(`[104] Takeout session ${client._takeoutId} initiated.`);
    }
    await client.invoke(new index_js_1.Raw.updates.GetState());
    const me = await _Auth.getMe(client);
    client._me = me;
    return me;
}
exports.start = start;
async function logout(client) {
    await client.invoke(new index_js_1.Raw.auth.LogOut());
    await client._storage.delete();
    Logger_js_1.Logger.info(`[105] Logged out.`);
    return process.exit(0);
}
exports.logout = logout;
async function exportSession(client) {
    if (!client._storage.userId) {
        const me = client._me ?? (await _Auth.getMe(client));
        client._storage.setUserId(me.fullUser.id);
        client._storage.setIsBot(Boolean(me.users[0].bot));
    }
    return client._storage.exportString();
}
exports.exportSession = exportSession;
async function invoke(client, query, retries, timeout, sleepTreshold) {
    if (!client._isConnected) {
        throw new Errors.ClientError.ClientDisconnected();
    }
    if (client._noUpdates) {
        query = new index_js_1.Raw.InvokeWithoutUpdates({ query });
    }
    if (client._takeoutId) {
        query = new index_js_1.Raw.InvokeWithTakeout({ query, takeoutId: client._takeoutId });
    }
    const r = await client._session.invoke(query, retries, timeout, sleepTreshold);
    if (typeof r === 'object' && 'users' in r) {
        await client.fetchPeers(r.users);
    }
    if (typeof r === 'object' && 'chats' in r) {
        await client.fetchPeers(r.chats);
    }
    return r;
}
exports.invoke = invoke;
