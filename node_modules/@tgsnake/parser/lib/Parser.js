"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.toRaw = exports.fromRaw = exports.parse = void 0;
/**
 * tgsnake - Telegram MTProto framework for nodejs.
 * Copyright (C) 2024 butthx <https://github.com/butthx>
 *
 * THIS FILE IS PART OF TGSNAKE
 *
 * tgsnake is a free software : you can redistribute it and/or modify
 * it under the terms of the MIT License as published.
 */
const Entities_js_1 = require("./Entities.js");
const markdown_js_1 = require("./markdown.js");
const html_js_1 = require("./html.js");
const ParserError_js_1 = __importDefault(require("./ParserError.js"));
const platform_node_js_1 = require("./platform.node.js");
function parse(text, parseMode) {
    try {
        if (text === '') {
            return [text, []];
        }
        if (parseMode === 'markdown') {
            return (0, markdown_js_1.parse)(text);
        }
        if (parseMode === 'html') {
            return (0, html_js_1.parse)(text);
        }
        return [text, []];
    }
    catch (error) {
        throw new ParserError_js_1.default(error.message, 'Parser error when parsing message.', 500, 'Parser.parse');
    }
}
exports.parse = parse;
function fromRaw(entities) {
    let tmp = [];
    for (let ent of entities) {
        if (ent instanceof platform_node_js_1.Raw.MessageEntityMention) {
            ent;
            tmp.push(new Entities_js_1.Entities({
                offset: ent.offset,
                length: ent.length,
                type: 'mention',
            }));
            continue;
        }
        if (ent instanceof platform_node_js_1.Raw.MessageEntityHashtag) {
            ent;
            tmp.push(new Entities_js_1.Entities({
                offset: ent.offset,
                length: ent.length,
                type: 'hashtag',
            }));
            continue;
        }
        if (ent instanceof platform_node_js_1.Raw.MessageEntityBotCommand) {
            ent;
            tmp.push(new Entities_js_1.Entities({
                offset: ent.offset,
                length: ent.length,
                type: 'botCommand',
            }));
            continue;
        }
        if (ent instanceof platform_node_js_1.Raw.MessageEntityUrl) {
            ent;
            tmp.push(new Entities_js_1.Entities({
                offset: ent.offset,
                length: ent.length,
                type: 'url',
            }));
            continue;
        }
        if (ent instanceof platform_node_js_1.Raw.MessageEntityEmail) {
            ent;
            tmp.push(new Entities_js_1.Entities({
                offset: ent.offset,
                length: ent.length,
                type: 'email',
            }));
            continue;
        }
        if (ent instanceof platform_node_js_1.Raw.MessageEntityBold) {
            ent;
            tmp.push(new Entities_js_1.Entities({
                offset: ent.offset,
                length: ent.length,
                type: 'bold',
            }));
            continue;
        }
        if (ent instanceof platform_node_js_1.Raw.MessageEntityItalic) {
            ent;
            tmp.push(new Entities_js_1.Entities({
                offset: ent.offset,
                length: ent.length,
                type: 'italic',
            }));
            continue;
        }
        if (ent instanceof platform_node_js_1.Raw.MessageEntityCode) {
            ent;
            tmp.push(new Entities_js_1.Entities({
                offset: ent.offset,
                length: ent.length,
                type: 'code',
            }));
            continue;
        }
        if (ent instanceof platform_node_js_1.Raw.MessageEntityPre) {
            ent;
            tmp.push(new Entities_js_1.Entities({
                offset: ent.offset,
                length: ent.length,
                language: ent.language,
                type: 'pre',
            }));
            continue;
        }
        if (ent instanceof platform_node_js_1.Raw.MessageEntityTextUrl) {
            ent;
            tmp.push(new Entities_js_1.Entities({
                offset: ent.offset,
                length: ent.length,
                url: ent.url,
                type: 'textUrl',
            }));
            continue;
        }
        if (ent instanceof platform_node_js_1.Raw.MessageEntityMentionName) {
            ent;
            tmp.push(new Entities_js_1.Entities({
                offset: ent.offset,
                length: ent.length,
                userId: BigInt(String(ent.userId)),
                type: 'mentionName',
            }));
            continue;
        }
        if (ent instanceof platform_node_js_1.Raw.MessageEntityPhone) {
            ent;
            tmp.push(new Entities_js_1.Entities({
                offset: ent.offset,
                length: ent.length,
                type: 'phone',
            }));
            continue;
        }
        if (ent instanceof platform_node_js_1.Raw.MessageEntityCashtag) {
            ent;
            tmp.push(new Entities_js_1.Entities({
                offset: ent.offset,
                length: ent.length,
                type: 'cashtag',
            }));
            continue;
        }
        if (ent instanceof platform_node_js_1.Raw.MessageEntityUnderline) {
            ent;
            tmp.push(new Entities_js_1.Entities({
                offset: ent.offset,
                length: ent.length,
                type: 'underline',
            }));
            continue;
        }
        if (ent instanceof platform_node_js_1.Raw.MessageEntityStrike) {
            ent;
            tmp.push(new Entities_js_1.Entities({
                offset: ent.offset,
                length: ent.length,
                type: 'strike',
            }));
            continue;
        }
        if (ent instanceof platform_node_js_1.Raw.MessageEntityBlockquote) {
            ent;
            tmp.push(new Entities_js_1.Entities({
                offset: ent.offset,
                length: ent.length,
                type: 'blockquote',
            }));
            continue;
        }
        if (ent instanceof platform_node_js_1.Raw.MessageEntityBankCard) {
            ent;
            tmp.push(new Entities_js_1.Entities({
                offset: ent.offset,
                length: ent.length,
                type: 'bankCard',
            }));
            continue;
        }
        if (ent instanceof platform_node_js_1.Raw.MessageEntitySpoiler) {
            ent;
            tmp.push(new Entities_js_1.Entities({
                offset: ent.offset,
                length: ent.length,
                type: 'spoiler',
            }));
            continue;
        }
        if (ent instanceof platform_node_js_1.Raw.MessageEntityCustomEmoji) {
            ent;
            tmp.push(new Entities_js_1.Entities({
                offset: ent.offset,
                length: ent.length,
                emojiId: ent.documentId,
                type: 'customEmoji',
            }));
        }
    }
    return tmp;
}
exports.fromRaw = fromRaw;
async function toRaw(client, entities) {
    if (!client) {
        throw new ParserError_js_1.default(`Client not found!`, `Plase make sure you set the client. eg : Parser.fromRaw(client,entities).`, 404, 'Parser.fromRaw');
    }
    let tmp = [];
    for (let ent of entities) {
        switch (ent.type) {
            case 'mention':
                tmp.push(new platform_node_js_1.Raw.MessageEntityMention({
                    offset: ent.offset,
                    length: ent.length,
                }));
                break;
            case 'hashtag':
                tmp.push(new platform_node_js_1.Raw.MessageEntityHashtag({
                    offset: ent.offset,
                    length: ent.length,
                }));
                break;
            case 'botCommand':
                tmp.push(new platform_node_js_1.Raw.MessageEntityBotCommand({
                    offset: ent.offset,
                    length: ent.length,
                }));
                break;
            case 'url':
                tmp.push(new platform_node_js_1.Raw.MessageEntityMention({
                    offset: ent.offset,
                    length: ent.length,
                }));
                break;
            case 'email':
                tmp.push(new platform_node_js_1.Raw.MessageEntityEmail({
                    offset: ent.offset,
                    length: ent.length,
                }));
                break;
            case 'bold':
                tmp.push(new platform_node_js_1.Raw.MessageEntityBold({
                    offset: ent.offset,
                    length: ent.length,
                }));
                break;
            case 'italic':
                tmp.push(new platform_node_js_1.Raw.MessageEntityItalic({
                    offset: ent.offset,
                    length: ent.length,
                }));
                break;
            case 'code':
                tmp.push(new platform_node_js_1.Raw.MessageEntityCode({
                    offset: ent.offset,
                    length: ent.length,
                }));
                break;
            case 'pre':
                tmp.push(new platform_node_js_1.Raw.MessageEntityPre({
                    offset: ent.offset,
                    length: ent.length,
                    language: ent.language,
                }));
                break;
            case 'textUrl':
                tmp.push(new platform_node_js_1.Raw.MessageEntityTextUrl({
                    offset: ent.offset,
                    length: ent.length,
                    url: ent.url,
                }));
                break;
            case 'mentionName':
                const peer = await client.resolvePeer(ent.userId);
                tmp.push(new platform_node_js_1.Raw.InputMessageEntityMentionName({
                    offset: ent.offset,
                    length: ent.length,
                    userId: await getInputUser(peer),
                }));
                break;
            case 'phone':
                tmp.push(new platform_node_js_1.Raw.MessageEntityPhone({
                    offset: ent.offset,
                    length: ent.length,
                }));
                break;
            case 'cashtag':
                tmp.push(new platform_node_js_1.Raw.MessageEntityCashtag({
                    offset: ent.offset,
                    length: ent.length,
                }));
                break;
            case 'underline':
                tmp.push(new platform_node_js_1.Raw.MessageEntityUnderline({
                    offset: ent.offset,
                    length: ent.length,
                }));
                break;
            case 'strike':
                tmp.push(new platform_node_js_1.Raw.MessageEntityStrike({
                    offset: ent.offset,
                    length: ent.length,
                }));
                break;
            case 'blockquote':
                tmp.push(new platform_node_js_1.Raw.MessageEntityBlockquote({
                    offset: ent.offset,
                    length: ent.length,
                }));
                break;
            case 'bankCard':
                tmp.push(new platform_node_js_1.Raw.MessageEntityBankCard({
                    offset: ent.offset,
                    length: ent.length,
                }));
                break;
            case 'spoiler':
                tmp.push(new platform_node_js_1.Raw.MessageEntitySpoiler({
                    offset: ent.offset,
                    length: ent.length,
                }));
                break;
            case 'customEmoji':
                tmp.push(new platform_node_js_1.Raw.MessageEntityCustomEmoji({
                    offset: ent.offset,
                    length: ent.length,
                    documentId: ent.emojiId,
                }));
                break;
            default:
        }
    }
    return tmp;
}
exports.toRaw = toRaw;
function getInputUser(peer) {
    if (peer instanceof platform_node_js_1.Raw.InputPeerUser) {
        return new platform_node_js_1.Raw.InputUser({
            userId: peer.userId,
            accessHash: peer.accessHash,
        });
    }
    if (peer instanceof platform_node_js_1.Raw.InputPeerSelf) {
        return new platform_node_js_1.Raw.InputUserSelf();
    }
    return new platform_node_js_1.Raw.InputUserEmpty();
}
