"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatColor = exports.sendLog = void 0;
/**
 * tgsnake - Telegram MTProto framework for nodejs.
 * Copyright (C) 2023 butthx <https://github.com/butthx>
 *
 * THIS FILE IS PART OF TGSNAKE
 *
 * tgsnake is a free software : you can redistribute it and/or modify
 * it under the terms of the MIT License as published.
 */
const platform_node_js_1 = require("./platform.node.js");
const RGBRe = /(\w+)\((\d+),(\d+),(\d+)\)/i;
const HEXRe = /^#([A-F0-9]{3}|[A-F0-9]{6})$/i;
function sendLog(nativelog, isAllowed, ...args) {
    if (isAllowed) {
        if (args.length > 1) {
            let fargs = new Array();
            for (let arg of args) {
                if (typeof arg == 'object') {
                    fargs.push((0, platform_node_js_1.inspect)(arg, {
                        showHidden: true,
                        colors: true,
                    }));
                }
                else {
                    fargs.push(arg);
                }
            }
            nativelog(...fargs);
        }
        else {
            let fargs = new Array();
            if (typeof args[0] == 'object') {
                fargs.push((0, platform_node_js_1.inspect)(args[0], {
                    showHidden: true,
                    colors: true,
                }));
            }
            else {
                fargs.push(args[0]);
            }
            nativelog(...fargs);
        }
    }
    return args;
}
exports.sendLog = sendLog;
function formatColor(chalk, color, text) {
    if (RGBRe.exec(color)) {
        const [input, format, a, b, c] = RGBRe.exec(color);
        if (format.toLocaleLowerCase() === 'rgb' && chalk.rgb) {
            return chalk.rgb(Number(a), Number(b), Number(c))(text);
        }
        if (format.toLocaleLowerCase() === 'hsl' && chalk.hsl) {
            return chalk.hsl(Number(a), Number(b), Number(c))(text);
        }
        if (format.toLocaleLowerCase() === 'hsv' && chalk.hsv) {
            return chalk.hsv(Number(a), Number(b), Number(c))(text);
        }
        if (format.toLocaleLowerCase() === 'hwb' && chalk.hwb) {
            return chalk.hwb(Number(a), Number(b), Number(c))(text);
        }
        return text;
    }
    if (HEXRe.test(color) && chalk.hex) {
        return chalk.hex(color)(text);
    }
    if (chalk[color]) {
        return chalk[color](text);
    }
    if (chalk.keyword) {
        return chalk.keyword(color)(text);
    }
    return text;
}
exports.formatColor = formatColor;
