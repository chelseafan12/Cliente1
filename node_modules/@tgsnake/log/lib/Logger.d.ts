export interface LoggerColor {
    debug?: string;
    info?: string;
    error?: string;
    warning?: string;
    name?: string;
    date?: string;
}
export type TypeLogLevel = 'none' | 'info' | 'debug' | 'error' | 'verbose' | 'warning';
export type TypeWarningLevel = 'soft' | 'hard';
export interface LoggerOptions {
    name?: string;
    level?: Array<TypeLogLevel>;
    customColor?: LoggerColor;
}
export declare class Logger {
    /** @ignore */
    private _name;
    /** @ignore */
    private _color;
    /** @ignore */
    private _storage;
    /** @ignore */
    private _chalk;
    constructor(options?: LoggerOptions);
    /**
     * @ignore
     * Creating a log template.
     */
    private template;
    /**
     * @ignore
     * Filters this instance is allowed to write context in console.
     */
    private isAllowed;
    /**
     * @ignore
     * Get the current log level
     */
    private get _level();
    private set _level(value);
    /**
     * Setting a log level.
     */
    setLogLevel(level: Array<TypeLogLevel>): TypeLogLevel[];
    /**
     * Setting a warning level. <br/>
     * If you set "hard" the warning will be appears in any log levels.<br/>
     * If you set "soft" the warning will be appears only in warning log level.
     */
    setWarningLevel(level: TypeWarningLevel): void | any[];
    /**
     * Setting a log filters <br/>
     * If you set to "all", all instance will allowed to write context in console or terminal.
     */
    setFilters(filters: Array<string>): boolean;
    /**
     * Create log without template and without levels.
     */
    log(...args: Array<any>): any[];
    /**
     * Creating log with debug level
     */
    debug(...args: Array<any>): any[] | undefined;
    /**
     * Creating log with info level
     */
    info(...args: Array<any>): any[] | undefined;
    /**
     * Creating log with error level
     */
    error(...args: Array<any>): any[] | undefined;
    /**
     * Creating log with warning level
     */
    warning(...args: Array<any>): any[] | undefined;
    /**
     * Creating log with combine level. <br/>
     * Like if you want to show the console in level "error" and "info" pass it as array in first arguments.<br/>
     * The selected template will use the first index in the array.
     */
    combine(level: Array<TypeLogLevel>, ...args: Array<any>): any[] | undefined;
    toJSON(): {
        [key: string]: any;
    };
    toString(): string;
}
