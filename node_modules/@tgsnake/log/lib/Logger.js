"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = void 0;
/**
 * tgsnake - Telegram MTProto framework for nodejs.
 * Copyright (C) 2023 butthx <https://github.com/butthx>
 *
 * THIS FILE IS PART OF TGSNAKE
 *
 * tgsnake is a free software : you can redistribute it and/or modify
 * it under the terms of the MIT License as published.
 */
const platform_node_js_1 = require("./platform.node.js");
const LocalStorage_js_1 = require("./LocalStorage.js");
const Utilities_js_1 = require("./Utilities.js");
class Logger {
    constructor(options = {}) {
        var _a;
        /** @ignore */
        this._storage = (0, LocalStorage_js_1.getLS)();
        /** @ignore */
        this._chalk = new platform_node_js_1.ChalkInstance({ level: 3 });
        options = Object.assign({
            name: 'unamed',
            level: this._storage.getItem('LOGLEVEL') || ['debug'],
            customColor: {},
        }, options);
        // @ts-ignore
        this._name = options.name.split(' ').join('-');
        this._storage.setItem('LOGLEVEL', (this._storage.getItem('LOGLEVEL') || ((_a = options.level) === null || _a === void 0 ? void 0 : _a.join('|'))));
        this._storage.setItem('LOGFILTERS', this._storage.getItem('LOGFILTERS') || 'all,unamed');
        this._storage.setItem('LOGWARNINGLEVEL', this._storage.getItem('LOGWARNINGLEVEL') || 'hard');
        this._color = Object.assign({
            debug: 'blue',
            info: 'green',
            error: 'red',
            warning: 'yellow',
            name: 'cyan',
            date: 'grey',
        }, options.customColor);
    }
    /**
     * @ignore
     * Creating a log template.
     */
    template(level, ...args) {
        let now = new Date();
        if (platform_node_js_1.isBrowser) {
            return [
                `%c${now.getDate()}/${now.getMonth() + 1}/${now.getFullYear()} ${now.getHours()}:${now.getMinutes()}:${now.getSeconds()}.${now.getMilliseconds()} %c(${this._name}) %c${level} %c-`,
                `color: ${this._color.date};`,
                `color: ${this._color.name};`,
                `color: ${this._color[level]};`,
                ``,
                ...args,
            ];
        }
        return [
            (0, Utilities_js_1.formatColor)(this._chalk, this._color.name, `(${this._name})`),
            (0, Utilities_js_1.formatColor)(this._chalk, this._color[level], level),
            '-',
            ...args,
            (0, Utilities_js_1.formatColor)(this._chalk, this._color.date, `${now.getDate()}/${now.getMonth() + 1}/${now.getFullYear()} ${now.getHours()}:${now.getMinutes()}:${now.getSeconds()}.${now.getMilliseconds()}`),
        ];
    }
    /**
     * @ignore
     * Filters this instance is allowed to write context in console.
     */
    isAllowed() {
        let env = String(this._storage.getItem('LOGFILTERS') || '').split(',');
        if (!env.length)
            env = ['all', 'unamed'];
        if (env.includes('all'))
            return true;
        return env.includes(this._name);
    }
    /**
     * @ignore
     * Get the current log level
     */
    get _level() {
        //@ts-ignore
        return String(this._storage.getItem('LOGLEVEL') || 'debug').split('|');
    }
    set _level(level) {
        this._storage.setItem('LOGLEVEL', level.join('|'));
    }
    /**
     * Setting a log level.
     */
    setLogLevel(level) {
        level = level.filter((_level, index) => {
            // @ts-ignore
            _level = _level.toLowerCase().trim();
            let approved = ['none', 'info', 'debug', 'error', 'verbose'];
            //@ts-ignore
            if (!approved.includes(_level)) {
                this.error(`Level of warning must be "none" or "info" or "debug" or "error" or "verbose", but got "${_level}"`);
                return false;
            }
            return true;
        });
        return (this._level = level);
    }
    /**
     * Setting a warning level. <br/>
     * If you set "hard" the warning will be appears in any log levels.<br/>
     * If you set "soft" the warning will be appears only in warning log level.
     */
    setWarningLevel(level) {
        let _level = level.toLowerCase().trim();
        let approved = ['hard', 'soft'];
        //@ts-ignore
        if (!approved.includes(_level))
            return this.error(`Level of warning must be "hard" or "soft", but got "${level}"`);
        return this._storage.setItem('LOGWARNINGLEVEL', _level);
    }
    /**
     * Setting a log filters <br/>
     * If you set to "all", all instance will allowed to write context in console or terminal.
     */
    setFilters(filters) {
        let temp = [];
        for (let filter of filters) {
            if (/^All$/i.test(filter)) {
                temp.push('all');
            }
            else {
                temp.push(filter.split(' ').join('-'));
            }
        }
        this._storage.setItem('LOGFILTERS', temp.join(','));
        return true;
    }
    /**
     * Create log without template and without levels.
     */
    log(...args) {
        return (0, Utilities_js_1.sendLog)(console.log, this.isAllowed(), ...args);
    }
    /**
     * Creating log with debug level
     */
    debug(...args) {
        let level = ['debug', 'verbose'];
        for (let l of this._level) {
            if (level.includes(l)) {
                return this.log(...this.template('debug', ...args));
            }
        }
    }
    /**
     * Creating log with info level
     */
    info(...args) {
        let level = ['info', 'debug', 'verbose'];
        const prnt = this.template('info', ...args);
        for (let l of this._level) {
            if (level.includes(l)) {
                return (0, Utilities_js_1.sendLog)(console.info, this.isAllowed(), ...prnt);
            }
        }
    }
    /**
     * Creating log with error level
     */
    error(...args) {
        let level = ['error', 'debug', 'verbose'];
        const prnt = this.template('error', ...args);
        for (let l of this._level) {
            if (level.includes(l)) {
                return (0, Utilities_js_1.sendLog)(console.error, this.isAllowed(), ...prnt);
            }
        }
    }
    /**
     * Creating log with warning level
     */
    warning(...args) {
        let level = ['warning', 'debug', 'verbose'];
        if (this._storage.getItem('LOGWARNINGLEVEL') === 'hard') {
            level = level.concat(['none', 'info', 'error']);
        }
        const prnt = this.template('warning', ...args);
        for (let l of this._level) {
            if (level.includes(l)) {
                return (0, Utilities_js_1.sendLog)(console.warn, this.isAllowed(), ...prnt);
            }
        }
    }
    /**
     * Creating log with combine level. <br/>
     * Like if you want to show the console in level "error" and "info" pass it as array in first arguments.<br/>
     * The selected template will use the first index in the array.
     */
    combine(level, ...args) {
        for (let l of this._level) {
            if (level.includes(l)) {
                return this.log(...this.template(level[0], ...args));
            }
        }
    }
    [Symbol.for('nodejs.util.inspect.custom')]() {
        const toPrint = {
            _: this.constructor.name,
        };
        for (const key in this) {
            if (this.hasOwnProperty(key)) {
                const value = this[key];
                if (!key.startsWith('_')) {
                    toPrint[key] = value;
                }
            }
        }
        return toPrint;
    }
    [Symbol.for('Deno.customInspect')]() {
        return String((0, platform_node_js_1.inspect)(this[Symbol.for('nodejs.util.inspect.custom')]()));
    }
    toJSON() {
        const toPrint = {
            _: this.constructor.name,
        };
        for (const key in this) {
            if (this.hasOwnProperty(key)) {
                const value = this[key];
                if (!key.startsWith('_')) {
                    toPrint[key] = typeof value === 'bigint' ? String(value) : value;
                }
            }
        }
        return toPrint;
    }
    toString() {
        return `[constructor of ${this.constructor.name}] ${JSON.stringify(this, null, 2)}`;
    }
}
exports.Logger = Logger;
